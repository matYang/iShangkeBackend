/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ishangke.edunav.commoncontract.service;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CourseService {

  public interface Iface {

    /**
     * 本方法为创建新课程<br>
     * 合作商管理员可以通过此方法创建新课程
     * 
     * @param  courseTemplateBo    课程模版信息
     * @param  courseBo            需要被创建的课程信息
     * @param  list<TeacherBo>     教师信息列表
     * @param  locationBo          地理位置信息
     * @param  partnerBo           合作商信息
     * @param  userBo              调用方法的用户的信息
     * 
     * @return 课程实体 CourseBo
     * 
     * 
     * @param courseTemplateBo
     * @param courseBo
     * @param partnerBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.CourseBo createCourse(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为提交课程<br>
     * 合作商管理员可以通过此方法提交课程
     * 
     * @param  courseBo        需要被创建的课程信息
     * @param  partnerBo       合作商信息
     * @param  userBo          调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param courseBo
     * @param partnerBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.CourseBo submitCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为审核通过课程<br>
     * ishangke管理员可以通过此方法审核通过课程
     * 
     * @param  courseBo                  需要被审核的课程信息
     * @param  partnerBo                 合作商信息
     * @param  commentCourseApproveBo    审核通过课程评论信息
     * @param  userBo                    调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param courseBo
     * @param partnerBo
     * @param commentCourseApproveBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.CourseBo approveCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CommentCourseApproveBo commentCourseApproveBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为审核不通过课程<br>
     * ishangke管理员可以通过此方法审核不通过课程
     * 
     * @param  courseBo          需要被审核的课程信息
     * @param  partnerBo                 合作商信息
     * @param  commentCourseApproveBo  审核不通过课程评论信息
     * @param  userBo                    调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param courseBo
     * @param partnerBo
     * @param commentCourseRejectBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.CourseBo rejectCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CommentCourseRejectBo commentCourseRejectBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为下架课程<br>
     * 合作商管理员可以通过此方法下架课程
     * 
     * @param  courseBo    需要被下架的课程信息
     * @param  partnerBo           合作商信息
     * @param  userBo              调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param courseBo
     * @param partnerBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.CourseBo cancelCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为重新上架课程<br>
     * 合作商管理员可以通过此方法重新上架课程
     * 
     * @param  courseBo    需要被重新上架的课程信息
     * @param  partnerBo           合作商信息
     * @param  userBo              调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param courseBo
     * @param partnerBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.CourseBo resubmitCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为删除课程<br>
     * 合作商管理员可以通过此方法删除已经下架的课程
     * 
     * @param  courseeBo    需要被删除的课程信息
     * @param  partnerBo           合作商信息
     * @param  userBo              调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param courseBo
     * @param partnerBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.CourseBo deleteCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为修改课程<br>
     * 合作商管理员可以通过此方法修改课程
     * 
     * @param  courseBo            需要被修改的课程信息
     * @param  partnerBo           合作商信息
     * @param  userBo              调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param courseBo
     * @param partnerBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.CourseBo updateCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为给课程评论<br>
     * 用户可以通过此方法给课程进行评论
     * 
     * @param  courseBo            需要被评论的课程信息
     * @param  commentCourseBo     课程评论信息
     * @param  partnerBo           合作商信息
     * @param  userBo              调用方法的用户的信息
     * 
     * @return  课程评论实体 CommentCourseBo
     * 
     * 
     * @param courseBo
     * @param commentCourseBo
     * @param partnerBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.CourseBo commentCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.CommentCourseBo commentCourseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为根据关键字查找课程<br>
     * 通过此方法可以直接过滤搜索出按Category查找的课程
     * 
     * @param  String            CategoryBo关键字
     * 
     * @return  课程实体 CourseBo 列表
     * 
     * 
     * @param keyword
     */
    public List<com.ishangke.edunav.commoncontract.model.CourseBo> queryByKeyword(String keyword) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为合作商提供查询课程的功能。<br>
     * 合作商可以查询本机构已经提交过的课程，包括新建、正在审批、已上架、已下架的所有课程。
     * 
     * @param  courseBo      需要检索和过滤的课程信息
     * @param  partnerBo     合作商信息
     * @param  userBo        调用方法的用户的信息
     * @param  paginationBo  分页信息
     * 
     * @return 课程实体 CourseBo 列表
     * 
     * 
     * @param courseBo
     * @param partnerBo
     * @param userBo
     * @param paginationBo
     */
    public List<com.ishangke.edunav.commoncontract.model.CourseBo> queryByPartner(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为用户查询课程的功能。<br>
     * 用户可以按照category，location，courseFilter查询所有课程
     * 
     * @param  courseBo        course过滤信息
     * @param  categoryBo      category过滤信息
     * @param  locationBo      location过滤信息
     * @param  circleBo        circle过滤信息
     * @param  paginationBo    分页信息
     * 
     * @return 课程实体 CourseBo 列表
     * 
     * 
     * @param courseBo
     * @param categoryBo
     * @param locationBo
     * @param circleBo
     * @param paginationBo
     */
    public List<com.ishangke.edunav.commoncontract.model.CourseBo> queryByFilter(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.CategoryBo categoryBo, com.ishangke.edunav.commoncontract.model.LocationBo locationBo, com.ishangke.edunav.commoncontract.model.CircleBo circleBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法返回课程详情<br>
     * 合作商/管理员可以通过此方法调取课程详情
     * 
     * @param  courseBo     课程id
     * @param  userBo       调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param courseBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.CourseBo queryById(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createCourse(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void submitCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void approveCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CommentCourseApproveBo commentCourseApproveBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rejectCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CommentCourseRejectBo commentCourseRejectBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void resubmitCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void commentCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.CommentCourseBo commentCourseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryByKeyword(String keyword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryByPartner(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryByFilter(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.CategoryBo categoryBo, com.ishangke.edunav.commoncontract.model.LocationBo locationBo, com.ishangke.edunav.commoncontract.model.CircleBo circleBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryById(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo createCourse(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_createCourse(courseTemplateBo, courseBo, partnerBo, userBo);
      return recv_createCourse();
    }

    public void send_createCourse(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      createCourse_args args = new createCourse_args();
      args.setCourseTemplateBo(courseTemplateBo);
      args.setCourseBo(courseBo);
      args.setPartnerBo(partnerBo);
      args.setUserBo(userBo);
      sendBase("createCourse", args);
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo recv_createCourse() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      createCourse_result result = new createCourse_result();
      receiveBase(result, "createCourse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createCourse failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo submitCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_submitCourse(courseBo, partnerBo, userBo);
      return recv_submitCourse();
    }

    public void send_submitCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      submitCourse_args args = new submitCourse_args();
      args.setCourseBo(courseBo);
      args.setPartnerBo(partnerBo);
      args.setUserBo(userBo);
      sendBase("submitCourse", args);
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo recv_submitCourse() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      submitCourse_result result = new submitCourse_result();
      receiveBase(result, "submitCourse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "submitCourse failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo approveCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CommentCourseApproveBo commentCourseApproveBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_approveCourse(courseBo, partnerBo, commentCourseApproveBo, userBo);
      return recv_approveCourse();
    }

    public void send_approveCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CommentCourseApproveBo commentCourseApproveBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      approveCourse_args args = new approveCourse_args();
      args.setCourseBo(courseBo);
      args.setPartnerBo(partnerBo);
      args.setCommentCourseApproveBo(commentCourseApproveBo);
      args.setUserBo(userBo);
      sendBase("approveCourse", args);
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo recv_approveCourse() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      approveCourse_result result = new approveCourse_result();
      receiveBase(result, "approveCourse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "approveCourse failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo rejectCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CommentCourseRejectBo commentCourseRejectBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_rejectCourse(courseBo, partnerBo, commentCourseRejectBo, userBo);
      return recv_rejectCourse();
    }

    public void send_rejectCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CommentCourseRejectBo commentCourseRejectBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      rejectCourse_args args = new rejectCourse_args();
      args.setCourseBo(courseBo);
      args.setPartnerBo(partnerBo);
      args.setCommentCourseRejectBo(commentCourseRejectBo);
      args.setUserBo(userBo);
      sendBase("rejectCourse", args);
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo recv_rejectCourse() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      rejectCourse_result result = new rejectCourse_result();
      receiveBase(result, "rejectCourse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rejectCourse failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo cancelCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_cancelCourse(courseBo, partnerBo, userBo);
      return recv_cancelCourse();
    }

    public void send_cancelCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      cancelCourse_args args = new cancelCourse_args();
      args.setCourseBo(courseBo);
      args.setPartnerBo(partnerBo);
      args.setUserBo(userBo);
      sendBase("cancelCourse", args);
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo recv_cancelCourse() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      cancelCourse_result result = new cancelCourse_result();
      receiveBase(result, "cancelCourse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelCourse failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo resubmitCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_resubmitCourse(courseBo, partnerBo, userBo);
      return recv_resubmitCourse();
    }

    public void send_resubmitCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      resubmitCourse_args args = new resubmitCourse_args();
      args.setCourseBo(courseBo);
      args.setPartnerBo(partnerBo);
      args.setUserBo(userBo);
      sendBase("resubmitCourse", args);
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo recv_resubmitCourse() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      resubmitCourse_result result = new resubmitCourse_result();
      receiveBase(result, "resubmitCourse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resubmitCourse failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo deleteCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_deleteCourse(courseBo, partnerBo, userBo);
      return recv_deleteCourse();
    }

    public void send_deleteCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      deleteCourse_args args = new deleteCourse_args();
      args.setCourseBo(courseBo);
      args.setPartnerBo(partnerBo);
      args.setUserBo(userBo);
      sendBase("deleteCourse", args);
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo recv_deleteCourse() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      deleteCourse_result result = new deleteCourse_result();
      receiveBase(result, "deleteCourse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteCourse failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo updateCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_updateCourse(courseBo, partnerBo, userBo);
      return recv_updateCourse();
    }

    public void send_updateCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      updateCourse_args args = new updateCourse_args();
      args.setCourseBo(courseBo);
      args.setPartnerBo(partnerBo);
      args.setUserBo(userBo);
      sendBase("updateCourse", args);
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo recv_updateCourse() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      updateCourse_result result = new updateCourse_result();
      receiveBase(result, "updateCourse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCourse failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo commentCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.CommentCourseBo commentCourseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_commentCourse(courseBo, commentCourseBo, partnerBo, userBo);
      return recv_commentCourse();
    }

    public void send_commentCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.CommentCourseBo commentCourseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      commentCourse_args args = new commentCourse_args();
      args.setCourseBo(courseBo);
      args.setCommentCourseBo(commentCourseBo);
      args.setPartnerBo(partnerBo);
      args.setUserBo(userBo);
      sendBase("commentCourse", args);
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo recv_commentCourse() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      commentCourse_result result = new commentCourse_result();
      receiveBase(result, "commentCourse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "commentCourse failed: unknown result");
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseBo> queryByKeyword(String keyword) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_queryByKeyword(keyword);
      return recv_queryByKeyword();
    }

    public void send_queryByKeyword(String keyword) throws org.apache.thrift.TException
    {
      queryByKeyword_args args = new queryByKeyword_args();
      args.setKeyword(keyword);
      sendBase("queryByKeyword", args);
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseBo> recv_queryByKeyword() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      queryByKeyword_result result = new queryByKeyword_result();
      receiveBase(result, "queryByKeyword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByKeyword failed: unknown result");
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseBo> queryByPartner(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_queryByPartner(courseBo, partnerBo, userBo, paginationBo);
      return recv_queryByPartner();
    }

    public void send_queryByPartner(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws org.apache.thrift.TException
    {
      queryByPartner_args args = new queryByPartner_args();
      args.setCourseBo(courseBo);
      args.setPartnerBo(partnerBo);
      args.setUserBo(userBo);
      args.setPaginationBo(paginationBo);
      sendBase("queryByPartner", args);
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseBo> recv_queryByPartner() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      queryByPartner_result result = new queryByPartner_result();
      receiveBase(result, "queryByPartner");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByPartner failed: unknown result");
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseBo> queryByFilter(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.CategoryBo categoryBo, com.ishangke.edunav.commoncontract.model.LocationBo locationBo, com.ishangke.edunav.commoncontract.model.CircleBo circleBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_queryByFilter(courseBo, categoryBo, locationBo, circleBo, paginationBo);
      return recv_queryByFilter();
    }

    public void send_queryByFilter(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.CategoryBo categoryBo, com.ishangke.edunav.commoncontract.model.LocationBo locationBo, com.ishangke.edunav.commoncontract.model.CircleBo circleBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws org.apache.thrift.TException
    {
      queryByFilter_args args = new queryByFilter_args();
      args.setCourseBo(courseBo);
      args.setCategoryBo(categoryBo);
      args.setLocationBo(locationBo);
      args.setCircleBo(circleBo);
      args.setPaginationBo(paginationBo);
      sendBase("queryByFilter", args);
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseBo> recv_queryByFilter() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      queryByFilter_result result = new queryByFilter_result();
      receiveBase(result, "queryByFilter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByFilter failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo queryById(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_queryById(courseBo, userBo);
      return recv_queryById();
    }

    public void send_queryById(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      queryById_args args = new queryById_args();
      args.setCourseBo(courseBo);
      args.setUserBo(userBo);
      sendBase("queryById", args);
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo recv_queryById() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      queryById_result result = new queryById_result();
      receiveBase(result, "queryById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryById failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createCourse(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createCourse_call method_call = new createCourse_call(courseTemplateBo, courseBo, partnerBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createCourse_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo;
      private com.ishangke.edunav.commoncontract.model.CourseBo courseBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public createCourse_call(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseTemplateBo = courseTemplateBo;
        this.courseBo = courseBo;
        this.partnerBo = partnerBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createCourse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createCourse_args args = new createCourse_args();
        args.setCourseTemplateBo(courseTemplateBo);
        args.setCourseBo(courseBo);
        args.setPartnerBo(partnerBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.CourseBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createCourse();
      }
    }

    public void submitCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submitCourse_call method_call = new submitCourse_call(courseBo, partnerBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submitCourse_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseBo courseBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public submitCourse_call(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseBo = courseBo;
        this.partnerBo = partnerBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submitCourse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submitCourse_args args = new submitCourse_args();
        args.setCourseBo(courseBo);
        args.setPartnerBo(partnerBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.CourseBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_submitCourse();
      }
    }

    public void approveCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CommentCourseApproveBo commentCourseApproveBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      approveCourse_call method_call = new approveCourse_call(courseBo, partnerBo, commentCourseApproveBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class approveCourse_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseBo courseBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.CommentCourseApproveBo commentCourseApproveBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public approveCourse_call(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CommentCourseApproveBo commentCourseApproveBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseBo = courseBo;
        this.partnerBo = partnerBo;
        this.commentCourseApproveBo = commentCourseApproveBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("approveCourse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        approveCourse_args args = new approveCourse_args();
        args.setCourseBo(courseBo);
        args.setPartnerBo(partnerBo);
        args.setCommentCourseApproveBo(commentCourseApproveBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.CourseBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_approveCourse();
      }
    }

    public void rejectCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CommentCourseRejectBo commentCourseRejectBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rejectCourse_call method_call = new rejectCourse_call(courseBo, partnerBo, commentCourseRejectBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rejectCourse_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseBo courseBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.CommentCourseRejectBo commentCourseRejectBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public rejectCourse_call(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CommentCourseRejectBo commentCourseRejectBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseBo = courseBo;
        this.partnerBo = partnerBo;
        this.commentCourseRejectBo = commentCourseRejectBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rejectCourse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rejectCourse_args args = new rejectCourse_args();
        args.setCourseBo(courseBo);
        args.setPartnerBo(partnerBo);
        args.setCommentCourseRejectBo(commentCourseRejectBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.CourseBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rejectCourse();
      }
    }

    public void cancelCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelCourse_call method_call = new cancelCourse_call(courseBo, partnerBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelCourse_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseBo courseBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public cancelCourse_call(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseBo = courseBo;
        this.partnerBo = partnerBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelCourse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelCourse_args args = new cancelCourse_args();
        args.setCourseBo(courseBo);
        args.setPartnerBo(partnerBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.CourseBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelCourse();
      }
    }

    public void resubmitCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resubmitCourse_call method_call = new resubmitCourse_call(courseBo, partnerBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resubmitCourse_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseBo courseBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public resubmitCourse_call(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseBo = courseBo;
        this.partnerBo = partnerBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resubmitCourse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resubmitCourse_args args = new resubmitCourse_args();
        args.setCourseBo(courseBo);
        args.setPartnerBo(partnerBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.CourseBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resubmitCourse();
      }
    }

    public void deleteCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteCourse_call method_call = new deleteCourse_call(courseBo, partnerBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteCourse_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseBo courseBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public deleteCourse_call(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseBo = courseBo;
        this.partnerBo = partnerBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteCourse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteCourse_args args = new deleteCourse_args();
        args.setCourseBo(courseBo);
        args.setPartnerBo(partnerBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.CourseBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteCourse();
      }
    }

    public void updateCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCourse_call method_call = new updateCourse_call(courseBo, partnerBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCourse_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseBo courseBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public updateCourse_call(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseBo = courseBo;
        this.partnerBo = partnerBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCourse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCourse_args args = new updateCourse_args();
        args.setCourseBo(courseBo);
        args.setPartnerBo(partnerBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.CourseBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCourse();
      }
    }

    public void commentCourse(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.CommentCourseBo commentCourseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      commentCourse_call method_call = new commentCourse_call(courseBo, commentCourseBo, partnerBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class commentCourse_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseBo courseBo;
      private com.ishangke.edunav.commoncontract.model.CommentCourseBo commentCourseBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public commentCourse_call(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.CommentCourseBo commentCourseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseBo = courseBo;
        this.commentCourseBo = commentCourseBo;
        this.partnerBo = partnerBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("commentCourse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        commentCourse_args args = new commentCourse_args();
        args.setCourseBo(courseBo);
        args.setCommentCourseBo(commentCourseBo);
        args.setPartnerBo(partnerBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.CourseBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_commentCourse();
      }
    }

    public void queryByKeyword(String keyword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByKeyword_call method_call = new queryByKeyword_call(keyword, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByKeyword_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String keyword;
      public queryByKeyword_call(String keyword, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keyword = keyword;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByKeyword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByKeyword_args args = new queryByKeyword_args();
        args.setKeyword(keyword);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.ishangke.edunav.commoncontract.model.CourseBo> getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByKeyword();
      }
    }

    public void queryByPartner(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByPartner_call method_call = new queryByPartner_call(courseBo, partnerBo, userBo, paginationBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByPartner_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseBo courseBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      private com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo;
      public queryByPartner_call(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseBo = courseBo;
        this.partnerBo = partnerBo;
        this.userBo = userBo;
        this.paginationBo = paginationBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByPartner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByPartner_args args = new queryByPartner_args();
        args.setCourseBo(courseBo);
        args.setPartnerBo(partnerBo);
        args.setUserBo(userBo);
        args.setPaginationBo(paginationBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.ishangke.edunav.commoncontract.model.CourseBo> getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByPartner();
      }
    }

    public void queryByFilter(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.CategoryBo categoryBo, com.ishangke.edunav.commoncontract.model.LocationBo locationBo, com.ishangke.edunav.commoncontract.model.CircleBo circleBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByFilter_call method_call = new queryByFilter_call(courseBo, categoryBo, locationBo, circleBo, paginationBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByFilter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseBo courseBo;
      private com.ishangke.edunav.commoncontract.model.CategoryBo categoryBo;
      private com.ishangke.edunav.commoncontract.model.LocationBo locationBo;
      private com.ishangke.edunav.commoncontract.model.CircleBo circleBo;
      private com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo;
      public queryByFilter_call(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.CategoryBo categoryBo, com.ishangke.edunav.commoncontract.model.LocationBo locationBo, com.ishangke.edunav.commoncontract.model.CircleBo circleBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseBo = courseBo;
        this.categoryBo = categoryBo;
        this.locationBo = locationBo;
        this.circleBo = circleBo;
        this.paginationBo = paginationBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByFilter_args args = new queryByFilter_args();
        args.setCourseBo(courseBo);
        args.setCategoryBo(categoryBo);
        args.setLocationBo(locationBo);
        args.setCircleBo(circleBo);
        args.setPaginationBo(paginationBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.ishangke.edunav.commoncontract.model.CourseBo> getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByFilter();
      }
    }

    public void queryById(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryById_call method_call = new queryById_call(courseBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseBo courseBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public queryById_call(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseBo = courseBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryById_args args = new queryById_args();
        args.setCourseBo(courseBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.CourseBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryById();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createCourse", new createCourse());
      processMap.put("submitCourse", new submitCourse());
      processMap.put("approveCourse", new approveCourse());
      processMap.put("rejectCourse", new rejectCourse());
      processMap.put("cancelCourse", new cancelCourse());
      processMap.put("resubmitCourse", new resubmitCourse());
      processMap.put("deleteCourse", new deleteCourse());
      processMap.put("updateCourse", new updateCourse());
      processMap.put("commentCourse", new commentCourse());
      processMap.put("queryByKeyword", new queryByKeyword());
      processMap.put("queryByPartner", new queryByPartner());
      processMap.put("queryByFilter", new queryByFilter());
      processMap.put("queryById", new queryById());
      return processMap;
    }

    public static class createCourse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createCourse_args> {
      public createCourse() {
        super("createCourse");
      }

      public createCourse_args getEmptyArgsInstance() {
        return new createCourse_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createCourse_result getResult(I iface, createCourse_args args) throws org.apache.thrift.TException {
        createCourse_result result = new createCourse_result();
        try {
          result.success = iface.createCourse(args.courseTemplateBo, args.courseBo, args.partnerBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class submitCourse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submitCourse_args> {
      public submitCourse() {
        super("submitCourse");
      }

      public submitCourse_args getEmptyArgsInstance() {
        return new submitCourse_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public submitCourse_result getResult(I iface, submitCourse_args args) throws org.apache.thrift.TException {
        submitCourse_result result = new submitCourse_result();
        try {
          result.success = iface.submitCourse(args.courseBo, args.partnerBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class approveCourse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, approveCourse_args> {
      public approveCourse() {
        super("approveCourse");
      }

      public approveCourse_args getEmptyArgsInstance() {
        return new approveCourse_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public approveCourse_result getResult(I iface, approveCourse_args args) throws org.apache.thrift.TException {
        approveCourse_result result = new approveCourse_result();
        try {
          result.success = iface.approveCourse(args.courseBo, args.partnerBo, args.commentCourseApproveBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class rejectCourse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rejectCourse_args> {
      public rejectCourse() {
        super("rejectCourse");
      }

      public rejectCourse_args getEmptyArgsInstance() {
        return new rejectCourse_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rejectCourse_result getResult(I iface, rejectCourse_args args) throws org.apache.thrift.TException {
        rejectCourse_result result = new rejectCourse_result();
        try {
          result.success = iface.rejectCourse(args.courseBo, args.partnerBo, args.commentCourseRejectBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class cancelCourse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelCourse_args> {
      public cancelCourse() {
        super("cancelCourse");
      }

      public cancelCourse_args getEmptyArgsInstance() {
        return new cancelCourse_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelCourse_result getResult(I iface, cancelCourse_args args) throws org.apache.thrift.TException {
        cancelCourse_result result = new cancelCourse_result();
        try {
          result.success = iface.cancelCourse(args.courseBo, args.partnerBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class resubmitCourse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resubmitCourse_args> {
      public resubmitCourse() {
        super("resubmitCourse");
      }

      public resubmitCourse_args getEmptyArgsInstance() {
        return new resubmitCourse_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resubmitCourse_result getResult(I iface, resubmitCourse_args args) throws org.apache.thrift.TException {
        resubmitCourse_result result = new resubmitCourse_result();
        try {
          result.success = iface.resubmitCourse(args.courseBo, args.partnerBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class deleteCourse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteCourse_args> {
      public deleteCourse() {
        super("deleteCourse");
      }

      public deleteCourse_args getEmptyArgsInstance() {
        return new deleteCourse_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteCourse_result getResult(I iface, deleteCourse_args args) throws org.apache.thrift.TException {
        deleteCourse_result result = new deleteCourse_result();
        try {
          result.success = iface.deleteCourse(args.courseBo, args.partnerBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class updateCourse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCourse_args> {
      public updateCourse() {
        super("updateCourse");
      }

      public updateCourse_args getEmptyArgsInstance() {
        return new updateCourse_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCourse_result getResult(I iface, updateCourse_args args) throws org.apache.thrift.TException {
        updateCourse_result result = new updateCourse_result();
        try {
          result.success = iface.updateCourse(args.courseBo, args.partnerBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class commentCourse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, commentCourse_args> {
      public commentCourse() {
        super("commentCourse");
      }

      public commentCourse_args getEmptyArgsInstance() {
        return new commentCourse_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public commentCourse_result getResult(I iface, commentCourse_args args) throws org.apache.thrift.TException {
        commentCourse_result result = new commentCourse_result();
        try {
          result.success = iface.commentCourse(args.courseBo, args.commentCourseBo, args.partnerBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class queryByKeyword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByKeyword_args> {
      public queryByKeyword() {
        super("queryByKeyword");
      }

      public queryByKeyword_args getEmptyArgsInstance() {
        return new queryByKeyword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByKeyword_result getResult(I iface, queryByKeyword_args args) throws org.apache.thrift.TException {
        queryByKeyword_result result = new queryByKeyword_result();
        try {
          result.success = iface.queryByKeyword(args.keyword);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class queryByPartner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByPartner_args> {
      public queryByPartner() {
        super("queryByPartner");
      }

      public queryByPartner_args getEmptyArgsInstance() {
        return new queryByPartner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByPartner_result getResult(I iface, queryByPartner_args args) throws org.apache.thrift.TException {
        queryByPartner_result result = new queryByPartner_result();
        try {
          result.success = iface.queryByPartner(args.courseBo, args.partnerBo, args.userBo, args.paginationBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class queryByFilter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByFilter_args> {
      public queryByFilter() {
        super("queryByFilter");
      }

      public queryByFilter_args getEmptyArgsInstance() {
        return new queryByFilter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByFilter_result getResult(I iface, queryByFilter_args args) throws org.apache.thrift.TException {
        queryByFilter_result result = new queryByFilter_result();
        try {
          result.success = iface.queryByFilter(args.courseBo, args.categoryBo, args.locationBo, args.circleBo, args.paginationBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class queryById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryById_args> {
      public queryById() {
        super("queryById");
      }

      public queryById_args getEmptyArgsInstance() {
        return new queryById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryById_result getResult(I iface, queryById_args args) throws org.apache.thrift.TException {
        queryById_result result = new queryById_result();
        try {
          result.success = iface.queryById(args.courseBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createCourse", new createCourse());
      processMap.put("submitCourse", new submitCourse());
      processMap.put("approveCourse", new approveCourse());
      processMap.put("rejectCourse", new rejectCourse());
      processMap.put("cancelCourse", new cancelCourse());
      processMap.put("resubmitCourse", new resubmitCourse());
      processMap.put("deleteCourse", new deleteCourse());
      processMap.put("updateCourse", new updateCourse());
      processMap.put("commentCourse", new commentCourse());
      processMap.put("queryByKeyword", new queryByKeyword());
      processMap.put("queryByPartner", new queryByPartner());
      processMap.put("queryByFilter", new queryByFilter());
      processMap.put("queryById", new queryById());
      return processMap;
    }

    public static class createCourse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createCourse_args, com.ishangke.edunav.commoncontract.model.CourseBo> {
      public createCourse() {
        super("createCourse");
      }

      public createCourse_args getEmptyArgsInstance() {
        return new createCourse_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.CourseBo o) {
            createCourse_result result = new createCourse_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createCourse_result result = new createCourse_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createCourse_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo> resultHandler) throws TException {
        iface.createCourse(args.courseTemplateBo, args.courseBo, args.partnerBo, args.userBo,resultHandler);
      }
    }

    public static class submitCourse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, submitCourse_args, com.ishangke.edunav.commoncontract.model.CourseBo> {
      public submitCourse() {
        super("submitCourse");
      }

      public submitCourse_args getEmptyArgsInstance() {
        return new submitCourse_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.CourseBo o) {
            submitCourse_result result = new submitCourse_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            submitCourse_result result = new submitCourse_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, submitCourse_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo> resultHandler) throws TException {
        iface.submitCourse(args.courseBo, args.partnerBo, args.userBo,resultHandler);
      }
    }

    public static class approveCourse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, approveCourse_args, com.ishangke.edunav.commoncontract.model.CourseBo> {
      public approveCourse() {
        super("approveCourse");
      }

      public approveCourse_args getEmptyArgsInstance() {
        return new approveCourse_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.CourseBo o) {
            approveCourse_result result = new approveCourse_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            approveCourse_result result = new approveCourse_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, approveCourse_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo> resultHandler) throws TException {
        iface.approveCourse(args.courseBo, args.partnerBo, args.commentCourseApproveBo, args.userBo,resultHandler);
      }
    }

    public static class rejectCourse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rejectCourse_args, com.ishangke.edunav.commoncontract.model.CourseBo> {
      public rejectCourse() {
        super("rejectCourse");
      }

      public rejectCourse_args getEmptyArgsInstance() {
        return new rejectCourse_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.CourseBo o) {
            rejectCourse_result result = new rejectCourse_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rejectCourse_result result = new rejectCourse_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rejectCourse_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo> resultHandler) throws TException {
        iface.rejectCourse(args.courseBo, args.partnerBo, args.commentCourseRejectBo, args.userBo,resultHandler);
      }
    }

    public static class cancelCourse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelCourse_args, com.ishangke.edunav.commoncontract.model.CourseBo> {
      public cancelCourse() {
        super("cancelCourse");
      }

      public cancelCourse_args getEmptyArgsInstance() {
        return new cancelCourse_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.CourseBo o) {
            cancelCourse_result result = new cancelCourse_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelCourse_result result = new cancelCourse_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelCourse_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo> resultHandler) throws TException {
        iface.cancelCourse(args.courseBo, args.partnerBo, args.userBo,resultHandler);
      }
    }

    public static class resubmitCourse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resubmitCourse_args, com.ishangke.edunav.commoncontract.model.CourseBo> {
      public resubmitCourse() {
        super("resubmitCourse");
      }

      public resubmitCourse_args getEmptyArgsInstance() {
        return new resubmitCourse_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.CourseBo o) {
            resubmitCourse_result result = new resubmitCourse_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            resubmitCourse_result result = new resubmitCourse_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resubmitCourse_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo> resultHandler) throws TException {
        iface.resubmitCourse(args.courseBo, args.partnerBo, args.userBo,resultHandler);
      }
    }

    public static class deleteCourse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteCourse_args, com.ishangke.edunav.commoncontract.model.CourseBo> {
      public deleteCourse() {
        super("deleteCourse");
      }

      public deleteCourse_args getEmptyArgsInstance() {
        return new deleteCourse_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.CourseBo o) {
            deleteCourse_result result = new deleteCourse_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteCourse_result result = new deleteCourse_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteCourse_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo> resultHandler) throws TException {
        iface.deleteCourse(args.courseBo, args.partnerBo, args.userBo,resultHandler);
      }
    }

    public static class updateCourse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCourse_args, com.ishangke.edunav.commoncontract.model.CourseBo> {
      public updateCourse() {
        super("updateCourse");
      }

      public updateCourse_args getEmptyArgsInstance() {
        return new updateCourse_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.CourseBo o) {
            updateCourse_result result = new updateCourse_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateCourse_result result = new updateCourse_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCourse_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo> resultHandler) throws TException {
        iface.updateCourse(args.courseBo, args.partnerBo, args.userBo,resultHandler);
      }
    }

    public static class commentCourse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, commentCourse_args, com.ishangke.edunav.commoncontract.model.CourseBo> {
      public commentCourse() {
        super("commentCourse");
      }

      public commentCourse_args getEmptyArgsInstance() {
        return new commentCourse_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.CourseBo o) {
            commentCourse_result result = new commentCourse_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            commentCourse_result result = new commentCourse_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, commentCourse_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo> resultHandler) throws TException {
        iface.commentCourse(args.courseBo, args.commentCourseBo, args.partnerBo, args.userBo,resultHandler);
      }
    }

    public static class queryByKeyword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByKeyword_args, List<com.ishangke.edunav.commoncontract.model.CourseBo>> {
      public queryByKeyword() {
        super("queryByKeyword");
      }

      public queryByKeyword_args getEmptyArgsInstance() {
        return new queryByKeyword_args();
      }

      public AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.CourseBo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.CourseBo>>() { 
          public void onComplete(List<com.ishangke.edunav.commoncontract.model.CourseBo> o) {
            queryByKeyword_result result = new queryByKeyword_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByKeyword_result result = new queryByKeyword_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByKeyword_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.CourseBo>> resultHandler) throws TException {
        iface.queryByKeyword(args.keyword,resultHandler);
      }
    }

    public static class queryByPartner<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByPartner_args, List<com.ishangke.edunav.commoncontract.model.CourseBo>> {
      public queryByPartner() {
        super("queryByPartner");
      }

      public queryByPartner_args getEmptyArgsInstance() {
        return new queryByPartner_args();
      }

      public AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.CourseBo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.CourseBo>>() { 
          public void onComplete(List<com.ishangke.edunav.commoncontract.model.CourseBo> o) {
            queryByPartner_result result = new queryByPartner_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByPartner_result result = new queryByPartner_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByPartner_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.CourseBo>> resultHandler) throws TException {
        iface.queryByPartner(args.courseBo, args.partnerBo, args.userBo, args.paginationBo,resultHandler);
      }
    }

    public static class queryByFilter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByFilter_args, List<com.ishangke.edunav.commoncontract.model.CourseBo>> {
      public queryByFilter() {
        super("queryByFilter");
      }

      public queryByFilter_args getEmptyArgsInstance() {
        return new queryByFilter_args();
      }

      public AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.CourseBo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.CourseBo>>() { 
          public void onComplete(List<com.ishangke.edunav.commoncontract.model.CourseBo> o) {
            queryByFilter_result result = new queryByFilter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByFilter_result result = new queryByFilter_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByFilter_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.CourseBo>> resultHandler) throws TException {
        iface.queryByFilter(args.courseBo, args.categoryBo, args.locationBo, args.circleBo, args.paginationBo,resultHandler);
      }
    }

    public static class queryById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryById_args, com.ishangke.edunav.commoncontract.model.CourseBo> {
      public queryById() {
        super("queryById");
      }

      public queryById_args getEmptyArgsInstance() {
        return new queryById_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.CourseBo o) {
            queryById_result result = new queryById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryById_result result = new queryById_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryById_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseBo> resultHandler) throws TException {
        iface.queryById(args.courseBo, args.userBo,resultHandler);
      }
    }

  }

  public static class createCourse_args implements org.apache.thrift.TBase<createCourse_args, createCourse_args._Fields>, java.io.Serializable, Cloneable, Comparable<createCourse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCourse_args");

    private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COURSE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createCourse_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createCourse_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo; // required
    public com.ishangke.edunav.commoncontract.model.CourseBo courseBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_TEMPLATE_BO((short)1, "courseTemplateBo"),
      COURSE_BO((short)2, "courseBo"),
      PARTNER_BO((short)3, "partnerBo"),
      USER_BO((short)4, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_TEMPLATE_BO
            return COURSE_TEMPLATE_BO;
          case 2: // COURSE_BO
            return COURSE_BO;
          case 3: // PARTNER_BO
            return PARTNER_BO;
          case 4: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_TEMPLATE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.COURSE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCourse_args.class, metaDataMap);
    }

    public createCourse_args() {
    }

    public createCourse_args(
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo,
      com.ishangke.edunav.commoncontract.model.CourseBo courseBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseTemplateBo = courseTemplateBo;
      this.courseBo = courseBo;
      this.partnerBo = partnerBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCourse_args(createCourse_args other) {
      if (other.isSetCourseTemplateBo()) {
        this.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.courseTemplateBo);
      }
      if (other.isSetCourseBo()) {
        this.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo(other.courseBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public createCourse_args deepCopy() {
      return new createCourse_args(this);
    }

    @Override
    public void clear() {
      this.courseTemplateBo = null;
      this.courseBo = null;
      this.partnerBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getCourseTemplateBo() {
      return this.courseTemplateBo;
    }

    public createCourse_args setCourseTemplateBo(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo) {
      this.courseTemplateBo = courseTemplateBo;
      return this;
    }

    public void unsetCourseTemplateBo() {
      this.courseTemplateBo = null;
    }

    /** Returns true if field courseTemplateBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseTemplateBo() {
      return this.courseTemplateBo != null;
    }

    public void setCourseTemplateBoIsSet(boolean value) {
      if (!value) {
        this.courseTemplateBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getCourseBo() {
      return this.courseBo;
    }

    public createCourse_args setCourseBo(com.ishangke.edunav.commoncontract.model.CourseBo courseBo) {
      this.courseBo = courseBo;
      return this;
    }

    public void unsetCourseBo() {
      this.courseBo = null;
    }

    /** Returns true if field courseBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseBo() {
      return this.courseBo != null;
    }

    public void setCourseBoIsSet(boolean value) {
      if (!value) {
        this.courseBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public createCourse_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public createCourse_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        if (value == null) {
          unsetCourseTemplateBo();
        } else {
          setCourseTemplateBo((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case COURSE_BO:
        if (value == null) {
          unsetCourseBo();
        } else {
          setCourseBo((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        return getCourseTemplateBo();

      case COURSE_BO:
        return getCourseBo();

      case PARTNER_BO:
        return getPartnerBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_TEMPLATE_BO:
        return isSetCourseTemplateBo();
      case COURSE_BO:
        return isSetCourseBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createCourse_args)
        return this.equals((createCourse_args)that);
      return false;
    }

    public boolean equals(createCourse_args that) {
      if (that == null)
        return false;

      boolean this_present_courseTemplateBo = true && this.isSetCourseTemplateBo();
      boolean that_present_courseTemplateBo = true && that.isSetCourseTemplateBo();
      if (this_present_courseTemplateBo || that_present_courseTemplateBo) {
        if (!(this_present_courseTemplateBo && that_present_courseTemplateBo))
          return false;
        if (!this.courseTemplateBo.equals(that.courseTemplateBo))
          return false;
      }

      boolean this_present_courseBo = true && this.isSetCourseBo();
      boolean that_present_courseBo = true && that.isSetCourseBo();
      if (this_present_courseBo || that_present_courseBo) {
        if (!(this_present_courseBo && that_present_courseBo))
          return false;
        if (!this.courseBo.equals(that.courseBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseTemplateBo = true && (isSetCourseTemplateBo());
      builder.append(present_courseTemplateBo);
      if (present_courseTemplateBo)
        builder.append(courseTemplateBo);

      boolean present_courseBo = true && (isSetCourseBo());
      builder.append(present_courseBo);
      if (present_courseBo)
        builder.append(courseBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createCourse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseTemplateBo()).compareTo(other.isSetCourseTemplateBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseTemplateBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateBo, other.courseTemplateBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCourseBo()).compareTo(other.isSetCourseBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseBo, other.courseBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createCourse_args(");
      boolean first = true;

      sb.append("courseTemplateBo:");
      if (this.courseTemplateBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseTemplateBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("courseBo:");
      if (this.courseBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseTemplateBo != null) {
        courseTemplateBo.validate();
      }
      if (courseBo != null) {
        courseBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCourse_argsStandardSchemeFactory implements SchemeFactory {
      public createCourse_argsStandardScheme getScheme() {
        return new createCourse_argsStandardScheme();
      }
    }

    private static class createCourse_argsStandardScheme extends StandardScheme<createCourse_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_TEMPLATE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.courseTemplateBo.read(iprot);
                struct.setCourseTemplateBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COURSE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.courseBo.read(iprot);
                struct.setCourseBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCourse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseTemplateBo != null) {
          oprot.writeFieldBegin(COURSE_TEMPLATE_BO_FIELD_DESC);
          struct.courseTemplateBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.courseBo != null) {
          oprot.writeFieldBegin(COURSE_BO_FIELD_DESC);
          struct.courseBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCourse_argsTupleSchemeFactory implements SchemeFactory {
      public createCourse_argsTupleScheme getScheme() {
        return new createCourse_argsTupleScheme();
      }
    }

    private static class createCourse_argsTupleScheme extends TupleScheme<createCourse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseTemplateBo()) {
          optionals.set(0);
        }
        if (struct.isSetCourseBo()) {
          optionals.set(1);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(2);
        }
        if (struct.isSetUserBo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCourseTemplateBo()) {
          struct.courseTemplateBo.write(oprot);
        }
        if (struct.isSetCourseBo()) {
          struct.courseBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.courseTemplateBo.read(iprot);
          struct.setCourseTemplateBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.courseBo.read(iprot);
          struct.setCourseBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class createCourse_result implements org.apache.thrift.TBase<createCourse_result, createCourse_result._Fields>, java.io.Serializable, Cloneable, Comparable<createCourse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCourse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createCourse_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createCourse_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCourse_result.class, metaDataMap);
    }

    public createCourse_result() {
    }

    public createCourse_result(
      com.ishangke.edunav.commoncontract.model.CourseBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCourse_result(createCourse_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.CourseBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public createCourse_result deepCopy() {
      return new createCourse_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getSuccess() {
      return this.success;
    }

    public createCourse_result setSuccess(com.ishangke.edunav.commoncontract.model.CourseBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public createCourse_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createCourse_result)
        return this.equals((createCourse_result)that);
      return false;
    }

    public boolean equals(createCourse_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createCourse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createCourse_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCourse_resultStandardSchemeFactory implements SchemeFactory {
      public createCourse_resultStandardScheme getScheme() {
        return new createCourse_resultStandardScheme();
      }
    }

    private static class createCourse_resultStandardScheme extends StandardScheme<createCourse_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCourse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCourse_resultTupleSchemeFactory implements SchemeFactory {
      public createCourse_resultTupleScheme getScheme() {
        return new createCourse_resultTupleScheme();
      }
    }

    private static class createCourse_resultTupleScheme extends TupleScheme<createCourse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class submitCourse_args implements org.apache.thrift.TBase<submitCourse_args, submitCourse_args._Fields>, java.io.Serializable, Cloneable, Comparable<submitCourse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitCourse_args");

    private static final org.apache.thrift.protocol.TField COURSE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitCourse_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitCourse_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo courseBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_BO((short)1, "courseBo"),
      PARTNER_BO((short)2, "partnerBo"),
      USER_BO((short)3, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_BO
            return COURSE_BO;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitCourse_args.class, metaDataMap);
    }

    public submitCourse_args() {
    }

    public submitCourse_args(
      com.ishangke.edunav.commoncontract.model.CourseBo courseBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseBo = courseBo;
      this.partnerBo = partnerBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitCourse_args(submitCourse_args other) {
      if (other.isSetCourseBo()) {
        this.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo(other.courseBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public submitCourse_args deepCopy() {
      return new submitCourse_args(this);
    }

    @Override
    public void clear() {
      this.courseBo = null;
      this.partnerBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getCourseBo() {
      return this.courseBo;
    }

    public submitCourse_args setCourseBo(com.ishangke.edunav.commoncontract.model.CourseBo courseBo) {
      this.courseBo = courseBo;
      return this;
    }

    public void unsetCourseBo() {
      this.courseBo = null;
    }

    /** Returns true if field courseBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseBo() {
      return this.courseBo != null;
    }

    public void setCourseBoIsSet(boolean value) {
      if (!value) {
        this.courseBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public submitCourse_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public submitCourse_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_BO:
        if (value == null) {
          unsetCourseBo();
        } else {
          setCourseBo((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_BO:
        return getCourseBo();

      case PARTNER_BO:
        return getPartnerBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_BO:
        return isSetCourseBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitCourse_args)
        return this.equals((submitCourse_args)that);
      return false;
    }

    public boolean equals(submitCourse_args that) {
      if (that == null)
        return false;

      boolean this_present_courseBo = true && this.isSetCourseBo();
      boolean that_present_courseBo = true && that.isSetCourseBo();
      if (this_present_courseBo || that_present_courseBo) {
        if (!(this_present_courseBo && that_present_courseBo))
          return false;
        if (!this.courseBo.equals(that.courseBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseBo = true && (isSetCourseBo());
      builder.append(present_courseBo);
      if (present_courseBo)
        builder.append(courseBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(submitCourse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseBo()).compareTo(other.isSetCourseBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseBo, other.courseBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitCourse_args(");
      boolean first = true;

      sb.append("courseBo:");
      if (this.courseBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseBo != null) {
        courseBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitCourse_argsStandardSchemeFactory implements SchemeFactory {
      public submitCourse_argsStandardScheme getScheme() {
        return new submitCourse_argsStandardScheme();
      }
    }

    private static class submitCourse_argsStandardScheme extends StandardScheme<submitCourse_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.courseBo.read(iprot);
                struct.setCourseBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitCourse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseBo != null) {
          oprot.writeFieldBegin(COURSE_BO_FIELD_DESC);
          struct.courseBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitCourse_argsTupleSchemeFactory implements SchemeFactory {
      public submitCourse_argsTupleScheme getScheme() {
        return new submitCourse_argsTupleScheme();
      }
    }

    private static class submitCourse_argsTupleScheme extends TupleScheme<submitCourse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseBo()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCourseBo()) {
          struct.courseBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.courseBo.read(iprot);
          struct.setCourseBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class submitCourse_result implements org.apache.thrift.TBase<submitCourse_result, submitCourse_result._Fields>, java.io.Serializable, Cloneable, Comparable<submitCourse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitCourse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitCourse_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitCourse_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitCourse_result.class, metaDataMap);
    }

    public submitCourse_result() {
    }

    public submitCourse_result(
      com.ishangke.edunav.commoncontract.model.CourseBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitCourse_result(submitCourse_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.CourseBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public submitCourse_result deepCopy() {
      return new submitCourse_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getSuccess() {
      return this.success;
    }

    public submitCourse_result setSuccess(com.ishangke.edunav.commoncontract.model.CourseBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public submitCourse_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitCourse_result)
        return this.equals((submitCourse_result)that);
      return false;
    }

    public boolean equals(submitCourse_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(submitCourse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitCourse_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitCourse_resultStandardSchemeFactory implements SchemeFactory {
      public submitCourse_resultStandardScheme getScheme() {
        return new submitCourse_resultStandardScheme();
      }
    }

    private static class submitCourse_resultStandardScheme extends StandardScheme<submitCourse_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitCourse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitCourse_resultTupleSchemeFactory implements SchemeFactory {
      public submitCourse_resultTupleScheme getScheme() {
        return new submitCourse_resultTupleScheme();
      }
    }

    private static class submitCourse_resultTupleScheme extends TupleScheme<submitCourse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class approveCourse_args implements org.apache.thrift.TBase<approveCourse_args, approveCourse_args._Fields>, java.io.Serializable, Cloneable, Comparable<approveCourse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("approveCourse_args");

    private static final org.apache.thrift.protocol.TField COURSE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField COMMENT_COURSE_APPROVE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("commentCourseApproveBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new approveCourse_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new approveCourse_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo courseBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.CommentCourseApproveBo commentCourseApproveBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_BO((short)1, "courseBo"),
      PARTNER_BO((short)2, "partnerBo"),
      COMMENT_COURSE_APPROVE_BO((short)3, "commentCourseApproveBo"),
      USER_BO((short)4, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_BO
            return COURSE_BO;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // COMMENT_COURSE_APPROVE_BO
            return COMMENT_COURSE_APPROVE_BO;
          case 4: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.COMMENT_COURSE_APPROVE_BO, new org.apache.thrift.meta_data.FieldMetaData("commentCourseApproveBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CommentCourseApproveBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(approveCourse_args.class, metaDataMap);
    }

    public approveCourse_args() {
    }

    public approveCourse_args(
      com.ishangke.edunav.commoncontract.model.CourseBo courseBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.CommentCourseApproveBo commentCourseApproveBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseBo = courseBo;
      this.partnerBo = partnerBo;
      this.commentCourseApproveBo = commentCourseApproveBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public approveCourse_args(approveCourse_args other) {
      if (other.isSetCourseBo()) {
        this.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo(other.courseBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetCommentCourseApproveBo()) {
        this.commentCourseApproveBo = new com.ishangke.edunav.commoncontract.model.CommentCourseApproveBo(other.commentCourseApproveBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public approveCourse_args deepCopy() {
      return new approveCourse_args(this);
    }

    @Override
    public void clear() {
      this.courseBo = null;
      this.partnerBo = null;
      this.commentCourseApproveBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getCourseBo() {
      return this.courseBo;
    }

    public approveCourse_args setCourseBo(com.ishangke.edunav.commoncontract.model.CourseBo courseBo) {
      this.courseBo = courseBo;
      return this;
    }

    public void unsetCourseBo() {
      this.courseBo = null;
    }

    /** Returns true if field courseBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseBo() {
      return this.courseBo != null;
    }

    public void setCourseBoIsSet(boolean value) {
      if (!value) {
        this.courseBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public approveCourse_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CommentCourseApproveBo getCommentCourseApproveBo() {
      return this.commentCourseApproveBo;
    }

    public approveCourse_args setCommentCourseApproveBo(com.ishangke.edunav.commoncontract.model.CommentCourseApproveBo commentCourseApproveBo) {
      this.commentCourseApproveBo = commentCourseApproveBo;
      return this;
    }

    public void unsetCommentCourseApproveBo() {
      this.commentCourseApproveBo = null;
    }

    /** Returns true if field commentCourseApproveBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommentCourseApproveBo() {
      return this.commentCourseApproveBo != null;
    }

    public void setCommentCourseApproveBoIsSet(boolean value) {
      if (!value) {
        this.commentCourseApproveBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public approveCourse_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_BO:
        if (value == null) {
          unsetCourseBo();
        } else {
          setCourseBo((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case COMMENT_COURSE_APPROVE_BO:
        if (value == null) {
          unsetCommentCourseApproveBo();
        } else {
          setCommentCourseApproveBo((com.ishangke.edunav.commoncontract.model.CommentCourseApproveBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_BO:
        return getCourseBo();

      case PARTNER_BO:
        return getPartnerBo();

      case COMMENT_COURSE_APPROVE_BO:
        return getCommentCourseApproveBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_BO:
        return isSetCourseBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case COMMENT_COURSE_APPROVE_BO:
        return isSetCommentCourseApproveBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof approveCourse_args)
        return this.equals((approveCourse_args)that);
      return false;
    }

    public boolean equals(approveCourse_args that) {
      if (that == null)
        return false;

      boolean this_present_courseBo = true && this.isSetCourseBo();
      boolean that_present_courseBo = true && that.isSetCourseBo();
      if (this_present_courseBo || that_present_courseBo) {
        if (!(this_present_courseBo && that_present_courseBo))
          return false;
        if (!this.courseBo.equals(that.courseBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_commentCourseApproveBo = true && this.isSetCommentCourseApproveBo();
      boolean that_present_commentCourseApproveBo = true && that.isSetCommentCourseApproveBo();
      if (this_present_commentCourseApproveBo || that_present_commentCourseApproveBo) {
        if (!(this_present_commentCourseApproveBo && that_present_commentCourseApproveBo))
          return false;
        if (!this.commentCourseApproveBo.equals(that.commentCourseApproveBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseBo = true && (isSetCourseBo());
      builder.append(present_courseBo);
      if (present_courseBo)
        builder.append(courseBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_commentCourseApproveBo = true && (isSetCommentCourseApproveBo());
      builder.append(present_commentCourseApproveBo);
      if (present_commentCourseApproveBo)
        builder.append(commentCourseApproveBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(approveCourse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseBo()).compareTo(other.isSetCourseBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseBo, other.courseBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommentCourseApproveBo()).compareTo(other.isSetCommentCourseApproveBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommentCourseApproveBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentCourseApproveBo, other.commentCourseApproveBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("approveCourse_args(");
      boolean first = true;

      sb.append("courseBo:");
      if (this.courseBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commentCourseApproveBo:");
      if (this.commentCourseApproveBo == null) {
        sb.append("null");
      } else {
        sb.append(this.commentCourseApproveBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseBo != null) {
        courseBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (commentCourseApproveBo != null) {
        commentCourseApproveBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class approveCourse_argsStandardSchemeFactory implements SchemeFactory {
      public approveCourse_argsStandardScheme getScheme() {
        return new approveCourse_argsStandardScheme();
      }
    }

    private static class approveCourse_argsStandardScheme extends StandardScheme<approveCourse_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, approveCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.courseBo.read(iprot);
                struct.setCourseBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMMENT_COURSE_APPROVE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commentCourseApproveBo = new com.ishangke.edunav.commoncontract.model.CommentCourseApproveBo();
                struct.commentCourseApproveBo.read(iprot);
                struct.setCommentCourseApproveBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, approveCourse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseBo != null) {
          oprot.writeFieldBegin(COURSE_BO_FIELD_DESC);
          struct.courseBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.commentCourseApproveBo != null) {
          oprot.writeFieldBegin(COMMENT_COURSE_APPROVE_BO_FIELD_DESC);
          struct.commentCourseApproveBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class approveCourse_argsTupleSchemeFactory implements SchemeFactory {
      public approveCourse_argsTupleScheme getScheme() {
        return new approveCourse_argsTupleScheme();
      }
    }

    private static class approveCourse_argsTupleScheme extends TupleScheme<approveCourse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, approveCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseBo()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetCommentCourseApproveBo()) {
          optionals.set(2);
        }
        if (struct.isSetUserBo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCourseBo()) {
          struct.courseBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetCommentCourseApproveBo()) {
          struct.commentCourseApproveBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, approveCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.courseBo.read(iprot);
          struct.setCourseBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.commentCourseApproveBo = new com.ishangke.edunav.commoncontract.model.CommentCourseApproveBo();
          struct.commentCourseApproveBo.read(iprot);
          struct.setCommentCourseApproveBoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class approveCourse_result implements org.apache.thrift.TBase<approveCourse_result, approveCourse_result._Fields>, java.io.Serializable, Cloneable, Comparable<approveCourse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("approveCourse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new approveCourse_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new approveCourse_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(approveCourse_result.class, metaDataMap);
    }

    public approveCourse_result() {
    }

    public approveCourse_result(
      com.ishangke.edunav.commoncontract.model.CourseBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public approveCourse_result(approveCourse_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.CourseBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public approveCourse_result deepCopy() {
      return new approveCourse_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getSuccess() {
      return this.success;
    }

    public approveCourse_result setSuccess(com.ishangke.edunav.commoncontract.model.CourseBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public approveCourse_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof approveCourse_result)
        return this.equals((approveCourse_result)that);
      return false;
    }

    public boolean equals(approveCourse_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(approveCourse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("approveCourse_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class approveCourse_resultStandardSchemeFactory implements SchemeFactory {
      public approveCourse_resultStandardScheme getScheme() {
        return new approveCourse_resultStandardScheme();
      }
    }

    private static class approveCourse_resultStandardScheme extends StandardScheme<approveCourse_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, approveCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, approveCourse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class approveCourse_resultTupleSchemeFactory implements SchemeFactory {
      public approveCourse_resultTupleScheme getScheme() {
        return new approveCourse_resultTupleScheme();
      }
    }

    private static class approveCourse_resultTupleScheme extends TupleScheme<approveCourse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, approveCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, approveCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class rejectCourse_args implements org.apache.thrift.TBase<rejectCourse_args, rejectCourse_args._Fields>, java.io.Serializable, Cloneable, Comparable<rejectCourse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rejectCourse_args");

    private static final org.apache.thrift.protocol.TField COURSE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField COMMENT_COURSE_REJECT_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("commentCourseRejectBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rejectCourse_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rejectCourse_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo courseBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.CommentCourseRejectBo commentCourseRejectBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_BO((short)1, "courseBo"),
      PARTNER_BO((short)2, "partnerBo"),
      COMMENT_COURSE_REJECT_BO((short)3, "commentCourseRejectBo"),
      USER_BO((short)4, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_BO
            return COURSE_BO;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // COMMENT_COURSE_REJECT_BO
            return COMMENT_COURSE_REJECT_BO;
          case 4: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.COMMENT_COURSE_REJECT_BO, new org.apache.thrift.meta_data.FieldMetaData("commentCourseRejectBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CommentCourseRejectBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rejectCourse_args.class, metaDataMap);
    }

    public rejectCourse_args() {
    }

    public rejectCourse_args(
      com.ishangke.edunav.commoncontract.model.CourseBo courseBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.CommentCourseRejectBo commentCourseRejectBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseBo = courseBo;
      this.partnerBo = partnerBo;
      this.commentCourseRejectBo = commentCourseRejectBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rejectCourse_args(rejectCourse_args other) {
      if (other.isSetCourseBo()) {
        this.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo(other.courseBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetCommentCourseRejectBo()) {
        this.commentCourseRejectBo = new com.ishangke.edunav.commoncontract.model.CommentCourseRejectBo(other.commentCourseRejectBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public rejectCourse_args deepCopy() {
      return new rejectCourse_args(this);
    }

    @Override
    public void clear() {
      this.courseBo = null;
      this.partnerBo = null;
      this.commentCourseRejectBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getCourseBo() {
      return this.courseBo;
    }

    public rejectCourse_args setCourseBo(com.ishangke.edunav.commoncontract.model.CourseBo courseBo) {
      this.courseBo = courseBo;
      return this;
    }

    public void unsetCourseBo() {
      this.courseBo = null;
    }

    /** Returns true if field courseBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseBo() {
      return this.courseBo != null;
    }

    public void setCourseBoIsSet(boolean value) {
      if (!value) {
        this.courseBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public rejectCourse_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CommentCourseRejectBo getCommentCourseRejectBo() {
      return this.commentCourseRejectBo;
    }

    public rejectCourse_args setCommentCourseRejectBo(com.ishangke.edunav.commoncontract.model.CommentCourseRejectBo commentCourseRejectBo) {
      this.commentCourseRejectBo = commentCourseRejectBo;
      return this;
    }

    public void unsetCommentCourseRejectBo() {
      this.commentCourseRejectBo = null;
    }

    /** Returns true if field commentCourseRejectBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommentCourseRejectBo() {
      return this.commentCourseRejectBo != null;
    }

    public void setCommentCourseRejectBoIsSet(boolean value) {
      if (!value) {
        this.commentCourseRejectBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public rejectCourse_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_BO:
        if (value == null) {
          unsetCourseBo();
        } else {
          setCourseBo((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case COMMENT_COURSE_REJECT_BO:
        if (value == null) {
          unsetCommentCourseRejectBo();
        } else {
          setCommentCourseRejectBo((com.ishangke.edunav.commoncontract.model.CommentCourseRejectBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_BO:
        return getCourseBo();

      case PARTNER_BO:
        return getPartnerBo();

      case COMMENT_COURSE_REJECT_BO:
        return getCommentCourseRejectBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_BO:
        return isSetCourseBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case COMMENT_COURSE_REJECT_BO:
        return isSetCommentCourseRejectBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rejectCourse_args)
        return this.equals((rejectCourse_args)that);
      return false;
    }

    public boolean equals(rejectCourse_args that) {
      if (that == null)
        return false;

      boolean this_present_courseBo = true && this.isSetCourseBo();
      boolean that_present_courseBo = true && that.isSetCourseBo();
      if (this_present_courseBo || that_present_courseBo) {
        if (!(this_present_courseBo && that_present_courseBo))
          return false;
        if (!this.courseBo.equals(that.courseBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_commentCourseRejectBo = true && this.isSetCommentCourseRejectBo();
      boolean that_present_commentCourseRejectBo = true && that.isSetCommentCourseRejectBo();
      if (this_present_commentCourseRejectBo || that_present_commentCourseRejectBo) {
        if (!(this_present_commentCourseRejectBo && that_present_commentCourseRejectBo))
          return false;
        if (!this.commentCourseRejectBo.equals(that.commentCourseRejectBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseBo = true && (isSetCourseBo());
      builder.append(present_courseBo);
      if (present_courseBo)
        builder.append(courseBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_commentCourseRejectBo = true && (isSetCommentCourseRejectBo());
      builder.append(present_commentCourseRejectBo);
      if (present_commentCourseRejectBo)
        builder.append(commentCourseRejectBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(rejectCourse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseBo()).compareTo(other.isSetCourseBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseBo, other.courseBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommentCourseRejectBo()).compareTo(other.isSetCommentCourseRejectBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommentCourseRejectBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentCourseRejectBo, other.commentCourseRejectBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rejectCourse_args(");
      boolean first = true;

      sb.append("courseBo:");
      if (this.courseBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commentCourseRejectBo:");
      if (this.commentCourseRejectBo == null) {
        sb.append("null");
      } else {
        sb.append(this.commentCourseRejectBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseBo != null) {
        courseBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (commentCourseRejectBo != null) {
        commentCourseRejectBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rejectCourse_argsStandardSchemeFactory implements SchemeFactory {
      public rejectCourse_argsStandardScheme getScheme() {
        return new rejectCourse_argsStandardScheme();
      }
    }

    private static class rejectCourse_argsStandardScheme extends StandardScheme<rejectCourse_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rejectCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.courseBo.read(iprot);
                struct.setCourseBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMMENT_COURSE_REJECT_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commentCourseRejectBo = new com.ishangke.edunav.commoncontract.model.CommentCourseRejectBo();
                struct.commentCourseRejectBo.read(iprot);
                struct.setCommentCourseRejectBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rejectCourse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseBo != null) {
          oprot.writeFieldBegin(COURSE_BO_FIELD_DESC);
          struct.courseBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.commentCourseRejectBo != null) {
          oprot.writeFieldBegin(COMMENT_COURSE_REJECT_BO_FIELD_DESC);
          struct.commentCourseRejectBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rejectCourse_argsTupleSchemeFactory implements SchemeFactory {
      public rejectCourse_argsTupleScheme getScheme() {
        return new rejectCourse_argsTupleScheme();
      }
    }

    private static class rejectCourse_argsTupleScheme extends TupleScheme<rejectCourse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rejectCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseBo()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetCommentCourseRejectBo()) {
          optionals.set(2);
        }
        if (struct.isSetUserBo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCourseBo()) {
          struct.courseBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetCommentCourseRejectBo()) {
          struct.commentCourseRejectBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rejectCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.courseBo.read(iprot);
          struct.setCourseBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.commentCourseRejectBo = new com.ishangke.edunav.commoncontract.model.CommentCourseRejectBo();
          struct.commentCourseRejectBo.read(iprot);
          struct.setCommentCourseRejectBoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class rejectCourse_result implements org.apache.thrift.TBase<rejectCourse_result, rejectCourse_result._Fields>, java.io.Serializable, Cloneable, Comparable<rejectCourse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rejectCourse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rejectCourse_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rejectCourse_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rejectCourse_result.class, metaDataMap);
    }

    public rejectCourse_result() {
    }

    public rejectCourse_result(
      com.ishangke.edunav.commoncontract.model.CourseBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rejectCourse_result(rejectCourse_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.CourseBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public rejectCourse_result deepCopy() {
      return new rejectCourse_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getSuccess() {
      return this.success;
    }

    public rejectCourse_result setSuccess(com.ishangke.edunav.commoncontract.model.CourseBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public rejectCourse_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rejectCourse_result)
        return this.equals((rejectCourse_result)that);
      return false;
    }

    public boolean equals(rejectCourse_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(rejectCourse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rejectCourse_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rejectCourse_resultStandardSchemeFactory implements SchemeFactory {
      public rejectCourse_resultStandardScheme getScheme() {
        return new rejectCourse_resultStandardScheme();
      }
    }

    private static class rejectCourse_resultStandardScheme extends StandardScheme<rejectCourse_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rejectCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rejectCourse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rejectCourse_resultTupleSchemeFactory implements SchemeFactory {
      public rejectCourse_resultTupleScheme getScheme() {
        return new rejectCourse_resultTupleScheme();
      }
    }

    private static class rejectCourse_resultTupleScheme extends TupleScheme<rejectCourse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rejectCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rejectCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class cancelCourse_args implements org.apache.thrift.TBase<cancelCourse_args, cancelCourse_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelCourse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelCourse_args");

    private static final org.apache.thrift.protocol.TField COURSE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelCourse_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelCourse_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo courseBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_BO((short)1, "courseBo"),
      PARTNER_BO((short)2, "partnerBo"),
      USER_BO((short)3, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_BO
            return COURSE_BO;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelCourse_args.class, metaDataMap);
    }

    public cancelCourse_args() {
    }

    public cancelCourse_args(
      com.ishangke.edunav.commoncontract.model.CourseBo courseBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseBo = courseBo;
      this.partnerBo = partnerBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelCourse_args(cancelCourse_args other) {
      if (other.isSetCourseBo()) {
        this.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo(other.courseBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public cancelCourse_args deepCopy() {
      return new cancelCourse_args(this);
    }

    @Override
    public void clear() {
      this.courseBo = null;
      this.partnerBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getCourseBo() {
      return this.courseBo;
    }

    public cancelCourse_args setCourseBo(com.ishangke.edunav.commoncontract.model.CourseBo courseBo) {
      this.courseBo = courseBo;
      return this;
    }

    public void unsetCourseBo() {
      this.courseBo = null;
    }

    /** Returns true if field courseBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseBo() {
      return this.courseBo != null;
    }

    public void setCourseBoIsSet(boolean value) {
      if (!value) {
        this.courseBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public cancelCourse_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public cancelCourse_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_BO:
        if (value == null) {
          unsetCourseBo();
        } else {
          setCourseBo((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_BO:
        return getCourseBo();

      case PARTNER_BO:
        return getPartnerBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_BO:
        return isSetCourseBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelCourse_args)
        return this.equals((cancelCourse_args)that);
      return false;
    }

    public boolean equals(cancelCourse_args that) {
      if (that == null)
        return false;

      boolean this_present_courseBo = true && this.isSetCourseBo();
      boolean that_present_courseBo = true && that.isSetCourseBo();
      if (this_present_courseBo || that_present_courseBo) {
        if (!(this_present_courseBo && that_present_courseBo))
          return false;
        if (!this.courseBo.equals(that.courseBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseBo = true && (isSetCourseBo());
      builder.append(present_courseBo);
      if (present_courseBo)
        builder.append(courseBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(cancelCourse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseBo()).compareTo(other.isSetCourseBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseBo, other.courseBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelCourse_args(");
      boolean first = true;

      sb.append("courseBo:");
      if (this.courseBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseBo != null) {
        courseBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelCourse_argsStandardSchemeFactory implements SchemeFactory {
      public cancelCourse_argsStandardScheme getScheme() {
        return new cancelCourse_argsStandardScheme();
      }
    }

    private static class cancelCourse_argsStandardScheme extends StandardScheme<cancelCourse_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.courseBo.read(iprot);
                struct.setCourseBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelCourse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseBo != null) {
          oprot.writeFieldBegin(COURSE_BO_FIELD_DESC);
          struct.courseBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelCourse_argsTupleSchemeFactory implements SchemeFactory {
      public cancelCourse_argsTupleScheme getScheme() {
        return new cancelCourse_argsTupleScheme();
      }
    }

    private static class cancelCourse_argsTupleScheme extends TupleScheme<cancelCourse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseBo()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCourseBo()) {
          struct.courseBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.courseBo.read(iprot);
          struct.setCourseBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class cancelCourse_result implements org.apache.thrift.TBase<cancelCourse_result, cancelCourse_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelCourse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelCourse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelCourse_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelCourse_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelCourse_result.class, metaDataMap);
    }

    public cancelCourse_result() {
    }

    public cancelCourse_result(
      com.ishangke.edunav.commoncontract.model.CourseBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelCourse_result(cancelCourse_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.CourseBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public cancelCourse_result deepCopy() {
      return new cancelCourse_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getSuccess() {
      return this.success;
    }

    public cancelCourse_result setSuccess(com.ishangke.edunav.commoncontract.model.CourseBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public cancelCourse_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelCourse_result)
        return this.equals((cancelCourse_result)that);
      return false;
    }

    public boolean equals(cancelCourse_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(cancelCourse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelCourse_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelCourse_resultStandardSchemeFactory implements SchemeFactory {
      public cancelCourse_resultStandardScheme getScheme() {
        return new cancelCourse_resultStandardScheme();
      }
    }

    private static class cancelCourse_resultStandardScheme extends StandardScheme<cancelCourse_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelCourse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelCourse_resultTupleSchemeFactory implements SchemeFactory {
      public cancelCourse_resultTupleScheme getScheme() {
        return new cancelCourse_resultTupleScheme();
      }
    }

    private static class cancelCourse_resultTupleScheme extends TupleScheme<cancelCourse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class resubmitCourse_args implements org.apache.thrift.TBase<resubmitCourse_args, resubmitCourse_args._Fields>, java.io.Serializable, Cloneable, Comparable<resubmitCourse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resubmitCourse_args");

    private static final org.apache.thrift.protocol.TField COURSE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resubmitCourse_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resubmitCourse_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo courseBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_BO((short)1, "courseBo"),
      PARTNER_BO((short)2, "partnerBo"),
      USER_BO((short)3, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_BO
            return COURSE_BO;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resubmitCourse_args.class, metaDataMap);
    }

    public resubmitCourse_args() {
    }

    public resubmitCourse_args(
      com.ishangke.edunav.commoncontract.model.CourseBo courseBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseBo = courseBo;
      this.partnerBo = partnerBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resubmitCourse_args(resubmitCourse_args other) {
      if (other.isSetCourseBo()) {
        this.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo(other.courseBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public resubmitCourse_args deepCopy() {
      return new resubmitCourse_args(this);
    }

    @Override
    public void clear() {
      this.courseBo = null;
      this.partnerBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getCourseBo() {
      return this.courseBo;
    }

    public resubmitCourse_args setCourseBo(com.ishangke.edunav.commoncontract.model.CourseBo courseBo) {
      this.courseBo = courseBo;
      return this;
    }

    public void unsetCourseBo() {
      this.courseBo = null;
    }

    /** Returns true if field courseBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseBo() {
      return this.courseBo != null;
    }

    public void setCourseBoIsSet(boolean value) {
      if (!value) {
        this.courseBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public resubmitCourse_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public resubmitCourse_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_BO:
        if (value == null) {
          unsetCourseBo();
        } else {
          setCourseBo((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_BO:
        return getCourseBo();

      case PARTNER_BO:
        return getPartnerBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_BO:
        return isSetCourseBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resubmitCourse_args)
        return this.equals((resubmitCourse_args)that);
      return false;
    }

    public boolean equals(resubmitCourse_args that) {
      if (that == null)
        return false;

      boolean this_present_courseBo = true && this.isSetCourseBo();
      boolean that_present_courseBo = true && that.isSetCourseBo();
      if (this_present_courseBo || that_present_courseBo) {
        if (!(this_present_courseBo && that_present_courseBo))
          return false;
        if (!this.courseBo.equals(that.courseBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseBo = true && (isSetCourseBo());
      builder.append(present_courseBo);
      if (present_courseBo)
        builder.append(courseBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(resubmitCourse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseBo()).compareTo(other.isSetCourseBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseBo, other.courseBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resubmitCourse_args(");
      boolean first = true;

      sb.append("courseBo:");
      if (this.courseBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseBo != null) {
        courseBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resubmitCourse_argsStandardSchemeFactory implements SchemeFactory {
      public resubmitCourse_argsStandardScheme getScheme() {
        return new resubmitCourse_argsStandardScheme();
      }
    }

    private static class resubmitCourse_argsStandardScheme extends StandardScheme<resubmitCourse_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resubmitCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.courseBo.read(iprot);
                struct.setCourseBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resubmitCourse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseBo != null) {
          oprot.writeFieldBegin(COURSE_BO_FIELD_DESC);
          struct.courseBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resubmitCourse_argsTupleSchemeFactory implements SchemeFactory {
      public resubmitCourse_argsTupleScheme getScheme() {
        return new resubmitCourse_argsTupleScheme();
      }
    }

    private static class resubmitCourse_argsTupleScheme extends TupleScheme<resubmitCourse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resubmitCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseBo()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCourseBo()) {
          struct.courseBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resubmitCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.courseBo.read(iprot);
          struct.setCourseBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class resubmitCourse_result implements org.apache.thrift.TBase<resubmitCourse_result, resubmitCourse_result._Fields>, java.io.Serializable, Cloneable, Comparable<resubmitCourse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resubmitCourse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resubmitCourse_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resubmitCourse_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resubmitCourse_result.class, metaDataMap);
    }

    public resubmitCourse_result() {
    }

    public resubmitCourse_result(
      com.ishangke.edunav.commoncontract.model.CourseBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resubmitCourse_result(resubmitCourse_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.CourseBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public resubmitCourse_result deepCopy() {
      return new resubmitCourse_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getSuccess() {
      return this.success;
    }

    public resubmitCourse_result setSuccess(com.ishangke.edunav.commoncontract.model.CourseBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public resubmitCourse_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resubmitCourse_result)
        return this.equals((resubmitCourse_result)that);
      return false;
    }

    public boolean equals(resubmitCourse_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(resubmitCourse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resubmitCourse_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resubmitCourse_resultStandardSchemeFactory implements SchemeFactory {
      public resubmitCourse_resultStandardScheme getScheme() {
        return new resubmitCourse_resultStandardScheme();
      }
    }

    private static class resubmitCourse_resultStandardScheme extends StandardScheme<resubmitCourse_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resubmitCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resubmitCourse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resubmitCourse_resultTupleSchemeFactory implements SchemeFactory {
      public resubmitCourse_resultTupleScheme getScheme() {
        return new resubmitCourse_resultTupleScheme();
      }
    }

    private static class resubmitCourse_resultTupleScheme extends TupleScheme<resubmitCourse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resubmitCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resubmitCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class deleteCourse_args implements org.apache.thrift.TBase<deleteCourse_args, deleteCourse_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCourse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCourse_args");

    private static final org.apache.thrift.protocol.TField COURSE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteCourse_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteCourse_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo courseBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_BO((short)1, "courseBo"),
      PARTNER_BO((short)2, "partnerBo"),
      USER_BO((short)3, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_BO
            return COURSE_BO;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCourse_args.class, metaDataMap);
    }

    public deleteCourse_args() {
    }

    public deleteCourse_args(
      com.ishangke.edunav.commoncontract.model.CourseBo courseBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseBo = courseBo;
      this.partnerBo = partnerBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCourse_args(deleteCourse_args other) {
      if (other.isSetCourseBo()) {
        this.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo(other.courseBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public deleteCourse_args deepCopy() {
      return new deleteCourse_args(this);
    }

    @Override
    public void clear() {
      this.courseBo = null;
      this.partnerBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getCourseBo() {
      return this.courseBo;
    }

    public deleteCourse_args setCourseBo(com.ishangke.edunav.commoncontract.model.CourseBo courseBo) {
      this.courseBo = courseBo;
      return this;
    }

    public void unsetCourseBo() {
      this.courseBo = null;
    }

    /** Returns true if field courseBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseBo() {
      return this.courseBo != null;
    }

    public void setCourseBoIsSet(boolean value) {
      if (!value) {
        this.courseBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public deleteCourse_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public deleteCourse_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_BO:
        if (value == null) {
          unsetCourseBo();
        } else {
          setCourseBo((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_BO:
        return getCourseBo();

      case PARTNER_BO:
        return getPartnerBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_BO:
        return isSetCourseBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCourse_args)
        return this.equals((deleteCourse_args)that);
      return false;
    }

    public boolean equals(deleteCourse_args that) {
      if (that == null)
        return false;

      boolean this_present_courseBo = true && this.isSetCourseBo();
      boolean that_present_courseBo = true && that.isSetCourseBo();
      if (this_present_courseBo || that_present_courseBo) {
        if (!(this_present_courseBo && that_present_courseBo))
          return false;
        if (!this.courseBo.equals(that.courseBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseBo = true && (isSetCourseBo());
      builder.append(present_courseBo);
      if (present_courseBo)
        builder.append(courseBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteCourse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseBo()).compareTo(other.isSetCourseBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseBo, other.courseBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteCourse_args(");
      boolean first = true;

      sb.append("courseBo:");
      if (this.courseBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseBo != null) {
        courseBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCourse_argsStandardSchemeFactory implements SchemeFactory {
      public deleteCourse_argsStandardScheme getScheme() {
        return new deleteCourse_argsStandardScheme();
      }
    }

    private static class deleteCourse_argsStandardScheme extends StandardScheme<deleteCourse_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.courseBo.read(iprot);
                struct.setCourseBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCourse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseBo != null) {
          oprot.writeFieldBegin(COURSE_BO_FIELD_DESC);
          struct.courseBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCourse_argsTupleSchemeFactory implements SchemeFactory {
      public deleteCourse_argsTupleScheme getScheme() {
        return new deleteCourse_argsTupleScheme();
      }
    }

    private static class deleteCourse_argsTupleScheme extends TupleScheme<deleteCourse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseBo()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCourseBo()) {
          struct.courseBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.courseBo.read(iprot);
          struct.setCourseBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class deleteCourse_result implements org.apache.thrift.TBase<deleteCourse_result, deleteCourse_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCourse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCourse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteCourse_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteCourse_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCourse_result.class, metaDataMap);
    }

    public deleteCourse_result() {
    }

    public deleteCourse_result(
      com.ishangke.edunav.commoncontract.model.CourseBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCourse_result(deleteCourse_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.CourseBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public deleteCourse_result deepCopy() {
      return new deleteCourse_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getSuccess() {
      return this.success;
    }

    public deleteCourse_result setSuccess(com.ishangke.edunav.commoncontract.model.CourseBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public deleteCourse_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCourse_result)
        return this.equals((deleteCourse_result)that);
      return false;
    }

    public boolean equals(deleteCourse_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteCourse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteCourse_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCourse_resultStandardSchemeFactory implements SchemeFactory {
      public deleteCourse_resultStandardScheme getScheme() {
        return new deleteCourse_resultStandardScheme();
      }
    }

    private static class deleteCourse_resultStandardScheme extends StandardScheme<deleteCourse_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCourse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCourse_resultTupleSchemeFactory implements SchemeFactory {
      public deleteCourse_resultTupleScheme getScheme() {
        return new deleteCourse_resultTupleScheme();
      }
    }

    private static class deleteCourse_resultTupleScheme extends TupleScheme<deleteCourse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class updateCourse_args implements org.apache.thrift.TBase<updateCourse_args, updateCourse_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCourse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCourse_args");

    private static final org.apache.thrift.protocol.TField COURSE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCourse_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCourse_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo courseBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_BO((short)1, "courseBo"),
      PARTNER_BO((short)2, "partnerBo"),
      USER_BO((short)3, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_BO
            return COURSE_BO;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCourse_args.class, metaDataMap);
    }

    public updateCourse_args() {
    }

    public updateCourse_args(
      com.ishangke.edunav.commoncontract.model.CourseBo courseBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseBo = courseBo;
      this.partnerBo = partnerBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCourse_args(updateCourse_args other) {
      if (other.isSetCourseBo()) {
        this.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo(other.courseBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public updateCourse_args deepCopy() {
      return new updateCourse_args(this);
    }

    @Override
    public void clear() {
      this.courseBo = null;
      this.partnerBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getCourseBo() {
      return this.courseBo;
    }

    public updateCourse_args setCourseBo(com.ishangke.edunav.commoncontract.model.CourseBo courseBo) {
      this.courseBo = courseBo;
      return this;
    }

    public void unsetCourseBo() {
      this.courseBo = null;
    }

    /** Returns true if field courseBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseBo() {
      return this.courseBo != null;
    }

    public void setCourseBoIsSet(boolean value) {
      if (!value) {
        this.courseBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public updateCourse_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public updateCourse_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_BO:
        if (value == null) {
          unsetCourseBo();
        } else {
          setCourseBo((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_BO:
        return getCourseBo();

      case PARTNER_BO:
        return getPartnerBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_BO:
        return isSetCourseBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCourse_args)
        return this.equals((updateCourse_args)that);
      return false;
    }

    public boolean equals(updateCourse_args that) {
      if (that == null)
        return false;

      boolean this_present_courseBo = true && this.isSetCourseBo();
      boolean that_present_courseBo = true && that.isSetCourseBo();
      if (this_present_courseBo || that_present_courseBo) {
        if (!(this_present_courseBo && that_present_courseBo))
          return false;
        if (!this.courseBo.equals(that.courseBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseBo = true && (isSetCourseBo());
      builder.append(present_courseBo);
      if (present_courseBo)
        builder.append(courseBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(updateCourse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseBo()).compareTo(other.isSetCourseBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseBo, other.courseBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCourse_args(");
      boolean first = true;

      sb.append("courseBo:");
      if (this.courseBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseBo != null) {
        courseBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCourse_argsStandardSchemeFactory implements SchemeFactory {
      public updateCourse_argsStandardScheme getScheme() {
        return new updateCourse_argsStandardScheme();
      }
    }

    private static class updateCourse_argsStandardScheme extends StandardScheme<updateCourse_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.courseBo.read(iprot);
                struct.setCourseBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCourse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseBo != null) {
          oprot.writeFieldBegin(COURSE_BO_FIELD_DESC);
          struct.courseBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCourse_argsTupleSchemeFactory implements SchemeFactory {
      public updateCourse_argsTupleScheme getScheme() {
        return new updateCourse_argsTupleScheme();
      }
    }

    private static class updateCourse_argsTupleScheme extends TupleScheme<updateCourse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseBo()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCourseBo()) {
          struct.courseBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.courseBo.read(iprot);
          struct.setCourseBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class updateCourse_result implements org.apache.thrift.TBase<updateCourse_result, updateCourse_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCourse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCourse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCourse_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCourse_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCourse_result.class, metaDataMap);
    }

    public updateCourse_result() {
    }

    public updateCourse_result(
      com.ishangke.edunav.commoncontract.model.CourseBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCourse_result(updateCourse_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.CourseBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public updateCourse_result deepCopy() {
      return new updateCourse_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getSuccess() {
      return this.success;
    }

    public updateCourse_result setSuccess(com.ishangke.edunav.commoncontract.model.CourseBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public updateCourse_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCourse_result)
        return this.equals((updateCourse_result)that);
      return false;
    }

    public boolean equals(updateCourse_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(updateCourse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCourse_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCourse_resultStandardSchemeFactory implements SchemeFactory {
      public updateCourse_resultStandardScheme getScheme() {
        return new updateCourse_resultStandardScheme();
      }
    }

    private static class updateCourse_resultStandardScheme extends StandardScheme<updateCourse_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCourse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCourse_resultTupleSchemeFactory implements SchemeFactory {
      public updateCourse_resultTupleScheme getScheme() {
        return new updateCourse_resultTupleScheme();
      }
    }

    private static class updateCourse_resultTupleScheme extends TupleScheme<updateCourse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class commentCourse_args implements org.apache.thrift.TBase<commentCourse_args, commentCourse_args._Fields>, java.io.Serializable, Cloneable, Comparable<commentCourse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commentCourse_args");

    private static final org.apache.thrift.protocol.TField COURSE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COMMENT_COURSE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("commentCourseBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new commentCourse_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new commentCourse_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo courseBo; // required
    public com.ishangke.edunav.commoncontract.model.CommentCourseBo commentCourseBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_BO((short)1, "courseBo"),
      COMMENT_COURSE_BO((short)2, "commentCourseBo"),
      PARTNER_BO((short)3, "partnerBo"),
      USER_BO((short)4, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_BO
            return COURSE_BO;
          case 2: // COMMENT_COURSE_BO
            return COMMENT_COURSE_BO;
          case 3: // PARTNER_BO
            return PARTNER_BO;
          case 4: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.COMMENT_COURSE_BO, new org.apache.thrift.meta_data.FieldMetaData("commentCourseBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CommentCourseBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commentCourse_args.class, metaDataMap);
    }

    public commentCourse_args() {
    }

    public commentCourse_args(
      com.ishangke.edunav.commoncontract.model.CourseBo courseBo,
      com.ishangke.edunav.commoncontract.model.CommentCourseBo commentCourseBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseBo = courseBo;
      this.commentCourseBo = commentCourseBo;
      this.partnerBo = partnerBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commentCourse_args(commentCourse_args other) {
      if (other.isSetCourseBo()) {
        this.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo(other.courseBo);
      }
      if (other.isSetCommentCourseBo()) {
        this.commentCourseBo = new com.ishangke.edunav.commoncontract.model.CommentCourseBo(other.commentCourseBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public commentCourse_args deepCopy() {
      return new commentCourse_args(this);
    }

    @Override
    public void clear() {
      this.courseBo = null;
      this.commentCourseBo = null;
      this.partnerBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getCourseBo() {
      return this.courseBo;
    }

    public commentCourse_args setCourseBo(com.ishangke.edunav.commoncontract.model.CourseBo courseBo) {
      this.courseBo = courseBo;
      return this;
    }

    public void unsetCourseBo() {
      this.courseBo = null;
    }

    /** Returns true if field courseBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseBo() {
      return this.courseBo != null;
    }

    public void setCourseBoIsSet(boolean value) {
      if (!value) {
        this.courseBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CommentCourseBo getCommentCourseBo() {
      return this.commentCourseBo;
    }

    public commentCourse_args setCommentCourseBo(com.ishangke.edunav.commoncontract.model.CommentCourseBo commentCourseBo) {
      this.commentCourseBo = commentCourseBo;
      return this;
    }

    public void unsetCommentCourseBo() {
      this.commentCourseBo = null;
    }

    /** Returns true if field commentCourseBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommentCourseBo() {
      return this.commentCourseBo != null;
    }

    public void setCommentCourseBoIsSet(boolean value) {
      if (!value) {
        this.commentCourseBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public commentCourse_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public commentCourse_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_BO:
        if (value == null) {
          unsetCourseBo();
        } else {
          setCourseBo((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case COMMENT_COURSE_BO:
        if (value == null) {
          unsetCommentCourseBo();
        } else {
          setCommentCourseBo((com.ishangke.edunav.commoncontract.model.CommentCourseBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_BO:
        return getCourseBo();

      case COMMENT_COURSE_BO:
        return getCommentCourseBo();

      case PARTNER_BO:
        return getPartnerBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_BO:
        return isSetCourseBo();
      case COMMENT_COURSE_BO:
        return isSetCommentCourseBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commentCourse_args)
        return this.equals((commentCourse_args)that);
      return false;
    }

    public boolean equals(commentCourse_args that) {
      if (that == null)
        return false;

      boolean this_present_courseBo = true && this.isSetCourseBo();
      boolean that_present_courseBo = true && that.isSetCourseBo();
      if (this_present_courseBo || that_present_courseBo) {
        if (!(this_present_courseBo && that_present_courseBo))
          return false;
        if (!this.courseBo.equals(that.courseBo))
          return false;
      }

      boolean this_present_commentCourseBo = true && this.isSetCommentCourseBo();
      boolean that_present_commentCourseBo = true && that.isSetCommentCourseBo();
      if (this_present_commentCourseBo || that_present_commentCourseBo) {
        if (!(this_present_commentCourseBo && that_present_commentCourseBo))
          return false;
        if (!this.commentCourseBo.equals(that.commentCourseBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseBo = true && (isSetCourseBo());
      builder.append(present_courseBo);
      if (present_courseBo)
        builder.append(courseBo);

      boolean present_commentCourseBo = true && (isSetCommentCourseBo());
      builder.append(present_commentCourseBo);
      if (present_commentCourseBo)
        builder.append(commentCourseBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(commentCourse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseBo()).compareTo(other.isSetCourseBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseBo, other.courseBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommentCourseBo()).compareTo(other.isSetCommentCourseBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommentCourseBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentCourseBo, other.commentCourseBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("commentCourse_args(");
      boolean first = true;

      sb.append("courseBo:");
      if (this.courseBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commentCourseBo:");
      if (this.commentCourseBo == null) {
        sb.append("null");
      } else {
        sb.append(this.commentCourseBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseBo != null) {
        courseBo.validate();
      }
      if (commentCourseBo != null) {
        commentCourseBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class commentCourse_argsStandardSchemeFactory implements SchemeFactory {
      public commentCourse_argsStandardScheme getScheme() {
        return new commentCourse_argsStandardScheme();
      }
    }

    private static class commentCourse_argsStandardScheme extends StandardScheme<commentCourse_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, commentCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.courseBo.read(iprot);
                struct.setCourseBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMENT_COURSE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commentCourseBo = new com.ishangke.edunav.commoncontract.model.CommentCourseBo();
                struct.commentCourseBo.read(iprot);
                struct.setCommentCourseBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, commentCourse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseBo != null) {
          oprot.writeFieldBegin(COURSE_BO_FIELD_DESC);
          struct.courseBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.commentCourseBo != null) {
          oprot.writeFieldBegin(COMMENT_COURSE_BO_FIELD_DESC);
          struct.commentCourseBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class commentCourse_argsTupleSchemeFactory implements SchemeFactory {
      public commentCourse_argsTupleScheme getScheme() {
        return new commentCourse_argsTupleScheme();
      }
    }

    private static class commentCourse_argsTupleScheme extends TupleScheme<commentCourse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commentCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseBo()) {
          optionals.set(0);
        }
        if (struct.isSetCommentCourseBo()) {
          optionals.set(1);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(2);
        }
        if (struct.isSetUserBo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCourseBo()) {
          struct.courseBo.write(oprot);
        }
        if (struct.isSetCommentCourseBo()) {
          struct.commentCourseBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commentCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.courseBo.read(iprot);
          struct.setCourseBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.commentCourseBo = new com.ishangke.edunav.commoncontract.model.CommentCourseBo();
          struct.commentCourseBo.read(iprot);
          struct.setCommentCourseBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class commentCourse_result implements org.apache.thrift.TBase<commentCourse_result, commentCourse_result._Fields>, java.io.Serializable, Cloneable, Comparable<commentCourse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commentCourse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new commentCourse_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new commentCourse_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commentCourse_result.class, metaDataMap);
    }

    public commentCourse_result() {
    }

    public commentCourse_result(
      com.ishangke.edunav.commoncontract.model.CourseBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commentCourse_result(commentCourse_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.CourseBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public commentCourse_result deepCopy() {
      return new commentCourse_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getSuccess() {
      return this.success;
    }

    public commentCourse_result setSuccess(com.ishangke.edunav.commoncontract.model.CourseBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public commentCourse_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commentCourse_result)
        return this.equals((commentCourse_result)that);
      return false;
    }

    public boolean equals(commentCourse_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(commentCourse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("commentCourse_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class commentCourse_resultStandardSchemeFactory implements SchemeFactory {
      public commentCourse_resultStandardScheme getScheme() {
        return new commentCourse_resultStandardScheme();
      }
    }

    private static class commentCourse_resultStandardScheme extends StandardScheme<commentCourse_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, commentCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, commentCourse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class commentCourse_resultTupleSchemeFactory implements SchemeFactory {
      public commentCourse_resultTupleScheme getScheme() {
        return new commentCourse_resultTupleScheme();
      }
    }

    private static class commentCourse_resultTupleScheme extends TupleScheme<commentCourse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commentCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commentCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class queryByKeyword_args implements org.apache.thrift.TBase<queryByKeyword_args, queryByKeyword_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByKeyword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByKeyword_args");

    private static final org.apache.thrift.protocol.TField KEYWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyword", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByKeyword_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByKeyword_argsTupleSchemeFactory());
    }

    public String keyword; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEYWORD((short)1, "keyword");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEYWORD
            return KEYWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEYWORD, new org.apache.thrift.meta_data.FieldMetaData("keyword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByKeyword_args.class, metaDataMap);
    }

    public queryByKeyword_args() {
    }

    public queryByKeyword_args(
      String keyword)
    {
      this();
      this.keyword = keyword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByKeyword_args(queryByKeyword_args other) {
      if (other.isSetKeyword()) {
        this.keyword = other.keyword;
      }
    }

    public queryByKeyword_args deepCopy() {
      return new queryByKeyword_args(this);
    }

    @Override
    public void clear() {
      this.keyword = null;
    }

    public String getKeyword() {
      return this.keyword;
    }

    public queryByKeyword_args setKeyword(String keyword) {
      this.keyword = keyword;
      return this;
    }

    public void unsetKeyword() {
      this.keyword = null;
    }

    /** Returns true if field keyword is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyword() {
      return this.keyword != null;
    }

    public void setKeywordIsSet(boolean value) {
      if (!value) {
        this.keyword = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEYWORD:
        if (value == null) {
          unsetKeyword();
        } else {
          setKeyword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEYWORD:
        return getKeyword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEYWORD:
        return isSetKeyword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByKeyword_args)
        return this.equals((queryByKeyword_args)that);
      return false;
    }

    public boolean equals(queryByKeyword_args that) {
      if (that == null)
        return false;

      boolean this_present_keyword = true && this.isSetKeyword();
      boolean that_present_keyword = true && that.isSetKeyword();
      if (this_present_keyword || that_present_keyword) {
        if (!(this_present_keyword && that_present_keyword))
          return false;
        if (!this.keyword.equals(that.keyword))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_keyword = true && (isSetKeyword());
      builder.append(present_keyword);
      if (present_keyword)
        builder.append(keyword);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(queryByKeyword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKeyword()).compareTo(other.isSetKeyword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyword, other.keyword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByKeyword_args(");
      boolean first = true;

      sb.append("keyword:");
      if (this.keyword == null) {
        sb.append("null");
      } else {
        sb.append(this.keyword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByKeyword_argsStandardSchemeFactory implements SchemeFactory {
      public queryByKeyword_argsStandardScheme getScheme() {
        return new queryByKeyword_argsStandardScheme();
      }
    }

    private static class queryByKeyword_argsStandardScheme extends StandardScheme<queryByKeyword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByKeyword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEYWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keyword = iprot.readString();
                struct.setKeywordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByKeyword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.keyword != null) {
          oprot.writeFieldBegin(KEYWORD_FIELD_DESC);
          oprot.writeString(struct.keyword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByKeyword_argsTupleSchemeFactory implements SchemeFactory {
      public queryByKeyword_argsTupleScheme getScheme() {
        return new queryByKeyword_argsTupleScheme();
      }
    }

    private static class queryByKeyword_argsTupleScheme extends TupleScheme<queryByKeyword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByKeyword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKeyword()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKeyword()) {
          oprot.writeString(struct.keyword);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByKeyword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.keyword = iprot.readString();
          struct.setKeywordIsSet(true);
        }
      }
    }

  }

  public static class queryByKeyword_result implements org.apache.thrift.TBase<queryByKeyword_result, queryByKeyword_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByKeyword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByKeyword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByKeyword_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByKeyword_resultTupleSchemeFactory());
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseBo> success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class))));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByKeyword_result.class, metaDataMap);
    }

    public queryByKeyword_result() {
    }

    public queryByKeyword_result(
      List<com.ishangke.edunav.commoncontract.model.CourseBo> success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByKeyword_result(queryByKeyword_result other) {
      if (other.isSetSuccess()) {
        List<com.ishangke.edunav.commoncontract.model.CourseBo> __this__success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseBo>(other.success.size());
        for (com.ishangke.edunav.commoncontract.model.CourseBo other_element : other.success) {
          __this__success.add(new com.ishangke.edunav.commoncontract.model.CourseBo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public queryByKeyword_result deepCopy() {
      return new queryByKeyword_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.ishangke.edunav.commoncontract.model.CourseBo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.ishangke.edunav.commoncontract.model.CourseBo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseBo>();
      }
      this.success.add(elem);
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseBo> getSuccess() {
      return this.success;
    }

    public queryByKeyword_result setSuccess(List<com.ishangke.edunav.commoncontract.model.CourseBo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public queryByKeyword_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.ishangke.edunav.commoncontract.model.CourseBo>)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByKeyword_result)
        return this.equals((queryByKeyword_result)that);
      return false;
    }

    public boolean equals(queryByKeyword_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(queryByKeyword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByKeyword_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByKeyword_resultStandardSchemeFactory implements SchemeFactory {
      public queryByKeyword_resultStandardScheme getScheme() {
        return new queryByKeyword_resultStandardScheme();
      }
    }

    private static class queryByKeyword_resultStandardScheme extends StandardScheme<queryByKeyword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByKeyword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseBo>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    com.ishangke.edunav.commoncontract.model.CourseBo _elem2;
                    _elem2 = new com.ishangke.edunav.commoncontract.model.CourseBo();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByKeyword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.ishangke.edunav.commoncontract.model.CourseBo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByKeyword_resultTupleSchemeFactory implements SchemeFactory {
      public queryByKeyword_resultTupleScheme getScheme() {
        return new queryByKeyword_resultTupleScheme();
      }
    }

    private static class queryByKeyword_resultTupleScheme extends TupleScheme<queryByKeyword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByKeyword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.ishangke.edunav.commoncontract.model.CourseBo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByKeyword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseBo>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              com.ishangke.edunav.commoncontract.model.CourseBo _elem7;
              _elem7 = new com.ishangke.edunav.commoncontract.model.CourseBo();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class queryByPartner_args implements org.apache.thrift.TBase<queryByPartner_args, queryByPartner_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByPartner_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByPartner_args");

    private static final org.apache.thrift.protocol.TField COURSE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField PAGINATION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("paginationBo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByPartner_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByPartner_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo courseBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required
    public com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_BO((short)1, "courseBo"),
      PARTNER_BO((short)2, "partnerBo"),
      USER_BO((short)3, "userBo"),
      PAGINATION_BO((short)4, "paginationBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_BO
            return COURSE_BO;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // USER_BO
            return USER_BO;
          case 4: // PAGINATION_BO
            return PAGINATION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.PAGINATION_BO, new org.apache.thrift.meta_data.FieldMetaData("paginationBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PaginationBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByPartner_args.class, metaDataMap);
    }

    public queryByPartner_args() {
    }

    public queryByPartner_args(
      com.ishangke.edunav.commoncontract.model.CourseBo courseBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo,
      com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo)
    {
      this();
      this.courseBo = courseBo;
      this.partnerBo = partnerBo;
      this.userBo = userBo;
      this.paginationBo = paginationBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByPartner_args(queryByPartner_args other) {
      if (other.isSetCourseBo()) {
        this.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo(other.courseBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
      if (other.isSetPaginationBo()) {
        this.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo(other.paginationBo);
      }
    }

    public queryByPartner_args deepCopy() {
      return new queryByPartner_args(this);
    }

    @Override
    public void clear() {
      this.courseBo = null;
      this.partnerBo = null;
      this.userBo = null;
      this.paginationBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getCourseBo() {
      return this.courseBo;
    }

    public queryByPartner_args setCourseBo(com.ishangke.edunav.commoncontract.model.CourseBo courseBo) {
      this.courseBo = courseBo;
      return this;
    }

    public void unsetCourseBo() {
      this.courseBo = null;
    }

    /** Returns true if field courseBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseBo() {
      return this.courseBo != null;
    }

    public void setCourseBoIsSet(boolean value) {
      if (!value) {
        this.courseBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public queryByPartner_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public queryByPartner_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PaginationBo getPaginationBo() {
      return this.paginationBo;
    }

    public queryByPartner_args setPaginationBo(com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) {
      this.paginationBo = paginationBo;
      return this;
    }

    public void unsetPaginationBo() {
      this.paginationBo = null;
    }

    /** Returns true if field paginationBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPaginationBo() {
      return this.paginationBo != null;
    }

    public void setPaginationBoIsSet(boolean value) {
      if (!value) {
        this.paginationBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_BO:
        if (value == null) {
          unsetCourseBo();
        } else {
          setCourseBo((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case PAGINATION_BO:
        if (value == null) {
          unsetPaginationBo();
        } else {
          setPaginationBo((com.ishangke.edunav.commoncontract.model.PaginationBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_BO:
        return getCourseBo();

      case PARTNER_BO:
        return getPartnerBo();

      case USER_BO:
        return getUserBo();

      case PAGINATION_BO:
        return getPaginationBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_BO:
        return isSetCourseBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case USER_BO:
        return isSetUserBo();
      case PAGINATION_BO:
        return isSetPaginationBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByPartner_args)
        return this.equals((queryByPartner_args)that);
      return false;
    }

    public boolean equals(queryByPartner_args that) {
      if (that == null)
        return false;

      boolean this_present_courseBo = true && this.isSetCourseBo();
      boolean that_present_courseBo = true && that.isSetCourseBo();
      if (this_present_courseBo || that_present_courseBo) {
        if (!(this_present_courseBo && that_present_courseBo))
          return false;
        if (!this.courseBo.equals(that.courseBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      boolean this_present_paginationBo = true && this.isSetPaginationBo();
      boolean that_present_paginationBo = true && that.isSetPaginationBo();
      if (this_present_paginationBo || that_present_paginationBo) {
        if (!(this_present_paginationBo && that_present_paginationBo))
          return false;
        if (!this.paginationBo.equals(that.paginationBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseBo = true && (isSetCourseBo());
      builder.append(present_courseBo);
      if (present_courseBo)
        builder.append(courseBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      boolean present_paginationBo = true && (isSetPaginationBo());
      builder.append(present_paginationBo);
      if (present_paginationBo)
        builder.append(paginationBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(queryByPartner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseBo()).compareTo(other.isSetCourseBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseBo, other.courseBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPaginationBo()).compareTo(other.isSetPaginationBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaginationBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paginationBo, other.paginationBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByPartner_args(");
      boolean first = true;

      sb.append("courseBo:");
      if (this.courseBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paginationBo:");
      if (this.paginationBo == null) {
        sb.append("null");
      } else {
        sb.append(this.paginationBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseBo != null) {
        courseBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
      if (paginationBo != null) {
        paginationBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByPartner_argsStandardSchemeFactory implements SchemeFactory {
      public queryByPartner_argsStandardScheme getScheme() {
        return new queryByPartner_argsStandardScheme();
      }
    }

    private static class queryByPartner_argsStandardScheme extends StandardScheme<queryByPartner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByPartner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.courseBo.read(iprot);
                struct.setCourseBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGINATION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo();
                struct.paginationBo.read(iprot);
                struct.setPaginationBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByPartner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseBo != null) {
          oprot.writeFieldBegin(COURSE_BO_FIELD_DESC);
          struct.courseBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.paginationBo != null) {
          oprot.writeFieldBegin(PAGINATION_BO_FIELD_DESC);
          struct.paginationBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByPartner_argsTupleSchemeFactory implements SchemeFactory {
      public queryByPartner_argsTupleScheme getScheme() {
        return new queryByPartner_argsTupleScheme();
      }
    }

    private static class queryByPartner_argsTupleScheme extends TupleScheme<queryByPartner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByPartner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseBo()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        if (struct.isSetPaginationBo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCourseBo()) {
          struct.courseBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
        if (struct.isSetPaginationBo()) {
          struct.paginationBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByPartner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.courseBo.read(iprot);
          struct.setCourseBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo();
          struct.paginationBo.read(iprot);
          struct.setPaginationBoIsSet(true);
        }
      }
    }

  }

  public static class queryByPartner_result implements org.apache.thrift.TBase<queryByPartner_result, queryByPartner_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByPartner_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByPartner_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByPartner_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByPartner_resultTupleSchemeFactory());
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseBo> success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class))));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByPartner_result.class, metaDataMap);
    }

    public queryByPartner_result() {
    }

    public queryByPartner_result(
      List<com.ishangke.edunav.commoncontract.model.CourseBo> success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByPartner_result(queryByPartner_result other) {
      if (other.isSetSuccess()) {
        List<com.ishangke.edunav.commoncontract.model.CourseBo> __this__success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseBo>(other.success.size());
        for (com.ishangke.edunav.commoncontract.model.CourseBo other_element : other.success) {
          __this__success.add(new com.ishangke.edunav.commoncontract.model.CourseBo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public queryByPartner_result deepCopy() {
      return new queryByPartner_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.ishangke.edunav.commoncontract.model.CourseBo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.ishangke.edunav.commoncontract.model.CourseBo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseBo>();
      }
      this.success.add(elem);
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseBo> getSuccess() {
      return this.success;
    }

    public queryByPartner_result setSuccess(List<com.ishangke.edunav.commoncontract.model.CourseBo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public queryByPartner_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.ishangke.edunav.commoncontract.model.CourseBo>)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByPartner_result)
        return this.equals((queryByPartner_result)that);
      return false;
    }

    public boolean equals(queryByPartner_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(queryByPartner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByPartner_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByPartner_resultStandardSchemeFactory implements SchemeFactory {
      public queryByPartner_resultStandardScheme getScheme() {
        return new queryByPartner_resultStandardScheme();
      }
    }

    private static class queryByPartner_resultStandardScheme extends StandardScheme<queryByPartner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByPartner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseBo>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    com.ishangke.edunav.commoncontract.model.CourseBo _elem10;
                    _elem10 = new com.ishangke.edunav.commoncontract.model.CourseBo();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByPartner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.ishangke.edunav.commoncontract.model.CourseBo _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByPartner_resultTupleSchemeFactory implements SchemeFactory {
      public queryByPartner_resultTupleScheme getScheme() {
        return new queryByPartner_resultTupleScheme();
      }
    }

    private static class queryByPartner_resultTupleScheme extends TupleScheme<queryByPartner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByPartner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.ishangke.edunav.commoncontract.model.CourseBo _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByPartner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseBo>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              com.ishangke.edunav.commoncontract.model.CourseBo _elem15;
              _elem15 = new com.ishangke.edunav.commoncontract.model.CourseBo();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class queryByFilter_args implements org.apache.thrift.TBase<queryByFilter_args, queryByFilter_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByFilter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByFilter_args");

    private static final org.apache.thrift.protocol.TField COURSE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CATEGORY_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField LOCATION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("locationBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CIRCLE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("circleBo", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField PAGINATION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("paginationBo", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByFilter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByFilter_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo courseBo; // required
    public com.ishangke.edunav.commoncontract.model.CategoryBo categoryBo; // required
    public com.ishangke.edunav.commoncontract.model.LocationBo locationBo; // required
    public com.ishangke.edunav.commoncontract.model.CircleBo circleBo; // required
    public com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_BO((short)1, "courseBo"),
      CATEGORY_BO((short)2, "categoryBo"),
      LOCATION_BO((short)3, "locationBo"),
      CIRCLE_BO((short)4, "circleBo"),
      PAGINATION_BO((short)5, "paginationBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_BO
            return COURSE_BO;
          case 2: // CATEGORY_BO
            return CATEGORY_BO;
          case 3: // LOCATION_BO
            return LOCATION_BO;
          case 4: // CIRCLE_BO
            return CIRCLE_BO;
          case 5: // PAGINATION_BO
            return PAGINATION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.CATEGORY_BO, new org.apache.thrift.meta_data.FieldMetaData("categoryBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CategoryBo.class)));
      tmpMap.put(_Fields.LOCATION_BO, new org.apache.thrift.meta_data.FieldMetaData("locationBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.LocationBo.class)));
      tmpMap.put(_Fields.CIRCLE_BO, new org.apache.thrift.meta_data.FieldMetaData("circleBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CircleBo.class)));
      tmpMap.put(_Fields.PAGINATION_BO, new org.apache.thrift.meta_data.FieldMetaData("paginationBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PaginationBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByFilter_args.class, metaDataMap);
    }

    public queryByFilter_args() {
    }

    public queryByFilter_args(
      com.ishangke.edunav.commoncontract.model.CourseBo courseBo,
      com.ishangke.edunav.commoncontract.model.CategoryBo categoryBo,
      com.ishangke.edunav.commoncontract.model.LocationBo locationBo,
      com.ishangke.edunav.commoncontract.model.CircleBo circleBo,
      com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo)
    {
      this();
      this.courseBo = courseBo;
      this.categoryBo = categoryBo;
      this.locationBo = locationBo;
      this.circleBo = circleBo;
      this.paginationBo = paginationBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByFilter_args(queryByFilter_args other) {
      if (other.isSetCourseBo()) {
        this.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo(other.courseBo);
      }
      if (other.isSetCategoryBo()) {
        this.categoryBo = new com.ishangke.edunav.commoncontract.model.CategoryBo(other.categoryBo);
      }
      if (other.isSetLocationBo()) {
        this.locationBo = new com.ishangke.edunav.commoncontract.model.LocationBo(other.locationBo);
      }
      if (other.isSetCircleBo()) {
        this.circleBo = new com.ishangke.edunav.commoncontract.model.CircleBo(other.circleBo);
      }
      if (other.isSetPaginationBo()) {
        this.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo(other.paginationBo);
      }
    }

    public queryByFilter_args deepCopy() {
      return new queryByFilter_args(this);
    }

    @Override
    public void clear() {
      this.courseBo = null;
      this.categoryBo = null;
      this.locationBo = null;
      this.circleBo = null;
      this.paginationBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getCourseBo() {
      return this.courseBo;
    }

    public queryByFilter_args setCourseBo(com.ishangke.edunav.commoncontract.model.CourseBo courseBo) {
      this.courseBo = courseBo;
      return this;
    }

    public void unsetCourseBo() {
      this.courseBo = null;
    }

    /** Returns true if field courseBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseBo() {
      return this.courseBo != null;
    }

    public void setCourseBoIsSet(boolean value) {
      if (!value) {
        this.courseBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CategoryBo getCategoryBo() {
      return this.categoryBo;
    }

    public queryByFilter_args setCategoryBo(com.ishangke.edunav.commoncontract.model.CategoryBo categoryBo) {
      this.categoryBo = categoryBo;
      return this;
    }

    public void unsetCategoryBo() {
      this.categoryBo = null;
    }

    /** Returns true if field categoryBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryBo() {
      return this.categoryBo != null;
    }

    public void setCategoryBoIsSet(boolean value) {
      if (!value) {
        this.categoryBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.LocationBo getLocationBo() {
      return this.locationBo;
    }

    public queryByFilter_args setLocationBo(com.ishangke.edunav.commoncontract.model.LocationBo locationBo) {
      this.locationBo = locationBo;
      return this;
    }

    public void unsetLocationBo() {
      this.locationBo = null;
    }

    /** Returns true if field locationBo is set (has been assigned a value) and false otherwise */
    public boolean isSetLocationBo() {
      return this.locationBo != null;
    }

    public void setLocationBoIsSet(boolean value) {
      if (!value) {
        this.locationBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CircleBo getCircleBo() {
      return this.circleBo;
    }

    public queryByFilter_args setCircleBo(com.ishangke.edunav.commoncontract.model.CircleBo circleBo) {
      this.circleBo = circleBo;
      return this;
    }

    public void unsetCircleBo() {
      this.circleBo = null;
    }

    /** Returns true if field circleBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCircleBo() {
      return this.circleBo != null;
    }

    public void setCircleBoIsSet(boolean value) {
      if (!value) {
        this.circleBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PaginationBo getPaginationBo() {
      return this.paginationBo;
    }

    public queryByFilter_args setPaginationBo(com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) {
      this.paginationBo = paginationBo;
      return this;
    }

    public void unsetPaginationBo() {
      this.paginationBo = null;
    }

    /** Returns true if field paginationBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPaginationBo() {
      return this.paginationBo != null;
    }

    public void setPaginationBoIsSet(boolean value) {
      if (!value) {
        this.paginationBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_BO:
        if (value == null) {
          unsetCourseBo();
        } else {
          setCourseBo((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case CATEGORY_BO:
        if (value == null) {
          unsetCategoryBo();
        } else {
          setCategoryBo((com.ishangke.edunav.commoncontract.model.CategoryBo)value);
        }
        break;

      case LOCATION_BO:
        if (value == null) {
          unsetLocationBo();
        } else {
          setLocationBo((com.ishangke.edunav.commoncontract.model.LocationBo)value);
        }
        break;

      case CIRCLE_BO:
        if (value == null) {
          unsetCircleBo();
        } else {
          setCircleBo((com.ishangke.edunav.commoncontract.model.CircleBo)value);
        }
        break;

      case PAGINATION_BO:
        if (value == null) {
          unsetPaginationBo();
        } else {
          setPaginationBo((com.ishangke.edunav.commoncontract.model.PaginationBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_BO:
        return getCourseBo();

      case CATEGORY_BO:
        return getCategoryBo();

      case LOCATION_BO:
        return getLocationBo();

      case CIRCLE_BO:
        return getCircleBo();

      case PAGINATION_BO:
        return getPaginationBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_BO:
        return isSetCourseBo();
      case CATEGORY_BO:
        return isSetCategoryBo();
      case LOCATION_BO:
        return isSetLocationBo();
      case CIRCLE_BO:
        return isSetCircleBo();
      case PAGINATION_BO:
        return isSetPaginationBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByFilter_args)
        return this.equals((queryByFilter_args)that);
      return false;
    }

    public boolean equals(queryByFilter_args that) {
      if (that == null)
        return false;

      boolean this_present_courseBo = true && this.isSetCourseBo();
      boolean that_present_courseBo = true && that.isSetCourseBo();
      if (this_present_courseBo || that_present_courseBo) {
        if (!(this_present_courseBo && that_present_courseBo))
          return false;
        if (!this.courseBo.equals(that.courseBo))
          return false;
      }

      boolean this_present_categoryBo = true && this.isSetCategoryBo();
      boolean that_present_categoryBo = true && that.isSetCategoryBo();
      if (this_present_categoryBo || that_present_categoryBo) {
        if (!(this_present_categoryBo && that_present_categoryBo))
          return false;
        if (!this.categoryBo.equals(that.categoryBo))
          return false;
      }

      boolean this_present_locationBo = true && this.isSetLocationBo();
      boolean that_present_locationBo = true && that.isSetLocationBo();
      if (this_present_locationBo || that_present_locationBo) {
        if (!(this_present_locationBo && that_present_locationBo))
          return false;
        if (!this.locationBo.equals(that.locationBo))
          return false;
      }

      boolean this_present_circleBo = true && this.isSetCircleBo();
      boolean that_present_circleBo = true && that.isSetCircleBo();
      if (this_present_circleBo || that_present_circleBo) {
        if (!(this_present_circleBo && that_present_circleBo))
          return false;
        if (!this.circleBo.equals(that.circleBo))
          return false;
      }

      boolean this_present_paginationBo = true && this.isSetPaginationBo();
      boolean that_present_paginationBo = true && that.isSetPaginationBo();
      if (this_present_paginationBo || that_present_paginationBo) {
        if (!(this_present_paginationBo && that_present_paginationBo))
          return false;
        if (!this.paginationBo.equals(that.paginationBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseBo = true && (isSetCourseBo());
      builder.append(present_courseBo);
      if (present_courseBo)
        builder.append(courseBo);

      boolean present_categoryBo = true && (isSetCategoryBo());
      builder.append(present_categoryBo);
      if (present_categoryBo)
        builder.append(categoryBo);

      boolean present_locationBo = true && (isSetLocationBo());
      builder.append(present_locationBo);
      if (present_locationBo)
        builder.append(locationBo);

      boolean present_circleBo = true && (isSetCircleBo());
      builder.append(present_circleBo);
      if (present_circleBo)
        builder.append(circleBo);

      boolean present_paginationBo = true && (isSetPaginationBo());
      builder.append(present_paginationBo);
      if (present_paginationBo)
        builder.append(paginationBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(queryByFilter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseBo()).compareTo(other.isSetCourseBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseBo, other.courseBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCategoryBo()).compareTo(other.isSetCategoryBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryBo, other.categoryBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocationBo()).compareTo(other.isSetLocationBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocationBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationBo, other.locationBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCircleBo()).compareTo(other.isSetCircleBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCircleBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.circleBo, other.circleBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPaginationBo()).compareTo(other.isSetPaginationBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaginationBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paginationBo, other.paginationBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByFilter_args(");
      boolean first = true;

      sb.append("courseBo:");
      if (this.courseBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("categoryBo:");
      if (this.categoryBo == null) {
        sb.append("null");
      } else {
        sb.append(this.categoryBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locationBo:");
      if (this.locationBo == null) {
        sb.append("null");
      } else {
        sb.append(this.locationBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("circleBo:");
      if (this.circleBo == null) {
        sb.append("null");
      } else {
        sb.append(this.circleBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paginationBo:");
      if (this.paginationBo == null) {
        sb.append("null");
      } else {
        sb.append(this.paginationBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseBo != null) {
        courseBo.validate();
      }
      if (categoryBo != null) {
        categoryBo.validate();
      }
      if (locationBo != null) {
        locationBo.validate();
      }
      if (circleBo != null) {
        circleBo.validate();
      }
      if (paginationBo != null) {
        paginationBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByFilter_argsStandardSchemeFactory implements SchemeFactory {
      public queryByFilter_argsStandardScheme getScheme() {
        return new queryByFilter_argsStandardScheme();
      }
    }

    private static class queryByFilter_argsStandardScheme extends StandardScheme<queryByFilter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.courseBo.read(iprot);
                struct.setCourseBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CATEGORY_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.categoryBo = new com.ishangke.edunav.commoncontract.model.CategoryBo();
                struct.categoryBo.read(iprot);
                struct.setCategoryBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOCATION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.locationBo = new com.ishangke.edunav.commoncontract.model.LocationBo();
                struct.locationBo.read(iprot);
                struct.setLocationBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CIRCLE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.circleBo = new com.ishangke.edunav.commoncontract.model.CircleBo();
                struct.circleBo.read(iprot);
                struct.setCircleBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PAGINATION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo();
                struct.paginationBo.read(iprot);
                struct.setPaginationBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByFilter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseBo != null) {
          oprot.writeFieldBegin(COURSE_BO_FIELD_DESC);
          struct.courseBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.categoryBo != null) {
          oprot.writeFieldBegin(CATEGORY_BO_FIELD_DESC);
          struct.categoryBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.locationBo != null) {
          oprot.writeFieldBegin(LOCATION_BO_FIELD_DESC);
          struct.locationBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.circleBo != null) {
          oprot.writeFieldBegin(CIRCLE_BO_FIELD_DESC);
          struct.circleBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.paginationBo != null) {
          oprot.writeFieldBegin(PAGINATION_BO_FIELD_DESC);
          struct.paginationBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByFilter_argsTupleSchemeFactory implements SchemeFactory {
      public queryByFilter_argsTupleScheme getScheme() {
        return new queryByFilter_argsTupleScheme();
      }
    }

    private static class queryByFilter_argsTupleScheme extends TupleScheme<queryByFilter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByFilter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseBo()) {
          optionals.set(0);
        }
        if (struct.isSetCategoryBo()) {
          optionals.set(1);
        }
        if (struct.isSetLocationBo()) {
          optionals.set(2);
        }
        if (struct.isSetCircleBo()) {
          optionals.set(3);
        }
        if (struct.isSetPaginationBo()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetCourseBo()) {
          struct.courseBo.write(oprot);
        }
        if (struct.isSetCategoryBo()) {
          struct.categoryBo.write(oprot);
        }
        if (struct.isSetLocationBo()) {
          struct.locationBo.write(oprot);
        }
        if (struct.isSetCircleBo()) {
          struct.circleBo.write(oprot);
        }
        if (struct.isSetPaginationBo()) {
          struct.paginationBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByFilter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.courseBo.read(iprot);
          struct.setCourseBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.categoryBo = new com.ishangke.edunav.commoncontract.model.CategoryBo();
          struct.categoryBo.read(iprot);
          struct.setCategoryBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.locationBo = new com.ishangke.edunav.commoncontract.model.LocationBo();
          struct.locationBo.read(iprot);
          struct.setLocationBoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.circleBo = new com.ishangke.edunav.commoncontract.model.CircleBo();
          struct.circleBo.read(iprot);
          struct.setCircleBoIsSet(true);
        }
        if (incoming.get(4)) {
          struct.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo();
          struct.paginationBo.read(iprot);
          struct.setPaginationBoIsSet(true);
        }
      }
    }

  }

  public static class queryByFilter_result implements org.apache.thrift.TBase<queryByFilter_result, queryByFilter_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByFilter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByFilter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByFilter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByFilter_resultTupleSchemeFactory());
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseBo> success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class))));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByFilter_result.class, metaDataMap);
    }

    public queryByFilter_result() {
    }

    public queryByFilter_result(
      List<com.ishangke.edunav.commoncontract.model.CourseBo> success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByFilter_result(queryByFilter_result other) {
      if (other.isSetSuccess()) {
        List<com.ishangke.edunav.commoncontract.model.CourseBo> __this__success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseBo>(other.success.size());
        for (com.ishangke.edunav.commoncontract.model.CourseBo other_element : other.success) {
          __this__success.add(new com.ishangke.edunav.commoncontract.model.CourseBo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public queryByFilter_result deepCopy() {
      return new queryByFilter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.ishangke.edunav.commoncontract.model.CourseBo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.ishangke.edunav.commoncontract.model.CourseBo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseBo>();
      }
      this.success.add(elem);
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseBo> getSuccess() {
      return this.success;
    }

    public queryByFilter_result setSuccess(List<com.ishangke.edunav.commoncontract.model.CourseBo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public queryByFilter_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.ishangke.edunav.commoncontract.model.CourseBo>)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByFilter_result)
        return this.equals((queryByFilter_result)that);
      return false;
    }

    public boolean equals(queryByFilter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(queryByFilter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByFilter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByFilter_resultStandardSchemeFactory implements SchemeFactory {
      public queryByFilter_resultStandardScheme getScheme() {
        return new queryByFilter_resultStandardScheme();
      }
    }

    private static class queryByFilter_resultStandardScheme extends StandardScheme<queryByFilter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseBo>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    com.ishangke.edunav.commoncontract.model.CourseBo _elem18;
                    _elem18 = new com.ishangke.edunav.commoncontract.model.CourseBo();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByFilter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.ishangke.edunav.commoncontract.model.CourseBo _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByFilter_resultTupleSchemeFactory implements SchemeFactory {
      public queryByFilter_resultTupleScheme getScheme() {
        return new queryByFilter_resultTupleScheme();
      }
    }

    private static class queryByFilter_resultTupleScheme extends TupleScheme<queryByFilter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByFilter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.ishangke.edunav.commoncontract.model.CourseBo _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByFilter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseBo>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              com.ishangke.edunav.commoncontract.model.CourseBo _elem23;
              _elem23 = new com.ishangke.edunav.commoncontract.model.CourseBo();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class queryById_args implements org.apache.thrift.TBase<queryById_args, queryById_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryById_args");

    private static final org.apache.thrift.protocol.TField COURSE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryById_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo courseBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_BO((short)1, "courseBo"),
      USER_BO((short)2, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_BO
            return COURSE_BO;
          case 2: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryById_args.class, metaDataMap);
    }

    public queryById_args() {
    }

    public queryById_args(
      com.ishangke.edunav.commoncontract.model.CourseBo courseBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseBo = courseBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryById_args(queryById_args other) {
      if (other.isSetCourseBo()) {
        this.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo(other.courseBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public queryById_args deepCopy() {
      return new queryById_args(this);
    }

    @Override
    public void clear() {
      this.courseBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getCourseBo() {
      return this.courseBo;
    }

    public queryById_args setCourseBo(com.ishangke.edunav.commoncontract.model.CourseBo courseBo) {
      this.courseBo = courseBo;
      return this;
    }

    public void unsetCourseBo() {
      this.courseBo = null;
    }

    /** Returns true if field courseBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseBo() {
      return this.courseBo != null;
    }

    public void setCourseBoIsSet(boolean value) {
      if (!value) {
        this.courseBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public queryById_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_BO:
        if (value == null) {
          unsetCourseBo();
        } else {
          setCourseBo((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_BO:
        return getCourseBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_BO:
        return isSetCourseBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryById_args)
        return this.equals((queryById_args)that);
      return false;
    }

    public boolean equals(queryById_args that) {
      if (that == null)
        return false;

      boolean this_present_courseBo = true && this.isSetCourseBo();
      boolean that_present_courseBo = true && that.isSetCourseBo();
      if (this_present_courseBo || that_present_courseBo) {
        if (!(this_present_courseBo && that_present_courseBo))
          return false;
        if (!this.courseBo.equals(that.courseBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseBo = true && (isSetCourseBo());
      builder.append(present_courseBo);
      if (present_courseBo)
        builder.append(courseBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(queryById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseBo()).compareTo(other.isSetCourseBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseBo, other.courseBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryById_args(");
      boolean first = true;

      sb.append("courseBo:");
      if (this.courseBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseBo != null) {
        courseBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryById_argsStandardSchemeFactory implements SchemeFactory {
      public queryById_argsStandardScheme getScheme() {
        return new queryById_argsStandardScheme();
      }
    }

    private static class queryById_argsStandardScheme extends StandardScheme<queryById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.courseBo.read(iprot);
                struct.setCourseBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseBo != null) {
          oprot.writeFieldBegin(COURSE_BO_FIELD_DESC);
          struct.courseBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryById_argsTupleSchemeFactory implements SchemeFactory {
      public queryById_argsTupleScheme getScheme() {
        return new queryById_argsTupleScheme();
      }
    }

    private static class queryById_argsTupleScheme extends TupleScheme<queryById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseBo()) {
          optionals.set(0);
        }
        if (struct.isSetUserBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCourseBo()) {
          struct.courseBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.courseBo.read(iprot);
          struct.setCourseBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class queryById_result implements org.apache.thrift.TBase<queryById_result, queryById_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryById_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryById_result.class, metaDataMap);
    }

    public queryById_result() {
    }

    public queryById_result(
      com.ishangke.edunav.commoncontract.model.CourseBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryById_result(queryById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.CourseBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public queryById_result deepCopy() {
      return new queryById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getSuccess() {
      return this.success;
    }

    public queryById_result setSuccess(com.ishangke.edunav.commoncontract.model.CourseBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public queryById_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryById_result)
        return this.equals((queryById_result)that);
      return false;
    }

    public boolean equals(queryById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(queryById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryById_resultStandardSchemeFactory implements SchemeFactory {
      public queryById_resultStandardScheme getScheme() {
        return new queryById_resultStandardScheme();
      }
    }

    private static class queryById_resultStandardScheme extends StandardScheme<queryById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryById_resultTupleSchemeFactory implements SchemeFactory {
      public queryById_resultTupleScheme getScheme() {
        return new queryById_resultTupleScheme();
      }
    }

    private static class queryById_resultTupleScheme extends TupleScheme<queryById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

}
