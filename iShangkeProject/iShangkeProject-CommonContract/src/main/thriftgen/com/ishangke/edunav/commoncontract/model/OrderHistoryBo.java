/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ishangke.edunav.commoncontract.model;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OrderHistoryBo implements org.apache.thrift.TBase<OrderHistoryBo, OrderHistoryBo._Fields>, java.io.Serializable, Cloneable, Comparable<OrderHistoryBo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderHistoryBo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField OPT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("optName", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PRE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("preStatus", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField POST_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("postStatus", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField NORMAL_FIELD_DESC = new org.apache.thrift.protocol.TField("normal", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("enabled", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("idSet", org.apache.thrift.protocol.TType.SET, (short)11);
  private static final org.apache.thrift.protocol.TField ORDER_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("orderIdSet", org.apache.thrift.protocol.TType.SET, (short)12);
  private static final org.apache.thrift.protocol.TField USER_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdSet", org.apache.thrift.protocol.TType.SET, (short)13);
  private static final org.apache.thrift.protocol.TField OPT_NAME_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("optNameSet", org.apache.thrift.protocol.TType.SET, (short)14);
  private static final org.apache.thrift.protocol.TField PRE_STATUS_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("preStatusSet", org.apache.thrift.protocol.TType.SET, (short)15);
  private static final org.apache.thrift.protocol.TField POST_STATUS_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("postStatusSet", org.apache.thrift.protocol.TType.SET, (short)16);
  private static final org.apache.thrift.protocol.TField NORMAL_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("normalSet", org.apache.thrift.protocol.TType.SET, (short)17);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_START_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimeStart", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_END_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimeEnd", org.apache.thrift.protocol.TType.I64, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderHistoryBoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderHistoryBoTupleSchemeFactory());
  }

  public int id; // required
  public int orderId; // required
  public int userId; // required
  public int optName; // required
  public String remark; // required
  public int preStatus; // required
  public int postStatus; // required
  public int normal; // required
  public long createTime; // required
  public int enabled; // required
  public Set<Integer> idSet; // required
  public Set<Integer> orderIdSet; // required
  public Set<Integer> userIdSet; // required
  public Set<Integer> optNameSet; // required
  public Set<Integer> preStatusSet; // required
  public Set<Integer> postStatusSet; // required
  public Set<Integer> normalSet; // required
  public long createTimeStart; // required
  public long createTimeEnd; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ORDER_ID((short)2, "orderId"),
    USER_ID((short)3, "userId"),
    OPT_NAME((short)4, "optName"),
    REMARK((short)5, "remark"),
    PRE_STATUS((short)6, "preStatus"),
    POST_STATUS((short)7, "postStatus"),
    NORMAL((short)8, "normal"),
    CREATE_TIME((short)9, "createTime"),
    ENABLED((short)10, "enabled"),
    ID_SET((short)11, "idSet"),
    ORDER_ID_SET((short)12, "orderIdSet"),
    USER_ID_SET((short)13, "userIdSet"),
    OPT_NAME_SET((short)14, "optNameSet"),
    PRE_STATUS_SET((short)15, "preStatusSet"),
    POST_STATUS_SET((short)16, "postStatusSet"),
    NORMAL_SET((short)17, "normalSet"),
    CREATE_TIME_START((short)18, "createTimeStart"),
    CREATE_TIME_END((short)19, "createTimeEnd");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ORDER_ID
          return ORDER_ID;
        case 3: // USER_ID
          return USER_ID;
        case 4: // OPT_NAME
          return OPT_NAME;
        case 5: // REMARK
          return REMARK;
        case 6: // PRE_STATUS
          return PRE_STATUS;
        case 7: // POST_STATUS
          return POST_STATUS;
        case 8: // NORMAL
          return NORMAL;
        case 9: // CREATE_TIME
          return CREATE_TIME;
        case 10: // ENABLED
          return ENABLED;
        case 11: // ID_SET
          return ID_SET;
        case 12: // ORDER_ID_SET
          return ORDER_ID_SET;
        case 13: // USER_ID_SET
          return USER_ID_SET;
        case 14: // OPT_NAME_SET
          return OPT_NAME_SET;
        case 15: // PRE_STATUS_SET
          return PRE_STATUS_SET;
        case 16: // POST_STATUS_SET
          return POST_STATUS_SET;
        case 17: // NORMAL_SET
          return NORMAL_SET;
        case 18: // CREATE_TIME_START
          return CREATE_TIME_START;
        case 19: // CREATE_TIME_END
          return CREATE_TIME_END;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ORDERID_ISSET_ID = 1;
  private static final int __USERID_ISSET_ID = 2;
  private static final int __OPTNAME_ISSET_ID = 3;
  private static final int __PRESTATUS_ISSET_ID = 4;
  private static final int __POSTSTATUS_ISSET_ID = 5;
  private static final int __NORMAL_ISSET_ID = 6;
  private static final int __CREATETIME_ISSET_ID = 7;
  private static final int __ENABLED_ISSET_ID = 8;
  private static final int __CREATETIMESTART_ISSET_ID = 9;
  private static final int __CREATETIMEEND_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPT_NAME, new org.apache.thrift.meta_data.FieldMetaData("optName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("preStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POST_STATUS, new org.apache.thrift.meta_data.FieldMetaData("postStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NORMAL, new org.apache.thrift.meta_data.FieldMetaData("normal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENABLED, new org.apache.thrift.meta_data.FieldMetaData("enabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID_SET, new org.apache.thrift.meta_data.FieldMetaData("idSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ORDER_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("orderIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.USER_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("userIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.OPT_NAME_SET, new org.apache.thrift.meta_data.FieldMetaData("optNameSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PRE_STATUS_SET, new org.apache.thrift.meta_data.FieldMetaData("preStatusSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.POST_STATUS_SET, new org.apache.thrift.meta_data.FieldMetaData("postStatusSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.NORMAL_SET, new org.apache.thrift.meta_data.FieldMetaData("normalSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CREATE_TIME_START, new org.apache.thrift.meta_data.FieldMetaData("createTimeStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME_END, new org.apache.thrift.meta_data.FieldMetaData("createTimeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderHistoryBo.class, metaDataMap);
  }

  public OrderHistoryBo() {
  }

  public OrderHistoryBo(
    int id,
    int orderId,
    int userId,
    int optName,
    String remark,
    int preStatus,
    int postStatus,
    int normal,
    long createTime,
    int enabled,
    Set<Integer> idSet,
    Set<Integer> orderIdSet,
    Set<Integer> userIdSet,
    Set<Integer> optNameSet,
    Set<Integer> preStatusSet,
    Set<Integer> postStatusSet,
    Set<Integer> normalSet,
    long createTimeStart,
    long createTimeEnd)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.orderId = orderId;
    setOrderIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.optName = optName;
    setOptNameIsSet(true);
    this.remark = remark;
    this.preStatus = preStatus;
    setPreStatusIsSet(true);
    this.postStatus = postStatus;
    setPostStatusIsSet(true);
    this.normal = normal;
    setNormalIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.enabled = enabled;
    setEnabledIsSet(true);
    this.idSet = idSet;
    this.orderIdSet = orderIdSet;
    this.userIdSet = userIdSet;
    this.optNameSet = optNameSet;
    this.preStatusSet = preStatusSet;
    this.postStatusSet = postStatusSet;
    this.normalSet = normalSet;
    this.createTimeStart = createTimeStart;
    setCreateTimeStartIsSet(true);
    this.createTimeEnd = createTimeEnd;
    setCreateTimeEndIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderHistoryBo(OrderHistoryBo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.orderId = other.orderId;
    this.userId = other.userId;
    this.optName = other.optName;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.preStatus = other.preStatus;
    this.postStatus = other.postStatus;
    this.normal = other.normal;
    this.createTime = other.createTime;
    this.enabled = other.enabled;
    if (other.isSetIdSet()) {
      Set<Integer> __this__idSet = new HashSet<Integer>(other.idSet);
      this.idSet = __this__idSet;
    }
    if (other.isSetOrderIdSet()) {
      Set<Integer> __this__orderIdSet = new HashSet<Integer>(other.orderIdSet);
      this.orderIdSet = __this__orderIdSet;
    }
    if (other.isSetUserIdSet()) {
      Set<Integer> __this__userIdSet = new HashSet<Integer>(other.userIdSet);
      this.userIdSet = __this__userIdSet;
    }
    if (other.isSetOptNameSet()) {
      Set<Integer> __this__optNameSet = new HashSet<Integer>(other.optNameSet);
      this.optNameSet = __this__optNameSet;
    }
    if (other.isSetPreStatusSet()) {
      Set<Integer> __this__preStatusSet = new HashSet<Integer>(other.preStatusSet);
      this.preStatusSet = __this__preStatusSet;
    }
    if (other.isSetPostStatusSet()) {
      Set<Integer> __this__postStatusSet = new HashSet<Integer>(other.postStatusSet);
      this.postStatusSet = __this__postStatusSet;
    }
    if (other.isSetNormalSet()) {
      Set<Integer> __this__normalSet = new HashSet<Integer>(other.normalSet);
      this.normalSet = __this__normalSet;
    }
    this.createTimeStart = other.createTimeStart;
    this.createTimeEnd = other.createTimeEnd;
  }

  public OrderHistoryBo deepCopy() {
    return new OrderHistoryBo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setOrderIdIsSet(false);
    this.orderId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setOptNameIsSet(false);
    this.optName = 0;
    this.remark = null;
    setPreStatusIsSet(false);
    this.preStatus = 0;
    setPostStatusIsSet(false);
    this.postStatus = 0;
    setNormalIsSet(false);
    this.normal = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setEnabledIsSet(false);
    this.enabled = 0;
    this.idSet = null;
    this.orderIdSet = null;
    this.userIdSet = null;
    this.optNameSet = null;
    this.preStatusSet = null;
    this.postStatusSet = null;
    this.normalSet = null;
    setCreateTimeStartIsSet(false);
    this.createTimeStart = 0;
    setCreateTimeEndIsSet(false);
    this.createTimeEnd = 0;
  }

  public int getId() {
    return this.id;
  }

  public OrderHistoryBo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getOrderId() {
    return this.orderId;
  }

  public OrderHistoryBo setOrderId(int orderId) {
    this.orderId = orderId;
    setOrderIdIsSet(true);
    return this;
  }

  public void unsetOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  public void setOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public OrderHistoryBo setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getOptName() {
    return this.optName;
  }

  public OrderHistoryBo setOptName(int optName) {
    this.optName = optName;
    setOptNameIsSet(true);
    return this;
  }

  public void unsetOptName() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPTNAME_ISSET_ID);
  }

  /** Returns true if field optName is set (has been assigned a value) and false otherwise */
  public boolean isSetOptName() {
    return EncodingUtils.testBit(__isset_bitfield, __OPTNAME_ISSET_ID);
  }

  public void setOptNameIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPTNAME_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public OrderHistoryBo setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getPreStatus() {
    return this.preStatus;
  }

  public OrderHistoryBo setPreStatus(int preStatus) {
    this.preStatus = preStatus;
    setPreStatusIsSet(true);
    return this;
  }

  public void unsetPreStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRESTATUS_ISSET_ID);
  }

  /** Returns true if field preStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetPreStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __PRESTATUS_ISSET_ID);
  }

  public void setPreStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRESTATUS_ISSET_ID, value);
  }

  public int getPostStatus() {
    return this.postStatus;
  }

  public OrderHistoryBo setPostStatus(int postStatus) {
    this.postStatus = postStatus;
    setPostStatusIsSet(true);
    return this;
  }

  public void unsetPostStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSTSTATUS_ISSET_ID);
  }

  /** Returns true if field postStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetPostStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __POSTSTATUS_ISSET_ID);
  }

  public void setPostStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSTSTATUS_ISSET_ID, value);
  }

  public int getNormal() {
    return this.normal;
  }

  public OrderHistoryBo setNormal(int normal) {
    this.normal = normal;
    setNormalIsSet(true);
    return this;
  }

  public void unsetNormal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NORMAL_ISSET_ID);
  }

  /** Returns true if field normal is set (has been assigned a value) and false otherwise */
  public boolean isSetNormal() {
    return EncodingUtils.testBit(__isset_bitfield, __NORMAL_ISSET_ID);
  }

  public void setNormalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NORMAL_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public OrderHistoryBo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getEnabled() {
    return this.enabled;
  }

  public OrderHistoryBo setEnabled(int enabled) {
    this.enabled = enabled;
    setEnabledIsSet(true);
    return this;
  }

  public void unsetEnabled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENABLED_ISSET_ID);
  }

  /** Returns true if field enabled is set (has been assigned a value) and false otherwise */
  public boolean isSetEnabled() {
    return EncodingUtils.testBit(__isset_bitfield, __ENABLED_ISSET_ID);
  }

  public void setEnabledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENABLED_ISSET_ID, value);
  }

  public int getIdSetSize() {
    return (this.idSet == null) ? 0 : this.idSet.size();
  }

  public java.util.Iterator<Integer> getIdSetIterator() {
    return (this.idSet == null) ? null : this.idSet.iterator();
  }

  public void addToIdSet(int elem) {
    if (this.idSet == null) {
      this.idSet = new HashSet<Integer>();
    }
    this.idSet.add(elem);
  }

  public Set<Integer> getIdSet() {
    return this.idSet;
  }

  public OrderHistoryBo setIdSet(Set<Integer> idSet) {
    this.idSet = idSet;
    return this;
  }

  public void unsetIdSet() {
    this.idSet = null;
  }

  /** Returns true if field idSet is set (has been assigned a value) and false otherwise */
  public boolean isSetIdSet() {
    return this.idSet != null;
  }

  public void setIdSetIsSet(boolean value) {
    if (!value) {
      this.idSet = null;
    }
  }

  public int getOrderIdSetSize() {
    return (this.orderIdSet == null) ? 0 : this.orderIdSet.size();
  }

  public java.util.Iterator<Integer> getOrderIdSetIterator() {
    return (this.orderIdSet == null) ? null : this.orderIdSet.iterator();
  }

  public void addToOrderIdSet(int elem) {
    if (this.orderIdSet == null) {
      this.orderIdSet = new HashSet<Integer>();
    }
    this.orderIdSet.add(elem);
  }

  public Set<Integer> getOrderIdSet() {
    return this.orderIdSet;
  }

  public OrderHistoryBo setOrderIdSet(Set<Integer> orderIdSet) {
    this.orderIdSet = orderIdSet;
    return this;
  }

  public void unsetOrderIdSet() {
    this.orderIdSet = null;
  }

  /** Returns true if field orderIdSet is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderIdSet() {
    return this.orderIdSet != null;
  }

  public void setOrderIdSetIsSet(boolean value) {
    if (!value) {
      this.orderIdSet = null;
    }
  }

  public int getUserIdSetSize() {
    return (this.userIdSet == null) ? 0 : this.userIdSet.size();
  }

  public java.util.Iterator<Integer> getUserIdSetIterator() {
    return (this.userIdSet == null) ? null : this.userIdSet.iterator();
  }

  public void addToUserIdSet(int elem) {
    if (this.userIdSet == null) {
      this.userIdSet = new HashSet<Integer>();
    }
    this.userIdSet.add(elem);
  }

  public Set<Integer> getUserIdSet() {
    return this.userIdSet;
  }

  public OrderHistoryBo setUserIdSet(Set<Integer> userIdSet) {
    this.userIdSet = userIdSet;
    return this;
  }

  public void unsetUserIdSet() {
    this.userIdSet = null;
  }

  /** Returns true if field userIdSet is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIdSet() {
    return this.userIdSet != null;
  }

  public void setUserIdSetIsSet(boolean value) {
    if (!value) {
      this.userIdSet = null;
    }
  }

  public int getOptNameSetSize() {
    return (this.optNameSet == null) ? 0 : this.optNameSet.size();
  }

  public java.util.Iterator<Integer> getOptNameSetIterator() {
    return (this.optNameSet == null) ? null : this.optNameSet.iterator();
  }

  public void addToOptNameSet(int elem) {
    if (this.optNameSet == null) {
      this.optNameSet = new HashSet<Integer>();
    }
    this.optNameSet.add(elem);
  }

  public Set<Integer> getOptNameSet() {
    return this.optNameSet;
  }

  public OrderHistoryBo setOptNameSet(Set<Integer> optNameSet) {
    this.optNameSet = optNameSet;
    return this;
  }

  public void unsetOptNameSet() {
    this.optNameSet = null;
  }

  /** Returns true if field optNameSet is set (has been assigned a value) and false otherwise */
  public boolean isSetOptNameSet() {
    return this.optNameSet != null;
  }

  public void setOptNameSetIsSet(boolean value) {
    if (!value) {
      this.optNameSet = null;
    }
  }

  public int getPreStatusSetSize() {
    return (this.preStatusSet == null) ? 0 : this.preStatusSet.size();
  }

  public java.util.Iterator<Integer> getPreStatusSetIterator() {
    return (this.preStatusSet == null) ? null : this.preStatusSet.iterator();
  }

  public void addToPreStatusSet(int elem) {
    if (this.preStatusSet == null) {
      this.preStatusSet = new HashSet<Integer>();
    }
    this.preStatusSet.add(elem);
  }

  public Set<Integer> getPreStatusSet() {
    return this.preStatusSet;
  }

  public OrderHistoryBo setPreStatusSet(Set<Integer> preStatusSet) {
    this.preStatusSet = preStatusSet;
    return this;
  }

  public void unsetPreStatusSet() {
    this.preStatusSet = null;
  }

  /** Returns true if field preStatusSet is set (has been assigned a value) and false otherwise */
  public boolean isSetPreStatusSet() {
    return this.preStatusSet != null;
  }

  public void setPreStatusSetIsSet(boolean value) {
    if (!value) {
      this.preStatusSet = null;
    }
  }

  public int getPostStatusSetSize() {
    return (this.postStatusSet == null) ? 0 : this.postStatusSet.size();
  }

  public java.util.Iterator<Integer> getPostStatusSetIterator() {
    return (this.postStatusSet == null) ? null : this.postStatusSet.iterator();
  }

  public void addToPostStatusSet(int elem) {
    if (this.postStatusSet == null) {
      this.postStatusSet = new HashSet<Integer>();
    }
    this.postStatusSet.add(elem);
  }

  public Set<Integer> getPostStatusSet() {
    return this.postStatusSet;
  }

  public OrderHistoryBo setPostStatusSet(Set<Integer> postStatusSet) {
    this.postStatusSet = postStatusSet;
    return this;
  }

  public void unsetPostStatusSet() {
    this.postStatusSet = null;
  }

  /** Returns true if field postStatusSet is set (has been assigned a value) and false otherwise */
  public boolean isSetPostStatusSet() {
    return this.postStatusSet != null;
  }

  public void setPostStatusSetIsSet(boolean value) {
    if (!value) {
      this.postStatusSet = null;
    }
  }

  public int getNormalSetSize() {
    return (this.normalSet == null) ? 0 : this.normalSet.size();
  }

  public java.util.Iterator<Integer> getNormalSetIterator() {
    return (this.normalSet == null) ? null : this.normalSet.iterator();
  }

  public void addToNormalSet(int elem) {
    if (this.normalSet == null) {
      this.normalSet = new HashSet<Integer>();
    }
    this.normalSet.add(elem);
  }

  public Set<Integer> getNormalSet() {
    return this.normalSet;
  }

  public OrderHistoryBo setNormalSet(Set<Integer> normalSet) {
    this.normalSet = normalSet;
    return this;
  }

  public void unsetNormalSet() {
    this.normalSet = null;
  }

  /** Returns true if field normalSet is set (has been assigned a value) and false otherwise */
  public boolean isSetNormalSet() {
    return this.normalSet != null;
  }

  public void setNormalSetIsSet(boolean value) {
    if (!value) {
      this.normalSet = null;
    }
  }

  public long getCreateTimeStart() {
    return this.createTimeStart;
  }

  public OrderHistoryBo setCreateTimeStart(long createTimeStart) {
    this.createTimeStart = createTimeStart;
    setCreateTimeStartIsSet(true);
    return this;
  }

  public void unsetCreateTimeStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTART_ISSET_ID);
  }

  /** Returns true if field createTimeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimeStart() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTART_ISSET_ID);
  }

  public void setCreateTimeStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTART_ISSET_ID, value);
  }

  public long getCreateTimeEnd() {
    return this.createTimeEnd;
  }

  public OrderHistoryBo setCreateTimeEnd(long createTimeEnd) {
    this.createTimeEnd = createTimeEnd;
    setCreateTimeEndIsSet(true);
    return this;
  }

  public void unsetCreateTimeEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMEEND_ISSET_ID);
  }

  /** Returns true if field createTimeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimeEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMEEND_ISSET_ID);
  }

  public void setCreateTimeEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMEEND_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case OPT_NAME:
      if (value == null) {
        unsetOptName();
      } else {
        setOptName((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case PRE_STATUS:
      if (value == null) {
        unsetPreStatus();
      } else {
        setPreStatus((Integer)value);
      }
      break;

    case POST_STATUS:
      if (value == null) {
        unsetPostStatus();
      } else {
        setPostStatus((Integer)value);
      }
      break;

    case NORMAL:
      if (value == null) {
        unsetNormal();
      } else {
        setNormal((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case ENABLED:
      if (value == null) {
        unsetEnabled();
      } else {
        setEnabled((Integer)value);
      }
      break;

    case ID_SET:
      if (value == null) {
        unsetIdSet();
      } else {
        setIdSet((Set<Integer>)value);
      }
      break;

    case ORDER_ID_SET:
      if (value == null) {
        unsetOrderIdSet();
      } else {
        setOrderIdSet((Set<Integer>)value);
      }
      break;

    case USER_ID_SET:
      if (value == null) {
        unsetUserIdSet();
      } else {
        setUserIdSet((Set<Integer>)value);
      }
      break;

    case OPT_NAME_SET:
      if (value == null) {
        unsetOptNameSet();
      } else {
        setOptNameSet((Set<Integer>)value);
      }
      break;

    case PRE_STATUS_SET:
      if (value == null) {
        unsetPreStatusSet();
      } else {
        setPreStatusSet((Set<Integer>)value);
      }
      break;

    case POST_STATUS_SET:
      if (value == null) {
        unsetPostStatusSet();
      } else {
        setPostStatusSet((Set<Integer>)value);
      }
      break;

    case NORMAL_SET:
      if (value == null) {
        unsetNormalSet();
      } else {
        setNormalSet((Set<Integer>)value);
      }
      break;

    case CREATE_TIME_START:
      if (value == null) {
        unsetCreateTimeStart();
      } else {
        setCreateTimeStart((Long)value);
      }
      break;

    case CREATE_TIME_END:
      if (value == null) {
        unsetCreateTimeEnd();
      } else {
        setCreateTimeEnd((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case ORDER_ID:
      return Integer.valueOf(getOrderId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case OPT_NAME:
      return Integer.valueOf(getOptName());

    case REMARK:
      return getRemark();

    case PRE_STATUS:
      return Integer.valueOf(getPreStatus());

    case POST_STATUS:
      return Integer.valueOf(getPostStatus());

    case NORMAL:
      return Integer.valueOf(getNormal());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case ENABLED:
      return Integer.valueOf(getEnabled());

    case ID_SET:
      return getIdSet();

    case ORDER_ID_SET:
      return getOrderIdSet();

    case USER_ID_SET:
      return getUserIdSet();

    case OPT_NAME_SET:
      return getOptNameSet();

    case PRE_STATUS_SET:
      return getPreStatusSet();

    case POST_STATUS_SET:
      return getPostStatusSet();

    case NORMAL_SET:
      return getNormalSet();

    case CREATE_TIME_START:
      return Long.valueOf(getCreateTimeStart());

    case CREATE_TIME_END:
      return Long.valueOf(getCreateTimeEnd());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ORDER_ID:
      return isSetOrderId();
    case USER_ID:
      return isSetUserId();
    case OPT_NAME:
      return isSetOptName();
    case REMARK:
      return isSetRemark();
    case PRE_STATUS:
      return isSetPreStatus();
    case POST_STATUS:
      return isSetPostStatus();
    case NORMAL:
      return isSetNormal();
    case CREATE_TIME:
      return isSetCreateTime();
    case ENABLED:
      return isSetEnabled();
    case ID_SET:
      return isSetIdSet();
    case ORDER_ID_SET:
      return isSetOrderIdSet();
    case USER_ID_SET:
      return isSetUserIdSet();
    case OPT_NAME_SET:
      return isSetOptNameSet();
    case PRE_STATUS_SET:
      return isSetPreStatusSet();
    case POST_STATUS_SET:
      return isSetPostStatusSet();
    case NORMAL_SET:
      return isSetNormalSet();
    case CREATE_TIME_START:
      return isSetCreateTimeStart();
    case CREATE_TIME_END:
      return isSetCreateTimeEnd();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderHistoryBo)
      return this.equals((OrderHistoryBo)that);
    return false;
  }

  public boolean equals(OrderHistoryBo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_orderId = true;
    boolean that_present_orderId = true;
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (this.orderId != that.orderId)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_optName = true;
    boolean that_present_optName = true;
    if (this_present_optName || that_present_optName) {
      if (!(this_present_optName && that_present_optName))
        return false;
      if (this.optName != that.optName)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_preStatus = true;
    boolean that_present_preStatus = true;
    if (this_present_preStatus || that_present_preStatus) {
      if (!(this_present_preStatus && that_present_preStatus))
        return false;
      if (this.preStatus != that.preStatus)
        return false;
    }

    boolean this_present_postStatus = true;
    boolean that_present_postStatus = true;
    if (this_present_postStatus || that_present_postStatus) {
      if (!(this_present_postStatus && that_present_postStatus))
        return false;
      if (this.postStatus != that.postStatus)
        return false;
    }

    boolean this_present_normal = true;
    boolean that_present_normal = true;
    if (this_present_normal || that_present_normal) {
      if (!(this_present_normal && that_present_normal))
        return false;
      if (this.normal != that.normal)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_enabled = true;
    boolean that_present_enabled = true;
    if (this_present_enabled || that_present_enabled) {
      if (!(this_present_enabled && that_present_enabled))
        return false;
      if (this.enabled != that.enabled)
        return false;
    }

    boolean this_present_idSet = true && this.isSetIdSet();
    boolean that_present_idSet = true && that.isSetIdSet();
    if (this_present_idSet || that_present_idSet) {
      if (!(this_present_idSet && that_present_idSet))
        return false;
      if (!this.idSet.equals(that.idSet))
        return false;
    }

    boolean this_present_orderIdSet = true && this.isSetOrderIdSet();
    boolean that_present_orderIdSet = true && that.isSetOrderIdSet();
    if (this_present_orderIdSet || that_present_orderIdSet) {
      if (!(this_present_orderIdSet && that_present_orderIdSet))
        return false;
      if (!this.orderIdSet.equals(that.orderIdSet))
        return false;
    }

    boolean this_present_userIdSet = true && this.isSetUserIdSet();
    boolean that_present_userIdSet = true && that.isSetUserIdSet();
    if (this_present_userIdSet || that_present_userIdSet) {
      if (!(this_present_userIdSet && that_present_userIdSet))
        return false;
      if (!this.userIdSet.equals(that.userIdSet))
        return false;
    }

    boolean this_present_optNameSet = true && this.isSetOptNameSet();
    boolean that_present_optNameSet = true && that.isSetOptNameSet();
    if (this_present_optNameSet || that_present_optNameSet) {
      if (!(this_present_optNameSet && that_present_optNameSet))
        return false;
      if (!this.optNameSet.equals(that.optNameSet))
        return false;
    }

    boolean this_present_preStatusSet = true && this.isSetPreStatusSet();
    boolean that_present_preStatusSet = true && that.isSetPreStatusSet();
    if (this_present_preStatusSet || that_present_preStatusSet) {
      if (!(this_present_preStatusSet && that_present_preStatusSet))
        return false;
      if (!this.preStatusSet.equals(that.preStatusSet))
        return false;
    }

    boolean this_present_postStatusSet = true && this.isSetPostStatusSet();
    boolean that_present_postStatusSet = true && that.isSetPostStatusSet();
    if (this_present_postStatusSet || that_present_postStatusSet) {
      if (!(this_present_postStatusSet && that_present_postStatusSet))
        return false;
      if (!this.postStatusSet.equals(that.postStatusSet))
        return false;
    }

    boolean this_present_normalSet = true && this.isSetNormalSet();
    boolean that_present_normalSet = true && that.isSetNormalSet();
    if (this_present_normalSet || that_present_normalSet) {
      if (!(this_present_normalSet && that_present_normalSet))
        return false;
      if (!this.normalSet.equals(that.normalSet))
        return false;
    }

    boolean this_present_createTimeStart = true;
    boolean that_present_createTimeStart = true;
    if (this_present_createTimeStart || that_present_createTimeStart) {
      if (!(this_present_createTimeStart && that_present_createTimeStart))
        return false;
      if (this.createTimeStart != that.createTimeStart)
        return false;
    }

    boolean this_present_createTimeEnd = true;
    boolean that_present_createTimeEnd = true;
    if (this_present_createTimeEnd || that_present_createTimeEnd) {
      if (!(this_present_createTimeEnd && that_present_createTimeEnd))
        return false;
      if (this.createTimeEnd != that.createTimeEnd)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_orderId = true;
    builder.append(present_orderId);
    if (present_orderId)
      builder.append(orderId);

    boolean present_userId = true;
    builder.append(present_userId);
    if (present_userId)
      builder.append(userId);

    boolean present_optName = true;
    builder.append(present_optName);
    if (present_optName)
      builder.append(optName);

    boolean present_remark = true && (isSetRemark());
    builder.append(present_remark);
    if (present_remark)
      builder.append(remark);

    boolean present_preStatus = true;
    builder.append(present_preStatus);
    if (present_preStatus)
      builder.append(preStatus);

    boolean present_postStatus = true;
    builder.append(present_postStatus);
    if (present_postStatus)
      builder.append(postStatus);

    boolean present_normal = true;
    builder.append(present_normal);
    if (present_normal)
      builder.append(normal);

    boolean present_createTime = true;
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);

    boolean present_enabled = true;
    builder.append(present_enabled);
    if (present_enabled)
      builder.append(enabled);

    boolean present_idSet = true && (isSetIdSet());
    builder.append(present_idSet);
    if (present_idSet)
      builder.append(idSet);

    boolean present_orderIdSet = true && (isSetOrderIdSet());
    builder.append(present_orderIdSet);
    if (present_orderIdSet)
      builder.append(orderIdSet);

    boolean present_userIdSet = true && (isSetUserIdSet());
    builder.append(present_userIdSet);
    if (present_userIdSet)
      builder.append(userIdSet);

    boolean present_optNameSet = true && (isSetOptNameSet());
    builder.append(present_optNameSet);
    if (present_optNameSet)
      builder.append(optNameSet);

    boolean present_preStatusSet = true && (isSetPreStatusSet());
    builder.append(present_preStatusSet);
    if (present_preStatusSet)
      builder.append(preStatusSet);

    boolean present_postStatusSet = true && (isSetPostStatusSet());
    builder.append(present_postStatusSet);
    if (present_postStatusSet)
      builder.append(postStatusSet);

    boolean present_normalSet = true && (isSetNormalSet());
    builder.append(present_normalSet);
    if (present_normalSet)
      builder.append(normalSet);

    boolean present_createTimeStart = true;
    builder.append(present_createTimeStart);
    if (present_createTimeStart)
      builder.append(createTimeStart);

    boolean present_createTimeEnd = true;
    builder.append(present_createTimeEnd);
    if (present_createTimeEnd)
      builder.append(createTimeEnd);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(OrderHistoryBo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptName()).compareTo(other.isSetOptName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optName, other.optName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreStatus()).compareTo(other.isSetPreStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preStatus, other.preStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostStatus()).compareTo(other.isSetPostStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postStatus, other.postStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNormal()).compareTo(other.isSetNormal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNormal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.normal, other.normal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnabled()).compareTo(other.isSetEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enabled, other.enabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdSet()).compareTo(other.isSetIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idSet, other.idSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderIdSet()).compareTo(other.isSetOrderIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderIdSet, other.orderIdSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIdSet()).compareTo(other.isSetUserIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdSet, other.userIdSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptNameSet()).compareTo(other.isSetOptNameSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptNameSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optNameSet, other.optNameSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreStatusSet()).compareTo(other.isSetPreStatusSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreStatusSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preStatusSet, other.preStatusSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostStatusSet()).compareTo(other.isSetPostStatusSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostStatusSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postStatusSet, other.postStatusSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNormalSet()).compareTo(other.isSetNormalSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNormalSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.normalSet, other.normalSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimeStart()).compareTo(other.isSetCreateTimeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimeStart, other.createTimeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimeEnd()).compareTo(other.isSetCreateTimeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimeEnd, other.createTimeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderHistoryBo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderId:");
    sb.append(this.orderId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("optName:");
    sb.append(this.optName);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("preStatus:");
    sb.append(this.preStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("postStatus:");
    sb.append(this.postStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("normal:");
    sb.append(this.normal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("enabled:");
    sb.append(this.enabled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("idSet:");
    if (this.idSet == null) {
      sb.append("null");
    } else {
      sb.append(this.idSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderIdSet:");
    if (this.orderIdSet == null) {
      sb.append("null");
    } else {
      sb.append(this.orderIdSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIdSet:");
    if (this.userIdSet == null) {
      sb.append("null");
    } else {
      sb.append(this.userIdSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("optNameSet:");
    if (this.optNameSet == null) {
      sb.append("null");
    } else {
      sb.append(this.optNameSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("preStatusSet:");
    if (this.preStatusSet == null) {
      sb.append("null");
    } else {
      sb.append(this.preStatusSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("postStatusSet:");
    if (this.postStatusSet == null) {
      sb.append("null");
    } else {
      sb.append(this.postStatusSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("normalSet:");
    if (this.normalSet == null) {
      sb.append("null");
    } else {
      sb.append(this.normalSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTimeStart:");
    sb.append(this.createTimeStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTimeEnd:");
    sb.append(this.createTimeEnd);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderHistoryBoStandardSchemeFactory implements SchemeFactory {
    public OrderHistoryBoStandardScheme getScheme() {
      return new OrderHistoryBoStandardScheme();
    }
  }

  private static class OrderHistoryBoStandardScheme extends StandardScheme<OrderHistoryBo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderHistoryBo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderId = iprot.readI32();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.optName = iprot.readI32();
              struct.setOptNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.preStatus = iprot.readI32();
              struct.setPreStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // POST_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.postStatus = iprot.readI32();
              struct.setPostStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NORMAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.normal = iprot.readI32();
              struct.setNormalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.enabled = iprot.readI32();
              struct.setEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.idSet = new HashSet<Integer>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  int _elem2;
                  _elem2 = iprot.readI32();
                  struct.idSet.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ORDER_ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.orderIdSet = new HashSet<Integer>(2*_set3.size);
                for (int _i4 = 0; _i4 < _set3.size; ++_i4)
                {
                  int _elem5;
                  _elem5 = iprot.readI32();
                  struct.orderIdSet.add(_elem5);
                }
                iprot.readSetEnd();
              }
              struct.setOrderIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // USER_ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set6 = iprot.readSetBegin();
                struct.userIdSet = new HashSet<Integer>(2*_set6.size);
                for (int _i7 = 0; _i7 < _set6.size; ++_i7)
                {
                  int _elem8;
                  _elem8 = iprot.readI32();
                  struct.userIdSet.add(_elem8);
                }
                iprot.readSetEnd();
              }
              struct.setUserIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OPT_NAME_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set9 = iprot.readSetBegin();
                struct.optNameSet = new HashSet<Integer>(2*_set9.size);
                for (int _i10 = 0; _i10 < _set9.size; ++_i10)
                {
                  int _elem11;
                  _elem11 = iprot.readI32();
                  struct.optNameSet.add(_elem11);
                }
                iprot.readSetEnd();
              }
              struct.setOptNameSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PRE_STATUS_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set12 = iprot.readSetBegin();
                struct.preStatusSet = new HashSet<Integer>(2*_set12.size);
                for (int _i13 = 0; _i13 < _set12.size; ++_i13)
                {
                  int _elem14;
                  _elem14 = iprot.readI32();
                  struct.preStatusSet.add(_elem14);
                }
                iprot.readSetEnd();
              }
              struct.setPreStatusSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // POST_STATUS_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set15 = iprot.readSetBegin();
                struct.postStatusSet = new HashSet<Integer>(2*_set15.size);
                for (int _i16 = 0; _i16 < _set15.size; ++_i16)
                {
                  int _elem17;
                  _elem17 = iprot.readI32();
                  struct.postStatusSet.add(_elem17);
                }
                iprot.readSetEnd();
              }
              struct.setPostStatusSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // NORMAL_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set18 = iprot.readSetBegin();
                struct.normalSet = new HashSet<Integer>(2*_set18.size);
                for (int _i19 = 0; _i19 < _set18.size; ++_i19)
                {
                  int _elem20;
                  _elem20 = iprot.readI32();
                  struct.normalSet.add(_elem20);
                }
                iprot.readSetEnd();
              }
              struct.setNormalSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CREATE_TIME_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimeStart = iprot.readI64();
              struct.setCreateTimeStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CREATE_TIME_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimeEnd = iprot.readI64();
              struct.setCreateTimeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderHistoryBo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
      oprot.writeI32(struct.orderId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPT_NAME_FIELD_DESC);
      oprot.writeI32(struct.optName);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.preStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POST_STATUS_FIELD_DESC);
      oprot.writeI32(struct.postStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NORMAL_FIELD_DESC);
      oprot.writeI32(struct.normal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENABLED_FIELD_DESC);
      oprot.writeI32(struct.enabled);
      oprot.writeFieldEnd();
      if (struct.idSet != null) {
        oprot.writeFieldBegin(ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.idSet.size()));
          for (int _iter21 : struct.idSet)
          {
            oprot.writeI32(_iter21);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.orderIdSet != null) {
        oprot.writeFieldBegin(ORDER_ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.orderIdSet.size()));
          for (int _iter22 : struct.orderIdSet)
          {
            oprot.writeI32(_iter22);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.userIdSet != null) {
        oprot.writeFieldBegin(USER_ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.userIdSet.size()));
          for (int _iter23 : struct.userIdSet)
          {
            oprot.writeI32(_iter23);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.optNameSet != null) {
        oprot.writeFieldBegin(OPT_NAME_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.optNameSet.size()));
          for (int _iter24 : struct.optNameSet)
          {
            oprot.writeI32(_iter24);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.preStatusSet != null) {
        oprot.writeFieldBegin(PRE_STATUS_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.preStatusSet.size()));
          for (int _iter25 : struct.preStatusSet)
          {
            oprot.writeI32(_iter25);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.postStatusSet != null) {
        oprot.writeFieldBegin(POST_STATUS_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.postStatusSet.size()));
          for (int _iter26 : struct.postStatusSet)
          {
            oprot.writeI32(_iter26);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.normalSet != null) {
        oprot.writeFieldBegin(NORMAL_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.normalSet.size()));
          for (int _iter27 : struct.normalSet)
          {
            oprot.writeI32(_iter27);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_START_FIELD_DESC);
      oprot.writeI64(struct.createTimeStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_END_FIELD_DESC);
      oprot.writeI64(struct.createTimeEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderHistoryBoTupleSchemeFactory implements SchemeFactory {
    public OrderHistoryBoTupleScheme getScheme() {
      return new OrderHistoryBoTupleScheme();
    }
  }

  private static class OrderHistoryBoTupleScheme extends TupleScheme<OrderHistoryBo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderHistoryBo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetOrderId()) {
        optionals.set(1);
      }
      if (struct.isSetUserId()) {
        optionals.set(2);
      }
      if (struct.isSetOptName()) {
        optionals.set(3);
      }
      if (struct.isSetRemark()) {
        optionals.set(4);
      }
      if (struct.isSetPreStatus()) {
        optionals.set(5);
      }
      if (struct.isSetPostStatus()) {
        optionals.set(6);
      }
      if (struct.isSetNormal()) {
        optionals.set(7);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(8);
      }
      if (struct.isSetEnabled()) {
        optionals.set(9);
      }
      if (struct.isSetIdSet()) {
        optionals.set(10);
      }
      if (struct.isSetOrderIdSet()) {
        optionals.set(11);
      }
      if (struct.isSetUserIdSet()) {
        optionals.set(12);
      }
      if (struct.isSetOptNameSet()) {
        optionals.set(13);
      }
      if (struct.isSetPreStatusSet()) {
        optionals.set(14);
      }
      if (struct.isSetPostStatusSet()) {
        optionals.set(15);
      }
      if (struct.isSetNormalSet()) {
        optionals.set(16);
      }
      if (struct.isSetCreateTimeStart()) {
        optionals.set(17);
      }
      if (struct.isSetCreateTimeEnd()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetOrderId()) {
        oprot.writeI32(struct.orderId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetOptName()) {
        oprot.writeI32(struct.optName);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetPreStatus()) {
        oprot.writeI32(struct.preStatus);
      }
      if (struct.isSetPostStatus()) {
        oprot.writeI32(struct.postStatus);
      }
      if (struct.isSetNormal()) {
        oprot.writeI32(struct.normal);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetEnabled()) {
        oprot.writeI32(struct.enabled);
      }
      if (struct.isSetIdSet()) {
        {
          oprot.writeI32(struct.idSet.size());
          for (int _iter28 : struct.idSet)
          {
            oprot.writeI32(_iter28);
          }
        }
      }
      if (struct.isSetOrderIdSet()) {
        {
          oprot.writeI32(struct.orderIdSet.size());
          for (int _iter29 : struct.orderIdSet)
          {
            oprot.writeI32(_iter29);
          }
        }
      }
      if (struct.isSetUserIdSet()) {
        {
          oprot.writeI32(struct.userIdSet.size());
          for (int _iter30 : struct.userIdSet)
          {
            oprot.writeI32(_iter30);
          }
        }
      }
      if (struct.isSetOptNameSet()) {
        {
          oprot.writeI32(struct.optNameSet.size());
          for (int _iter31 : struct.optNameSet)
          {
            oprot.writeI32(_iter31);
          }
        }
      }
      if (struct.isSetPreStatusSet()) {
        {
          oprot.writeI32(struct.preStatusSet.size());
          for (int _iter32 : struct.preStatusSet)
          {
            oprot.writeI32(_iter32);
          }
        }
      }
      if (struct.isSetPostStatusSet()) {
        {
          oprot.writeI32(struct.postStatusSet.size());
          for (int _iter33 : struct.postStatusSet)
          {
            oprot.writeI32(_iter33);
          }
        }
      }
      if (struct.isSetNormalSet()) {
        {
          oprot.writeI32(struct.normalSet.size());
          for (int _iter34 : struct.normalSet)
          {
            oprot.writeI32(_iter34);
          }
        }
      }
      if (struct.isSetCreateTimeStart()) {
        oprot.writeI64(struct.createTimeStart);
      }
      if (struct.isSetCreateTimeEnd()) {
        oprot.writeI64(struct.createTimeEnd);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderHistoryBo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orderId = iprot.readI32();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.optName = iprot.readI32();
        struct.setOptNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(5)) {
        struct.preStatus = iprot.readI32();
        struct.setPreStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.postStatus = iprot.readI32();
        struct.setPostStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.normal = iprot.readI32();
        struct.setNormalIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.enabled = iprot.readI32();
        struct.setEnabledIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TSet _set35 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.idSet = new HashSet<Integer>(2*_set35.size);
          for (int _i36 = 0; _i36 < _set35.size; ++_i36)
          {
            int _elem37;
            _elem37 = iprot.readI32();
            struct.idSet.add(_elem37);
          }
        }
        struct.setIdSetIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TSet _set38 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.orderIdSet = new HashSet<Integer>(2*_set38.size);
          for (int _i39 = 0; _i39 < _set38.size; ++_i39)
          {
            int _elem40;
            _elem40 = iprot.readI32();
            struct.orderIdSet.add(_elem40);
          }
        }
        struct.setOrderIdSetIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TSet _set41 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIdSet = new HashSet<Integer>(2*_set41.size);
          for (int _i42 = 0; _i42 < _set41.size; ++_i42)
          {
            int _elem43;
            _elem43 = iprot.readI32();
            struct.userIdSet.add(_elem43);
          }
        }
        struct.setUserIdSetIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TSet _set44 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.optNameSet = new HashSet<Integer>(2*_set44.size);
          for (int _i45 = 0; _i45 < _set44.size; ++_i45)
          {
            int _elem46;
            _elem46 = iprot.readI32();
            struct.optNameSet.add(_elem46);
          }
        }
        struct.setOptNameSetIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TSet _set47 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.preStatusSet = new HashSet<Integer>(2*_set47.size);
          for (int _i48 = 0; _i48 < _set47.size; ++_i48)
          {
            int _elem49;
            _elem49 = iprot.readI32();
            struct.preStatusSet.add(_elem49);
          }
        }
        struct.setPreStatusSetIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TSet _set50 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.postStatusSet = new HashSet<Integer>(2*_set50.size);
          for (int _i51 = 0; _i51 < _set50.size; ++_i51)
          {
            int _elem52;
            _elem52 = iprot.readI32();
            struct.postStatusSet.add(_elem52);
          }
        }
        struct.setPostStatusSetIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TSet _set53 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.normalSet = new HashSet<Integer>(2*_set53.size);
          for (int _i54 = 0; _i54 < _set53.size; ++_i54)
          {
            int _elem55;
            _elem55 = iprot.readI32();
            struct.normalSet.add(_elem55);
          }
        }
        struct.setNormalSetIsSet(true);
      }
      if (incoming.get(17)) {
        struct.createTimeStart = iprot.readI64();
        struct.setCreateTimeStartIsSet(true);
      }
      if (incoming.get(18)) {
        struct.createTimeEnd = iprot.readI64();
        struct.setCreateTimeEndIsSet(true);
      }
    }
  }

}

