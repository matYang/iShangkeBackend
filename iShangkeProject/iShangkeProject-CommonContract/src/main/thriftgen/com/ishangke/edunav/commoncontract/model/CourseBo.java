/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ishangke.edunav.commoncontract.model;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CourseBo implements org.apache.thrift.TBase<CourseBo, CourseBo._Fields>, java.io.Serializable, Cloneable, Comparable<CourseBo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CourseBo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COURSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("courseName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LOCATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("locationId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CIRCLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("circleId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ADDRESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("addressId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField ORIGINAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("originalPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField CASHBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("cashback", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("commission", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField SERVICE_CHARGE_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceCharge", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTime", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("enabled", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField COURSE_HOUR_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("courseHourLength", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField TEACHING_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("teachingMethod", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField TEACHING_MATERIAL_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("teachingMaterialFee", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField DOWNLOAD_MATERIALS_FIELD_DESC = new org.apache.thrift.protocol.TField("downloadMaterials", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField BONUS_SERVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("bonusService", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField MARKING_FIELD_DESC = new org.apache.thrift.protocol.TField("marking", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField ASSIGNMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("assignments", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField TRAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("trail", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField QUESTION_SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("questionSession", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField TEACHING_AND_EXERCISE_FIELD_DESC = new org.apache.thrift.protocol.TField("teachingAndExercise", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField CLASS_TEACHER_FIELD_DESC = new org.apache.thrift.protocol.TField("classTeacher", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField GOAL_FIELD_DESC = new org.apache.thrift.protocol.TField("goal", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField OUTLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("outline", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField REG_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("regPhone", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField CONTACT_FIELD_DESC = new org.apache.thrift.protocol.TField("contact", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField EXTRACURRICULAR_FIELD_DESC = new org.apache.thrift.protocol.TField("extracurricular", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField PASS_AGREEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("passAgreement", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField QUALITY_ASSURANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("qualityAssurance", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField QUESTION_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("questionBank", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField TEACHING_MATERIAL_INTRO_FIELD_DESC = new org.apache.thrift.protocol.TField("teachingMaterialIntro", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField STUDY_DAY_NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("studyDayNote", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField HIGH_SCORE_REWARD_FIELD_DESC = new org.apache.thrift.protocol.TField("highScoreReward", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField PREREQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("prerequest", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField SUITABLE_STUDENT_FIELD_DESC = new org.apache.thrift.protocol.TField("suitableStudent", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField OPEN_COURSE_REQUIREMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("openCourseRequirement", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField CERTIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("certification", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField QUIZ_FIELD_DESC = new org.apache.thrift.protocol.TField("quiz", org.apache.thrift.protocol.TType.STRING, (short)44);
  private static final org.apache.thrift.protocol.TField COURSE_INTRO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseIntro", org.apache.thrift.protocol.TType.STRING, (short)45);
  private static final org.apache.thrift.protocol.TField REFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("reference", org.apache.thrift.protocol.TType.STRING, (short)46);
  private static final org.apache.thrift.protocol.TField REG_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("regLocation", org.apache.thrift.protocol.TType.STRING, (short)47);
  private static final org.apache.thrift.protocol.TField FINISH_TIME2_FIELD_DESC = new org.apache.thrift.protocol.TField("finishTime2", org.apache.thrift.protocol.TType.I32, (short)48);
  private static final org.apache.thrift.protocol.TField START_TIME2_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime2", org.apache.thrift.protocol.TType.I32, (short)49);
  private static final org.apache.thrift.protocol.TField FINISH_TIME1_FIELD_DESC = new org.apache.thrift.protocol.TField("finishTime1", org.apache.thrift.protocol.TType.I32, (short)50);
  private static final org.apache.thrift.protocol.TField START_TIME1_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime1", org.apache.thrift.protocol.TType.I32, (short)51);
  private static final org.apache.thrift.protocol.TField START_UPON_ARRIVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("startUponArrival", org.apache.thrift.protocol.TType.I32, (short)52);
  private static final org.apache.thrift.protocol.TField BOOKING_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingType", org.apache.thrift.protocol.TType.I32, (short)53);
  private static final org.apache.thrift.protocol.TField CASHBACK_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cashbackDate", org.apache.thrift.protocol.TType.I64, (short)54);
  private static final org.apache.thrift.protocol.TField NO_REFUND_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("noRefundDate", org.apache.thrift.protocol.TType.I64, (short)55);
  private static final org.apache.thrift.protocol.TField CUTOFF_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cutoffDate", org.apache.thrift.protocol.TType.I64, (short)56);
  private static final org.apache.thrift.protocol.TField FINISH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("finishDate", org.apache.thrift.protocol.TType.I64, (short)57);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.I64, (short)58);
  private static final org.apache.thrift.protocol.TField POPULARITY_FIELD_DESC = new org.apache.thrift.protocol.TField("popularity", org.apache.thrift.protocol.TType.I32, (short)59);
  private static final org.apache.thrift.protocol.TField COURSE_HOUR_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("courseHourNum", org.apache.thrift.protocol.TType.I32, (short)60);
  private static final org.apache.thrift.protocol.TField CLASS_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("classSize", org.apache.thrift.protocol.TType.STRING, (short)61);
  private static final org.apache.thrift.protocol.TField CLASS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("classType", org.apache.thrift.protocol.TType.I32, (short)62);
  private static final org.apache.thrift.protocol.TField DISCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("discount", org.apache.thrift.protocol.TType.DOUBLE, (short)63);
  private static final org.apache.thrift.protocol.TField SCHOOLTIME_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("schooltimeDay", org.apache.thrift.protocol.TType.I32, (short)64);
  private static final org.apache.thrift.protocol.TField SCHOOLTIME_WEEK_FIELD_DESC = new org.apache.thrift.protocol.TField("schooltimeWeek", org.apache.thrift.protocol.TType.I32, (short)65);
  private static final org.apache.thrift.protocol.TField ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("idSet", org.apache.thrift.protocol.TType.SET, (short)66);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIME_START_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimeStart", org.apache.thrift.protocol.TType.I64, (short)67);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIME_END_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimeEnd", org.apache.thrift.protocol.TType.I64, (short)68);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_START_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimeStart", org.apache.thrift.protocol.TType.I64, (short)69);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_END_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimeEnd", org.apache.thrift.protocol.TType.I64, (short)70);
  private static final org.apache.thrift.protocol.TField CATEGORY_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryIdSet", org.apache.thrift.protocol.TType.SET, (short)71);
  private static final org.apache.thrift.protocol.TField LOCATION_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("locationIdSet", org.apache.thrift.protocol.TType.SET, (short)72);
  private static final org.apache.thrift.protocol.TField CIRCLE_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("circleIdSet", org.apache.thrift.protocol.TType.SET, (short)73);
  private static final org.apache.thrift.protocol.TField PARTNER_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerIdSet", org.apache.thrift.protocol.TType.SET, (short)74);
  private static final org.apache.thrift.protocol.TField STATUS_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("statusSet", org.apache.thrift.protocol.TType.SET, (short)75);
  private static final org.apache.thrift.protocol.TField PRICE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("priceStart", org.apache.thrift.protocol.TType.DOUBLE, (short)76);
  private static final org.apache.thrift.protocol.TField PRICE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("priceEnd", org.apache.thrift.protocol.TType.DOUBLE, (short)77);
  private static final org.apache.thrift.protocol.TField ORIGINAL_PRICE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("originalPriceStart", org.apache.thrift.protocol.TType.DOUBLE, (short)78);
  private static final org.apache.thrift.protocol.TField ORIGINAL_PRICE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("originalPriceEnd", org.apache.thrift.protocol.TType.DOUBLE, (short)79);
  private static final org.apache.thrift.protocol.TField CASHBACK_START_FIELD_DESC = new org.apache.thrift.protocol.TField("cashbackStart", org.apache.thrift.protocol.TType.DOUBLE, (short)80);
  private static final org.apache.thrift.protocol.TField CASHBACK_END_FIELD_DESC = new org.apache.thrift.protocol.TField("cashbackEnd", org.apache.thrift.protocol.TType.DOUBLE, (short)81);
  private static final org.apache.thrift.protocol.TField POPULARITY_START_FIELD_DESC = new org.apache.thrift.protocol.TField("popularityStart", org.apache.thrift.protocol.TType.I32, (short)82);
  private static final org.apache.thrift.protocol.TField POPULARITY_END_FIELD_DESC = new org.apache.thrift.protocol.TField("popularityEnd", org.apache.thrift.protocol.TType.I32, (short)83);
  private static final org.apache.thrift.protocol.TField POPULARITY_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("popularitySet", org.apache.thrift.protocol.TType.SET, (short)84);
  private static final org.apache.thrift.protocol.TField COURSE_HOUR_NUM_START_FIELD_DESC = new org.apache.thrift.protocol.TField("courseHourNumStart", org.apache.thrift.protocol.TType.I32, (short)85);
  private static final org.apache.thrift.protocol.TField COURSE_HOUR_NUM_END_FIELD_DESC = new org.apache.thrift.protocol.TField("courseHourNumEnd", org.apache.thrift.protocol.TType.I32, (short)86);
  private static final org.apache.thrift.protocol.TField COURSE_HOUR_NUM_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("courseHourNumSet", org.apache.thrift.protocol.TType.SET, (short)87);
  private static final org.apache.thrift.protocol.TField START_DATE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("startDateStart", org.apache.thrift.protocol.TType.I64, (short)88);
  private static final org.apache.thrift.protocol.TField START_DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("startDateEnd", org.apache.thrift.protocol.TType.I64, (short)89);
  private static final org.apache.thrift.protocol.TField FINISH_DATE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("finishDateStart", org.apache.thrift.protocol.TType.I64, (short)90);
  private static final org.apache.thrift.protocol.TField FINISH_DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("finishDateEnd", org.apache.thrift.protocol.TType.I64, (short)91);
  private static final org.apache.thrift.protocol.TField CUTOFF_DATE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("cutoffDateStart", org.apache.thrift.protocol.TType.I64, (short)92);
  private static final org.apache.thrift.protocol.TField CUTOFF_DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("cutoffDateEnd", org.apache.thrift.protocol.TType.I64, (short)93);
  private static final org.apache.thrift.protocol.TField CLASS_TYPE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("classTypeSet", org.apache.thrift.protocol.TType.SET, (short)94);
  private static final org.apache.thrift.protocol.TField DISCOUNT_START_FIELD_DESC = new org.apache.thrift.protocol.TField("discountStart", org.apache.thrift.protocol.TType.DOUBLE, (short)95);
  private static final org.apache.thrift.protocol.TField DISCOUNT_END_FIELD_DESC = new org.apache.thrift.protocol.TField("discountEnd", org.apache.thrift.protocol.TType.DOUBLE, (short)96);
  private static final org.apache.thrift.protocol.TField RATING_START_FIELD_DESC = new org.apache.thrift.protocol.TField("ratingStart", org.apache.thrift.protocol.TType.DOUBLE, (short)97);
  private static final org.apache.thrift.protocol.TField RATING_END_FIELD_DESC = new org.apache.thrift.protocol.TField("ratingEnd", org.apache.thrift.protocol.TType.DOUBLE, (short)98);
  private static final org.apache.thrift.protocol.TField BOOKING_TOTAL_START_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingTotalStart", org.apache.thrift.protocol.TType.I32, (short)99);
  private static final org.apache.thrift.protocol.TField BOOKING_TOTAL_END_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingTotalEnd", org.apache.thrift.protocol.TType.I32, (short)100);
  private static final org.apache.thrift.protocol.TField BOOKING_TOTAL_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingTotalSet", org.apache.thrift.protocol.TType.SET, (short)101);
  private static final org.apache.thrift.protocol.TField SCHOOLTIME_DAY_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("schooltimeDaySet", org.apache.thrift.protocol.TType.SET, (short)102);
  private static final org.apache.thrift.protocol.TField SCHOOLTIME_WEEK_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("schooltimeWeekSet", org.apache.thrift.protocol.TType.SET, (short)103);
  private static final org.apache.thrift.protocol.TField TEACHER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherList", org.apache.thrift.protocol.TType.LIST, (short)104);
  private static final org.apache.thrift.protocol.TField CLASS_PHOTO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("classPhotoList", org.apache.thrift.protocol.TType.LIST, (short)105);
  private static final org.apache.thrift.protocol.TField LOGO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("logoUrl", org.apache.thrift.protocol.TType.STRING, (short)106);
  private static final org.apache.thrift.protocol.TField WHOLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("wholeName", org.apache.thrift.protocol.TType.STRING, (short)107);
  private static final org.apache.thrift.protocol.TField INST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("instName", org.apache.thrift.protocol.TType.STRING, (short)108);
  private static final org.apache.thrift.protocol.TField PARTNER_INTRO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerIntro", org.apache.thrift.protocol.TType.STRING, (short)109);
  private static final org.apache.thrift.protocol.TField PARTNER_QUALIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerQualification", org.apache.thrift.protocol.TType.I32, (short)110);
  private static final org.apache.thrift.protocol.TField PARTNER_DISTINCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerDistinction", org.apache.thrift.protocol.TType.STRING, (short)111);
  private static final org.apache.thrift.protocol.TField PARTNER_RATING_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerRating", org.apache.thrift.protocol.TType.DOUBLE, (short)112);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)113);
  private static final org.apache.thrift.protocol.TField ADDRESS_LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("addressLat", org.apache.thrift.protocol.TType.DOUBLE, (short)114);
  private static final org.apache.thrift.protocol.TField ADDRESS_LNG_FIELD_DESC = new org.apache.thrift.protocol.TField("addressLng", org.apache.thrift.protocol.TType.DOUBLE, (short)115);
  private static final org.apache.thrift.protocol.TField CATEGORY_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryValue", org.apache.thrift.protocol.TType.STRING, (short)116);
  private static final org.apache.thrift.protocol.TField CATEGORY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryName", org.apache.thrift.protocol.TType.STRING, (short)117);
  private static final org.apache.thrift.protocol.TField CATEGORY_RANK_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryRank", org.apache.thrift.protocol.TType.I32, (short)118);
  private static final org.apache.thrift.protocol.TField LOCATION_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("locationValue", org.apache.thrift.protocol.TType.STRING, (short)119);
  private static final org.apache.thrift.protocol.TField LOCATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("locationName", org.apache.thrift.protocol.TType.STRING, (short)120);
  private static final org.apache.thrift.protocol.TField CIRCLE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("circleValue", org.apache.thrift.protocol.TType.STRING, (short)121);
  private static final org.apache.thrift.protocol.TField CIRCLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("circleName", org.apache.thrift.protocol.TType.STRING, (short)122);
  private static final org.apache.thrift.protocol.TField RATING_FIELD_DESC = new org.apache.thrift.protocol.TField("rating", org.apache.thrift.protocol.TType.DOUBLE, (short)123);
  private static final org.apache.thrift.protocol.TField BOOKING_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingTotal", org.apache.thrift.protocol.TType.I32, (short)124);
  private static final org.apache.thrift.protocol.TField NO_REFUND_DATE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("noRefundDateStart", org.apache.thrift.protocol.TType.I64, (short)125);
  private static final org.apache.thrift.protocol.TField NO_REFUND_DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("noRefundDateEnd", org.apache.thrift.protocol.TType.I64, (short)126);
  private static final org.apache.thrift.protocol.TField CASHBACK_DATE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("cashbackDateStart", org.apache.thrift.protocol.TType.I64, (short)127);
  private static final org.apache.thrift.protocol.TField CASHBACK_DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("cashbackDateEnd", org.apache.thrift.protocol.TType.I64, (short)128);
  private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateIdSet", org.apache.thrift.protocol.TType.SET, (short)129);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CourseBoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CourseBoTupleSchemeFactory());
  }

  public int id; // required
  public String courseName; // required
  public int courseTemplateId; // required
  public int categoryId; // required
  public int locationId; // required
  public int circleId; // required
  public int partnerId; // required
  public int addressId; // required
  public double price; // required
  public double originalPrice; // required
  public double cashback; // required
  public double commission; // required
  public double serviceCharge; // required
  public int status; // required
  public long lastModifyTime; // required
  public long createTime; // required
  public int enabled; // required
  public int courseHourLength; // required
  public String teachingMethod; // required
  public String teachingMaterialFee; // required
  public String downloadMaterials; // required
  public String bonusService; // required
  public String marking; // required
  public String assignments; // required
  public String trail; // required
  public String questionSession; // required
  public String teachingAndExercise; // required
  public String classTeacher; // required
  public String goal; // required
  public String outline; // required
  public String regPhone; // required
  public String contact; // required
  public String extracurricular; // required
  public String passAgreement; // required
  public String qualityAssurance; // required
  public String questionBank; // required
  public String teachingMaterialIntro; // required
  public String studyDayNote; // required
  public String highScoreReward; // required
  public String prerequest; // required
  public String suitableStudent; // required
  public String openCourseRequirement; // required
  public String certification; // required
  public String quiz; // required
  public String courseIntro; // required
  public String reference; // required
  public String regLocation; // required
  public int finishTime2; // required
  public int startTime2; // required
  public int finishTime1; // required
  public int startTime1; // required
  public int startUponArrival; // required
  public int bookingType; // required
  public long cashbackDate; // required
  public long noRefundDate; // required
  public long cutoffDate; // required
  public long finishDate; // required
  public long startDate; // required
  public int popularity; // required
  public int courseHourNum; // required
  public String classSize; // required
  public int classType; // required
  public double discount; // required
  public int schooltimeDay; // required
  public int schooltimeWeek; // required
  public Set<Integer> idSet; // required
  public long lastModifyTimeStart; // required
  public long lastModifyTimeEnd; // required
  public long createTimeStart; // required
  public long createTimeEnd; // required
  public Set<Integer> categoryIdSet; // required
  public Set<Integer> locationIdSet; // required
  public Set<Integer> circleIdSet; // required
  public Set<Integer> partnerIdSet; // required
  public Set<Integer> statusSet; // required
  public double priceStart; // required
  public double priceEnd; // required
  public double originalPriceStart; // required
  public double originalPriceEnd; // required
  public double cashbackStart; // required
  public double cashbackEnd; // required
  public int popularityStart; // required
  public int popularityEnd; // required
  public Set<Integer> popularitySet; // required
  public int courseHourNumStart; // required
  public int courseHourNumEnd; // required
  public Set<Integer> courseHourNumSet; // required
  public long startDateStart; // required
  public long startDateEnd; // required
  public long finishDateStart; // required
  public long finishDateEnd; // required
  public long cutoffDateStart; // required
  public long cutoffDateEnd; // required
  public Set<Integer> classTypeSet; // required
  public double discountStart; // required
  public double discountEnd; // required
  public double ratingStart; // required
  public double ratingEnd; // required
  public int bookingTotalStart; // required
  public int bookingTotalEnd; // required
  public Set<Integer> bookingTotalSet; // required
  public Set<Integer> schooltimeDaySet; // required
  public Set<Integer> schooltimeWeekSet; // required
  public List<com.ishangke.edunav.commoncontract.model.TeacherBo> teacherList; // required
  public List<com.ishangke.edunav.commoncontract.model.ClassPhotoBo> classPhotoList; // required
  public String logoUrl; // required
  public String wholeName; // required
  public String instName; // required
  public String partnerIntro; // required
  public int partnerQualification; // required
  public String partnerDistinction; // required
  public double partnerRating; // required
  public String address; // required
  public double addressLat; // required
  public double addressLng; // required
  public String categoryValue; // required
  public String categoryName; // required
  public int categoryRank; // required
  public String locationValue; // required
  public String locationName; // required
  public String circleValue; // required
  public String circleName; // required
  public double rating; // required
  public int bookingTotal; // required
  public long noRefundDateStart; // required
  public long noRefundDateEnd; // required
  public long cashbackDateStart; // required
  public long cashbackDateEnd; // required
  public Set<Integer> courseTemplateIdSet; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    COURSE_NAME((short)2, "courseName"),
    COURSE_TEMPLATE_ID((short)3, "courseTemplateId"),
    CATEGORY_ID((short)4, "categoryId"),
    LOCATION_ID((short)5, "locationId"),
    CIRCLE_ID((short)6, "circleId"),
    PARTNER_ID((short)7, "partnerId"),
    ADDRESS_ID((short)8, "addressId"),
    PRICE((short)9, "price"),
    ORIGINAL_PRICE((short)10, "originalPrice"),
    CASHBACK((short)11, "cashback"),
    COMMISSION((short)12, "commission"),
    SERVICE_CHARGE((short)13, "serviceCharge"),
    STATUS((short)14, "status"),
    LAST_MODIFY_TIME((short)15, "lastModifyTime"),
    CREATE_TIME((short)16, "createTime"),
    ENABLED((short)17, "enabled"),
    COURSE_HOUR_LENGTH((short)18, "courseHourLength"),
    TEACHING_METHOD((short)19, "teachingMethod"),
    TEACHING_MATERIAL_FEE((short)20, "teachingMaterialFee"),
    DOWNLOAD_MATERIALS((short)21, "downloadMaterials"),
    BONUS_SERVICE((short)22, "bonusService"),
    MARKING((short)23, "marking"),
    ASSIGNMENTS((short)24, "assignments"),
    TRAIL((short)25, "trail"),
    QUESTION_SESSION((short)26, "questionSession"),
    TEACHING_AND_EXERCISE((short)27, "teachingAndExercise"),
    CLASS_TEACHER((short)28, "classTeacher"),
    GOAL((short)29, "goal"),
    OUTLINE((short)30, "outline"),
    REG_PHONE((short)31, "regPhone"),
    CONTACT((short)32, "contact"),
    EXTRACURRICULAR((short)33, "extracurricular"),
    PASS_AGREEMENT((short)34, "passAgreement"),
    QUALITY_ASSURANCE((short)35, "qualityAssurance"),
    QUESTION_BANK((short)36, "questionBank"),
    TEACHING_MATERIAL_INTRO((short)37, "teachingMaterialIntro"),
    STUDY_DAY_NOTE((short)38, "studyDayNote"),
    HIGH_SCORE_REWARD((short)39, "highScoreReward"),
    PREREQUEST((short)40, "prerequest"),
    SUITABLE_STUDENT((short)41, "suitableStudent"),
    OPEN_COURSE_REQUIREMENT((short)42, "openCourseRequirement"),
    CERTIFICATION((short)43, "certification"),
    QUIZ((short)44, "quiz"),
    COURSE_INTRO((short)45, "courseIntro"),
    REFERENCE((short)46, "reference"),
    REG_LOCATION((short)47, "regLocation"),
    FINISH_TIME2((short)48, "finishTime2"),
    START_TIME2((short)49, "startTime2"),
    FINISH_TIME1((short)50, "finishTime1"),
    START_TIME1((short)51, "startTime1"),
    START_UPON_ARRIVAL((short)52, "startUponArrival"),
    BOOKING_TYPE((short)53, "bookingType"),
    CASHBACK_DATE((short)54, "cashbackDate"),
    NO_REFUND_DATE((short)55, "noRefundDate"),
    CUTOFF_DATE((short)56, "cutoffDate"),
    FINISH_DATE((short)57, "finishDate"),
    START_DATE((short)58, "startDate"),
    POPULARITY((short)59, "popularity"),
    COURSE_HOUR_NUM((short)60, "courseHourNum"),
    CLASS_SIZE((short)61, "classSize"),
    CLASS_TYPE((short)62, "classType"),
    DISCOUNT((short)63, "discount"),
    SCHOOLTIME_DAY((short)64, "schooltimeDay"),
    SCHOOLTIME_WEEK((short)65, "schooltimeWeek"),
    ID_SET((short)66, "idSet"),
    LAST_MODIFY_TIME_START((short)67, "lastModifyTimeStart"),
    LAST_MODIFY_TIME_END((short)68, "lastModifyTimeEnd"),
    CREATE_TIME_START((short)69, "createTimeStart"),
    CREATE_TIME_END((short)70, "createTimeEnd"),
    CATEGORY_ID_SET((short)71, "categoryIdSet"),
    LOCATION_ID_SET((short)72, "locationIdSet"),
    CIRCLE_ID_SET((short)73, "circleIdSet"),
    PARTNER_ID_SET((short)74, "partnerIdSet"),
    STATUS_SET((short)75, "statusSet"),
    PRICE_START((short)76, "priceStart"),
    PRICE_END((short)77, "priceEnd"),
    ORIGINAL_PRICE_START((short)78, "originalPriceStart"),
    ORIGINAL_PRICE_END((short)79, "originalPriceEnd"),
    CASHBACK_START((short)80, "cashbackStart"),
    CASHBACK_END((short)81, "cashbackEnd"),
    POPULARITY_START((short)82, "popularityStart"),
    POPULARITY_END((short)83, "popularityEnd"),
    POPULARITY_SET((short)84, "popularitySet"),
    COURSE_HOUR_NUM_START((short)85, "courseHourNumStart"),
    COURSE_HOUR_NUM_END((short)86, "courseHourNumEnd"),
    COURSE_HOUR_NUM_SET((short)87, "courseHourNumSet"),
    START_DATE_START((short)88, "startDateStart"),
    START_DATE_END((short)89, "startDateEnd"),
    FINISH_DATE_START((short)90, "finishDateStart"),
    FINISH_DATE_END((short)91, "finishDateEnd"),
    CUTOFF_DATE_START((short)92, "cutoffDateStart"),
    CUTOFF_DATE_END((short)93, "cutoffDateEnd"),
    CLASS_TYPE_SET((short)94, "classTypeSet"),
    DISCOUNT_START((short)95, "discountStart"),
    DISCOUNT_END((short)96, "discountEnd"),
    RATING_START((short)97, "ratingStart"),
    RATING_END((short)98, "ratingEnd"),
    BOOKING_TOTAL_START((short)99, "bookingTotalStart"),
    BOOKING_TOTAL_END((short)100, "bookingTotalEnd"),
    BOOKING_TOTAL_SET((short)101, "bookingTotalSet"),
    SCHOOLTIME_DAY_SET((short)102, "schooltimeDaySet"),
    SCHOOLTIME_WEEK_SET((short)103, "schooltimeWeekSet"),
    TEACHER_LIST((short)104, "teacherList"),
    CLASS_PHOTO_LIST((short)105, "classPhotoList"),
    LOGO_URL((short)106, "logoUrl"),
    WHOLE_NAME((short)107, "wholeName"),
    INST_NAME((short)108, "instName"),
    PARTNER_INTRO((short)109, "partnerIntro"),
    PARTNER_QUALIFICATION((short)110, "partnerQualification"),
    PARTNER_DISTINCTION((short)111, "partnerDistinction"),
    PARTNER_RATING((short)112, "partnerRating"),
    ADDRESS((short)113, "address"),
    ADDRESS_LAT((short)114, "addressLat"),
    ADDRESS_LNG((short)115, "addressLng"),
    CATEGORY_VALUE((short)116, "categoryValue"),
    CATEGORY_NAME((short)117, "categoryName"),
    CATEGORY_RANK((short)118, "categoryRank"),
    LOCATION_VALUE((short)119, "locationValue"),
    LOCATION_NAME((short)120, "locationName"),
    CIRCLE_VALUE((short)121, "circleValue"),
    CIRCLE_NAME((short)122, "circleName"),
    RATING((short)123, "rating"),
    BOOKING_TOTAL((short)124, "bookingTotal"),
    NO_REFUND_DATE_START((short)125, "noRefundDateStart"),
    NO_REFUND_DATE_END((short)126, "noRefundDateEnd"),
    CASHBACK_DATE_START((short)127, "cashbackDateStart"),
    CASHBACK_DATE_END((short)128, "cashbackDateEnd"),
    COURSE_TEMPLATE_ID_SET((short)129, "courseTemplateIdSet");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // COURSE_NAME
          return COURSE_NAME;
        case 3: // COURSE_TEMPLATE_ID
          return COURSE_TEMPLATE_ID;
        case 4: // CATEGORY_ID
          return CATEGORY_ID;
        case 5: // LOCATION_ID
          return LOCATION_ID;
        case 6: // CIRCLE_ID
          return CIRCLE_ID;
        case 7: // PARTNER_ID
          return PARTNER_ID;
        case 8: // ADDRESS_ID
          return ADDRESS_ID;
        case 9: // PRICE
          return PRICE;
        case 10: // ORIGINAL_PRICE
          return ORIGINAL_PRICE;
        case 11: // CASHBACK
          return CASHBACK;
        case 12: // COMMISSION
          return COMMISSION;
        case 13: // SERVICE_CHARGE
          return SERVICE_CHARGE;
        case 14: // STATUS
          return STATUS;
        case 15: // LAST_MODIFY_TIME
          return LAST_MODIFY_TIME;
        case 16: // CREATE_TIME
          return CREATE_TIME;
        case 17: // ENABLED
          return ENABLED;
        case 18: // COURSE_HOUR_LENGTH
          return COURSE_HOUR_LENGTH;
        case 19: // TEACHING_METHOD
          return TEACHING_METHOD;
        case 20: // TEACHING_MATERIAL_FEE
          return TEACHING_MATERIAL_FEE;
        case 21: // DOWNLOAD_MATERIALS
          return DOWNLOAD_MATERIALS;
        case 22: // BONUS_SERVICE
          return BONUS_SERVICE;
        case 23: // MARKING
          return MARKING;
        case 24: // ASSIGNMENTS
          return ASSIGNMENTS;
        case 25: // TRAIL
          return TRAIL;
        case 26: // QUESTION_SESSION
          return QUESTION_SESSION;
        case 27: // TEACHING_AND_EXERCISE
          return TEACHING_AND_EXERCISE;
        case 28: // CLASS_TEACHER
          return CLASS_TEACHER;
        case 29: // GOAL
          return GOAL;
        case 30: // OUTLINE
          return OUTLINE;
        case 31: // REG_PHONE
          return REG_PHONE;
        case 32: // CONTACT
          return CONTACT;
        case 33: // EXTRACURRICULAR
          return EXTRACURRICULAR;
        case 34: // PASS_AGREEMENT
          return PASS_AGREEMENT;
        case 35: // QUALITY_ASSURANCE
          return QUALITY_ASSURANCE;
        case 36: // QUESTION_BANK
          return QUESTION_BANK;
        case 37: // TEACHING_MATERIAL_INTRO
          return TEACHING_MATERIAL_INTRO;
        case 38: // STUDY_DAY_NOTE
          return STUDY_DAY_NOTE;
        case 39: // HIGH_SCORE_REWARD
          return HIGH_SCORE_REWARD;
        case 40: // PREREQUEST
          return PREREQUEST;
        case 41: // SUITABLE_STUDENT
          return SUITABLE_STUDENT;
        case 42: // OPEN_COURSE_REQUIREMENT
          return OPEN_COURSE_REQUIREMENT;
        case 43: // CERTIFICATION
          return CERTIFICATION;
        case 44: // QUIZ
          return QUIZ;
        case 45: // COURSE_INTRO
          return COURSE_INTRO;
        case 46: // REFERENCE
          return REFERENCE;
        case 47: // REG_LOCATION
          return REG_LOCATION;
        case 48: // FINISH_TIME2
          return FINISH_TIME2;
        case 49: // START_TIME2
          return START_TIME2;
        case 50: // FINISH_TIME1
          return FINISH_TIME1;
        case 51: // START_TIME1
          return START_TIME1;
        case 52: // START_UPON_ARRIVAL
          return START_UPON_ARRIVAL;
        case 53: // BOOKING_TYPE
          return BOOKING_TYPE;
        case 54: // CASHBACK_DATE
          return CASHBACK_DATE;
        case 55: // NO_REFUND_DATE
          return NO_REFUND_DATE;
        case 56: // CUTOFF_DATE
          return CUTOFF_DATE;
        case 57: // FINISH_DATE
          return FINISH_DATE;
        case 58: // START_DATE
          return START_DATE;
        case 59: // POPULARITY
          return POPULARITY;
        case 60: // COURSE_HOUR_NUM
          return COURSE_HOUR_NUM;
        case 61: // CLASS_SIZE
          return CLASS_SIZE;
        case 62: // CLASS_TYPE
          return CLASS_TYPE;
        case 63: // DISCOUNT
          return DISCOUNT;
        case 64: // SCHOOLTIME_DAY
          return SCHOOLTIME_DAY;
        case 65: // SCHOOLTIME_WEEK
          return SCHOOLTIME_WEEK;
        case 66: // ID_SET
          return ID_SET;
        case 67: // LAST_MODIFY_TIME_START
          return LAST_MODIFY_TIME_START;
        case 68: // LAST_MODIFY_TIME_END
          return LAST_MODIFY_TIME_END;
        case 69: // CREATE_TIME_START
          return CREATE_TIME_START;
        case 70: // CREATE_TIME_END
          return CREATE_TIME_END;
        case 71: // CATEGORY_ID_SET
          return CATEGORY_ID_SET;
        case 72: // LOCATION_ID_SET
          return LOCATION_ID_SET;
        case 73: // CIRCLE_ID_SET
          return CIRCLE_ID_SET;
        case 74: // PARTNER_ID_SET
          return PARTNER_ID_SET;
        case 75: // STATUS_SET
          return STATUS_SET;
        case 76: // PRICE_START
          return PRICE_START;
        case 77: // PRICE_END
          return PRICE_END;
        case 78: // ORIGINAL_PRICE_START
          return ORIGINAL_PRICE_START;
        case 79: // ORIGINAL_PRICE_END
          return ORIGINAL_PRICE_END;
        case 80: // CASHBACK_START
          return CASHBACK_START;
        case 81: // CASHBACK_END
          return CASHBACK_END;
        case 82: // POPULARITY_START
          return POPULARITY_START;
        case 83: // POPULARITY_END
          return POPULARITY_END;
        case 84: // POPULARITY_SET
          return POPULARITY_SET;
        case 85: // COURSE_HOUR_NUM_START
          return COURSE_HOUR_NUM_START;
        case 86: // COURSE_HOUR_NUM_END
          return COURSE_HOUR_NUM_END;
        case 87: // COURSE_HOUR_NUM_SET
          return COURSE_HOUR_NUM_SET;
        case 88: // START_DATE_START
          return START_DATE_START;
        case 89: // START_DATE_END
          return START_DATE_END;
        case 90: // FINISH_DATE_START
          return FINISH_DATE_START;
        case 91: // FINISH_DATE_END
          return FINISH_DATE_END;
        case 92: // CUTOFF_DATE_START
          return CUTOFF_DATE_START;
        case 93: // CUTOFF_DATE_END
          return CUTOFF_DATE_END;
        case 94: // CLASS_TYPE_SET
          return CLASS_TYPE_SET;
        case 95: // DISCOUNT_START
          return DISCOUNT_START;
        case 96: // DISCOUNT_END
          return DISCOUNT_END;
        case 97: // RATING_START
          return RATING_START;
        case 98: // RATING_END
          return RATING_END;
        case 99: // BOOKING_TOTAL_START
          return BOOKING_TOTAL_START;
        case 100: // BOOKING_TOTAL_END
          return BOOKING_TOTAL_END;
        case 101: // BOOKING_TOTAL_SET
          return BOOKING_TOTAL_SET;
        case 102: // SCHOOLTIME_DAY_SET
          return SCHOOLTIME_DAY_SET;
        case 103: // SCHOOLTIME_WEEK_SET
          return SCHOOLTIME_WEEK_SET;
        case 104: // TEACHER_LIST
          return TEACHER_LIST;
        case 105: // CLASS_PHOTO_LIST
          return CLASS_PHOTO_LIST;
        case 106: // LOGO_URL
          return LOGO_URL;
        case 107: // WHOLE_NAME
          return WHOLE_NAME;
        case 108: // INST_NAME
          return INST_NAME;
        case 109: // PARTNER_INTRO
          return PARTNER_INTRO;
        case 110: // PARTNER_QUALIFICATION
          return PARTNER_QUALIFICATION;
        case 111: // PARTNER_DISTINCTION
          return PARTNER_DISTINCTION;
        case 112: // PARTNER_RATING
          return PARTNER_RATING;
        case 113: // ADDRESS
          return ADDRESS;
        case 114: // ADDRESS_LAT
          return ADDRESS_LAT;
        case 115: // ADDRESS_LNG
          return ADDRESS_LNG;
        case 116: // CATEGORY_VALUE
          return CATEGORY_VALUE;
        case 117: // CATEGORY_NAME
          return CATEGORY_NAME;
        case 118: // CATEGORY_RANK
          return CATEGORY_RANK;
        case 119: // LOCATION_VALUE
          return LOCATION_VALUE;
        case 120: // LOCATION_NAME
          return LOCATION_NAME;
        case 121: // CIRCLE_VALUE
          return CIRCLE_VALUE;
        case 122: // CIRCLE_NAME
          return CIRCLE_NAME;
        case 123: // RATING
          return RATING;
        case 124: // BOOKING_TOTAL
          return BOOKING_TOTAL;
        case 125: // NO_REFUND_DATE_START
          return NO_REFUND_DATE_START;
        case 126: // NO_REFUND_DATE_END
          return NO_REFUND_DATE_END;
        case 127: // CASHBACK_DATE_START
          return CASHBACK_DATE_START;
        case 128: // CASHBACK_DATE_END
          return CASHBACK_DATE_END;
        case 129: // COURSE_TEMPLATE_ID_SET
          return COURSE_TEMPLATE_ID_SET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __COURSETEMPLATEID_ISSET_ID = 1;
  private static final int __CATEGORYID_ISSET_ID = 2;
  private static final int __LOCATIONID_ISSET_ID = 3;
  private static final int __CIRCLEID_ISSET_ID = 4;
  private static final int __PARTNERID_ISSET_ID = 5;
  private static final int __ADDRESSID_ISSET_ID = 6;
  private static final int __PRICE_ISSET_ID = 7;
  private static final int __ORIGINALPRICE_ISSET_ID = 8;
  private static final int __CASHBACK_ISSET_ID = 9;
  private static final int __COMMISSION_ISSET_ID = 10;
  private static final int __SERVICECHARGE_ISSET_ID = 11;
  private static final int __STATUS_ISSET_ID = 12;
  private static final int __LASTMODIFYTIME_ISSET_ID = 13;
  private static final int __CREATETIME_ISSET_ID = 14;
  private static final int __ENABLED_ISSET_ID = 15;
  private static final int __COURSEHOURLENGTH_ISSET_ID = 16;
  private static final int __FINISHTIME2_ISSET_ID = 17;
  private static final int __STARTTIME2_ISSET_ID = 18;
  private static final int __FINISHTIME1_ISSET_ID = 19;
  private static final int __STARTTIME1_ISSET_ID = 20;
  private static final int __STARTUPONARRIVAL_ISSET_ID = 21;
  private static final int __BOOKINGTYPE_ISSET_ID = 22;
  private static final int __CASHBACKDATE_ISSET_ID = 23;
  private static final int __NOREFUNDDATE_ISSET_ID = 24;
  private static final int __CUTOFFDATE_ISSET_ID = 25;
  private static final int __FINISHDATE_ISSET_ID = 26;
  private static final int __STARTDATE_ISSET_ID = 27;
  private static final int __POPULARITY_ISSET_ID = 28;
  private static final int __COURSEHOURNUM_ISSET_ID = 29;
  private static final int __CLASSTYPE_ISSET_ID = 30;
  private static final int __DISCOUNT_ISSET_ID = 31;
  private static final int __SCHOOLTIMEDAY_ISSET_ID = 32;
  private static final int __SCHOOLTIMEWEEK_ISSET_ID = 33;
  private static final int __LASTMODIFYTIMESTART_ISSET_ID = 34;
  private static final int __LASTMODIFYTIMEEND_ISSET_ID = 35;
  private static final int __CREATETIMESTART_ISSET_ID = 36;
  private static final int __CREATETIMEEND_ISSET_ID = 37;
  private static final int __PRICESTART_ISSET_ID = 38;
  private static final int __PRICEEND_ISSET_ID = 39;
  private static final int __ORIGINALPRICESTART_ISSET_ID = 40;
  private static final int __ORIGINALPRICEEND_ISSET_ID = 41;
  private static final int __CASHBACKSTART_ISSET_ID = 42;
  private static final int __CASHBACKEND_ISSET_ID = 43;
  private static final int __POPULARITYSTART_ISSET_ID = 44;
  private static final int __POPULARITYEND_ISSET_ID = 45;
  private static final int __COURSEHOURNUMSTART_ISSET_ID = 46;
  private static final int __COURSEHOURNUMEND_ISSET_ID = 47;
  private static final int __STARTDATESTART_ISSET_ID = 48;
  private static final int __STARTDATEEND_ISSET_ID = 49;
  private static final int __FINISHDATESTART_ISSET_ID = 50;
  private static final int __FINISHDATEEND_ISSET_ID = 51;
  private static final int __CUTOFFDATESTART_ISSET_ID = 52;
  private static final int __CUTOFFDATEEND_ISSET_ID = 53;
  private static final int __DISCOUNTSTART_ISSET_ID = 54;
  private static final int __DISCOUNTEND_ISSET_ID = 55;
  private static final int __RATINGSTART_ISSET_ID = 56;
  private static final int __RATINGEND_ISSET_ID = 57;
  private static final int __BOOKINGTOTALSTART_ISSET_ID = 58;
  private static final int __BOOKINGTOTALEND_ISSET_ID = 59;
  private static final int __PARTNERQUALIFICATION_ISSET_ID = 60;
  private static final int __PARTNERRATING_ISSET_ID = 61;
  private static final int __ADDRESSLAT_ISSET_ID = 62;
  private static final int __ADDRESSLNG_ISSET_ID = 63;
  private static final int __CATEGORYRANK_ISSET_ID = 64;
  private static final int __RATING_ISSET_ID = 65;
  private static final int __BOOKINGTOTAL_ISSET_ID = 66;
  private static final int __NOREFUNDDATESTART_ISSET_ID = 67;
  private static final int __NOREFUNDDATEEND_ISSET_ID = 68;
  private static final int __CASHBACKDATESTART_ISSET_ID = 69;
  private static final int __CASHBACKDATEEND_ISSET_ID = 70;
  private BitSet __isset_bit_vector = new BitSet(71);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COURSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("courseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COURSE_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCATION_ID, new org.apache.thrift.meta_data.FieldMetaData("locationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CIRCLE_ID, new org.apache.thrift.meta_data.FieldMetaData("circleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADDRESS_ID, new org.apache.thrift.meta_data.FieldMetaData("addressId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORIGINAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("originalPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CASHBACK, new org.apache.thrift.meta_data.FieldMetaData("cashback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("commission", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SERVICE_CHARGE, new org.apache.thrift.meta_data.FieldMetaData("serviceCharge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_MODIFY_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENABLED, new org.apache.thrift.meta_data.FieldMetaData("enabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COURSE_HOUR_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("courseHourLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEACHING_METHOD, new org.apache.thrift.meta_data.FieldMetaData("teachingMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEACHING_MATERIAL_FEE, new org.apache.thrift.meta_data.FieldMetaData("teachingMaterialFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOWNLOAD_MATERIALS, new org.apache.thrift.meta_data.FieldMetaData("downloadMaterials", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BONUS_SERVICE, new org.apache.thrift.meta_data.FieldMetaData("bonusService", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MARKING, new org.apache.thrift.meta_data.FieldMetaData("marking", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSIGNMENTS, new org.apache.thrift.meta_data.FieldMetaData("assignments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRAIL, new org.apache.thrift.meta_data.FieldMetaData("trail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUESTION_SESSION, new org.apache.thrift.meta_data.FieldMetaData("questionSession", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEACHING_AND_EXERCISE, new org.apache.thrift.meta_data.FieldMetaData("teachingAndExercise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLASS_TEACHER, new org.apache.thrift.meta_data.FieldMetaData("classTeacher", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GOAL, new org.apache.thrift.meta_data.FieldMetaData("goal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLINE, new org.apache.thrift.meta_data.FieldMetaData("outline", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REG_PHONE, new org.apache.thrift.meta_data.FieldMetaData("regPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACT, new org.apache.thrift.meta_data.FieldMetaData("contact", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTRACURRICULAR, new org.apache.thrift.meta_data.FieldMetaData("extracurricular", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASS_AGREEMENT, new org.apache.thrift.meta_data.FieldMetaData("passAgreement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUALITY_ASSURANCE, new org.apache.thrift.meta_data.FieldMetaData("qualityAssurance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUESTION_BANK, new org.apache.thrift.meta_data.FieldMetaData("questionBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEACHING_MATERIAL_INTRO, new org.apache.thrift.meta_data.FieldMetaData("teachingMaterialIntro", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STUDY_DAY_NOTE, new org.apache.thrift.meta_data.FieldMetaData("studyDayNote", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIGH_SCORE_REWARD, new org.apache.thrift.meta_data.FieldMetaData("highScoreReward", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PREREQUEST, new org.apache.thrift.meta_data.FieldMetaData("prerequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUITABLE_STUDENT, new org.apache.thrift.meta_data.FieldMetaData("suitableStudent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPEN_COURSE_REQUIREMENT, new org.apache.thrift.meta_data.FieldMetaData("openCourseRequirement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERTIFICATION, new org.apache.thrift.meta_data.FieldMetaData("certification", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUIZ, new org.apache.thrift.meta_data.FieldMetaData("quiz", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COURSE_INTRO, new org.apache.thrift.meta_data.FieldMetaData("courseIntro", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFERENCE, new org.apache.thrift.meta_data.FieldMetaData("reference", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REG_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("regLocation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINISH_TIME2, new org.apache.thrift.meta_data.FieldMetaData("finishTime2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME2, new org.apache.thrift.meta_data.FieldMetaData("startTime2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FINISH_TIME1, new org.apache.thrift.meta_data.FieldMetaData("finishTime1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME1, new org.apache.thrift.meta_data.FieldMetaData("startTime1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_UPON_ARRIVAL, new org.apache.thrift.meta_data.FieldMetaData("startUponArrival", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOOKING_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bookingType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CASHBACK_DATE, new org.apache.thrift.meta_data.FieldMetaData("cashbackDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NO_REFUND_DATE, new org.apache.thrift.meta_data.FieldMetaData("noRefundDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CUTOFF_DATE, new org.apache.thrift.meta_data.FieldMetaData("cutoffDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FINISH_DATE, new org.apache.thrift.meta_data.FieldMetaData("finishDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POPULARITY, new org.apache.thrift.meta_data.FieldMetaData("popularity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COURSE_HOUR_NUM, new org.apache.thrift.meta_data.FieldMetaData("courseHourNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLASS_SIZE, new org.apache.thrift.meta_data.FieldMetaData("classSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLASS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("classType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISCOUNT, new org.apache.thrift.meta_data.FieldMetaData("discount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SCHOOLTIME_DAY, new org.apache.thrift.meta_data.FieldMetaData("schooltimeDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCHOOLTIME_WEEK, new org.apache.thrift.meta_data.FieldMetaData("schooltimeWeek", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID_SET, new org.apache.thrift.meta_data.FieldMetaData("idSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LAST_MODIFY_TIME_START, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimeStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFY_TIME_END, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME_START, new org.apache.thrift.meta_data.FieldMetaData("createTimeStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME_END, new org.apache.thrift.meta_data.FieldMetaData("createTimeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CATEGORY_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("categoryIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LOCATION_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("locationIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CIRCLE_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("circleIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PARTNER_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("partnerIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.STATUS_SET, new org.apache.thrift.meta_data.FieldMetaData("statusSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PRICE_START, new org.apache.thrift.meta_data.FieldMetaData("priceStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRICE_END, new org.apache.thrift.meta_data.FieldMetaData("priceEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORIGINAL_PRICE_START, new org.apache.thrift.meta_data.FieldMetaData("originalPriceStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORIGINAL_PRICE_END, new org.apache.thrift.meta_data.FieldMetaData("originalPriceEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CASHBACK_START, new org.apache.thrift.meta_data.FieldMetaData("cashbackStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CASHBACK_END, new org.apache.thrift.meta_data.FieldMetaData("cashbackEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POPULARITY_START, new org.apache.thrift.meta_data.FieldMetaData("popularityStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POPULARITY_END, new org.apache.thrift.meta_data.FieldMetaData("popularityEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POPULARITY_SET, new org.apache.thrift.meta_data.FieldMetaData("popularitySet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.COURSE_HOUR_NUM_START, new org.apache.thrift.meta_data.FieldMetaData("courseHourNumStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COURSE_HOUR_NUM_END, new org.apache.thrift.meta_data.FieldMetaData("courseHourNumEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COURSE_HOUR_NUM_SET, new org.apache.thrift.meta_data.FieldMetaData("courseHourNumSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.START_DATE_START, new org.apache.thrift.meta_data.FieldMetaData("startDateStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_DATE_END, new org.apache.thrift.meta_data.FieldMetaData("startDateEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FINISH_DATE_START, new org.apache.thrift.meta_data.FieldMetaData("finishDateStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FINISH_DATE_END, new org.apache.thrift.meta_data.FieldMetaData("finishDateEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CUTOFF_DATE_START, new org.apache.thrift.meta_data.FieldMetaData("cutoffDateStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CUTOFF_DATE_END, new org.apache.thrift.meta_data.FieldMetaData("cutoffDateEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLASS_TYPE_SET, new org.apache.thrift.meta_data.FieldMetaData("classTypeSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.DISCOUNT_START, new org.apache.thrift.meta_data.FieldMetaData("discountStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DISCOUNT_END, new org.apache.thrift.meta_data.FieldMetaData("discountEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RATING_START, new org.apache.thrift.meta_data.FieldMetaData("ratingStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RATING_END, new org.apache.thrift.meta_data.FieldMetaData("ratingEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BOOKING_TOTAL_START, new org.apache.thrift.meta_data.FieldMetaData("bookingTotalStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOOKING_TOTAL_END, new org.apache.thrift.meta_data.FieldMetaData("bookingTotalEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOOKING_TOTAL_SET, new org.apache.thrift.meta_data.FieldMetaData("bookingTotalSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SCHOOLTIME_DAY_SET, new org.apache.thrift.meta_data.FieldMetaData("schooltimeDaySet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SCHOOLTIME_WEEK_SET, new org.apache.thrift.meta_data.FieldMetaData("schooltimeWeekSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.TEACHER_LIST, new org.apache.thrift.meta_data.FieldMetaData("teacherList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.TeacherBo.class))));
    tmpMap.put(_Fields.CLASS_PHOTO_LIST, new org.apache.thrift.meta_data.FieldMetaData("classPhotoList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.ClassPhotoBo.class))));
    tmpMap.put(_Fields.LOGO_URL, new org.apache.thrift.meta_data.FieldMetaData("logoUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WHOLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("wholeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INST_NAME, new org.apache.thrift.meta_data.FieldMetaData("instName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_INTRO, new org.apache.thrift.meta_data.FieldMetaData("partnerIntro", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_QUALIFICATION, new org.apache.thrift.meta_data.FieldMetaData("partnerQualification", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTNER_DISTINCTION, new org.apache.thrift.meta_data.FieldMetaData("partnerDistinction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_RATING, new org.apache.thrift.meta_data.FieldMetaData("partnerRating", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS_LAT, new org.apache.thrift.meta_data.FieldMetaData("addressLat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ADDRESS_LNG, new org.apache.thrift.meta_data.FieldMetaData("addressLng", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CATEGORY_VALUE, new org.apache.thrift.meta_data.FieldMetaData("categoryValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY_NAME, new org.apache.thrift.meta_data.FieldMetaData("categoryName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY_RANK, new org.apache.thrift.meta_data.FieldMetaData("categoryRank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCATION_VALUE, new org.apache.thrift.meta_data.FieldMetaData("locationValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("locationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CIRCLE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("circleValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CIRCLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("circleName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RATING, new org.apache.thrift.meta_data.FieldMetaData("rating", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BOOKING_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("bookingTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NO_REFUND_DATE_START, new org.apache.thrift.meta_data.FieldMetaData("noRefundDateStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NO_REFUND_DATE_END, new org.apache.thrift.meta_data.FieldMetaData("noRefundDateEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CASHBACK_DATE_START, new org.apache.thrift.meta_data.FieldMetaData("cashbackDateStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CASHBACK_DATE_END, new org.apache.thrift.meta_data.FieldMetaData("cashbackDateEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COURSE_TEMPLATE_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CourseBo.class, metaDataMap);
  }

  public CourseBo() {
  }

  public CourseBo(
    int id,
    String courseName,
    int courseTemplateId,
    int categoryId,
    int locationId,
    int circleId,
    int partnerId,
    int addressId,
    double price,
    double originalPrice,
    double cashback,
    double commission,
    double serviceCharge,
    int status,
    long lastModifyTime,
    long createTime,
    int enabled,
    int courseHourLength,
    String teachingMethod,
    String teachingMaterialFee,
    String downloadMaterials,
    String bonusService,
    String marking,
    String assignments,
    String trail,
    String questionSession,
    String teachingAndExercise,
    String classTeacher,
    String goal,
    String outline,
    String regPhone,
    String contact,
    String extracurricular,
    String passAgreement,
    String qualityAssurance,
    String questionBank,
    String teachingMaterialIntro,
    String studyDayNote,
    String highScoreReward,
    String prerequest,
    String suitableStudent,
    String openCourseRequirement,
    String certification,
    String quiz,
    String courseIntro,
    String reference,
    String regLocation,
    int finishTime2,
    int startTime2,
    int finishTime1,
    int startTime1,
    int startUponArrival,
    int bookingType,
    long cashbackDate,
    long noRefundDate,
    long cutoffDate,
    long finishDate,
    long startDate,
    int popularity,
    int courseHourNum,
    String classSize,
    int classType,
    double discount,
    int schooltimeDay,
    int schooltimeWeek,
    Set<Integer> idSet,
    long lastModifyTimeStart,
    long lastModifyTimeEnd,
    long createTimeStart,
    long createTimeEnd,
    Set<Integer> categoryIdSet,
    Set<Integer> locationIdSet,
    Set<Integer> circleIdSet,
    Set<Integer> partnerIdSet,
    Set<Integer> statusSet,
    double priceStart,
    double priceEnd,
    double originalPriceStart,
    double originalPriceEnd,
    double cashbackStart,
    double cashbackEnd,
    int popularityStart,
    int popularityEnd,
    Set<Integer> popularitySet,
    int courseHourNumStart,
    int courseHourNumEnd,
    Set<Integer> courseHourNumSet,
    long startDateStart,
    long startDateEnd,
    long finishDateStart,
    long finishDateEnd,
    long cutoffDateStart,
    long cutoffDateEnd,
    Set<Integer> classTypeSet,
    double discountStart,
    double discountEnd,
    double ratingStart,
    double ratingEnd,
    int bookingTotalStart,
    int bookingTotalEnd,
    Set<Integer> bookingTotalSet,
    Set<Integer> schooltimeDaySet,
    Set<Integer> schooltimeWeekSet,
    List<com.ishangke.edunav.commoncontract.model.TeacherBo> teacherList,
    List<com.ishangke.edunav.commoncontract.model.ClassPhotoBo> classPhotoList,
    String logoUrl,
    String wholeName,
    String instName,
    String partnerIntro,
    int partnerQualification,
    String partnerDistinction,
    double partnerRating,
    String address,
    double addressLat,
    double addressLng,
    String categoryValue,
    String categoryName,
    int categoryRank,
    String locationValue,
    String locationName,
    String circleValue,
    String circleName,
    double rating,
    int bookingTotal,
    long noRefundDateStart,
    long noRefundDateEnd,
    long cashbackDateStart,
    long cashbackDateEnd,
    Set<Integer> courseTemplateIdSet)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.courseName = courseName;
    this.courseTemplateId = courseTemplateId;
    setCourseTemplateIdIsSet(true);
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    this.locationId = locationId;
    setLocationIdIsSet(true);
    this.circleId = circleId;
    setCircleIdIsSet(true);
    this.partnerId = partnerId;
    setPartnerIdIsSet(true);
    this.addressId = addressId;
    setAddressIdIsSet(true);
    this.price = price;
    setPriceIsSet(true);
    this.originalPrice = originalPrice;
    setOriginalPriceIsSet(true);
    this.cashback = cashback;
    setCashbackIsSet(true);
    this.commission = commission;
    setCommissionIsSet(true);
    this.serviceCharge = serviceCharge;
    setServiceChargeIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.lastModifyTime = lastModifyTime;
    setLastModifyTimeIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.enabled = enabled;
    setEnabledIsSet(true);
    this.courseHourLength = courseHourLength;
    setCourseHourLengthIsSet(true);
    this.teachingMethod = teachingMethod;
    this.teachingMaterialFee = teachingMaterialFee;
    this.downloadMaterials = downloadMaterials;
    this.bonusService = bonusService;
    this.marking = marking;
    this.assignments = assignments;
    this.trail = trail;
    this.questionSession = questionSession;
    this.teachingAndExercise = teachingAndExercise;
    this.classTeacher = classTeacher;
    this.goal = goal;
    this.outline = outline;
    this.regPhone = regPhone;
    this.contact = contact;
    this.extracurricular = extracurricular;
    this.passAgreement = passAgreement;
    this.qualityAssurance = qualityAssurance;
    this.questionBank = questionBank;
    this.teachingMaterialIntro = teachingMaterialIntro;
    this.studyDayNote = studyDayNote;
    this.highScoreReward = highScoreReward;
    this.prerequest = prerequest;
    this.suitableStudent = suitableStudent;
    this.openCourseRequirement = openCourseRequirement;
    this.certification = certification;
    this.quiz = quiz;
    this.courseIntro = courseIntro;
    this.reference = reference;
    this.regLocation = regLocation;
    this.finishTime2 = finishTime2;
    setFinishTime2IsSet(true);
    this.startTime2 = startTime2;
    setStartTime2IsSet(true);
    this.finishTime1 = finishTime1;
    setFinishTime1IsSet(true);
    this.startTime1 = startTime1;
    setStartTime1IsSet(true);
    this.startUponArrival = startUponArrival;
    setStartUponArrivalIsSet(true);
    this.bookingType = bookingType;
    setBookingTypeIsSet(true);
    this.cashbackDate = cashbackDate;
    setCashbackDateIsSet(true);
    this.noRefundDate = noRefundDate;
    setNoRefundDateIsSet(true);
    this.cutoffDate = cutoffDate;
    setCutoffDateIsSet(true);
    this.finishDate = finishDate;
    setFinishDateIsSet(true);
    this.startDate = startDate;
    setStartDateIsSet(true);
    this.popularity = popularity;
    setPopularityIsSet(true);
    this.courseHourNum = courseHourNum;
    setCourseHourNumIsSet(true);
    this.classSize = classSize;
    this.classType = classType;
    setClassTypeIsSet(true);
    this.discount = discount;
    setDiscountIsSet(true);
    this.schooltimeDay = schooltimeDay;
    setSchooltimeDayIsSet(true);
    this.schooltimeWeek = schooltimeWeek;
    setSchooltimeWeekIsSet(true);
    this.idSet = idSet;
    this.lastModifyTimeStart = lastModifyTimeStart;
    setLastModifyTimeStartIsSet(true);
    this.lastModifyTimeEnd = lastModifyTimeEnd;
    setLastModifyTimeEndIsSet(true);
    this.createTimeStart = createTimeStart;
    setCreateTimeStartIsSet(true);
    this.createTimeEnd = createTimeEnd;
    setCreateTimeEndIsSet(true);
    this.categoryIdSet = categoryIdSet;
    this.locationIdSet = locationIdSet;
    this.circleIdSet = circleIdSet;
    this.partnerIdSet = partnerIdSet;
    this.statusSet = statusSet;
    this.priceStart = priceStart;
    setPriceStartIsSet(true);
    this.priceEnd = priceEnd;
    setPriceEndIsSet(true);
    this.originalPriceStart = originalPriceStart;
    setOriginalPriceStartIsSet(true);
    this.originalPriceEnd = originalPriceEnd;
    setOriginalPriceEndIsSet(true);
    this.cashbackStart = cashbackStart;
    setCashbackStartIsSet(true);
    this.cashbackEnd = cashbackEnd;
    setCashbackEndIsSet(true);
    this.popularityStart = popularityStart;
    setPopularityStartIsSet(true);
    this.popularityEnd = popularityEnd;
    setPopularityEndIsSet(true);
    this.popularitySet = popularitySet;
    this.courseHourNumStart = courseHourNumStart;
    setCourseHourNumStartIsSet(true);
    this.courseHourNumEnd = courseHourNumEnd;
    setCourseHourNumEndIsSet(true);
    this.courseHourNumSet = courseHourNumSet;
    this.startDateStart = startDateStart;
    setStartDateStartIsSet(true);
    this.startDateEnd = startDateEnd;
    setStartDateEndIsSet(true);
    this.finishDateStart = finishDateStart;
    setFinishDateStartIsSet(true);
    this.finishDateEnd = finishDateEnd;
    setFinishDateEndIsSet(true);
    this.cutoffDateStart = cutoffDateStart;
    setCutoffDateStartIsSet(true);
    this.cutoffDateEnd = cutoffDateEnd;
    setCutoffDateEndIsSet(true);
    this.classTypeSet = classTypeSet;
    this.discountStart = discountStart;
    setDiscountStartIsSet(true);
    this.discountEnd = discountEnd;
    setDiscountEndIsSet(true);
    this.ratingStart = ratingStart;
    setRatingStartIsSet(true);
    this.ratingEnd = ratingEnd;
    setRatingEndIsSet(true);
    this.bookingTotalStart = bookingTotalStart;
    setBookingTotalStartIsSet(true);
    this.bookingTotalEnd = bookingTotalEnd;
    setBookingTotalEndIsSet(true);
    this.bookingTotalSet = bookingTotalSet;
    this.schooltimeDaySet = schooltimeDaySet;
    this.schooltimeWeekSet = schooltimeWeekSet;
    this.teacherList = teacherList;
    this.classPhotoList = classPhotoList;
    this.logoUrl = logoUrl;
    this.wholeName = wholeName;
    this.instName = instName;
    this.partnerIntro = partnerIntro;
    this.partnerQualification = partnerQualification;
    setPartnerQualificationIsSet(true);
    this.partnerDistinction = partnerDistinction;
    this.partnerRating = partnerRating;
    setPartnerRatingIsSet(true);
    this.address = address;
    this.addressLat = addressLat;
    setAddressLatIsSet(true);
    this.addressLng = addressLng;
    setAddressLngIsSet(true);
    this.categoryValue = categoryValue;
    this.categoryName = categoryName;
    this.categoryRank = categoryRank;
    setCategoryRankIsSet(true);
    this.locationValue = locationValue;
    this.locationName = locationName;
    this.circleValue = circleValue;
    this.circleName = circleName;
    this.rating = rating;
    setRatingIsSet(true);
    this.bookingTotal = bookingTotal;
    setBookingTotalIsSet(true);
    this.noRefundDateStart = noRefundDateStart;
    setNoRefundDateStartIsSet(true);
    this.noRefundDateEnd = noRefundDateEnd;
    setNoRefundDateEndIsSet(true);
    this.cashbackDateStart = cashbackDateStart;
    setCashbackDateStartIsSet(true);
    this.cashbackDateEnd = cashbackDateEnd;
    setCashbackDateEndIsSet(true);
    this.courseTemplateIdSet = courseTemplateIdSet;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CourseBo(CourseBo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetCourseName()) {
      this.courseName = other.courseName;
    }
    this.courseTemplateId = other.courseTemplateId;
    this.categoryId = other.categoryId;
    this.locationId = other.locationId;
    this.circleId = other.circleId;
    this.partnerId = other.partnerId;
    this.addressId = other.addressId;
    this.price = other.price;
    this.originalPrice = other.originalPrice;
    this.cashback = other.cashback;
    this.commission = other.commission;
    this.serviceCharge = other.serviceCharge;
    this.status = other.status;
    this.lastModifyTime = other.lastModifyTime;
    this.createTime = other.createTime;
    this.enabled = other.enabled;
    this.courseHourLength = other.courseHourLength;
    if (other.isSetTeachingMethod()) {
      this.teachingMethod = other.teachingMethod;
    }
    if (other.isSetTeachingMaterialFee()) {
      this.teachingMaterialFee = other.teachingMaterialFee;
    }
    if (other.isSetDownloadMaterials()) {
      this.downloadMaterials = other.downloadMaterials;
    }
    if (other.isSetBonusService()) {
      this.bonusService = other.bonusService;
    }
    if (other.isSetMarking()) {
      this.marking = other.marking;
    }
    if (other.isSetAssignments()) {
      this.assignments = other.assignments;
    }
    if (other.isSetTrail()) {
      this.trail = other.trail;
    }
    if (other.isSetQuestionSession()) {
      this.questionSession = other.questionSession;
    }
    if (other.isSetTeachingAndExercise()) {
      this.teachingAndExercise = other.teachingAndExercise;
    }
    if (other.isSetClassTeacher()) {
      this.classTeacher = other.classTeacher;
    }
    if (other.isSetGoal()) {
      this.goal = other.goal;
    }
    if (other.isSetOutline()) {
      this.outline = other.outline;
    }
    if (other.isSetRegPhone()) {
      this.regPhone = other.regPhone;
    }
    if (other.isSetContact()) {
      this.contact = other.contact;
    }
    if (other.isSetExtracurricular()) {
      this.extracurricular = other.extracurricular;
    }
    if (other.isSetPassAgreement()) {
      this.passAgreement = other.passAgreement;
    }
    if (other.isSetQualityAssurance()) {
      this.qualityAssurance = other.qualityAssurance;
    }
    if (other.isSetQuestionBank()) {
      this.questionBank = other.questionBank;
    }
    if (other.isSetTeachingMaterialIntro()) {
      this.teachingMaterialIntro = other.teachingMaterialIntro;
    }
    if (other.isSetStudyDayNote()) {
      this.studyDayNote = other.studyDayNote;
    }
    if (other.isSetHighScoreReward()) {
      this.highScoreReward = other.highScoreReward;
    }
    if (other.isSetPrerequest()) {
      this.prerequest = other.prerequest;
    }
    if (other.isSetSuitableStudent()) {
      this.suitableStudent = other.suitableStudent;
    }
    if (other.isSetOpenCourseRequirement()) {
      this.openCourseRequirement = other.openCourseRequirement;
    }
    if (other.isSetCertification()) {
      this.certification = other.certification;
    }
    if (other.isSetQuiz()) {
      this.quiz = other.quiz;
    }
    if (other.isSetCourseIntro()) {
      this.courseIntro = other.courseIntro;
    }
    if (other.isSetReference()) {
      this.reference = other.reference;
    }
    if (other.isSetRegLocation()) {
      this.regLocation = other.regLocation;
    }
    this.finishTime2 = other.finishTime2;
    this.startTime2 = other.startTime2;
    this.finishTime1 = other.finishTime1;
    this.startTime1 = other.startTime1;
    this.startUponArrival = other.startUponArrival;
    this.bookingType = other.bookingType;
    this.cashbackDate = other.cashbackDate;
    this.noRefundDate = other.noRefundDate;
    this.cutoffDate = other.cutoffDate;
    this.finishDate = other.finishDate;
    this.startDate = other.startDate;
    this.popularity = other.popularity;
    this.courseHourNum = other.courseHourNum;
    if (other.isSetClassSize()) {
      this.classSize = other.classSize;
    }
    this.classType = other.classType;
    this.discount = other.discount;
    this.schooltimeDay = other.schooltimeDay;
    this.schooltimeWeek = other.schooltimeWeek;
    if (other.isSetIdSet()) {
      Set<Integer> __this__idSet = new HashSet<Integer>(other.idSet);
      this.idSet = __this__idSet;
    }
    this.lastModifyTimeStart = other.lastModifyTimeStart;
    this.lastModifyTimeEnd = other.lastModifyTimeEnd;
    this.createTimeStart = other.createTimeStart;
    this.createTimeEnd = other.createTimeEnd;
    if (other.isSetCategoryIdSet()) {
      Set<Integer> __this__categoryIdSet = new HashSet<Integer>(other.categoryIdSet);
      this.categoryIdSet = __this__categoryIdSet;
    }
    if (other.isSetLocationIdSet()) {
      Set<Integer> __this__locationIdSet = new HashSet<Integer>(other.locationIdSet);
      this.locationIdSet = __this__locationIdSet;
    }
    if (other.isSetCircleIdSet()) {
      Set<Integer> __this__circleIdSet = new HashSet<Integer>(other.circleIdSet);
      this.circleIdSet = __this__circleIdSet;
    }
    if (other.isSetPartnerIdSet()) {
      Set<Integer> __this__partnerIdSet = new HashSet<Integer>(other.partnerIdSet);
      this.partnerIdSet = __this__partnerIdSet;
    }
    if (other.isSetStatusSet()) {
      Set<Integer> __this__statusSet = new HashSet<Integer>(other.statusSet);
      this.statusSet = __this__statusSet;
    }
    this.priceStart = other.priceStart;
    this.priceEnd = other.priceEnd;
    this.originalPriceStart = other.originalPriceStart;
    this.originalPriceEnd = other.originalPriceEnd;
    this.cashbackStart = other.cashbackStart;
    this.cashbackEnd = other.cashbackEnd;
    this.popularityStart = other.popularityStart;
    this.popularityEnd = other.popularityEnd;
    if (other.isSetPopularitySet()) {
      Set<Integer> __this__popularitySet = new HashSet<Integer>(other.popularitySet);
      this.popularitySet = __this__popularitySet;
    }
    this.courseHourNumStart = other.courseHourNumStart;
    this.courseHourNumEnd = other.courseHourNumEnd;
    if (other.isSetCourseHourNumSet()) {
      Set<Integer> __this__courseHourNumSet = new HashSet<Integer>(other.courseHourNumSet);
      this.courseHourNumSet = __this__courseHourNumSet;
    }
    this.startDateStart = other.startDateStart;
    this.startDateEnd = other.startDateEnd;
    this.finishDateStart = other.finishDateStart;
    this.finishDateEnd = other.finishDateEnd;
    this.cutoffDateStart = other.cutoffDateStart;
    this.cutoffDateEnd = other.cutoffDateEnd;
    if (other.isSetClassTypeSet()) {
      Set<Integer> __this__classTypeSet = new HashSet<Integer>(other.classTypeSet);
      this.classTypeSet = __this__classTypeSet;
    }
    this.discountStart = other.discountStart;
    this.discountEnd = other.discountEnd;
    this.ratingStart = other.ratingStart;
    this.ratingEnd = other.ratingEnd;
    this.bookingTotalStart = other.bookingTotalStart;
    this.bookingTotalEnd = other.bookingTotalEnd;
    if (other.isSetBookingTotalSet()) {
      Set<Integer> __this__bookingTotalSet = new HashSet<Integer>(other.bookingTotalSet);
      this.bookingTotalSet = __this__bookingTotalSet;
    }
    if (other.isSetSchooltimeDaySet()) {
      Set<Integer> __this__schooltimeDaySet = new HashSet<Integer>(other.schooltimeDaySet);
      this.schooltimeDaySet = __this__schooltimeDaySet;
    }
    if (other.isSetSchooltimeWeekSet()) {
      Set<Integer> __this__schooltimeWeekSet = new HashSet<Integer>(other.schooltimeWeekSet);
      this.schooltimeWeekSet = __this__schooltimeWeekSet;
    }
    if (other.isSetTeacherList()) {
      List<com.ishangke.edunav.commoncontract.model.TeacherBo> __this__teacherList = new ArrayList<com.ishangke.edunav.commoncontract.model.TeacherBo>(other.teacherList.size());
      for (com.ishangke.edunav.commoncontract.model.TeacherBo other_element : other.teacherList) {
        __this__teacherList.add(new com.ishangke.edunav.commoncontract.model.TeacherBo(other_element));
      }
      this.teacherList = __this__teacherList;
    }
    if (other.isSetClassPhotoList()) {
      List<com.ishangke.edunav.commoncontract.model.ClassPhotoBo> __this__classPhotoList = new ArrayList<com.ishangke.edunav.commoncontract.model.ClassPhotoBo>(other.classPhotoList.size());
      for (com.ishangke.edunav.commoncontract.model.ClassPhotoBo other_element : other.classPhotoList) {
        __this__classPhotoList.add(new com.ishangke.edunav.commoncontract.model.ClassPhotoBo(other_element));
      }
      this.classPhotoList = __this__classPhotoList;
    }
    if (other.isSetLogoUrl()) {
      this.logoUrl = other.logoUrl;
    }
    if (other.isSetWholeName()) {
      this.wholeName = other.wholeName;
    }
    if (other.isSetInstName()) {
      this.instName = other.instName;
    }
    if (other.isSetPartnerIntro()) {
      this.partnerIntro = other.partnerIntro;
    }
    this.partnerQualification = other.partnerQualification;
    if (other.isSetPartnerDistinction()) {
      this.partnerDistinction = other.partnerDistinction;
    }
    this.partnerRating = other.partnerRating;
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    this.addressLat = other.addressLat;
    this.addressLng = other.addressLng;
    if (other.isSetCategoryValue()) {
      this.categoryValue = other.categoryValue;
    }
    if (other.isSetCategoryName()) {
      this.categoryName = other.categoryName;
    }
    this.categoryRank = other.categoryRank;
    if (other.isSetLocationValue()) {
      this.locationValue = other.locationValue;
    }
    if (other.isSetLocationName()) {
      this.locationName = other.locationName;
    }
    if (other.isSetCircleValue()) {
      this.circleValue = other.circleValue;
    }
    if (other.isSetCircleName()) {
      this.circleName = other.circleName;
    }
    this.rating = other.rating;
    this.bookingTotal = other.bookingTotal;
    this.noRefundDateStart = other.noRefundDateStart;
    this.noRefundDateEnd = other.noRefundDateEnd;
    this.cashbackDateStart = other.cashbackDateStart;
    this.cashbackDateEnd = other.cashbackDateEnd;
    if (other.isSetCourseTemplateIdSet()) {
      Set<Integer> __this__courseTemplateIdSet = new HashSet<Integer>(other.courseTemplateIdSet);
      this.courseTemplateIdSet = __this__courseTemplateIdSet;
    }
  }

  public CourseBo deepCopy() {
    return new CourseBo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.courseName = null;
    setCourseTemplateIdIsSet(false);
    this.courseTemplateId = 0;
    setCategoryIdIsSet(false);
    this.categoryId = 0;
    setLocationIdIsSet(false);
    this.locationId = 0;
    setCircleIdIsSet(false);
    this.circleId = 0;
    setPartnerIdIsSet(false);
    this.partnerId = 0;
    setAddressIdIsSet(false);
    this.addressId = 0;
    setPriceIsSet(false);
    this.price = 0.0;
    setOriginalPriceIsSet(false);
    this.originalPrice = 0.0;
    setCashbackIsSet(false);
    this.cashback = 0.0;
    setCommissionIsSet(false);
    this.commission = 0.0;
    setServiceChargeIsSet(false);
    this.serviceCharge = 0.0;
    setStatusIsSet(false);
    this.status = 0;
    setLastModifyTimeIsSet(false);
    this.lastModifyTime = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setEnabledIsSet(false);
    this.enabled = 0;
    setCourseHourLengthIsSet(false);
    this.courseHourLength = 0;
    this.teachingMethod = null;
    this.teachingMaterialFee = null;
    this.downloadMaterials = null;
    this.bonusService = null;
    this.marking = null;
    this.assignments = null;
    this.trail = null;
    this.questionSession = null;
    this.teachingAndExercise = null;
    this.classTeacher = null;
    this.goal = null;
    this.outline = null;
    this.regPhone = null;
    this.contact = null;
    this.extracurricular = null;
    this.passAgreement = null;
    this.qualityAssurance = null;
    this.questionBank = null;
    this.teachingMaterialIntro = null;
    this.studyDayNote = null;
    this.highScoreReward = null;
    this.prerequest = null;
    this.suitableStudent = null;
    this.openCourseRequirement = null;
    this.certification = null;
    this.quiz = null;
    this.courseIntro = null;
    this.reference = null;
    this.regLocation = null;
    setFinishTime2IsSet(false);
    this.finishTime2 = 0;
    setStartTime2IsSet(false);
    this.startTime2 = 0;
    setFinishTime1IsSet(false);
    this.finishTime1 = 0;
    setStartTime1IsSet(false);
    this.startTime1 = 0;
    setStartUponArrivalIsSet(false);
    this.startUponArrival = 0;
    setBookingTypeIsSet(false);
    this.bookingType = 0;
    setCashbackDateIsSet(false);
    this.cashbackDate = 0;
    setNoRefundDateIsSet(false);
    this.noRefundDate = 0;
    setCutoffDateIsSet(false);
    this.cutoffDate = 0;
    setFinishDateIsSet(false);
    this.finishDate = 0;
    setStartDateIsSet(false);
    this.startDate = 0;
    setPopularityIsSet(false);
    this.popularity = 0;
    setCourseHourNumIsSet(false);
    this.courseHourNum = 0;
    this.classSize = null;
    setClassTypeIsSet(false);
    this.classType = 0;
    setDiscountIsSet(false);
    this.discount = 0.0;
    setSchooltimeDayIsSet(false);
    this.schooltimeDay = 0;
    setSchooltimeWeekIsSet(false);
    this.schooltimeWeek = 0;
    this.idSet = null;
    setLastModifyTimeStartIsSet(false);
    this.lastModifyTimeStart = 0;
    setLastModifyTimeEndIsSet(false);
    this.lastModifyTimeEnd = 0;
    setCreateTimeStartIsSet(false);
    this.createTimeStart = 0;
    setCreateTimeEndIsSet(false);
    this.createTimeEnd = 0;
    this.categoryIdSet = null;
    this.locationIdSet = null;
    this.circleIdSet = null;
    this.partnerIdSet = null;
    this.statusSet = null;
    setPriceStartIsSet(false);
    this.priceStart = 0.0;
    setPriceEndIsSet(false);
    this.priceEnd = 0.0;
    setOriginalPriceStartIsSet(false);
    this.originalPriceStart = 0.0;
    setOriginalPriceEndIsSet(false);
    this.originalPriceEnd = 0.0;
    setCashbackStartIsSet(false);
    this.cashbackStart = 0.0;
    setCashbackEndIsSet(false);
    this.cashbackEnd = 0.0;
    setPopularityStartIsSet(false);
    this.popularityStart = 0;
    setPopularityEndIsSet(false);
    this.popularityEnd = 0;
    this.popularitySet = null;
    setCourseHourNumStartIsSet(false);
    this.courseHourNumStart = 0;
    setCourseHourNumEndIsSet(false);
    this.courseHourNumEnd = 0;
    this.courseHourNumSet = null;
    setStartDateStartIsSet(false);
    this.startDateStart = 0;
    setStartDateEndIsSet(false);
    this.startDateEnd = 0;
    setFinishDateStartIsSet(false);
    this.finishDateStart = 0;
    setFinishDateEndIsSet(false);
    this.finishDateEnd = 0;
    setCutoffDateStartIsSet(false);
    this.cutoffDateStart = 0;
    setCutoffDateEndIsSet(false);
    this.cutoffDateEnd = 0;
    this.classTypeSet = null;
    setDiscountStartIsSet(false);
    this.discountStart = 0.0;
    setDiscountEndIsSet(false);
    this.discountEnd = 0.0;
    setRatingStartIsSet(false);
    this.ratingStart = 0.0;
    setRatingEndIsSet(false);
    this.ratingEnd = 0.0;
    setBookingTotalStartIsSet(false);
    this.bookingTotalStart = 0;
    setBookingTotalEndIsSet(false);
    this.bookingTotalEnd = 0;
    this.bookingTotalSet = null;
    this.schooltimeDaySet = null;
    this.schooltimeWeekSet = null;
    this.teacherList = null;
    this.classPhotoList = null;
    this.logoUrl = null;
    this.wholeName = null;
    this.instName = null;
    this.partnerIntro = null;
    setPartnerQualificationIsSet(false);
    this.partnerQualification = 0;
    this.partnerDistinction = null;
    setPartnerRatingIsSet(false);
    this.partnerRating = 0.0;
    this.address = null;
    setAddressLatIsSet(false);
    this.addressLat = 0.0;
    setAddressLngIsSet(false);
    this.addressLng = 0.0;
    this.categoryValue = null;
    this.categoryName = null;
    setCategoryRankIsSet(false);
    this.categoryRank = 0;
    this.locationValue = null;
    this.locationName = null;
    this.circleValue = null;
    this.circleName = null;
    setRatingIsSet(false);
    this.rating = 0.0;
    setBookingTotalIsSet(false);
    this.bookingTotal = 0;
    setNoRefundDateStartIsSet(false);
    this.noRefundDateStart = 0;
    setNoRefundDateEndIsSet(false);
    this.noRefundDateEnd = 0;
    setCashbackDateStartIsSet(false);
    this.cashbackDateStart = 0;
    setCashbackDateEndIsSet(false);
    this.cashbackDateEnd = 0;
    this.courseTemplateIdSet = null;
  }

  public int getId() {
    return this.id;
  }

  public CourseBo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getCourseName() {
    return this.courseName;
  }

  public CourseBo setCourseName(String courseName) {
    this.courseName = courseName;
    return this;
  }

  public void unsetCourseName() {
    this.courseName = null;
  }

  /** Returns true if field courseName is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseName() {
    return this.courseName != null;
  }

  public void setCourseNameIsSet(boolean value) {
    if (!value) {
      this.courseName = null;
    }
  }

  public int getCourseTemplateId() {
    return this.courseTemplateId;
  }

  public CourseBo setCourseTemplateId(int courseTemplateId) {
    this.courseTemplateId = courseTemplateId;
    setCourseTemplateIdIsSet(true);
    return this;
  }

  public void unsetCourseTemplateId() {
    __isset_bit_vector.clear(__COURSETEMPLATEID_ISSET_ID);
  }

  /** Returns true if field courseTemplateId is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseTemplateId() {
    return __isset_bit_vector.get(__COURSETEMPLATEID_ISSET_ID);
  }

  public void setCourseTemplateIdIsSet(boolean value) {
    __isset_bit_vector.set(__COURSETEMPLATEID_ISSET_ID, value);
  }

  public int getCategoryId() {
    return this.categoryId;
  }

  public CourseBo setCategoryId(int categoryId) {
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    return this;
  }

  public void unsetCategoryId() {
    __isset_bit_vector.clear(__CATEGORYID_ISSET_ID);
  }

  /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryId() {
    return __isset_bit_vector.get(__CATEGORYID_ISSET_ID);
  }

  public void setCategoryIdIsSet(boolean value) {
    __isset_bit_vector.set(__CATEGORYID_ISSET_ID, value);
  }

  public int getLocationId() {
    return this.locationId;
  }

  public CourseBo setLocationId(int locationId) {
    this.locationId = locationId;
    setLocationIdIsSet(true);
    return this;
  }

  public void unsetLocationId() {
    __isset_bit_vector.clear(__LOCATIONID_ISSET_ID);
  }

  /** Returns true if field locationId is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationId() {
    return __isset_bit_vector.get(__LOCATIONID_ISSET_ID);
  }

  public void setLocationIdIsSet(boolean value) {
    __isset_bit_vector.set(__LOCATIONID_ISSET_ID, value);
  }

  public int getCircleId() {
    return this.circleId;
  }

  public CourseBo setCircleId(int circleId) {
    this.circleId = circleId;
    setCircleIdIsSet(true);
    return this;
  }

  public void unsetCircleId() {
    __isset_bit_vector.clear(__CIRCLEID_ISSET_ID);
  }

  /** Returns true if field circleId is set (has been assigned a value) and false otherwise */
  public boolean isSetCircleId() {
    return __isset_bit_vector.get(__CIRCLEID_ISSET_ID);
  }

  public void setCircleIdIsSet(boolean value) {
    __isset_bit_vector.set(__CIRCLEID_ISSET_ID, value);
  }

  public int getPartnerId() {
    return this.partnerId;
  }

  public CourseBo setPartnerId(int partnerId) {
    this.partnerId = partnerId;
    setPartnerIdIsSet(true);
    return this;
  }

  public void unsetPartnerId() {
    __isset_bit_vector.clear(__PARTNERID_ISSET_ID);
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return __isset_bit_vector.get(__PARTNERID_ISSET_ID);
  }

  public void setPartnerIdIsSet(boolean value) {
    __isset_bit_vector.set(__PARTNERID_ISSET_ID, value);
  }

  public int getAddressId() {
    return this.addressId;
  }

  public CourseBo setAddressId(int addressId) {
    this.addressId = addressId;
    setAddressIdIsSet(true);
    return this;
  }

  public void unsetAddressId() {
    __isset_bit_vector.clear(__ADDRESSID_ISSET_ID);
  }

  /** Returns true if field addressId is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressId() {
    return __isset_bit_vector.get(__ADDRESSID_ISSET_ID);
  }

  public void setAddressIdIsSet(boolean value) {
    __isset_bit_vector.set(__ADDRESSID_ISSET_ID, value);
  }

  public double getPrice() {
    return this.price;
  }

  public CourseBo setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bit_vector.clear(__PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return __isset_bit_vector.get(__PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bit_vector.set(__PRICE_ISSET_ID, value);
  }

  public double getOriginalPrice() {
    return this.originalPrice;
  }

  public CourseBo setOriginalPrice(double originalPrice) {
    this.originalPrice = originalPrice;
    setOriginalPriceIsSet(true);
    return this;
  }

  public void unsetOriginalPrice() {
    __isset_bit_vector.clear(__ORIGINALPRICE_ISSET_ID);
  }

  /** Returns true if field originalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalPrice() {
    return __isset_bit_vector.get(__ORIGINALPRICE_ISSET_ID);
  }

  public void setOriginalPriceIsSet(boolean value) {
    __isset_bit_vector.set(__ORIGINALPRICE_ISSET_ID, value);
  }

  public double getCashback() {
    return this.cashback;
  }

  public CourseBo setCashback(double cashback) {
    this.cashback = cashback;
    setCashbackIsSet(true);
    return this;
  }

  public void unsetCashback() {
    __isset_bit_vector.clear(__CASHBACK_ISSET_ID);
  }

  /** Returns true if field cashback is set (has been assigned a value) and false otherwise */
  public boolean isSetCashback() {
    return __isset_bit_vector.get(__CASHBACK_ISSET_ID);
  }

  public void setCashbackIsSet(boolean value) {
    __isset_bit_vector.set(__CASHBACK_ISSET_ID, value);
  }

  public double getCommission() {
    return this.commission;
  }

  public CourseBo setCommission(double commission) {
    this.commission = commission;
    setCommissionIsSet(true);
    return this;
  }

  public void unsetCommission() {
    __isset_bit_vector.clear(__COMMISSION_ISSET_ID);
  }

  /** Returns true if field commission is set (has been assigned a value) and false otherwise */
  public boolean isSetCommission() {
    return __isset_bit_vector.get(__COMMISSION_ISSET_ID);
  }

  public void setCommissionIsSet(boolean value) {
    __isset_bit_vector.set(__COMMISSION_ISSET_ID, value);
  }

  public double getServiceCharge() {
    return this.serviceCharge;
  }

  public CourseBo setServiceCharge(double serviceCharge) {
    this.serviceCharge = serviceCharge;
    setServiceChargeIsSet(true);
    return this;
  }

  public void unsetServiceCharge() {
    __isset_bit_vector.clear(__SERVICECHARGE_ISSET_ID);
  }

  /** Returns true if field serviceCharge is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceCharge() {
    return __isset_bit_vector.get(__SERVICECHARGE_ISSET_ID);
  }

  public void setServiceChargeIsSet(boolean value) {
    __isset_bit_vector.set(__SERVICECHARGE_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public CourseBo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public long getLastModifyTime() {
    return this.lastModifyTime;
  }

  public CourseBo setLastModifyTime(long lastModifyTime) {
    this.lastModifyTime = lastModifyTime;
    setLastModifyTimeIsSet(true);
    return this;
  }

  public void unsetLastModifyTime() {
    __isset_bit_vector.clear(__LASTMODIFYTIME_ISSET_ID);
  }

  /** Returns true if field lastModifyTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTime() {
    return __isset_bit_vector.get(__LASTMODIFYTIME_ISSET_ID);
  }

  public void setLastModifyTimeIsSet(boolean value) {
    __isset_bit_vector.set(__LASTMODIFYTIME_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public CourseBo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bit_vector.clear(__CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return __isset_bit_vector.get(__CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bit_vector.set(__CREATETIME_ISSET_ID, value);
  }

  public int getEnabled() {
    return this.enabled;
  }

  public CourseBo setEnabled(int enabled) {
    this.enabled = enabled;
    setEnabledIsSet(true);
    return this;
  }

  public void unsetEnabled() {
    __isset_bit_vector.clear(__ENABLED_ISSET_ID);
  }

  /** Returns true if field enabled is set (has been assigned a value) and false otherwise */
  public boolean isSetEnabled() {
    return __isset_bit_vector.get(__ENABLED_ISSET_ID);
  }

  public void setEnabledIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLED_ISSET_ID, value);
  }

  public int getCourseHourLength() {
    return this.courseHourLength;
  }

  public CourseBo setCourseHourLength(int courseHourLength) {
    this.courseHourLength = courseHourLength;
    setCourseHourLengthIsSet(true);
    return this;
  }

  public void unsetCourseHourLength() {
    __isset_bit_vector.clear(__COURSEHOURLENGTH_ISSET_ID);
  }

  /** Returns true if field courseHourLength is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseHourLength() {
    return __isset_bit_vector.get(__COURSEHOURLENGTH_ISSET_ID);
  }

  public void setCourseHourLengthIsSet(boolean value) {
    __isset_bit_vector.set(__COURSEHOURLENGTH_ISSET_ID, value);
  }

  public String getTeachingMethod() {
    return this.teachingMethod;
  }

  public CourseBo setTeachingMethod(String teachingMethod) {
    this.teachingMethod = teachingMethod;
    return this;
  }

  public void unsetTeachingMethod() {
    this.teachingMethod = null;
  }

  /** Returns true if field teachingMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetTeachingMethod() {
    return this.teachingMethod != null;
  }

  public void setTeachingMethodIsSet(boolean value) {
    if (!value) {
      this.teachingMethod = null;
    }
  }

  public String getTeachingMaterialFee() {
    return this.teachingMaterialFee;
  }

  public CourseBo setTeachingMaterialFee(String teachingMaterialFee) {
    this.teachingMaterialFee = teachingMaterialFee;
    return this;
  }

  public void unsetTeachingMaterialFee() {
    this.teachingMaterialFee = null;
  }

  /** Returns true if field teachingMaterialFee is set (has been assigned a value) and false otherwise */
  public boolean isSetTeachingMaterialFee() {
    return this.teachingMaterialFee != null;
  }

  public void setTeachingMaterialFeeIsSet(boolean value) {
    if (!value) {
      this.teachingMaterialFee = null;
    }
  }

  public String getDownloadMaterials() {
    return this.downloadMaterials;
  }

  public CourseBo setDownloadMaterials(String downloadMaterials) {
    this.downloadMaterials = downloadMaterials;
    return this;
  }

  public void unsetDownloadMaterials() {
    this.downloadMaterials = null;
  }

  /** Returns true if field downloadMaterials is set (has been assigned a value) and false otherwise */
  public boolean isSetDownloadMaterials() {
    return this.downloadMaterials != null;
  }

  public void setDownloadMaterialsIsSet(boolean value) {
    if (!value) {
      this.downloadMaterials = null;
    }
  }

  public String getBonusService() {
    return this.bonusService;
  }

  public CourseBo setBonusService(String bonusService) {
    this.bonusService = bonusService;
    return this;
  }

  public void unsetBonusService() {
    this.bonusService = null;
  }

  /** Returns true if field bonusService is set (has been assigned a value) and false otherwise */
  public boolean isSetBonusService() {
    return this.bonusService != null;
  }

  public void setBonusServiceIsSet(boolean value) {
    if (!value) {
      this.bonusService = null;
    }
  }

  public String getMarking() {
    return this.marking;
  }

  public CourseBo setMarking(String marking) {
    this.marking = marking;
    return this;
  }

  public void unsetMarking() {
    this.marking = null;
  }

  /** Returns true if field marking is set (has been assigned a value) and false otherwise */
  public boolean isSetMarking() {
    return this.marking != null;
  }

  public void setMarkingIsSet(boolean value) {
    if (!value) {
      this.marking = null;
    }
  }

  public String getAssignments() {
    return this.assignments;
  }

  public CourseBo setAssignments(String assignments) {
    this.assignments = assignments;
    return this;
  }

  public void unsetAssignments() {
    this.assignments = null;
  }

  /** Returns true if field assignments is set (has been assigned a value) and false otherwise */
  public boolean isSetAssignments() {
    return this.assignments != null;
  }

  public void setAssignmentsIsSet(boolean value) {
    if (!value) {
      this.assignments = null;
    }
  }

  public String getTrail() {
    return this.trail;
  }

  public CourseBo setTrail(String trail) {
    this.trail = trail;
    return this;
  }

  public void unsetTrail() {
    this.trail = null;
  }

  /** Returns true if field trail is set (has been assigned a value) and false otherwise */
  public boolean isSetTrail() {
    return this.trail != null;
  }

  public void setTrailIsSet(boolean value) {
    if (!value) {
      this.trail = null;
    }
  }

  public String getQuestionSession() {
    return this.questionSession;
  }

  public CourseBo setQuestionSession(String questionSession) {
    this.questionSession = questionSession;
    return this;
  }

  public void unsetQuestionSession() {
    this.questionSession = null;
  }

  /** Returns true if field questionSession is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionSession() {
    return this.questionSession != null;
  }

  public void setQuestionSessionIsSet(boolean value) {
    if (!value) {
      this.questionSession = null;
    }
  }

  public String getTeachingAndExercise() {
    return this.teachingAndExercise;
  }

  public CourseBo setTeachingAndExercise(String teachingAndExercise) {
    this.teachingAndExercise = teachingAndExercise;
    return this;
  }

  public void unsetTeachingAndExercise() {
    this.teachingAndExercise = null;
  }

  /** Returns true if field teachingAndExercise is set (has been assigned a value) and false otherwise */
  public boolean isSetTeachingAndExercise() {
    return this.teachingAndExercise != null;
  }

  public void setTeachingAndExerciseIsSet(boolean value) {
    if (!value) {
      this.teachingAndExercise = null;
    }
  }

  public String getClassTeacher() {
    return this.classTeacher;
  }

  public CourseBo setClassTeacher(String classTeacher) {
    this.classTeacher = classTeacher;
    return this;
  }

  public void unsetClassTeacher() {
    this.classTeacher = null;
  }

  /** Returns true if field classTeacher is set (has been assigned a value) and false otherwise */
  public boolean isSetClassTeacher() {
    return this.classTeacher != null;
  }

  public void setClassTeacherIsSet(boolean value) {
    if (!value) {
      this.classTeacher = null;
    }
  }

  public String getGoal() {
    return this.goal;
  }

  public CourseBo setGoal(String goal) {
    this.goal = goal;
    return this;
  }

  public void unsetGoal() {
    this.goal = null;
  }

  /** Returns true if field goal is set (has been assigned a value) and false otherwise */
  public boolean isSetGoal() {
    return this.goal != null;
  }

  public void setGoalIsSet(boolean value) {
    if (!value) {
      this.goal = null;
    }
  }

  public String getOutline() {
    return this.outline;
  }

  public CourseBo setOutline(String outline) {
    this.outline = outline;
    return this;
  }

  public void unsetOutline() {
    this.outline = null;
  }

  /** Returns true if field outline is set (has been assigned a value) and false otherwise */
  public boolean isSetOutline() {
    return this.outline != null;
  }

  public void setOutlineIsSet(boolean value) {
    if (!value) {
      this.outline = null;
    }
  }

  public String getRegPhone() {
    return this.regPhone;
  }

  public CourseBo setRegPhone(String regPhone) {
    this.regPhone = regPhone;
    return this;
  }

  public void unsetRegPhone() {
    this.regPhone = null;
  }

  /** Returns true if field regPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetRegPhone() {
    return this.regPhone != null;
  }

  public void setRegPhoneIsSet(boolean value) {
    if (!value) {
      this.regPhone = null;
    }
  }

  public String getContact() {
    return this.contact;
  }

  public CourseBo setContact(String contact) {
    this.contact = contact;
    return this;
  }

  public void unsetContact() {
    this.contact = null;
  }

  /** Returns true if field contact is set (has been assigned a value) and false otherwise */
  public boolean isSetContact() {
    return this.contact != null;
  }

  public void setContactIsSet(boolean value) {
    if (!value) {
      this.contact = null;
    }
  }

  public String getExtracurricular() {
    return this.extracurricular;
  }

  public CourseBo setExtracurricular(String extracurricular) {
    this.extracurricular = extracurricular;
    return this;
  }

  public void unsetExtracurricular() {
    this.extracurricular = null;
  }

  /** Returns true if field extracurricular is set (has been assigned a value) and false otherwise */
  public boolean isSetExtracurricular() {
    return this.extracurricular != null;
  }

  public void setExtracurricularIsSet(boolean value) {
    if (!value) {
      this.extracurricular = null;
    }
  }

  public String getPassAgreement() {
    return this.passAgreement;
  }

  public CourseBo setPassAgreement(String passAgreement) {
    this.passAgreement = passAgreement;
    return this;
  }

  public void unsetPassAgreement() {
    this.passAgreement = null;
  }

  /** Returns true if field passAgreement is set (has been assigned a value) and false otherwise */
  public boolean isSetPassAgreement() {
    return this.passAgreement != null;
  }

  public void setPassAgreementIsSet(boolean value) {
    if (!value) {
      this.passAgreement = null;
    }
  }

  public String getQualityAssurance() {
    return this.qualityAssurance;
  }

  public CourseBo setQualityAssurance(String qualityAssurance) {
    this.qualityAssurance = qualityAssurance;
    return this;
  }

  public void unsetQualityAssurance() {
    this.qualityAssurance = null;
  }

  /** Returns true if field qualityAssurance is set (has been assigned a value) and false otherwise */
  public boolean isSetQualityAssurance() {
    return this.qualityAssurance != null;
  }

  public void setQualityAssuranceIsSet(boolean value) {
    if (!value) {
      this.qualityAssurance = null;
    }
  }

  public String getQuestionBank() {
    return this.questionBank;
  }

  public CourseBo setQuestionBank(String questionBank) {
    this.questionBank = questionBank;
    return this;
  }

  public void unsetQuestionBank() {
    this.questionBank = null;
  }

  /** Returns true if field questionBank is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionBank() {
    return this.questionBank != null;
  }

  public void setQuestionBankIsSet(boolean value) {
    if (!value) {
      this.questionBank = null;
    }
  }

  public String getTeachingMaterialIntro() {
    return this.teachingMaterialIntro;
  }

  public CourseBo setTeachingMaterialIntro(String teachingMaterialIntro) {
    this.teachingMaterialIntro = teachingMaterialIntro;
    return this;
  }

  public void unsetTeachingMaterialIntro() {
    this.teachingMaterialIntro = null;
  }

  /** Returns true if field teachingMaterialIntro is set (has been assigned a value) and false otherwise */
  public boolean isSetTeachingMaterialIntro() {
    return this.teachingMaterialIntro != null;
  }

  public void setTeachingMaterialIntroIsSet(boolean value) {
    if (!value) {
      this.teachingMaterialIntro = null;
    }
  }

  public String getStudyDayNote() {
    return this.studyDayNote;
  }

  public CourseBo setStudyDayNote(String studyDayNote) {
    this.studyDayNote = studyDayNote;
    return this;
  }

  public void unsetStudyDayNote() {
    this.studyDayNote = null;
  }

  /** Returns true if field studyDayNote is set (has been assigned a value) and false otherwise */
  public boolean isSetStudyDayNote() {
    return this.studyDayNote != null;
  }

  public void setStudyDayNoteIsSet(boolean value) {
    if (!value) {
      this.studyDayNote = null;
    }
  }

  public String getHighScoreReward() {
    return this.highScoreReward;
  }

  public CourseBo setHighScoreReward(String highScoreReward) {
    this.highScoreReward = highScoreReward;
    return this;
  }

  public void unsetHighScoreReward() {
    this.highScoreReward = null;
  }

  /** Returns true if field highScoreReward is set (has been assigned a value) and false otherwise */
  public boolean isSetHighScoreReward() {
    return this.highScoreReward != null;
  }

  public void setHighScoreRewardIsSet(boolean value) {
    if (!value) {
      this.highScoreReward = null;
    }
  }

  public String getPrerequest() {
    return this.prerequest;
  }

  public CourseBo setPrerequest(String prerequest) {
    this.prerequest = prerequest;
    return this;
  }

  public void unsetPrerequest() {
    this.prerequest = null;
  }

  /** Returns true if field prerequest is set (has been assigned a value) and false otherwise */
  public boolean isSetPrerequest() {
    return this.prerequest != null;
  }

  public void setPrerequestIsSet(boolean value) {
    if (!value) {
      this.prerequest = null;
    }
  }

  public String getSuitableStudent() {
    return this.suitableStudent;
  }

  public CourseBo setSuitableStudent(String suitableStudent) {
    this.suitableStudent = suitableStudent;
    return this;
  }

  public void unsetSuitableStudent() {
    this.suitableStudent = null;
  }

  /** Returns true if field suitableStudent is set (has been assigned a value) and false otherwise */
  public boolean isSetSuitableStudent() {
    return this.suitableStudent != null;
  }

  public void setSuitableStudentIsSet(boolean value) {
    if (!value) {
      this.suitableStudent = null;
    }
  }

  public String getOpenCourseRequirement() {
    return this.openCourseRequirement;
  }

  public CourseBo setOpenCourseRequirement(String openCourseRequirement) {
    this.openCourseRequirement = openCourseRequirement;
    return this;
  }

  public void unsetOpenCourseRequirement() {
    this.openCourseRequirement = null;
  }

  /** Returns true if field openCourseRequirement is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenCourseRequirement() {
    return this.openCourseRequirement != null;
  }

  public void setOpenCourseRequirementIsSet(boolean value) {
    if (!value) {
      this.openCourseRequirement = null;
    }
  }

  public String getCertification() {
    return this.certification;
  }

  public CourseBo setCertification(String certification) {
    this.certification = certification;
    return this;
  }

  public void unsetCertification() {
    this.certification = null;
  }

  /** Returns true if field certification is set (has been assigned a value) and false otherwise */
  public boolean isSetCertification() {
    return this.certification != null;
  }

  public void setCertificationIsSet(boolean value) {
    if (!value) {
      this.certification = null;
    }
  }

  public String getQuiz() {
    return this.quiz;
  }

  public CourseBo setQuiz(String quiz) {
    this.quiz = quiz;
    return this;
  }

  public void unsetQuiz() {
    this.quiz = null;
  }

  /** Returns true if field quiz is set (has been assigned a value) and false otherwise */
  public boolean isSetQuiz() {
    return this.quiz != null;
  }

  public void setQuizIsSet(boolean value) {
    if (!value) {
      this.quiz = null;
    }
  }

  public String getCourseIntro() {
    return this.courseIntro;
  }

  public CourseBo setCourseIntro(String courseIntro) {
    this.courseIntro = courseIntro;
    return this;
  }

  public void unsetCourseIntro() {
    this.courseIntro = null;
  }

  /** Returns true if field courseIntro is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseIntro() {
    return this.courseIntro != null;
  }

  public void setCourseIntroIsSet(boolean value) {
    if (!value) {
      this.courseIntro = null;
    }
  }

  public String getReference() {
    return this.reference;
  }

  public CourseBo setReference(String reference) {
    this.reference = reference;
    return this;
  }

  public void unsetReference() {
    this.reference = null;
  }

  /** Returns true if field reference is set (has been assigned a value) and false otherwise */
  public boolean isSetReference() {
    return this.reference != null;
  }

  public void setReferenceIsSet(boolean value) {
    if (!value) {
      this.reference = null;
    }
  }

  public String getRegLocation() {
    return this.regLocation;
  }

  public CourseBo setRegLocation(String regLocation) {
    this.regLocation = regLocation;
    return this;
  }

  public void unsetRegLocation() {
    this.regLocation = null;
  }

  /** Returns true if field regLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetRegLocation() {
    return this.regLocation != null;
  }

  public void setRegLocationIsSet(boolean value) {
    if (!value) {
      this.regLocation = null;
    }
  }

  public int getFinishTime2() {
    return this.finishTime2;
  }

  public CourseBo setFinishTime2(int finishTime2) {
    this.finishTime2 = finishTime2;
    setFinishTime2IsSet(true);
    return this;
  }

  public void unsetFinishTime2() {
    __isset_bit_vector.clear(__FINISHTIME2_ISSET_ID);
  }

  /** Returns true if field finishTime2 is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishTime2() {
    return __isset_bit_vector.get(__FINISHTIME2_ISSET_ID);
  }

  public void setFinishTime2IsSet(boolean value) {
    __isset_bit_vector.set(__FINISHTIME2_ISSET_ID, value);
  }

  public int getStartTime2() {
    return this.startTime2;
  }

  public CourseBo setStartTime2(int startTime2) {
    this.startTime2 = startTime2;
    setStartTime2IsSet(true);
    return this;
  }

  public void unsetStartTime2() {
    __isset_bit_vector.clear(__STARTTIME2_ISSET_ID);
  }

  /** Returns true if field startTime2 is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime2() {
    return __isset_bit_vector.get(__STARTTIME2_ISSET_ID);
  }

  public void setStartTime2IsSet(boolean value) {
    __isset_bit_vector.set(__STARTTIME2_ISSET_ID, value);
  }

  public int getFinishTime1() {
    return this.finishTime1;
  }

  public CourseBo setFinishTime1(int finishTime1) {
    this.finishTime1 = finishTime1;
    setFinishTime1IsSet(true);
    return this;
  }

  public void unsetFinishTime1() {
    __isset_bit_vector.clear(__FINISHTIME1_ISSET_ID);
  }

  /** Returns true if field finishTime1 is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishTime1() {
    return __isset_bit_vector.get(__FINISHTIME1_ISSET_ID);
  }

  public void setFinishTime1IsSet(boolean value) {
    __isset_bit_vector.set(__FINISHTIME1_ISSET_ID, value);
  }

  public int getStartTime1() {
    return this.startTime1;
  }

  public CourseBo setStartTime1(int startTime1) {
    this.startTime1 = startTime1;
    setStartTime1IsSet(true);
    return this;
  }

  public void unsetStartTime1() {
    __isset_bit_vector.clear(__STARTTIME1_ISSET_ID);
  }

  /** Returns true if field startTime1 is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime1() {
    return __isset_bit_vector.get(__STARTTIME1_ISSET_ID);
  }

  public void setStartTime1IsSet(boolean value) {
    __isset_bit_vector.set(__STARTTIME1_ISSET_ID, value);
  }

  public int getStartUponArrival() {
    return this.startUponArrival;
  }

  public CourseBo setStartUponArrival(int startUponArrival) {
    this.startUponArrival = startUponArrival;
    setStartUponArrivalIsSet(true);
    return this;
  }

  public void unsetStartUponArrival() {
    __isset_bit_vector.clear(__STARTUPONARRIVAL_ISSET_ID);
  }

  /** Returns true if field startUponArrival is set (has been assigned a value) and false otherwise */
  public boolean isSetStartUponArrival() {
    return __isset_bit_vector.get(__STARTUPONARRIVAL_ISSET_ID);
  }

  public void setStartUponArrivalIsSet(boolean value) {
    __isset_bit_vector.set(__STARTUPONARRIVAL_ISSET_ID, value);
  }

  public int getBookingType() {
    return this.bookingType;
  }

  public CourseBo setBookingType(int bookingType) {
    this.bookingType = bookingType;
    setBookingTypeIsSet(true);
    return this;
  }

  public void unsetBookingType() {
    __isset_bit_vector.clear(__BOOKINGTYPE_ISSET_ID);
  }

  /** Returns true if field bookingType is set (has been assigned a value) and false otherwise */
  public boolean isSetBookingType() {
    return __isset_bit_vector.get(__BOOKINGTYPE_ISSET_ID);
  }

  public void setBookingTypeIsSet(boolean value) {
    __isset_bit_vector.set(__BOOKINGTYPE_ISSET_ID, value);
  }

  public long getCashbackDate() {
    return this.cashbackDate;
  }

  public CourseBo setCashbackDate(long cashbackDate) {
    this.cashbackDate = cashbackDate;
    setCashbackDateIsSet(true);
    return this;
  }

  public void unsetCashbackDate() {
    __isset_bit_vector.clear(__CASHBACKDATE_ISSET_ID);
  }

  /** Returns true if field cashbackDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCashbackDate() {
    return __isset_bit_vector.get(__CASHBACKDATE_ISSET_ID);
  }

  public void setCashbackDateIsSet(boolean value) {
    __isset_bit_vector.set(__CASHBACKDATE_ISSET_ID, value);
  }

  public long getNoRefundDate() {
    return this.noRefundDate;
  }

  public CourseBo setNoRefundDate(long noRefundDate) {
    this.noRefundDate = noRefundDate;
    setNoRefundDateIsSet(true);
    return this;
  }

  public void unsetNoRefundDate() {
    __isset_bit_vector.clear(__NOREFUNDDATE_ISSET_ID);
  }

  /** Returns true if field noRefundDate is set (has been assigned a value) and false otherwise */
  public boolean isSetNoRefundDate() {
    return __isset_bit_vector.get(__NOREFUNDDATE_ISSET_ID);
  }

  public void setNoRefundDateIsSet(boolean value) {
    __isset_bit_vector.set(__NOREFUNDDATE_ISSET_ID, value);
  }

  public long getCutoffDate() {
    return this.cutoffDate;
  }

  public CourseBo setCutoffDate(long cutoffDate) {
    this.cutoffDate = cutoffDate;
    setCutoffDateIsSet(true);
    return this;
  }

  public void unsetCutoffDate() {
    __isset_bit_vector.clear(__CUTOFFDATE_ISSET_ID);
  }

  /** Returns true if field cutoffDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCutoffDate() {
    return __isset_bit_vector.get(__CUTOFFDATE_ISSET_ID);
  }

  public void setCutoffDateIsSet(boolean value) {
    __isset_bit_vector.set(__CUTOFFDATE_ISSET_ID, value);
  }

  public long getFinishDate() {
    return this.finishDate;
  }

  public CourseBo setFinishDate(long finishDate) {
    this.finishDate = finishDate;
    setFinishDateIsSet(true);
    return this;
  }

  public void unsetFinishDate() {
    __isset_bit_vector.clear(__FINISHDATE_ISSET_ID);
  }

  /** Returns true if field finishDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishDate() {
    return __isset_bit_vector.get(__FINISHDATE_ISSET_ID);
  }

  public void setFinishDateIsSet(boolean value) {
    __isset_bit_vector.set(__FINISHDATE_ISSET_ID, value);
  }

  public long getStartDate() {
    return this.startDate;
  }

  public CourseBo setStartDate(long startDate) {
    this.startDate = startDate;
    setStartDateIsSet(true);
    return this;
  }

  public void unsetStartDate() {
    __isset_bit_vector.clear(__STARTDATE_ISSET_ID);
  }

  /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return __isset_bit_vector.get(__STARTDATE_ISSET_ID);
  }

  public void setStartDateIsSet(boolean value) {
    __isset_bit_vector.set(__STARTDATE_ISSET_ID, value);
  }

  public int getPopularity() {
    return this.popularity;
  }

  public CourseBo setPopularity(int popularity) {
    this.popularity = popularity;
    setPopularityIsSet(true);
    return this;
  }

  public void unsetPopularity() {
    __isset_bit_vector.clear(__POPULARITY_ISSET_ID);
  }

  /** Returns true if field popularity is set (has been assigned a value) and false otherwise */
  public boolean isSetPopularity() {
    return __isset_bit_vector.get(__POPULARITY_ISSET_ID);
  }

  public void setPopularityIsSet(boolean value) {
    __isset_bit_vector.set(__POPULARITY_ISSET_ID, value);
  }

  public int getCourseHourNum() {
    return this.courseHourNum;
  }

  public CourseBo setCourseHourNum(int courseHourNum) {
    this.courseHourNum = courseHourNum;
    setCourseHourNumIsSet(true);
    return this;
  }

  public void unsetCourseHourNum() {
    __isset_bit_vector.clear(__COURSEHOURNUM_ISSET_ID);
  }

  /** Returns true if field courseHourNum is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseHourNum() {
    return __isset_bit_vector.get(__COURSEHOURNUM_ISSET_ID);
  }

  public void setCourseHourNumIsSet(boolean value) {
    __isset_bit_vector.set(__COURSEHOURNUM_ISSET_ID, value);
  }

  public String getClassSize() {
    return this.classSize;
  }

  public CourseBo setClassSize(String classSize) {
    this.classSize = classSize;
    return this;
  }

  public void unsetClassSize() {
    this.classSize = null;
  }

  /** Returns true if field classSize is set (has been assigned a value) and false otherwise */
  public boolean isSetClassSize() {
    return this.classSize != null;
  }

  public void setClassSizeIsSet(boolean value) {
    if (!value) {
      this.classSize = null;
    }
  }

  public int getClassType() {
    return this.classType;
  }

  public CourseBo setClassType(int classType) {
    this.classType = classType;
    setClassTypeIsSet(true);
    return this;
  }

  public void unsetClassType() {
    __isset_bit_vector.clear(__CLASSTYPE_ISSET_ID);
  }

  /** Returns true if field classType is set (has been assigned a value) and false otherwise */
  public boolean isSetClassType() {
    return __isset_bit_vector.get(__CLASSTYPE_ISSET_ID);
  }

  public void setClassTypeIsSet(boolean value) {
    __isset_bit_vector.set(__CLASSTYPE_ISSET_ID, value);
  }

  public double getDiscount() {
    return this.discount;
  }

  public CourseBo setDiscount(double discount) {
    this.discount = discount;
    setDiscountIsSet(true);
    return this;
  }

  public void unsetDiscount() {
    __isset_bit_vector.clear(__DISCOUNT_ISSET_ID);
  }

  /** Returns true if field discount is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscount() {
    return __isset_bit_vector.get(__DISCOUNT_ISSET_ID);
  }

  public void setDiscountIsSet(boolean value) {
    __isset_bit_vector.set(__DISCOUNT_ISSET_ID, value);
  }

  public int getSchooltimeDay() {
    return this.schooltimeDay;
  }

  public CourseBo setSchooltimeDay(int schooltimeDay) {
    this.schooltimeDay = schooltimeDay;
    setSchooltimeDayIsSet(true);
    return this;
  }

  public void unsetSchooltimeDay() {
    __isset_bit_vector.clear(__SCHOOLTIMEDAY_ISSET_ID);
  }

  /** Returns true if field schooltimeDay is set (has been assigned a value) and false otherwise */
  public boolean isSetSchooltimeDay() {
    return __isset_bit_vector.get(__SCHOOLTIMEDAY_ISSET_ID);
  }

  public void setSchooltimeDayIsSet(boolean value) {
    __isset_bit_vector.set(__SCHOOLTIMEDAY_ISSET_ID, value);
  }

  public int getSchooltimeWeek() {
    return this.schooltimeWeek;
  }

  public CourseBo setSchooltimeWeek(int schooltimeWeek) {
    this.schooltimeWeek = schooltimeWeek;
    setSchooltimeWeekIsSet(true);
    return this;
  }

  public void unsetSchooltimeWeek() {
    __isset_bit_vector.clear(__SCHOOLTIMEWEEK_ISSET_ID);
  }

  /** Returns true if field schooltimeWeek is set (has been assigned a value) and false otherwise */
  public boolean isSetSchooltimeWeek() {
    return __isset_bit_vector.get(__SCHOOLTIMEWEEK_ISSET_ID);
  }

  public void setSchooltimeWeekIsSet(boolean value) {
    __isset_bit_vector.set(__SCHOOLTIMEWEEK_ISSET_ID, value);
  }

  public int getIdSetSize() {
    return (this.idSet == null) ? 0 : this.idSet.size();
  }

  public java.util.Iterator<Integer> getIdSetIterator() {
    return (this.idSet == null) ? null : this.idSet.iterator();
  }

  public void addToIdSet(int elem) {
    if (this.idSet == null) {
      this.idSet = new HashSet<Integer>();
    }
    this.idSet.add(elem);
  }

  public Set<Integer> getIdSet() {
    return this.idSet;
  }

  public CourseBo setIdSet(Set<Integer> idSet) {
    this.idSet = idSet;
    return this;
  }

  public void unsetIdSet() {
    this.idSet = null;
  }

  /** Returns true if field idSet is set (has been assigned a value) and false otherwise */
  public boolean isSetIdSet() {
    return this.idSet != null;
  }

  public void setIdSetIsSet(boolean value) {
    if (!value) {
      this.idSet = null;
    }
  }

  public long getLastModifyTimeStart() {
    return this.lastModifyTimeStart;
  }

  public CourseBo setLastModifyTimeStart(long lastModifyTimeStart) {
    this.lastModifyTimeStart = lastModifyTimeStart;
    setLastModifyTimeStartIsSet(true);
    return this;
  }

  public void unsetLastModifyTimeStart() {
    __isset_bit_vector.clear(__LASTMODIFYTIMESTART_ISSET_ID);
  }

  /** Returns true if field lastModifyTimeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimeStart() {
    return __isset_bit_vector.get(__LASTMODIFYTIMESTART_ISSET_ID);
  }

  public void setLastModifyTimeStartIsSet(boolean value) {
    __isset_bit_vector.set(__LASTMODIFYTIMESTART_ISSET_ID, value);
  }

  public long getLastModifyTimeEnd() {
    return this.lastModifyTimeEnd;
  }

  public CourseBo setLastModifyTimeEnd(long lastModifyTimeEnd) {
    this.lastModifyTimeEnd = lastModifyTimeEnd;
    setLastModifyTimeEndIsSet(true);
    return this;
  }

  public void unsetLastModifyTimeEnd() {
    __isset_bit_vector.clear(__LASTMODIFYTIMEEND_ISSET_ID);
  }

  /** Returns true if field lastModifyTimeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimeEnd() {
    return __isset_bit_vector.get(__LASTMODIFYTIMEEND_ISSET_ID);
  }

  public void setLastModifyTimeEndIsSet(boolean value) {
    __isset_bit_vector.set(__LASTMODIFYTIMEEND_ISSET_ID, value);
  }

  public long getCreateTimeStart() {
    return this.createTimeStart;
  }

  public CourseBo setCreateTimeStart(long createTimeStart) {
    this.createTimeStart = createTimeStart;
    setCreateTimeStartIsSet(true);
    return this;
  }

  public void unsetCreateTimeStart() {
    __isset_bit_vector.clear(__CREATETIMESTART_ISSET_ID);
  }

  /** Returns true if field createTimeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimeStart() {
    return __isset_bit_vector.get(__CREATETIMESTART_ISSET_ID);
  }

  public void setCreateTimeStartIsSet(boolean value) {
    __isset_bit_vector.set(__CREATETIMESTART_ISSET_ID, value);
  }

  public long getCreateTimeEnd() {
    return this.createTimeEnd;
  }

  public CourseBo setCreateTimeEnd(long createTimeEnd) {
    this.createTimeEnd = createTimeEnd;
    setCreateTimeEndIsSet(true);
    return this;
  }

  public void unsetCreateTimeEnd() {
    __isset_bit_vector.clear(__CREATETIMEEND_ISSET_ID);
  }

  /** Returns true if field createTimeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimeEnd() {
    return __isset_bit_vector.get(__CREATETIMEEND_ISSET_ID);
  }

  public void setCreateTimeEndIsSet(boolean value) {
    __isset_bit_vector.set(__CREATETIMEEND_ISSET_ID, value);
  }

  public int getCategoryIdSetSize() {
    return (this.categoryIdSet == null) ? 0 : this.categoryIdSet.size();
  }

  public java.util.Iterator<Integer> getCategoryIdSetIterator() {
    return (this.categoryIdSet == null) ? null : this.categoryIdSet.iterator();
  }

  public void addToCategoryIdSet(int elem) {
    if (this.categoryIdSet == null) {
      this.categoryIdSet = new HashSet<Integer>();
    }
    this.categoryIdSet.add(elem);
  }

  public Set<Integer> getCategoryIdSet() {
    return this.categoryIdSet;
  }

  public CourseBo setCategoryIdSet(Set<Integer> categoryIdSet) {
    this.categoryIdSet = categoryIdSet;
    return this;
  }

  public void unsetCategoryIdSet() {
    this.categoryIdSet = null;
  }

  /** Returns true if field categoryIdSet is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryIdSet() {
    return this.categoryIdSet != null;
  }

  public void setCategoryIdSetIsSet(boolean value) {
    if (!value) {
      this.categoryIdSet = null;
    }
  }

  public int getLocationIdSetSize() {
    return (this.locationIdSet == null) ? 0 : this.locationIdSet.size();
  }

  public java.util.Iterator<Integer> getLocationIdSetIterator() {
    return (this.locationIdSet == null) ? null : this.locationIdSet.iterator();
  }

  public void addToLocationIdSet(int elem) {
    if (this.locationIdSet == null) {
      this.locationIdSet = new HashSet<Integer>();
    }
    this.locationIdSet.add(elem);
  }

  public Set<Integer> getLocationIdSet() {
    return this.locationIdSet;
  }

  public CourseBo setLocationIdSet(Set<Integer> locationIdSet) {
    this.locationIdSet = locationIdSet;
    return this;
  }

  public void unsetLocationIdSet() {
    this.locationIdSet = null;
  }

  /** Returns true if field locationIdSet is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationIdSet() {
    return this.locationIdSet != null;
  }

  public void setLocationIdSetIsSet(boolean value) {
    if (!value) {
      this.locationIdSet = null;
    }
  }

  public int getCircleIdSetSize() {
    return (this.circleIdSet == null) ? 0 : this.circleIdSet.size();
  }

  public java.util.Iterator<Integer> getCircleIdSetIterator() {
    return (this.circleIdSet == null) ? null : this.circleIdSet.iterator();
  }

  public void addToCircleIdSet(int elem) {
    if (this.circleIdSet == null) {
      this.circleIdSet = new HashSet<Integer>();
    }
    this.circleIdSet.add(elem);
  }

  public Set<Integer> getCircleIdSet() {
    return this.circleIdSet;
  }

  public CourseBo setCircleIdSet(Set<Integer> circleIdSet) {
    this.circleIdSet = circleIdSet;
    return this;
  }

  public void unsetCircleIdSet() {
    this.circleIdSet = null;
  }

  /** Returns true if field circleIdSet is set (has been assigned a value) and false otherwise */
  public boolean isSetCircleIdSet() {
    return this.circleIdSet != null;
  }

  public void setCircleIdSetIsSet(boolean value) {
    if (!value) {
      this.circleIdSet = null;
    }
  }

  public int getPartnerIdSetSize() {
    return (this.partnerIdSet == null) ? 0 : this.partnerIdSet.size();
  }

  public java.util.Iterator<Integer> getPartnerIdSetIterator() {
    return (this.partnerIdSet == null) ? null : this.partnerIdSet.iterator();
  }

  public void addToPartnerIdSet(int elem) {
    if (this.partnerIdSet == null) {
      this.partnerIdSet = new HashSet<Integer>();
    }
    this.partnerIdSet.add(elem);
  }

  public Set<Integer> getPartnerIdSet() {
    return this.partnerIdSet;
  }

  public CourseBo setPartnerIdSet(Set<Integer> partnerIdSet) {
    this.partnerIdSet = partnerIdSet;
    return this;
  }

  public void unsetPartnerIdSet() {
    this.partnerIdSet = null;
  }

  /** Returns true if field partnerIdSet is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerIdSet() {
    return this.partnerIdSet != null;
  }

  public void setPartnerIdSetIsSet(boolean value) {
    if (!value) {
      this.partnerIdSet = null;
    }
  }

  public int getStatusSetSize() {
    return (this.statusSet == null) ? 0 : this.statusSet.size();
  }

  public java.util.Iterator<Integer> getStatusSetIterator() {
    return (this.statusSet == null) ? null : this.statusSet.iterator();
  }

  public void addToStatusSet(int elem) {
    if (this.statusSet == null) {
      this.statusSet = new HashSet<Integer>();
    }
    this.statusSet.add(elem);
  }

  public Set<Integer> getStatusSet() {
    return this.statusSet;
  }

  public CourseBo setStatusSet(Set<Integer> statusSet) {
    this.statusSet = statusSet;
    return this;
  }

  public void unsetStatusSet() {
    this.statusSet = null;
  }

  /** Returns true if field statusSet is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusSet() {
    return this.statusSet != null;
  }

  public void setStatusSetIsSet(boolean value) {
    if (!value) {
      this.statusSet = null;
    }
  }

  public double getPriceStart() {
    return this.priceStart;
  }

  public CourseBo setPriceStart(double priceStart) {
    this.priceStart = priceStart;
    setPriceStartIsSet(true);
    return this;
  }

  public void unsetPriceStart() {
    __isset_bit_vector.clear(__PRICESTART_ISSET_ID);
  }

  /** Returns true if field priceStart is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceStart() {
    return __isset_bit_vector.get(__PRICESTART_ISSET_ID);
  }

  public void setPriceStartIsSet(boolean value) {
    __isset_bit_vector.set(__PRICESTART_ISSET_ID, value);
  }

  public double getPriceEnd() {
    return this.priceEnd;
  }

  public CourseBo setPriceEnd(double priceEnd) {
    this.priceEnd = priceEnd;
    setPriceEndIsSet(true);
    return this;
  }

  public void unsetPriceEnd() {
    __isset_bit_vector.clear(__PRICEEND_ISSET_ID);
  }

  /** Returns true if field priceEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceEnd() {
    return __isset_bit_vector.get(__PRICEEND_ISSET_ID);
  }

  public void setPriceEndIsSet(boolean value) {
    __isset_bit_vector.set(__PRICEEND_ISSET_ID, value);
  }

  public double getOriginalPriceStart() {
    return this.originalPriceStart;
  }

  public CourseBo setOriginalPriceStart(double originalPriceStart) {
    this.originalPriceStart = originalPriceStart;
    setOriginalPriceStartIsSet(true);
    return this;
  }

  public void unsetOriginalPriceStart() {
    __isset_bit_vector.clear(__ORIGINALPRICESTART_ISSET_ID);
  }

  /** Returns true if field originalPriceStart is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalPriceStart() {
    return __isset_bit_vector.get(__ORIGINALPRICESTART_ISSET_ID);
  }

  public void setOriginalPriceStartIsSet(boolean value) {
    __isset_bit_vector.set(__ORIGINALPRICESTART_ISSET_ID, value);
  }

  public double getOriginalPriceEnd() {
    return this.originalPriceEnd;
  }

  public CourseBo setOriginalPriceEnd(double originalPriceEnd) {
    this.originalPriceEnd = originalPriceEnd;
    setOriginalPriceEndIsSet(true);
    return this;
  }

  public void unsetOriginalPriceEnd() {
    __isset_bit_vector.clear(__ORIGINALPRICEEND_ISSET_ID);
  }

  /** Returns true if field originalPriceEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalPriceEnd() {
    return __isset_bit_vector.get(__ORIGINALPRICEEND_ISSET_ID);
  }

  public void setOriginalPriceEndIsSet(boolean value) {
    __isset_bit_vector.set(__ORIGINALPRICEEND_ISSET_ID, value);
  }

  public double getCashbackStart() {
    return this.cashbackStart;
  }

  public CourseBo setCashbackStart(double cashbackStart) {
    this.cashbackStart = cashbackStart;
    setCashbackStartIsSet(true);
    return this;
  }

  public void unsetCashbackStart() {
    __isset_bit_vector.clear(__CASHBACKSTART_ISSET_ID);
  }

  /** Returns true if field cashbackStart is set (has been assigned a value) and false otherwise */
  public boolean isSetCashbackStart() {
    return __isset_bit_vector.get(__CASHBACKSTART_ISSET_ID);
  }

  public void setCashbackStartIsSet(boolean value) {
    __isset_bit_vector.set(__CASHBACKSTART_ISSET_ID, value);
  }

  public double getCashbackEnd() {
    return this.cashbackEnd;
  }

  public CourseBo setCashbackEnd(double cashbackEnd) {
    this.cashbackEnd = cashbackEnd;
    setCashbackEndIsSet(true);
    return this;
  }

  public void unsetCashbackEnd() {
    __isset_bit_vector.clear(__CASHBACKEND_ISSET_ID);
  }

  /** Returns true if field cashbackEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetCashbackEnd() {
    return __isset_bit_vector.get(__CASHBACKEND_ISSET_ID);
  }

  public void setCashbackEndIsSet(boolean value) {
    __isset_bit_vector.set(__CASHBACKEND_ISSET_ID, value);
  }

  public int getPopularityStart() {
    return this.popularityStart;
  }

  public CourseBo setPopularityStart(int popularityStart) {
    this.popularityStart = popularityStart;
    setPopularityStartIsSet(true);
    return this;
  }

  public void unsetPopularityStart() {
    __isset_bit_vector.clear(__POPULARITYSTART_ISSET_ID);
  }

  /** Returns true if field popularityStart is set (has been assigned a value) and false otherwise */
  public boolean isSetPopularityStart() {
    return __isset_bit_vector.get(__POPULARITYSTART_ISSET_ID);
  }

  public void setPopularityStartIsSet(boolean value) {
    __isset_bit_vector.set(__POPULARITYSTART_ISSET_ID, value);
  }

  public int getPopularityEnd() {
    return this.popularityEnd;
  }

  public CourseBo setPopularityEnd(int popularityEnd) {
    this.popularityEnd = popularityEnd;
    setPopularityEndIsSet(true);
    return this;
  }

  public void unsetPopularityEnd() {
    __isset_bit_vector.clear(__POPULARITYEND_ISSET_ID);
  }

  /** Returns true if field popularityEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetPopularityEnd() {
    return __isset_bit_vector.get(__POPULARITYEND_ISSET_ID);
  }

  public void setPopularityEndIsSet(boolean value) {
    __isset_bit_vector.set(__POPULARITYEND_ISSET_ID, value);
  }

  public int getPopularitySetSize() {
    return (this.popularitySet == null) ? 0 : this.popularitySet.size();
  }

  public java.util.Iterator<Integer> getPopularitySetIterator() {
    return (this.popularitySet == null) ? null : this.popularitySet.iterator();
  }

  public void addToPopularitySet(int elem) {
    if (this.popularitySet == null) {
      this.popularitySet = new HashSet<Integer>();
    }
    this.popularitySet.add(elem);
  }

  public Set<Integer> getPopularitySet() {
    return this.popularitySet;
  }

  public CourseBo setPopularitySet(Set<Integer> popularitySet) {
    this.popularitySet = popularitySet;
    return this;
  }

  public void unsetPopularitySet() {
    this.popularitySet = null;
  }

  /** Returns true if field popularitySet is set (has been assigned a value) and false otherwise */
  public boolean isSetPopularitySet() {
    return this.popularitySet != null;
  }

  public void setPopularitySetIsSet(boolean value) {
    if (!value) {
      this.popularitySet = null;
    }
  }

  public int getCourseHourNumStart() {
    return this.courseHourNumStart;
  }

  public CourseBo setCourseHourNumStart(int courseHourNumStart) {
    this.courseHourNumStart = courseHourNumStart;
    setCourseHourNumStartIsSet(true);
    return this;
  }

  public void unsetCourseHourNumStart() {
    __isset_bit_vector.clear(__COURSEHOURNUMSTART_ISSET_ID);
  }

  /** Returns true if field courseHourNumStart is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseHourNumStart() {
    return __isset_bit_vector.get(__COURSEHOURNUMSTART_ISSET_ID);
  }

  public void setCourseHourNumStartIsSet(boolean value) {
    __isset_bit_vector.set(__COURSEHOURNUMSTART_ISSET_ID, value);
  }

  public int getCourseHourNumEnd() {
    return this.courseHourNumEnd;
  }

  public CourseBo setCourseHourNumEnd(int courseHourNumEnd) {
    this.courseHourNumEnd = courseHourNumEnd;
    setCourseHourNumEndIsSet(true);
    return this;
  }

  public void unsetCourseHourNumEnd() {
    __isset_bit_vector.clear(__COURSEHOURNUMEND_ISSET_ID);
  }

  /** Returns true if field courseHourNumEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseHourNumEnd() {
    return __isset_bit_vector.get(__COURSEHOURNUMEND_ISSET_ID);
  }

  public void setCourseHourNumEndIsSet(boolean value) {
    __isset_bit_vector.set(__COURSEHOURNUMEND_ISSET_ID, value);
  }

  public int getCourseHourNumSetSize() {
    return (this.courseHourNumSet == null) ? 0 : this.courseHourNumSet.size();
  }

  public java.util.Iterator<Integer> getCourseHourNumSetIterator() {
    return (this.courseHourNumSet == null) ? null : this.courseHourNumSet.iterator();
  }

  public void addToCourseHourNumSet(int elem) {
    if (this.courseHourNumSet == null) {
      this.courseHourNumSet = new HashSet<Integer>();
    }
    this.courseHourNumSet.add(elem);
  }

  public Set<Integer> getCourseHourNumSet() {
    return this.courseHourNumSet;
  }

  public CourseBo setCourseHourNumSet(Set<Integer> courseHourNumSet) {
    this.courseHourNumSet = courseHourNumSet;
    return this;
  }

  public void unsetCourseHourNumSet() {
    this.courseHourNumSet = null;
  }

  /** Returns true if field courseHourNumSet is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseHourNumSet() {
    return this.courseHourNumSet != null;
  }

  public void setCourseHourNumSetIsSet(boolean value) {
    if (!value) {
      this.courseHourNumSet = null;
    }
  }

  public long getStartDateStart() {
    return this.startDateStart;
  }

  public CourseBo setStartDateStart(long startDateStart) {
    this.startDateStart = startDateStart;
    setStartDateStartIsSet(true);
    return this;
  }

  public void unsetStartDateStart() {
    __isset_bit_vector.clear(__STARTDATESTART_ISSET_ID);
  }

  /** Returns true if field startDateStart is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDateStart() {
    return __isset_bit_vector.get(__STARTDATESTART_ISSET_ID);
  }

  public void setStartDateStartIsSet(boolean value) {
    __isset_bit_vector.set(__STARTDATESTART_ISSET_ID, value);
  }

  public long getStartDateEnd() {
    return this.startDateEnd;
  }

  public CourseBo setStartDateEnd(long startDateEnd) {
    this.startDateEnd = startDateEnd;
    setStartDateEndIsSet(true);
    return this;
  }

  public void unsetStartDateEnd() {
    __isset_bit_vector.clear(__STARTDATEEND_ISSET_ID);
  }

  /** Returns true if field startDateEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDateEnd() {
    return __isset_bit_vector.get(__STARTDATEEND_ISSET_ID);
  }

  public void setStartDateEndIsSet(boolean value) {
    __isset_bit_vector.set(__STARTDATEEND_ISSET_ID, value);
  }

  public long getFinishDateStart() {
    return this.finishDateStart;
  }

  public CourseBo setFinishDateStart(long finishDateStart) {
    this.finishDateStart = finishDateStart;
    setFinishDateStartIsSet(true);
    return this;
  }

  public void unsetFinishDateStart() {
    __isset_bit_vector.clear(__FINISHDATESTART_ISSET_ID);
  }

  /** Returns true if field finishDateStart is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishDateStart() {
    return __isset_bit_vector.get(__FINISHDATESTART_ISSET_ID);
  }

  public void setFinishDateStartIsSet(boolean value) {
    __isset_bit_vector.set(__FINISHDATESTART_ISSET_ID, value);
  }

  public long getFinishDateEnd() {
    return this.finishDateEnd;
  }

  public CourseBo setFinishDateEnd(long finishDateEnd) {
    this.finishDateEnd = finishDateEnd;
    setFinishDateEndIsSet(true);
    return this;
  }

  public void unsetFinishDateEnd() {
    __isset_bit_vector.clear(__FINISHDATEEND_ISSET_ID);
  }

  /** Returns true if field finishDateEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishDateEnd() {
    return __isset_bit_vector.get(__FINISHDATEEND_ISSET_ID);
  }

  public void setFinishDateEndIsSet(boolean value) {
    __isset_bit_vector.set(__FINISHDATEEND_ISSET_ID, value);
  }

  public long getCutoffDateStart() {
    return this.cutoffDateStart;
  }

  public CourseBo setCutoffDateStart(long cutoffDateStart) {
    this.cutoffDateStart = cutoffDateStart;
    setCutoffDateStartIsSet(true);
    return this;
  }

  public void unsetCutoffDateStart() {
    __isset_bit_vector.clear(__CUTOFFDATESTART_ISSET_ID);
  }

  /** Returns true if field cutoffDateStart is set (has been assigned a value) and false otherwise */
  public boolean isSetCutoffDateStart() {
    return __isset_bit_vector.get(__CUTOFFDATESTART_ISSET_ID);
  }

  public void setCutoffDateStartIsSet(boolean value) {
    __isset_bit_vector.set(__CUTOFFDATESTART_ISSET_ID, value);
  }

  public long getCutoffDateEnd() {
    return this.cutoffDateEnd;
  }

  public CourseBo setCutoffDateEnd(long cutoffDateEnd) {
    this.cutoffDateEnd = cutoffDateEnd;
    setCutoffDateEndIsSet(true);
    return this;
  }

  public void unsetCutoffDateEnd() {
    __isset_bit_vector.clear(__CUTOFFDATEEND_ISSET_ID);
  }

  /** Returns true if field cutoffDateEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetCutoffDateEnd() {
    return __isset_bit_vector.get(__CUTOFFDATEEND_ISSET_ID);
  }

  public void setCutoffDateEndIsSet(boolean value) {
    __isset_bit_vector.set(__CUTOFFDATEEND_ISSET_ID, value);
  }

  public int getClassTypeSetSize() {
    return (this.classTypeSet == null) ? 0 : this.classTypeSet.size();
  }

  public java.util.Iterator<Integer> getClassTypeSetIterator() {
    return (this.classTypeSet == null) ? null : this.classTypeSet.iterator();
  }

  public void addToClassTypeSet(int elem) {
    if (this.classTypeSet == null) {
      this.classTypeSet = new HashSet<Integer>();
    }
    this.classTypeSet.add(elem);
  }

  public Set<Integer> getClassTypeSet() {
    return this.classTypeSet;
  }

  public CourseBo setClassTypeSet(Set<Integer> classTypeSet) {
    this.classTypeSet = classTypeSet;
    return this;
  }

  public void unsetClassTypeSet() {
    this.classTypeSet = null;
  }

  /** Returns true if field classTypeSet is set (has been assigned a value) and false otherwise */
  public boolean isSetClassTypeSet() {
    return this.classTypeSet != null;
  }

  public void setClassTypeSetIsSet(boolean value) {
    if (!value) {
      this.classTypeSet = null;
    }
  }

  public double getDiscountStart() {
    return this.discountStart;
  }

  public CourseBo setDiscountStart(double discountStart) {
    this.discountStart = discountStart;
    setDiscountStartIsSet(true);
    return this;
  }

  public void unsetDiscountStart() {
    __isset_bit_vector.clear(__DISCOUNTSTART_ISSET_ID);
  }

  /** Returns true if field discountStart is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscountStart() {
    return __isset_bit_vector.get(__DISCOUNTSTART_ISSET_ID);
  }

  public void setDiscountStartIsSet(boolean value) {
    __isset_bit_vector.set(__DISCOUNTSTART_ISSET_ID, value);
  }

  public double getDiscountEnd() {
    return this.discountEnd;
  }

  public CourseBo setDiscountEnd(double discountEnd) {
    this.discountEnd = discountEnd;
    setDiscountEndIsSet(true);
    return this;
  }

  public void unsetDiscountEnd() {
    __isset_bit_vector.clear(__DISCOUNTEND_ISSET_ID);
  }

  /** Returns true if field discountEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscountEnd() {
    return __isset_bit_vector.get(__DISCOUNTEND_ISSET_ID);
  }

  public void setDiscountEndIsSet(boolean value) {
    __isset_bit_vector.set(__DISCOUNTEND_ISSET_ID, value);
  }

  public double getRatingStart() {
    return this.ratingStart;
  }

  public CourseBo setRatingStart(double ratingStart) {
    this.ratingStart = ratingStart;
    setRatingStartIsSet(true);
    return this;
  }

  public void unsetRatingStart() {
    __isset_bit_vector.clear(__RATINGSTART_ISSET_ID);
  }

  /** Returns true if field ratingStart is set (has been assigned a value) and false otherwise */
  public boolean isSetRatingStart() {
    return __isset_bit_vector.get(__RATINGSTART_ISSET_ID);
  }

  public void setRatingStartIsSet(boolean value) {
    __isset_bit_vector.set(__RATINGSTART_ISSET_ID, value);
  }

  public double getRatingEnd() {
    return this.ratingEnd;
  }

  public CourseBo setRatingEnd(double ratingEnd) {
    this.ratingEnd = ratingEnd;
    setRatingEndIsSet(true);
    return this;
  }

  public void unsetRatingEnd() {
    __isset_bit_vector.clear(__RATINGEND_ISSET_ID);
  }

  /** Returns true if field ratingEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetRatingEnd() {
    return __isset_bit_vector.get(__RATINGEND_ISSET_ID);
  }

  public void setRatingEndIsSet(boolean value) {
    __isset_bit_vector.set(__RATINGEND_ISSET_ID, value);
  }

  public int getBookingTotalStart() {
    return this.bookingTotalStart;
  }

  public CourseBo setBookingTotalStart(int bookingTotalStart) {
    this.bookingTotalStart = bookingTotalStart;
    setBookingTotalStartIsSet(true);
    return this;
  }

  public void unsetBookingTotalStart() {
    __isset_bit_vector.clear(__BOOKINGTOTALSTART_ISSET_ID);
  }

  /** Returns true if field bookingTotalStart is set (has been assigned a value) and false otherwise */
  public boolean isSetBookingTotalStart() {
    return __isset_bit_vector.get(__BOOKINGTOTALSTART_ISSET_ID);
  }

  public void setBookingTotalStartIsSet(boolean value) {
    __isset_bit_vector.set(__BOOKINGTOTALSTART_ISSET_ID, value);
  }

  public int getBookingTotalEnd() {
    return this.bookingTotalEnd;
  }

  public CourseBo setBookingTotalEnd(int bookingTotalEnd) {
    this.bookingTotalEnd = bookingTotalEnd;
    setBookingTotalEndIsSet(true);
    return this;
  }

  public void unsetBookingTotalEnd() {
    __isset_bit_vector.clear(__BOOKINGTOTALEND_ISSET_ID);
  }

  /** Returns true if field bookingTotalEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetBookingTotalEnd() {
    return __isset_bit_vector.get(__BOOKINGTOTALEND_ISSET_ID);
  }

  public void setBookingTotalEndIsSet(boolean value) {
    __isset_bit_vector.set(__BOOKINGTOTALEND_ISSET_ID, value);
  }

  public int getBookingTotalSetSize() {
    return (this.bookingTotalSet == null) ? 0 : this.bookingTotalSet.size();
  }

  public java.util.Iterator<Integer> getBookingTotalSetIterator() {
    return (this.bookingTotalSet == null) ? null : this.bookingTotalSet.iterator();
  }

  public void addToBookingTotalSet(int elem) {
    if (this.bookingTotalSet == null) {
      this.bookingTotalSet = new HashSet<Integer>();
    }
    this.bookingTotalSet.add(elem);
  }

  public Set<Integer> getBookingTotalSet() {
    return this.bookingTotalSet;
  }

  public CourseBo setBookingTotalSet(Set<Integer> bookingTotalSet) {
    this.bookingTotalSet = bookingTotalSet;
    return this;
  }

  public void unsetBookingTotalSet() {
    this.bookingTotalSet = null;
  }

  /** Returns true if field bookingTotalSet is set (has been assigned a value) and false otherwise */
  public boolean isSetBookingTotalSet() {
    return this.bookingTotalSet != null;
  }

  public void setBookingTotalSetIsSet(boolean value) {
    if (!value) {
      this.bookingTotalSet = null;
    }
  }

  public int getSchooltimeDaySetSize() {
    return (this.schooltimeDaySet == null) ? 0 : this.schooltimeDaySet.size();
  }

  public java.util.Iterator<Integer> getSchooltimeDaySetIterator() {
    return (this.schooltimeDaySet == null) ? null : this.schooltimeDaySet.iterator();
  }

  public void addToSchooltimeDaySet(int elem) {
    if (this.schooltimeDaySet == null) {
      this.schooltimeDaySet = new HashSet<Integer>();
    }
    this.schooltimeDaySet.add(elem);
  }

  public Set<Integer> getSchooltimeDaySet() {
    return this.schooltimeDaySet;
  }

  public CourseBo setSchooltimeDaySet(Set<Integer> schooltimeDaySet) {
    this.schooltimeDaySet = schooltimeDaySet;
    return this;
  }

  public void unsetSchooltimeDaySet() {
    this.schooltimeDaySet = null;
  }

  /** Returns true if field schooltimeDaySet is set (has been assigned a value) and false otherwise */
  public boolean isSetSchooltimeDaySet() {
    return this.schooltimeDaySet != null;
  }

  public void setSchooltimeDaySetIsSet(boolean value) {
    if (!value) {
      this.schooltimeDaySet = null;
    }
  }

  public int getSchooltimeWeekSetSize() {
    return (this.schooltimeWeekSet == null) ? 0 : this.schooltimeWeekSet.size();
  }

  public java.util.Iterator<Integer> getSchooltimeWeekSetIterator() {
    return (this.schooltimeWeekSet == null) ? null : this.schooltimeWeekSet.iterator();
  }

  public void addToSchooltimeWeekSet(int elem) {
    if (this.schooltimeWeekSet == null) {
      this.schooltimeWeekSet = new HashSet<Integer>();
    }
    this.schooltimeWeekSet.add(elem);
  }

  public Set<Integer> getSchooltimeWeekSet() {
    return this.schooltimeWeekSet;
  }

  public CourseBo setSchooltimeWeekSet(Set<Integer> schooltimeWeekSet) {
    this.schooltimeWeekSet = schooltimeWeekSet;
    return this;
  }

  public void unsetSchooltimeWeekSet() {
    this.schooltimeWeekSet = null;
  }

  /** Returns true if field schooltimeWeekSet is set (has been assigned a value) and false otherwise */
  public boolean isSetSchooltimeWeekSet() {
    return this.schooltimeWeekSet != null;
  }

  public void setSchooltimeWeekSetIsSet(boolean value) {
    if (!value) {
      this.schooltimeWeekSet = null;
    }
  }

  public int getTeacherListSize() {
    return (this.teacherList == null) ? 0 : this.teacherList.size();
  }

  public java.util.Iterator<com.ishangke.edunav.commoncontract.model.TeacherBo> getTeacherListIterator() {
    return (this.teacherList == null) ? null : this.teacherList.iterator();
  }

  public void addToTeacherList(com.ishangke.edunav.commoncontract.model.TeacherBo elem) {
    if (this.teacherList == null) {
      this.teacherList = new ArrayList<com.ishangke.edunav.commoncontract.model.TeacherBo>();
    }
    this.teacherList.add(elem);
  }

  public List<com.ishangke.edunav.commoncontract.model.TeacherBo> getTeacherList() {
    return this.teacherList;
  }

  public CourseBo setTeacherList(List<com.ishangke.edunav.commoncontract.model.TeacherBo> teacherList) {
    this.teacherList = teacherList;
    return this;
  }

  public void unsetTeacherList() {
    this.teacherList = null;
  }

  /** Returns true if field teacherList is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacherList() {
    return this.teacherList != null;
  }

  public void setTeacherListIsSet(boolean value) {
    if (!value) {
      this.teacherList = null;
    }
  }

  public int getClassPhotoListSize() {
    return (this.classPhotoList == null) ? 0 : this.classPhotoList.size();
  }

  public java.util.Iterator<com.ishangke.edunav.commoncontract.model.ClassPhotoBo> getClassPhotoListIterator() {
    return (this.classPhotoList == null) ? null : this.classPhotoList.iterator();
  }

  public void addToClassPhotoList(com.ishangke.edunav.commoncontract.model.ClassPhotoBo elem) {
    if (this.classPhotoList == null) {
      this.classPhotoList = new ArrayList<com.ishangke.edunav.commoncontract.model.ClassPhotoBo>();
    }
    this.classPhotoList.add(elem);
  }

  public List<com.ishangke.edunav.commoncontract.model.ClassPhotoBo> getClassPhotoList() {
    return this.classPhotoList;
  }

  public CourseBo setClassPhotoList(List<com.ishangke.edunav.commoncontract.model.ClassPhotoBo> classPhotoList) {
    this.classPhotoList = classPhotoList;
    return this;
  }

  public void unsetClassPhotoList() {
    this.classPhotoList = null;
  }

  /** Returns true if field classPhotoList is set (has been assigned a value) and false otherwise */
  public boolean isSetClassPhotoList() {
    return this.classPhotoList != null;
  }

  public void setClassPhotoListIsSet(boolean value) {
    if (!value) {
      this.classPhotoList = null;
    }
  }

  public String getLogoUrl() {
    return this.logoUrl;
  }

  public CourseBo setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
    return this;
  }

  public void unsetLogoUrl() {
    this.logoUrl = null;
  }

  /** Returns true if field logoUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetLogoUrl() {
    return this.logoUrl != null;
  }

  public void setLogoUrlIsSet(boolean value) {
    if (!value) {
      this.logoUrl = null;
    }
  }

  public String getWholeName() {
    return this.wholeName;
  }

  public CourseBo setWholeName(String wholeName) {
    this.wholeName = wholeName;
    return this;
  }

  public void unsetWholeName() {
    this.wholeName = null;
  }

  /** Returns true if field wholeName is set (has been assigned a value) and false otherwise */
  public boolean isSetWholeName() {
    return this.wholeName != null;
  }

  public void setWholeNameIsSet(boolean value) {
    if (!value) {
      this.wholeName = null;
    }
  }

  public String getInstName() {
    return this.instName;
  }

  public CourseBo setInstName(String instName) {
    this.instName = instName;
    return this;
  }

  public void unsetInstName() {
    this.instName = null;
  }

  /** Returns true if field instName is set (has been assigned a value) and false otherwise */
  public boolean isSetInstName() {
    return this.instName != null;
  }

  public void setInstNameIsSet(boolean value) {
    if (!value) {
      this.instName = null;
    }
  }

  public String getPartnerIntro() {
    return this.partnerIntro;
  }

  public CourseBo setPartnerIntro(String partnerIntro) {
    this.partnerIntro = partnerIntro;
    return this;
  }

  public void unsetPartnerIntro() {
    this.partnerIntro = null;
  }

  /** Returns true if field partnerIntro is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerIntro() {
    return this.partnerIntro != null;
  }

  public void setPartnerIntroIsSet(boolean value) {
    if (!value) {
      this.partnerIntro = null;
    }
  }

  public int getPartnerQualification() {
    return this.partnerQualification;
  }

  public CourseBo setPartnerQualification(int partnerQualification) {
    this.partnerQualification = partnerQualification;
    setPartnerQualificationIsSet(true);
    return this;
  }

  public void unsetPartnerQualification() {
    __isset_bit_vector.clear(__PARTNERQUALIFICATION_ISSET_ID);
  }

  /** Returns true if field partnerQualification is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerQualification() {
    return __isset_bit_vector.get(__PARTNERQUALIFICATION_ISSET_ID);
  }

  public void setPartnerQualificationIsSet(boolean value) {
    __isset_bit_vector.set(__PARTNERQUALIFICATION_ISSET_ID, value);
  }

  public String getPartnerDistinction() {
    return this.partnerDistinction;
  }

  public CourseBo setPartnerDistinction(String partnerDistinction) {
    this.partnerDistinction = partnerDistinction;
    return this;
  }

  public void unsetPartnerDistinction() {
    this.partnerDistinction = null;
  }

  /** Returns true if field partnerDistinction is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerDistinction() {
    return this.partnerDistinction != null;
  }

  public void setPartnerDistinctionIsSet(boolean value) {
    if (!value) {
      this.partnerDistinction = null;
    }
  }

  public double getPartnerRating() {
    return this.partnerRating;
  }

  public CourseBo setPartnerRating(double partnerRating) {
    this.partnerRating = partnerRating;
    setPartnerRatingIsSet(true);
    return this;
  }

  public void unsetPartnerRating() {
    __isset_bit_vector.clear(__PARTNERRATING_ISSET_ID);
  }

  /** Returns true if field partnerRating is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerRating() {
    return __isset_bit_vector.get(__PARTNERRATING_ISSET_ID);
  }

  public void setPartnerRatingIsSet(boolean value) {
    __isset_bit_vector.set(__PARTNERRATING_ISSET_ID, value);
  }

  public String getAddress() {
    return this.address;
  }

  public CourseBo setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public double getAddressLat() {
    return this.addressLat;
  }

  public CourseBo setAddressLat(double addressLat) {
    this.addressLat = addressLat;
    setAddressLatIsSet(true);
    return this;
  }

  public void unsetAddressLat() {
    __isset_bit_vector.clear(__ADDRESSLAT_ISSET_ID);
  }

  /** Returns true if field addressLat is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressLat() {
    return __isset_bit_vector.get(__ADDRESSLAT_ISSET_ID);
  }

  public void setAddressLatIsSet(boolean value) {
    __isset_bit_vector.set(__ADDRESSLAT_ISSET_ID, value);
  }

  public double getAddressLng() {
    return this.addressLng;
  }

  public CourseBo setAddressLng(double addressLng) {
    this.addressLng = addressLng;
    setAddressLngIsSet(true);
    return this;
  }

  public void unsetAddressLng() {
    __isset_bit_vector.clear(__ADDRESSLNG_ISSET_ID);
  }

  /** Returns true if field addressLng is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressLng() {
    return __isset_bit_vector.get(__ADDRESSLNG_ISSET_ID);
  }

  public void setAddressLngIsSet(boolean value) {
    __isset_bit_vector.set(__ADDRESSLNG_ISSET_ID, value);
  }

  public String getCategoryValue() {
    return this.categoryValue;
  }

  public CourseBo setCategoryValue(String categoryValue) {
    this.categoryValue = categoryValue;
    return this;
  }

  public void unsetCategoryValue() {
    this.categoryValue = null;
  }

  /** Returns true if field categoryValue is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryValue() {
    return this.categoryValue != null;
  }

  public void setCategoryValueIsSet(boolean value) {
    if (!value) {
      this.categoryValue = null;
    }
  }

  public String getCategoryName() {
    return this.categoryName;
  }

  public CourseBo setCategoryName(String categoryName) {
    this.categoryName = categoryName;
    return this;
  }

  public void unsetCategoryName() {
    this.categoryName = null;
  }

  /** Returns true if field categoryName is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryName() {
    return this.categoryName != null;
  }

  public void setCategoryNameIsSet(boolean value) {
    if (!value) {
      this.categoryName = null;
    }
  }

  public int getCategoryRank() {
    return this.categoryRank;
  }

  public CourseBo setCategoryRank(int categoryRank) {
    this.categoryRank = categoryRank;
    setCategoryRankIsSet(true);
    return this;
  }

  public void unsetCategoryRank() {
    __isset_bit_vector.clear(__CATEGORYRANK_ISSET_ID);
  }

  /** Returns true if field categoryRank is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryRank() {
    return __isset_bit_vector.get(__CATEGORYRANK_ISSET_ID);
  }

  public void setCategoryRankIsSet(boolean value) {
    __isset_bit_vector.set(__CATEGORYRANK_ISSET_ID, value);
  }

  public String getLocationValue() {
    return this.locationValue;
  }

  public CourseBo setLocationValue(String locationValue) {
    this.locationValue = locationValue;
    return this;
  }

  public void unsetLocationValue() {
    this.locationValue = null;
  }

  /** Returns true if field locationValue is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationValue() {
    return this.locationValue != null;
  }

  public void setLocationValueIsSet(boolean value) {
    if (!value) {
      this.locationValue = null;
    }
  }

  public String getLocationName() {
    return this.locationName;
  }

  public CourseBo setLocationName(String locationName) {
    this.locationName = locationName;
    return this;
  }

  public void unsetLocationName() {
    this.locationName = null;
  }

  /** Returns true if field locationName is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationName() {
    return this.locationName != null;
  }

  public void setLocationNameIsSet(boolean value) {
    if (!value) {
      this.locationName = null;
    }
  }

  public String getCircleValue() {
    return this.circleValue;
  }

  public CourseBo setCircleValue(String circleValue) {
    this.circleValue = circleValue;
    return this;
  }

  public void unsetCircleValue() {
    this.circleValue = null;
  }

  /** Returns true if field circleValue is set (has been assigned a value) and false otherwise */
  public boolean isSetCircleValue() {
    return this.circleValue != null;
  }

  public void setCircleValueIsSet(boolean value) {
    if (!value) {
      this.circleValue = null;
    }
  }

  public String getCircleName() {
    return this.circleName;
  }

  public CourseBo setCircleName(String circleName) {
    this.circleName = circleName;
    return this;
  }

  public void unsetCircleName() {
    this.circleName = null;
  }

  /** Returns true if field circleName is set (has been assigned a value) and false otherwise */
  public boolean isSetCircleName() {
    return this.circleName != null;
  }

  public void setCircleNameIsSet(boolean value) {
    if (!value) {
      this.circleName = null;
    }
  }

  public double getRating() {
    return this.rating;
  }

  public CourseBo setRating(double rating) {
    this.rating = rating;
    setRatingIsSet(true);
    return this;
  }

  public void unsetRating() {
    __isset_bit_vector.clear(__RATING_ISSET_ID);
  }

  /** Returns true if field rating is set (has been assigned a value) and false otherwise */
  public boolean isSetRating() {
    return __isset_bit_vector.get(__RATING_ISSET_ID);
  }

  public void setRatingIsSet(boolean value) {
    __isset_bit_vector.set(__RATING_ISSET_ID, value);
  }

  public int getBookingTotal() {
    return this.bookingTotal;
  }

  public CourseBo setBookingTotal(int bookingTotal) {
    this.bookingTotal = bookingTotal;
    setBookingTotalIsSet(true);
    return this;
  }

  public void unsetBookingTotal() {
    __isset_bit_vector.clear(__BOOKINGTOTAL_ISSET_ID);
  }

  /** Returns true if field bookingTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetBookingTotal() {
    return __isset_bit_vector.get(__BOOKINGTOTAL_ISSET_ID);
  }

  public void setBookingTotalIsSet(boolean value) {
    __isset_bit_vector.set(__BOOKINGTOTAL_ISSET_ID, value);
  }

  public long getNoRefundDateStart() {
    return this.noRefundDateStart;
  }

  public CourseBo setNoRefundDateStart(long noRefundDateStart) {
    this.noRefundDateStart = noRefundDateStart;
    setNoRefundDateStartIsSet(true);
    return this;
  }

  public void unsetNoRefundDateStart() {
    __isset_bit_vector.clear(__NOREFUNDDATESTART_ISSET_ID);
  }

  /** Returns true if field noRefundDateStart is set (has been assigned a value) and false otherwise */
  public boolean isSetNoRefundDateStart() {
    return __isset_bit_vector.get(__NOREFUNDDATESTART_ISSET_ID);
  }

  public void setNoRefundDateStartIsSet(boolean value) {
    __isset_bit_vector.set(__NOREFUNDDATESTART_ISSET_ID, value);
  }

  public long getNoRefundDateEnd() {
    return this.noRefundDateEnd;
  }

  public CourseBo setNoRefundDateEnd(long noRefundDateEnd) {
    this.noRefundDateEnd = noRefundDateEnd;
    setNoRefundDateEndIsSet(true);
    return this;
  }

  public void unsetNoRefundDateEnd() {
    __isset_bit_vector.clear(__NOREFUNDDATEEND_ISSET_ID);
  }

  /** Returns true if field noRefundDateEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetNoRefundDateEnd() {
    return __isset_bit_vector.get(__NOREFUNDDATEEND_ISSET_ID);
  }

  public void setNoRefundDateEndIsSet(boolean value) {
    __isset_bit_vector.set(__NOREFUNDDATEEND_ISSET_ID, value);
  }

  public long getCashbackDateStart() {
    return this.cashbackDateStart;
  }

  public CourseBo setCashbackDateStart(long cashbackDateStart) {
    this.cashbackDateStart = cashbackDateStart;
    setCashbackDateStartIsSet(true);
    return this;
  }

  public void unsetCashbackDateStart() {
    __isset_bit_vector.clear(__CASHBACKDATESTART_ISSET_ID);
  }

  /** Returns true if field cashbackDateStart is set (has been assigned a value) and false otherwise */
  public boolean isSetCashbackDateStart() {
    return __isset_bit_vector.get(__CASHBACKDATESTART_ISSET_ID);
  }

  public void setCashbackDateStartIsSet(boolean value) {
    __isset_bit_vector.set(__CASHBACKDATESTART_ISSET_ID, value);
  }

  public long getCashbackDateEnd() {
    return this.cashbackDateEnd;
  }

  public CourseBo setCashbackDateEnd(long cashbackDateEnd) {
    this.cashbackDateEnd = cashbackDateEnd;
    setCashbackDateEndIsSet(true);
    return this;
  }

  public void unsetCashbackDateEnd() {
    __isset_bit_vector.clear(__CASHBACKDATEEND_ISSET_ID);
  }

  /** Returns true if field cashbackDateEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetCashbackDateEnd() {
    return __isset_bit_vector.get(__CASHBACKDATEEND_ISSET_ID);
  }

  public void setCashbackDateEndIsSet(boolean value) {
    __isset_bit_vector.set(__CASHBACKDATEEND_ISSET_ID, value);
  }

  public int getCourseTemplateIdSetSize() {
    return (this.courseTemplateIdSet == null) ? 0 : this.courseTemplateIdSet.size();
  }

  public java.util.Iterator<Integer> getCourseTemplateIdSetIterator() {
    return (this.courseTemplateIdSet == null) ? null : this.courseTemplateIdSet.iterator();
  }

  public void addToCourseTemplateIdSet(int elem) {
    if (this.courseTemplateIdSet == null) {
      this.courseTemplateIdSet = new HashSet<Integer>();
    }
    this.courseTemplateIdSet.add(elem);
  }

  public Set<Integer> getCourseTemplateIdSet() {
    return this.courseTemplateIdSet;
  }

  public CourseBo setCourseTemplateIdSet(Set<Integer> courseTemplateIdSet) {
    this.courseTemplateIdSet = courseTemplateIdSet;
    return this;
  }

  public void unsetCourseTemplateIdSet() {
    this.courseTemplateIdSet = null;
  }

  /** Returns true if field courseTemplateIdSet is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseTemplateIdSet() {
    return this.courseTemplateIdSet != null;
  }

  public void setCourseTemplateIdSetIsSet(boolean value) {
    if (!value) {
      this.courseTemplateIdSet = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case COURSE_NAME:
      if (value == null) {
        unsetCourseName();
      } else {
        setCourseName((String)value);
      }
      break;

    case COURSE_TEMPLATE_ID:
      if (value == null) {
        unsetCourseTemplateId();
      } else {
        setCourseTemplateId((Integer)value);
      }
      break;

    case CATEGORY_ID:
      if (value == null) {
        unsetCategoryId();
      } else {
        setCategoryId((Integer)value);
      }
      break;

    case LOCATION_ID:
      if (value == null) {
        unsetLocationId();
      } else {
        setLocationId((Integer)value);
      }
      break;

    case CIRCLE_ID:
      if (value == null) {
        unsetCircleId();
      } else {
        setCircleId((Integer)value);
      }
      break;

    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((Integer)value);
      }
      break;

    case ADDRESS_ID:
      if (value == null) {
        unsetAddressId();
      } else {
        setAddressId((Integer)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case ORIGINAL_PRICE:
      if (value == null) {
        unsetOriginalPrice();
      } else {
        setOriginalPrice((Double)value);
      }
      break;

    case CASHBACK:
      if (value == null) {
        unsetCashback();
      } else {
        setCashback((Double)value);
      }
      break;

    case COMMISSION:
      if (value == null) {
        unsetCommission();
      } else {
        setCommission((Double)value);
      }
      break;

    case SERVICE_CHARGE:
      if (value == null) {
        unsetServiceCharge();
      } else {
        setServiceCharge((Double)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LAST_MODIFY_TIME:
      if (value == null) {
        unsetLastModifyTime();
      } else {
        setLastModifyTime((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case ENABLED:
      if (value == null) {
        unsetEnabled();
      } else {
        setEnabled((Integer)value);
      }
      break;

    case COURSE_HOUR_LENGTH:
      if (value == null) {
        unsetCourseHourLength();
      } else {
        setCourseHourLength((Integer)value);
      }
      break;

    case TEACHING_METHOD:
      if (value == null) {
        unsetTeachingMethod();
      } else {
        setTeachingMethod((String)value);
      }
      break;

    case TEACHING_MATERIAL_FEE:
      if (value == null) {
        unsetTeachingMaterialFee();
      } else {
        setTeachingMaterialFee((String)value);
      }
      break;

    case DOWNLOAD_MATERIALS:
      if (value == null) {
        unsetDownloadMaterials();
      } else {
        setDownloadMaterials((String)value);
      }
      break;

    case BONUS_SERVICE:
      if (value == null) {
        unsetBonusService();
      } else {
        setBonusService((String)value);
      }
      break;

    case MARKING:
      if (value == null) {
        unsetMarking();
      } else {
        setMarking((String)value);
      }
      break;

    case ASSIGNMENTS:
      if (value == null) {
        unsetAssignments();
      } else {
        setAssignments((String)value);
      }
      break;

    case TRAIL:
      if (value == null) {
        unsetTrail();
      } else {
        setTrail((String)value);
      }
      break;

    case QUESTION_SESSION:
      if (value == null) {
        unsetQuestionSession();
      } else {
        setQuestionSession((String)value);
      }
      break;

    case TEACHING_AND_EXERCISE:
      if (value == null) {
        unsetTeachingAndExercise();
      } else {
        setTeachingAndExercise((String)value);
      }
      break;

    case CLASS_TEACHER:
      if (value == null) {
        unsetClassTeacher();
      } else {
        setClassTeacher((String)value);
      }
      break;

    case GOAL:
      if (value == null) {
        unsetGoal();
      } else {
        setGoal((String)value);
      }
      break;

    case OUTLINE:
      if (value == null) {
        unsetOutline();
      } else {
        setOutline((String)value);
      }
      break;

    case REG_PHONE:
      if (value == null) {
        unsetRegPhone();
      } else {
        setRegPhone((String)value);
      }
      break;

    case CONTACT:
      if (value == null) {
        unsetContact();
      } else {
        setContact((String)value);
      }
      break;

    case EXTRACURRICULAR:
      if (value == null) {
        unsetExtracurricular();
      } else {
        setExtracurricular((String)value);
      }
      break;

    case PASS_AGREEMENT:
      if (value == null) {
        unsetPassAgreement();
      } else {
        setPassAgreement((String)value);
      }
      break;

    case QUALITY_ASSURANCE:
      if (value == null) {
        unsetQualityAssurance();
      } else {
        setQualityAssurance((String)value);
      }
      break;

    case QUESTION_BANK:
      if (value == null) {
        unsetQuestionBank();
      } else {
        setQuestionBank((String)value);
      }
      break;

    case TEACHING_MATERIAL_INTRO:
      if (value == null) {
        unsetTeachingMaterialIntro();
      } else {
        setTeachingMaterialIntro((String)value);
      }
      break;

    case STUDY_DAY_NOTE:
      if (value == null) {
        unsetStudyDayNote();
      } else {
        setStudyDayNote((String)value);
      }
      break;

    case HIGH_SCORE_REWARD:
      if (value == null) {
        unsetHighScoreReward();
      } else {
        setHighScoreReward((String)value);
      }
      break;

    case PREREQUEST:
      if (value == null) {
        unsetPrerequest();
      } else {
        setPrerequest((String)value);
      }
      break;

    case SUITABLE_STUDENT:
      if (value == null) {
        unsetSuitableStudent();
      } else {
        setSuitableStudent((String)value);
      }
      break;

    case OPEN_COURSE_REQUIREMENT:
      if (value == null) {
        unsetOpenCourseRequirement();
      } else {
        setOpenCourseRequirement((String)value);
      }
      break;

    case CERTIFICATION:
      if (value == null) {
        unsetCertification();
      } else {
        setCertification((String)value);
      }
      break;

    case QUIZ:
      if (value == null) {
        unsetQuiz();
      } else {
        setQuiz((String)value);
      }
      break;

    case COURSE_INTRO:
      if (value == null) {
        unsetCourseIntro();
      } else {
        setCourseIntro((String)value);
      }
      break;

    case REFERENCE:
      if (value == null) {
        unsetReference();
      } else {
        setReference((String)value);
      }
      break;

    case REG_LOCATION:
      if (value == null) {
        unsetRegLocation();
      } else {
        setRegLocation((String)value);
      }
      break;

    case FINISH_TIME2:
      if (value == null) {
        unsetFinishTime2();
      } else {
        setFinishTime2((Integer)value);
      }
      break;

    case START_TIME2:
      if (value == null) {
        unsetStartTime2();
      } else {
        setStartTime2((Integer)value);
      }
      break;

    case FINISH_TIME1:
      if (value == null) {
        unsetFinishTime1();
      } else {
        setFinishTime1((Integer)value);
      }
      break;

    case START_TIME1:
      if (value == null) {
        unsetStartTime1();
      } else {
        setStartTime1((Integer)value);
      }
      break;

    case START_UPON_ARRIVAL:
      if (value == null) {
        unsetStartUponArrival();
      } else {
        setStartUponArrival((Integer)value);
      }
      break;

    case BOOKING_TYPE:
      if (value == null) {
        unsetBookingType();
      } else {
        setBookingType((Integer)value);
      }
      break;

    case CASHBACK_DATE:
      if (value == null) {
        unsetCashbackDate();
      } else {
        setCashbackDate((Long)value);
      }
      break;

    case NO_REFUND_DATE:
      if (value == null) {
        unsetNoRefundDate();
      } else {
        setNoRefundDate((Long)value);
      }
      break;

    case CUTOFF_DATE:
      if (value == null) {
        unsetCutoffDate();
      } else {
        setCutoffDate((Long)value);
      }
      break;

    case FINISH_DATE:
      if (value == null) {
        unsetFinishDate();
      } else {
        setFinishDate((Long)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((Long)value);
      }
      break;

    case POPULARITY:
      if (value == null) {
        unsetPopularity();
      } else {
        setPopularity((Integer)value);
      }
      break;

    case COURSE_HOUR_NUM:
      if (value == null) {
        unsetCourseHourNum();
      } else {
        setCourseHourNum((Integer)value);
      }
      break;

    case CLASS_SIZE:
      if (value == null) {
        unsetClassSize();
      } else {
        setClassSize((String)value);
      }
      break;

    case CLASS_TYPE:
      if (value == null) {
        unsetClassType();
      } else {
        setClassType((Integer)value);
      }
      break;

    case DISCOUNT:
      if (value == null) {
        unsetDiscount();
      } else {
        setDiscount((Double)value);
      }
      break;

    case SCHOOLTIME_DAY:
      if (value == null) {
        unsetSchooltimeDay();
      } else {
        setSchooltimeDay((Integer)value);
      }
      break;

    case SCHOOLTIME_WEEK:
      if (value == null) {
        unsetSchooltimeWeek();
      } else {
        setSchooltimeWeek((Integer)value);
      }
      break;

    case ID_SET:
      if (value == null) {
        unsetIdSet();
      } else {
        setIdSet((Set<Integer>)value);
      }
      break;

    case LAST_MODIFY_TIME_START:
      if (value == null) {
        unsetLastModifyTimeStart();
      } else {
        setLastModifyTimeStart((Long)value);
      }
      break;

    case LAST_MODIFY_TIME_END:
      if (value == null) {
        unsetLastModifyTimeEnd();
      } else {
        setLastModifyTimeEnd((Long)value);
      }
      break;

    case CREATE_TIME_START:
      if (value == null) {
        unsetCreateTimeStart();
      } else {
        setCreateTimeStart((Long)value);
      }
      break;

    case CREATE_TIME_END:
      if (value == null) {
        unsetCreateTimeEnd();
      } else {
        setCreateTimeEnd((Long)value);
      }
      break;

    case CATEGORY_ID_SET:
      if (value == null) {
        unsetCategoryIdSet();
      } else {
        setCategoryIdSet((Set<Integer>)value);
      }
      break;

    case LOCATION_ID_SET:
      if (value == null) {
        unsetLocationIdSet();
      } else {
        setLocationIdSet((Set<Integer>)value);
      }
      break;

    case CIRCLE_ID_SET:
      if (value == null) {
        unsetCircleIdSet();
      } else {
        setCircleIdSet((Set<Integer>)value);
      }
      break;

    case PARTNER_ID_SET:
      if (value == null) {
        unsetPartnerIdSet();
      } else {
        setPartnerIdSet((Set<Integer>)value);
      }
      break;

    case STATUS_SET:
      if (value == null) {
        unsetStatusSet();
      } else {
        setStatusSet((Set<Integer>)value);
      }
      break;

    case PRICE_START:
      if (value == null) {
        unsetPriceStart();
      } else {
        setPriceStart((Double)value);
      }
      break;

    case PRICE_END:
      if (value == null) {
        unsetPriceEnd();
      } else {
        setPriceEnd((Double)value);
      }
      break;

    case ORIGINAL_PRICE_START:
      if (value == null) {
        unsetOriginalPriceStart();
      } else {
        setOriginalPriceStart((Double)value);
      }
      break;

    case ORIGINAL_PRICE_END:
      if (value == null) {
        unsetOriginalPriceEnd();
      } else {
        setOriginalPriceEnd((Double)value);
      }
      break;

    case CASHBACK_START:
      if (value == null) {
        unsetCashbackStart();
      } else {
        setCashbackStart((Double)value);
      }
      break;

    case CASHBACK_END:
      if (value == null) {
        unsetCashbackEnd();
      } else {
        setCashbackEnd((Double)value);
      }
      break;

    case POPULARITY_START:
      if (value == null) {
        unsetPopularityStart();
      } else {
        setPopularityStart((Integer)value);
      }
      break;

    case POPULARITY_END:
      if (value == null) {
        unsetPopularityEnd();
      } else {
        setPopularityEnd((Integer)value);
      }
      break;

    case POPULARITY_SET:
      if (value == null) {
        unsetPopularitySet();
      } else {
        setPopularitySet((Set<Integer>)value);
      }
      break;

    case COURSE_HOUR_NUM_START:
      if (value == null) {
        unsetCourseHourNumStart();
      } else {
        setCourseHourNumStart((Integer)value);
      }
      break;

    case COURSE_HOUR_NUM_END:
      if (value == null) {
        unsetCourseHourNumEnd();
      } else {
        setCourseHourNumEnd((Integer)value);
      }
      break;

    case COURSE_HOUR_NUM_SET:
      if (value == null) {
        unsetCourseHourNumSet();
      } else {
        setCourseHourNumSet((Set<Integer>)value);
      }
      break;

    case START_DATE_START:
      if (value == null) {
        unsetStartDateStart();
      } else {
        setStartDateStart((Long)value);
      }
      break;

    case START_DATE_END:
      if (value == null) {
        unsetStartDateEnd();
      } else {
        setStartDateEnd((Long)value);
      }
      break;

    case FINISH_DATE_START:
      if (value == null) {
        unsetFinishDateStart();
      } else {
        setFinishDateStart((Long)value);
      }
      break;

    case FINISH_DATE_END:
      if (value == null) {
        unsetFinishDateEnd();
      } else {
        setFinishDateEnd((Long)value);
      }
      break;

    case CUTOFF_DATE_START:
      if (value == null) {
        unsetCutoffDateStart();
      } else {
        setCutoffDateStart((Long)value);
      }
      break;

    case CUTOFF_DATE_END:
      if (value == null) {
        unsetCutoffDateEnd();
      } else {
        setCutoffDateEnd((Long)value);
      }
      break;

    case CLASS_TYPE_SET:
      if (value == null) {
        unsetClassTypeSet();
      } else {
        setClassTypeSet((Set<Integer>)value);
      }
      break;

    case DISCOUNT_START:
      if (value == null) {
        unsetDiscountStart();
      } else {
        setDiscountStart((Double)value);
      }
      break;

    case DISCOUNT_END:
      if (value == null) {
        unsetDiscountEnd();
      } else {
        setDiscountEnd((Double)value);
      }
      break;

    case RATING_START:
      if (value == null) {
        unsetRatingStart();
      } else {
        setRatingStart((Double)value);
      }
      break;

    case RATING_END:
      if (value == null) {
        unsetRatingEnd();
      } else {
        setRatingEnd((Double)value);
      }
      break;

    case BOOKING_TOTAL_START:
      if (value == null) {
        unsetBookingTotalStart();
      } else {
        setBookingTotalStart((Integer)value);
      }
      break;

    case BOOKING_TOTAL_END:
      if (value == null) {
        unsetBookingTotalEnd();
      } else {
        setBookingTotalEnd((Integer)value);
      }
      break;

    case BOOKING_TOTAL_SET:
      if (value == null) {
        unsetBookingTotalSet();
      } else {
        setBookingTotalSet((Set<Integer>)value);
      }
      break;

    case SCHOOLTIME_DAY_SET:
      if (value == null) {
        unsetSchooltimeDaySet();
      } else {
        setSchooltimeDaySet((Set<Integer>)value);
      }
      break;

    case SCHOOLTIME_WEEK_SET:
      if (value == null) {
        unsetSchooltimeWeekSet();
      } else {
        setSchooltimeWeekSet((Set<Integer>)value);
      }
      break;

    case TEACHER_LIST:
      if (value == null) {
        unsetTeacherList();
      } else {
        setTeacherList((List<com.ishangke.edunav.commoncontract.model.TeacherBo>)value);
      }
      break;

    case CLASS_PHOTO_LIST:
      if (value == null) {
        unsetClassPhotoList();
      } else {
        setClassPhotoList((List<com.ishangke.edunav.commoncontract.model.ClassPhotoBo>)value);
      }
      break;

    case LOGO_URL:
      if (value == null) {
        unsetLogoUrl();
      } else {
        setLogoUrl((String)value);
      }
      break;

    case WHOLE_NAME:
      if (value == null) {
        unsetWholeName();
      } else {
        setWholeName((String)value);
      }
      break;

    case INST_NAME:
      if (value == null) {
        unsetInstName();
      } else {
        setInstName((String)value);
      }
      break;

    case PARTNER_INTRO:
      if (value == null) {
        unsetPartnerIntro();
      } else {
        setPartnerIntro((String)value);
      }
      break;

    case PARTNER_QUALIFICATION:
      if (value == null) {
        unsetPartnerQualification();
      } else {
        setPartnerQualification((Integer)value);
      }
      break;

    case PARTNER_DISTINCTION:
      if (value == null) {
        unsetPartnerDistinction();
      } else {
        setPartnerDistinction((String)value);
      }
      break;

    case PARTNER_RATING:
      if (value == null) {
        unsetPartnerRating();
      } else {
        setPartnerRating((Double)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case ADDRESS_LAT:
      if (value == null) {
        unsetAddressLat();
      } else {
        setAddressLat((Double)value);
      }
      break;

    case ADDRESS_LNG:
      if (value == null) {
        unsetAddressLng();
      } else {
        setAddressLng((Double)value);
      }
      break;

    case CATEGORY_VALUE:
      if (value == null) {
        unsetCategoryValue();
      } else {
        setCategoryValue((String)value);
      }
      break;

    case CATEGORY_NAME:
      if (value == null) {
        unsetCategoryName();
      } else {
        setCategoryName((String)value);
      }
      break;

    case CATEGORY_RANK:
      if (value == null) {
        unsetCategoryRank();
      } else {
        setCategoryRank((Integer)value);
      }
      break;

    case LOCATION_VALUE:
      if (value == null) {
        unsetLocationValue();
      } else {
        setLocationValue((String)value);
      }
      break;

    case LOCATION_NAME:
      if (value == null) {
        unsetLocationName();
      } else {
        setLocationName((String)value);
      }
      break;

    case CIRCLE_VALUE:
      if (value == null) {
        unsetCircleValue();
      } else {
        setCircleValue((String)value);
      }
      break;

    case CIRCLE_NAME:
      if (value == null) {
        unsetCircleName();
      } else {
        setCircleName((String)value);
      }
      break;

    case RATING:
      if (value == null) {
        unsetRating();
      } else {
        setRating((Double)value);
      }
      break;

    case BOOKING_TOTAL:
      if (value == null) {
        unsetBookingTotal();
      } else {
        setBookingTotal((Integer)value);
      }
      break;

    case NO_REFUND_DATE_START:
      if (value == null) {
        unsetNoRefundDateStart();
      } else {
        setNoRefundDateStart((Long)value);
      }
      break;

    case NO_REFUND_DATE_END:
      if (value == null) {
        unsetNoRefundDateEnd();
      } else {
        setNoRefundDateEnd((Long)value);
      }
      break;

    case CASHBACK_DATE_START:
      if (value == null) {
        unsetCashbackDateStart();
      } else {
        setCashbackDateStart((Long)value);
      }
      break;

    case CASHBACK_DATE_END:
      if (value == null) {
        unsetCashbackDateEnd();
      } else {
        setCashbackDateEnd((Long)value);
      }
      break;

    case COURSE_TEMPLATE_ID_SET:
      if (value == null) {
        unsetCourseTemplateIdSet();
      } else {
        setCourseTemplateIdSet((Set<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case COURSE_NAME:
      return getCourseName();

    case COURSE_TEMPLATE_ID:
      return Integer.valueOf(getCourseTemplateId());

    case CATEGORY_ID:
      return Integer.valueOf(getCategoryId());

    case LOCATION_ID:
      return Integer.valueOf(getLocationId());

    case CIRCLE_ID:
      return Integer.valueOf(getCircleId());

    case PARTNER_ID:
      return Integer.valueOf(getPartnerId());

    case ADDRESS_ID:
      return Integer.valueOf(getAddressId());

    case PRICE:
      return Double.valueOf(getPrice());

    case ORIGINAL_PRICE:
      return Double.valueOf(getOriginalPrice());

    case CASHBACK:
      return Double.valueOf(getCashback());

    case COMMISSION:
      return Double.valueOf(getCommission());

    case SERVICE_CHARGE:
      return Double.valueOf(getServiceCharge());

    case STATUS:
      return Integer.valueOf(getStatus());

    case LAST_MODIFY_TIME:
      return Long.valueOf(getLastModifyTime());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case ENABLED:
      return Integer.valueOf(getEnabled());

    case COURSE_HOUR_LENGTH:
      return Integer.valueOf(getCourseHourLength());

    case TEACHING_METHOD:
      return getTeachingMethod();

    case TEACHING_MATERIAL_FEE:
      return getTeachingMaterialFee();

    case DOWNLOAD_MATERIALS:
      return getDownloadMaterials();

    case BONUS_SERVICE:
      return getBonusService();

    case MARKING:
      return getMarking();

    case ASSIGNMENTS:
      return getAssignments();

    case TRAIL:
      return getTrail();

    case QUESTION_SESSION:
      return getQuestionSession();

    case TEACHING_AND_EXERCISE:
      return getTeachingAndExercise();

    case CLASS_TEACHER:
      return getClassTeacher();

    case GOAL:
      return getGoal();

    case OUTLINE:
      return getOutline();

    case REG_PHONE:
      return getRegPhone();

    case CONTACT:
      return getContact();

    case EXTRACURRICULAR:
      return getExtracurricular();

    case PASS_AGREEMENT:
      return getPassAgreement();

    case QUALITY_ASSURANCE:
      return getQualityAssurance();

    case QUESTION_BANK:
      return getQuestionBank();

    case TEACHING_MATERIAL_INTRO:
      return getTeachingMaterialIntro();

    case STUDY_DAY_NOTE:
      return getStudyDayNote();

    case HIGH_SCORE_REWARD:
      return getHighScoreReward();

    case PREREQUEST:
      return getPrerequest();

    case SUITABLE_STUDENT:
      return getSuitableStudent();

    case OPEN_COURSE_REQUIREMENT:
      return getOpenCourseRequirement();

    case CERTIFICATION:
      return getCertification();

    case QUIZ:
      return getQuiz();

    case COURSE_INTRO:
      return getCourseIntro();

    case REFERENCE:
      return getReference();

    case REG_LOCATION:
      return getRegLocation();

    case FINISH_TIME2:
      return Integer.valueOf(getFinishTime2());

    case START_TIME2:
      return Integer.valueOf(getStartTime2());

    case FINISH_TIME1:
      return Integer.valueOf(getFinishTime1());

    case START_TIME1:
      return Integer.valueOf(getStartTime1());

    case START_UPON_ARRIVAL:
      return Integer.valueOf(getStartUponArrival());

    case BOOKING_TYPE:
      return Integer.valueOf(getBookingType());

    case CASHBACK_DATE:
      return Long.valueOf(getCashbackDate());

    case NO_REFUND_DATE:
      return Long.valueOf(getNoRefundDate());

    case CUTOFF_DATE:
      return Long.valueOf(getCutoffDate());

    case FINISH_DATE:
      return Long.valueOf(getFinishDate());

    case START_DATE:
      return Long.valueOf(getStartDate());

    case POPULARITY:
      return Integer.valueOf(getPopularity());

    case COURSE_HOUR_NUM:
      return Integer.valueOf(getCourseHourNum());

    case CLASS_SIZE:
      return getClassSize();

    case CLASS_TYPE:
      return Integer.valueOf(getClassType());

    case DISCOUNT:
      return Double.valueOf(getDiscount());

    case SCHOOLTIME_DAY:
      return Integer.valueOf(getSchooltimeDay());

    case SCHOOLTIME_WEEK:
      return Integer.valueOf(getSchooltimeWeek());

    case ID_SET:
      return getIdSet();

    case LAST_MODIFY_TIME_START:
      return Long.valueOf(getLastModifyTimeStart());

    case LAST_MODIFY_TIME_END:
      return Long.valueOf(getLastModifyTimeEnd());

    case CREATE_TIME_START:
      return Long.valueOf(getCreateTimeStart());

    case CREATE_TIME_END:
      return Long.valueOf(getCreateTimeEnd());

    case CATEGORY_ID_SET:
      return getCategoryIdSet();

    case LOCATION_ID_SET:
      return getLocationIdSet();

    case CIRCLE_ID_SET:
      return getCircleIdSet();

    case PARTNER_ID_SET:
      return getPartnerIdSet();

    case STATUS_SET:
      return getStatusSet();

    case PRICE_START:
      return Double.valueOf(getPriceStart());

    case PRICE_END:
      return Double.valueOf(getPriceEnd());

    case ORIGINAL_PRICE_START:
      return Double.valueOf(getOriginalPriceStart());

    case ORIGINAL_PRICE_END:
      return Double.valueOf(getOriginalPriceEnd());

    case CASHBACK_START:
      return Double.valueOf(getCashbackStart());

    case CASHBACK_END:
      return Double.valueOf(getCashbackEnd());

    case POPULARITY_START:
      return Integer.valueOf(getPopularityStart());

    case POPULARITY_END:
      return Integer.valueOf(getPopularityEnd());

    case POPULARITY_SET:
      return getPopularitySet();

    case COURSE_HOUR_NUM_START:
      return Integer.valueOf(getCourseHourNumStart());

    case COURSE_HOUR_NUM_END:
      return Integer.valueOf(getCourseHourNumEnd());

    case COURSE_HOUR_NUM_SET:
      return getCourseHourNumSet();

    case START_DATE_START:
      return Long.valueOf(getStartDateStart());

    case START_DATE_END:
      return Long.valueOf(getStartDateEnd());

    case FINISH_DATE_START:
      return Long.valueOf(getFinishDateStart());

    case FINISH_DATE_END:
      return Long.valueOf(getFinishDateEnd());

    case CUTOFF_DATE_START:
      return Long.valueOf(getCutoffDateStart());

    case CUTOFF_DATE_END:
      return Long.valueOf(getCutoffDateEnd());

    case CLASS_TYPE_SET:
      return getClassTypeSet();

    case DISCOUNT_START:
      return Double.valueOf(getDiscountStart());

    case DISCOUNT_END:
      return Double.valueOf(getDiscountEnd());

    case RATING_START:
      return Double.valueOf(getRatingStart());

    case RATING_END:
      return Double.valueOf(getRatingEnd());

    case BOOKING_TOTAL_START:
      return Integer.valueOf(getBookingTotalStart());

    case BOOKING_TOTAL_END:
      return Integer.valueOf(getBookingTotalEnd());

    case BOOKING_TOTAL_SET:
      return getBookingTotalSet();

    case SCHOOLTIME_DAY_SET:
      return getSchooltimeDaySet();

    case SCHOOLTIME_WEEK_SET:
      return getSchooltimeWeekSet();

    case TEACHER_LIST:
      return getTeacherList();

    case CLASS_PHOTO_LIST:
      return getClassPhotoList();

    case LOGO_URL:
      return getLogoUrl();

    case WHOLE_NAME:
      return getWholeName();

    case INST_NAME:
      return getInstName();

    case PARTNER_INTRO:
      return getPartnerIntro();

    case PARTNER_QUALIFICATION:
      return Integer.valueOf(getPartnerQualification());

    case PARTNER_DISTINCTION:
      return getPartnerDistinction();

    case PARTNER_RATING:
      return Double.valueOf(getPartnerRating());

    case ADDRESS:
      return getAddress();

    case ADDRESS_LAT:
      return Double.valueOf(getAddressLat());

    case ADDRESS_LNG:
      return Double.valueOf(getAddressLng());

    case CATEGORY_VALUE:
      return getCategoryValue();

    case CATEGORY_NAME:
      return getCategoryName();

    case CATEGORY_RANK:
      return Integer.valueOf(getCategoryRank());

    case LOCATION_VALUE:
      return getLocationValue();

    case LOCATION_NAME:
      return getLocationName();

    case CIRCLE_VALUE:
      return getCircleValue();

    case CIRCLE_NAME:
      return getCircleName();

    case RATING:
      return Double.valueOf(getRating());

    case BOOKING_TOTAL:
      return Integer.valueOf(getBookingTotal());

    case NO_REFUND_DATE_START:
      return Long.valueOf(getNoRefundDateStart());

    case NO_REFUND_DATE_END:
      return Long.valueOf(getNoRefundDateEnd());

    case CASHBACK_DATE_START:
      return Long.valueOf(getCashbackDateStart());

    case CASHBACK_DATE_END:
      return Long.valueOf(getCashbackDateEnd());

    case COURSE_TEMPLATE_ID_SET:
      return getCourseTemplateIdSet();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case COURSE_NAME:
      return isSetCourseName();
    case COURSE_TEMPLATE_ID:
      return isSetCourseTemplateId();
    case CATEGORY_ID:
      return isSetCategoryId();
    case LOCATION_ID:
      return isSetLocationId();
    case CIRCLE_ID:
      return isSetCircleId();
    case PARTNER_ID:
      return isSetPartnerId();
    case ADDRESS_ID:
      return isSetAddressId();
    case PRICE:
      return isSetPrice();
    case ORIGINAL_PRICE:
      return isSetOriginalPrice();
    case CASHBACK:
      return isSetCashback();
    case COMMISSION:
      return isSetCommission();
    case SERVICE_CHARGE:
      return isSetServiceCharge();
    case STATUS:
      return isSetStatus();
    case LAST_MODIFY_TIME:
      return isSetLastModifyTime();
    case CREATE_TIME:
      return isSetCreateTime();
    case ENABLED:
      return isSetEnabled();
    case COURSE_HOUR_LENGTH:
      return isSetCourseHourLength();
    case TEACHING_METHOD:
      return isSetTeachingMethod();
    case TEACHING_MATERIAL_FEE:
      return isSetTeachingMaterialFee();
    case DOWNLOAD_MATERIALS:
      return isSetDownloadMaterials();
    case BONUS_SERVICE:
      return isSetBonusService();
    case MARKING:
      return isSetMarking();
    case ASSIGNMENTS:
      return isSetAssignments();
    case TRAIL:
      return isSetTrail();
    case QUESTION_SESSION:
      return isSetQuestionSession();
    case TEACHING_AND_EXERCISE:
      return isSetTeachingAndExercise();
    case CLASS_TEACHER:
      return isSetClassTeacher();
    case GOAL:
      return isSetGoal();
    case OUTLINE:
      return isSetOutline();
    case REG_PHONE:
      return isSetRegPhone();
    case CONTACT:
      return isSetContact();
    case EXTRACURRICULAR:
      return isSetExtracurricular();
    case PASS_AGREEMENT:
      return isSetPassAgreement();
    case QUALITY_ASSURANCE:
      return isSetQualityAssurance();
    case QUESTION_BANK:
      return isSetQuestionBank();
    case TEACHING_MATERIAL_INTRO:
      return isSetTeachingMaterialIntro();
    case STUDY_DAY_NOTE:
      return isSetStudyDayNote();
    case HIGH_SCORE_REWARD:
      return isSetHighScoreReward();
    case PREREQUEST:
      return isSetPrerequest();
    case SUITABLE_STUDENT:
      return isSetSuitableStudent();
    case OPEN_COURSE_REQUIREMENT:
      return isSetOpenCourseRequirement();
    case CERTIFICATION:
      return isSetCertification();
    case QUIZ:
      return isSetQuiz();
    case COURSE_INTRO:
      return isSetCourseIntro();
    case REFERENCE:
      return isSetReference();
    case REG_LOCATION:
      return isSetRegLocation();
    case FINISH_TIME2:
      return isSetFinishTime2();
    case START_TIME2:
      return isSetStartTime2();
    case FINISH_TIME1:
      return isSetFinishTime1();
    case START_TIME1:
      return isSetStartTime1();
    case START_UPON_ARRIVAL:
      return isSetStartUponArrival();
    case BOOKING_TYPE:
      return isSetBookingType();
    case CASHBACK_DATE:
      return isSetCashbackDate();
    case NO_REFUND_DATE:
      return isSetNoRefundDate();
    case CUTOFF_DATE:
      return isSetCutoffDate();
    case FINISH_DATE:
      return isSetFinishDate();
    case START_DATE:
      return isSetStartDate();
    case POPULARITY:
      return isSetPopularity();
    case COURSE_HOUR_NUM:
      return isSetCourseHourNum();
    case CLASS_SIZE:
      return isSetClassSize();
    case CLASS_TYPE:
      return isSetClassType();
    case DISCOUNT:
      return isSetDiscount();
    case SCHOOLTIME_DAY:
      return isSetSchooltimeDay();
    case SCHOOLTIME_WEEK:
      return isSetSchooltimeWeek();
    case ID_SET:
      return isSetIdSet();
    case LAST_MODIFY_TIME_START:
      return isSetLastModifyTimeStart();
    case LAST_MODIFY_TIME_END:
      return isSetLastModifyTimeEnd();
    case CREATE_TIME_START:
      return isSetCreateTimeStart();
    case CREATE_TIME_END:
      return isSetCreateTimeEnd();
    case CATEGORY_ID_SET:
      return isSetCategoryIdSet();
    case LOCATION_ID_SET:
      return isSetLocationIdSet();
    case CIRCLE_ID_SET:
      return isSetCircleIdSet();
    case PARTNER_ID_SET:
      return isSetPartnerIdSet();
    case STATUS_SET:
      return isSetStatusSet();
    case PRICE_START:
      return isSetPriceStart();
    case PRICE_END:
      return isSetPriceEnd();
    case ORIGINAL_PRICE_START:
      return isSetOriginalPriceStart();
    case ORIGINAL_PRICE_END:
      return isSetOriginalPriceEnd();
    case CASHBACK_START:
      return isSetCashbackStart();
    case CASHBACK_END:
      return isSetCashbackEnd();
    case POPULARITY_START:
      return isSetPopularityStart();
    case POPULARITY_END:
      return isSetPopularityEnd();
    case POPULARITY_SET:
      return isSetPopularitySet();
    case COURSE_HOUR_NUM_START:
      return isSetCourseHourNumStart();
    case COURSE_HOUR_NUM_END:
      return isSetCourseHourNumEnd();
    case COURSE_HOUR_NUM_SET:
      return isSetCourseHourNumSet();
    case START_DATE_START:
      return isSetStartDateStart();
    case START_DATE_END:
      return isSetStartDateEnd();
    case FINISH_DATE_START:
      return isSetFinishDateStart();
    case FINISH_DATE_END:
      return isSetFinishDateEnd();
    case CUTOFF_DATE_START:
      return isSetCutoffDateStart();
    case CUTOFF_DATE_END:
      return isSetCutoffDateEnd();
    case CLASS_TYPE_SET:
      return isSetClassTypeSet();
    case DISCOUNT_START:
      return isSetDiscountStart();
    case DISCOUNT_END:
      return isSetDiscountEnd();
    case RATING_START:
      return isSetRatingStart();
    case RATING_END:
      return isSetRatingEnd();
    case BOOKING_TOTAL_START:
      return isSetBookingTotalStart();
    case BOOKING_TOTAL_END:
      return isSetBookingTotalEnd();
    case BOOKING_TOTAL_SET:
      return isSetBookingTotalSet();
    case SCHOOLTIME_DAY_SET:
      return isSetSchooltimeDaySet();
    case SCHOOLTIME_WEEK_SET:
      return isSetSchooltimeWeekSet();
    case TEACHER_LIST:
      return isSetTeacherList();
    case CLASS_PHOTO_LIST:
      return isSetClassPhotoList();
    case LOGO_URL:
      return isSetLogoUrl();
    case WHOLE_NAME:
      return isSetWholeName();
    case INST_NAME:
      return isSetInstName();
    case PARTNER_INTRO:
      return isSetPartnerIntro();
    case PARTNER_QUALIFICATION:
      return isSetPartnerQualification();
    case PARTNER_DISTINCTION:
      return isSetPartnerDistinction();
    case PARTNER_RATING:
      return isSetPartnerRating();
    case ADDRESS:
      return isSetAddress();
    case ADDRESS_LAT:
      return isSetAddressLat();
    case ADDRESS_LNG:
      return isSetAddressLng();
    case CATEGORY_VALUE:
      return isSetCategoryValue();
    case CATEGORY_NAME:
      return isSetCategoryName();
    case CATEGORY_RANK:
      return isSetCategoryRank();
    case LOCATION_VALUE:
      return isSetLocationValue();
    case LOCATION_NAME:
      return isSetLocationName();
    case CIRCLE_VALUE:
      return isSetCircleValue();
    case CIRCLE_NAME:
      return isSetCircleName();
    case RATING:
      return isSetRating();
    case BOOKING_TOTAL:
      return isSetBookingTotal();
    case NO_REFUND_DATE_START:
      return isSetNoRefundDateStart();
    case NO_REFUND_DATE_END:
      return isSetNoRefundDateEnd();
    case CASHBACK_DATE_START:
      return isSetCashbackDateStart();
    case CASHBACK_DATE_END:
      return isSetCashbackDateEnd();
    case COURSE_TEMPLATE_ID_SET:
      return isSetCourseTemplateIdSet();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CourseBo)
      return this.equals((CourseBo)that);
    return false;
  }

  public boolean equals(CourseBo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_courseName = true && this.isSetCourseName();
    boolean that_present_courseName = true && that.isSetCourseName();
    if (this_present_courseName || that_present_courseName) {
      if (!(this_present_courseName && that_present_courseName))
        return false;
      if (!this.courseName.equals(that.courseName))
        return false;
    }

    boolean this_present_courseTemplateId = true;
    boolean that_present_courseTemplateId = true;
    if (this_present_courseTemplateId || that_present_courseTemplateId) {
      if (!(this_present_courseTemplateId && that_present_courseTemplateId))
        return false;
      if (this.courseTemplateId != that.courseTemplateId)
        return false;
    }

    boolean this_present_categoryId = true;
    boolean that_present_categoryId = true;
    if (this_present_categoryId || that_present_categoryId) {
      if (!(this_present_categoryId && that_present_categoryId))
        return false;
      if (this.categoryId != that.categoryId)
        return false;
    }

    boolean this_present_locationId = true;
    boolean that_present_locationId = true;
    if (this_present_locationId || that_present_locationId) {
      if (!(this_present_locationId && that_present_locationId))
        return false;
      if (this.locationId != that.locationId)
        return false;
    }

    boolean this_present_circleId = true;
    boolean that_present_circleId = true;
    if (this_present_circleId || that_present_circleId) {
      if (!(this_present_circleId && that_present_circleId))
        return false;
      if (this.circleId != that.circleId)
        return false;
    }

    boolean this_present_partnerId = true;
    boolean that_present_partnerId = true;
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (this.partnerId != that.partnerId)
        return false;
    }

    boolean this_present_addressId = true;
    boolean that_present_addressId = true;
    if (this_present_addressId || that_present_addressId) {
      if (!(this_present_addressId && that_present_addressId))
        return false;
      if (this.addressId != that.addressId)
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_originalPrice = true;
    boolean that_present_originalPrice = true;
    if (this_present_originalPrice || that_present_originalPrice) {
      if (!(this_present_originalPrice && that_present_originalPrice))
        return false;
      if (this.originalPrice != that.originalPrice)
        return false;
    }

    boolean this_present_cashback = true;
    boolean that_present_cashback = true;
    if (this_present_cashback || that_present_cashback) {
      if (!(this_present_cashback && that_present_cashback))
        return false;
      if (this.cashback != that.cashback)
        return false;
    }

    boolean this_present_commission = true;
    boolean that_present_commission = true;
    if (this_present_commission || that_present_commission) {
      if (!(this_present_commission && that_present_commission))
        return false;
      if (this.commission != that.commission)
        return false;
    }

    boolean this_present_serviceCharge = true;
    boolean that_present_serviceCharge = true;
    if (this_present_serviceCharge || that_present_serviceCharge) {
      if (!(this_present_serviceCharge && that_present_serviceCharge))
        return false;
      if (this.serviceCharge != that.serviceCharge)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_lastModifyTime = true;
    boolean that_present_lastModifyTime = true;
    if (this_present_lastModifyTime || that_present_lastModifyTime) {
      if (!(this_present_lastModifyTime && that_present_lastModifyTime))
        return false;
      if (this.lastModifyTime != that.lastModifyTime)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_enabled = true;
    boolean that_present_enabled = true;
    if (this_present_enabled || that_present_enabled) {
      if (!(this_present_enabled && that_present_enabled))
        return false;
      if (this.enabled != that.enabled)
        return false;
    }

    boolean this_present_courseHourLength = true;
    boolean that_present_courseHourLength = true;
    if (this_present_courseHourLength || that_present_courseHourLength) {
      if (!(this_present_courseHourLength && that_present_courseHourLength))
        return false;
      if (this.courseHourLength != that.courseHourLength)
        return false;
    }

    boolean this_present_teachingMethod = true && this.isSetTeachingMethod();
    boolean that_present_teachingMethod = true && that.isSetTeachingMethod();
    if (this_present_teachingMethod || that_present_teachingMethod) {
      if (!(this_present_teachingMethod && that_present_teachingMethod))
        return false;
      if (!this.teachingMethod.equals(that.teachingMethod))
        return false;
    }

    boolean this_present_teachingMaterialFee = true && this.isSetTeachingMaterialFee();
    boolean that_present_teachingMaterialFee = true && that.isSetTeachingMaterialFee();
    if (this_present_teachingMaterialFee || that_present_teachingMaterialFee) {
      if (!(this_present_teachingMaterialFee && that_present_teachingMaterialFee))
        return false;
      if (!this.teachingMaterialFee.equals(that.teachingMaterialFee))
        return false;
    }

    boolean this_present_downloadMaterials = true && this.isSetDownloadMaterials();
    boolean that_present_downloadMaterials = true && that.isSetDownloadMaterials();
    if (this_present_downloadMaterials || that_present_downloadMaterials) {
      if (!(this_present_downloadMaterials && that_present_downloadMaterials))
        return false;
      if (!this.downloadMaterials.equals(that.downloadMaterials))
        return false;
    }

    boolean this_present_bonusService = true && this.isSetBonusService();
    boolean that_present_bonusService = true && that.isSetBonusService();
    if (this_present_bonusService || that_present_bonusService) {
      if (!(this_present_bonusService && that_present_bonusService))
        return false;
      if (!this.bonusService.equals(that.bonusService))
        return false;
    }

    boolean this_present_marking = true && this.isSetMarking();
    boolean that_present_marking = true && that.isSetMarking();
    if (this_present_marking || that_present_marking) {
      if (!(this_present_marking && that_present_marking))
        return false;
      if (!this.marking.equals(that.marking))
        return false;
    }

    boolean this_present_assignments = true && this.isSetAssignments();
    boolean that_present_assignments = true && that.isSetAssignments();
    if (this_present_assignments || that_present_assignments) {
      if (!(this_present_assignments && that_present_assignments))
        return false;
      if (!this.assignments.equals(that.assignments))
        return false;
    }

    boolean this_present_trail = true && this.isSetTrail();
    boolean that_present_trail = true && that.isSetTrail();
    if (this_present_trail || that_present_trail) {
      if (!(this_present_trail && that_present_trail))
        return false;
      if (!this.trail.equals(that.trail))
        return false;
    }

    boolean this_present_questionSession = true && this.isSetQuestionSession();
    boolean that_present_questionSession = true && that.isSetQuestionSession();
    if (this_present_questionSession || that_present_questionSession) {
      if (!(this_present_questionSession && that_present_questionSession))
        return false;
      if (!this.questionSession.equals(that.questionSession))
        return false;
    }

    boolean this_present_teachingAndExercise = true && this.isSetTeachingAndExercise();
    boolean that_present_teachingAndExercise = true && that.isSetTeachingAndExercise();
    if (this_present_teachingAndExercise || that_present_teachingAndExercise) {
      if (!(this_present_teachingAndExercise && that_present_teachingAndExercise))
        return false;
      if (!this.teachingAndExercise.equals(that.teachingAndExercise))
        return false;
    }

    boolean this_present_classTeacher = true && this.isSetClassTeacher();
    boolean that_present_classTeacher = true && that.isSetClassTeacher();
    if (this_present_classTeacher || that_present_classTeacher) {
      if (!(this_present_classTeacher && that_present_classTeacher))
        return false;
      if (!this.classTeacher.equals(that.classTeacher))
        return false;
    }

    boolean this_present_goal = true && this.isSetGoal();
    boolean that_present_goal = true && that.isSetGoal();
    if (this_present_goal || that_present_goal) {
      if (!(this_present_goal && that_present_goal))
        return false;
      if (!this.goal.equals(that.goal))
        return false;
    }

    boolean this_present_outline = true && this.isSetOutline();
    boolean that_present_outline = true && that.isSetOutline();
    if (this_present_outline || that_present_outline) {
      if (!(this_present_outline && that_present_outline))
        return false;
      if (!this.outline.equals(that.outline))
        return false;
    }

    boolean this_present_regPhone = true && this.isSetRegPhone();
    boolean that_present_regPhone = true && that.isSetRegPhone();
    if (this_present_regPhone || that_present_regPhone) {
      if (!(this_present_regPhone && that_present_regPhone))
        return false;
      if (!this.regPhone.equals(that.regPhone))
        return false;
    }

    boolean this_present_contact = true && this.isSetContact();
    boolean that_present_contact = true && that.isSetContact();
    if (this_present_contact || that_present_contact) {
      if (!(this_present_contact && that_present_contact))
        return false;
      if (!this.contact.equals(that.contact))
        return false;
    }

    boolean this_present_extracurricular = true && this.isSetExtracurricular();
    boolean that_present_extracurricular = true && that.isSetExtracurricular();
    if (this_present_extracurricular || that_present_extracurricular) {
      if (!(this_present_extracurricular && that_present_extracurricular))
        return false;
      if (!this.extracurricular.equals(that.extracurricular))
        return false;
    }

    boolean this_present_passAgreement = true && this.isSetPassAgreement();
    boolean that_present_passAgreement = true && that.isSetPassAgreement();
    if (this_present_passAgreement || that_present_passAgreement) {
      if (!(this_present_passAgreement && that_present_passAgreement))
        return false;
      if (!this.passAgreement.equals(that.passAgreement))
        return false;
    }

    boolean this_present_qualityAssurance = true && this.isSetQualityAssurance();
    boolean that_present_qualityAssurance = true && that.isSetQualityAssurance();
    if (this_present_qualityAssurance || that_present_qualityAssurance) {
      if (!(this_present_qualityAssurance && that_present_qualityAssurance))
        return false;
      if (!this.qualityAssurance.equals(that.qualityAssurance))
        return false;
    }

    boolean this_present_questionBank = true && this.isSetQuestionBank();
    boolean that_present_questionBank = true && that.isSetQuestionBank();
    if (this_present_questionBank || that_present_questionBank) {
      if (!(this_present_questionBank && that_present_questionBank))
        return false;
      if (!this.questionBank.equals(that.questionBank))
        return false;
    }

    boolean this_present_teachingMaterialIntro = true && this.isSetTeachingMaterialIntro();
    boolean that_present_teachingMaterialIntro = true && that.isSetTeachingMaterialIntro();
    if (this_present_teachingMaterialIntro || that_present_teachingMaterialIntro) {
      if (!(this_present_teachingMaterialIntro && that_present_teachingMaterialIntro))
        return false;
      if (!this.teachingMaterialIntro.equals(that.teachingMaterialIntro))
        return false;
    }

    boolean this_present_studyDayNote = true && this.isSetStudyDayNote();
    boolean that_present_studyDayNote = true && that.isSetStudyDayNote();
    if (this_present_studyDayNote || that_present_studyDayNote) {
      if (!(this_present_studyDayNote && that_present_studyDayNote))
        return false;
      if (!this.studyDayNote.equals(that.studyDayNote))
        return false;
    }

    boolean this_present_highScoreReward = true && this.isSetHighScoreReward();
    boolean that_present_highScoreReward = true && that.isSetHighScoreReward();
    if (this_present_highScoreReward || that_present_highScoreReward) {
      if (!(this_present_highScoreReward && that_present_highScoreReward))
        return false;
      if (!this.highScoreReward.equals(that.highScoreReward))
        return false;
    }

    boolean this_present_prerequest = true && this.isSetPrerequest();
    boolean that_present_prerequest = true && that.isSetPrerequest();
    if (this_present_prerequest || that_present_prerequest) {
      if (!(this_present_prerequest && that_present_prerequest))
        return false;
      if (!this.prerequest.equals(that.prerequest))
        return false;
    }

    boolean this_present_suitableStudent = true && this.isSetSuitableStudent();
    boolean that_present_suitableStudent = true && that.isSetSuitableStudent();
    if (this_present_suitableStudent || that_present_suitableStudent) {
      if (!(this_present_suitableStudent && that_present_suitableStudent))
        return false;
      if (!this.suitableStudent.equals(that.suitableStudent))
        return false;
    }

    boolean this_present_openCourseRequirement = true && this.isSetOpenCourseRequirement();
    boolean that_present_openCourseRequirement = true && that.isSetOpenCourseRequirement();
    if (this_present_openCourseRequirement || that_present_openCourseRequirement) {
      if (!(this_present_openCourseRequirement && that_present_openCourseRequirement))
        return false;
      if (!this.openCourseRequirement.equals(that.openCourseRequirement))
        return false;
    }

    boolean this_present_certification = true && this.isSetCertification();
    boolean that_present_certification = true && that.isSetCertification();
    if (this_present_certification || that_present_certification) {
      if (!(this_present_certification && that_present_certification))
        return false;
      if (!this.certification.equals(that.certification))
        return false;
    }

    boolean this_present_quiz = true && this.isSetQuiz();
    boolean that_present_quiz = true && that.isSetQuiz();
    if (this_present_quiz || that_present_quiz) {
      if (!(this_present_quiz && that_present_quiz))
        return false;
      if (!this.quiz.equals(that.quiz))
        return false;
    }

    boolean this_present_courseIntro = true && this.isSetCourseIntro();
    boolean that_present_courseIntro = true && that.isSetCourseIntro();
    if (this_present_courseIntro || that_present_courseIntro) {
      if (!(this_present_courseIntro && that_present_courseIntro))
        return false;
      if (!this.courseIntro.equals(that.courseIntro))
        return false;
    }

    boolean this_present_reference = true && this.isSetReference();
    boolean that_present_reference = true && that.isSetReference();
    if (this_present_reference || that_present_reference) {
      if (!(this_present_reference && that_present_reference))
        return false;
      if (!this.reference.equals(that.reference))
        return false;
    }

    boolean this_present_regLocation = true && this.isSetRegLocation();
    boolean that_present_regLocation = true && that.isSetRegLocation();
    if (this_present_regLocation || that_present_regLocation) {
      if (!(this_present_regLocation && that_present_regLocation))
        return false;
      if (!this.regLocation.equals(that.regLocation))
        return false;
    }

    boolean this_present_finishTime2 = true;
    boolean that_present_finishTime2 = true;
    if (this_present_finishTime2 || that_present_finishTime2) {
      if (!(this_present_finishTime2 && that_present_finishTime2))
        return false;
      if (this.finishTime2 != that.finishTime2)
        return false;
    }

    boolean this_present_startTime2 = true;
    boolean that_present_startTime2 = true;
    if (this_present_startTime2 || that_present_startTime2) {
      if (!(this_present_startTime2 && that_present_startTime2))
        return false;
      if (this.startTime2 != that.startTime2)
        return false;
    }

    boolean this_present_finishTime1 = true;
    boolean that_present_finishTime1 = true;
    if (this_present_finishTime1 || that_present_finishTime1) {
      if (!(this_present_finishTime1 && that_present_finishTime1))
        return false;
      if (this.finishTime1 != that.finishTime1)
        return false;
    }

    boolean this_present_startTime1 = true;
    boolean that_present_startTime1 = true;
    if (this_present_startTime1 || that_present_startTime1) {
      if (!(this_present_startTime1 && that_present_startTime1))
        return false;
      if (this.startTime1 != that.startTime1)
        return false;
    }

    boolean this_present_startUponArrival = true;
    boolean that_present_startUponArrival = true;
    if (this_present_startUponArrival || that_present_startUponArrival) {
      if (!(this_present_startUponArrival && that_present_startUponArrival))
        return false;
      if (this.startUponArrival != that.startUponArrival)
        return false;
    }

    boolean this_present_bookingType = true;
    boolean that_present_bookingType = true;
    if (this_present_bookingType || that_present_bookingType) {
      if (!(this_present_bookingType && that_present_bookingType))
        return false;
      if (this.bookingType != that.bookingType)
        return false;
    }

    boolean this_present_cashbackDate = true;
    boolean that_present_cashbackDate = true;
    if (this_present_cashbackDate || that_present_cashbackDate) {
      if (!(this_present_cashbackDate && that_present_cashbackDate))
        return false;
      if (this.cashbackDate != that.cashbackDate)
        return false;
    }

    boolean this_present_noRefundDate = true;
    boolean that_present_noRefundDate = true;
    if (this_present_noRefundDate || that_present_noRefundDate) {
      if (!(this_present_noRefundDate && that_present_noRefundDate))
        return false;
      if (this.noRefundDate != that.noRefundDate)
        return false;
    }

    boolean this_present_cutoffDate = true;
    boolean that_present_cutoffDate = true;
    if (this_present_cutoffDate || that_present_cutoffDate) {
      if (!(this_present_cutoffDate && that_present_cutoffDate))
        return false;
      if (this.cutoffDate != that.cutoffDate)
        return false;
    }

    boolean this_present_finishDate = true;
    boolean that_present_finishDate = true;
    if (this_present_finishDate || that_present_finishDate) {
      if (!(this_present_finishDate && that_present_finishDate))
        return false;
      if (this.finishDate != that.finishDate)
        return false;
    }

    boolean this_present_startDate = true;
    boolean that_present_startDate = true;
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (this.startDate != that.startDate)
        return false;
    }

    boolean this_present_popularity = true;
    boolean that_present_popularity = true;
    if (this_present_popularity || that_present_popularity) {
      if (!(this_present_popularity && that_present_popularity))
        return false;
      if (this.popularity != that.popularity)
        return false;
    }

    boolean this_present_courseHourNum = true;
    boolean that_present_courseHourNum = true;
    if (this_present_courseHourNum || that_present_courseHourNum) {
      if (!(this_present_courseHourNum && that_present_courseHourNum))
        return false;
      if (this.courseHourNum != that.courseHourNum)
        return false;
    }

    boolean this_present_classSize = true && this.isSetClassSize();
    boolean that_present_classSize = true && that.isSetClassSize();
    if (this_present_classSize || that_present_classSize) {
      if (!(this_present_classSize && that_present_classSize))
        return false;
      if (!this.classSize.equals(that.classSize))
        return false;
    }

    boolean this_present_classType = true;
    boolean that_present_classType = true;
    if (this_present_classType || that_present_classType) {
      if (!(this_present_classType && that_present_classType))
        return false;
      if (this.classType != that.classType)
        return false;
    }

    boolean this_present_discount = true;
    boolean that_present_discount = true;
    if (this_present_discount || that_present_discount) {
      if (!(this_present_discount && that_present_discount))
        return false;
      if (this.discount != that.discount)
        return false;
    }

    boolean this_present_schooltimeDay = true;
    boolean that_present_schooltimeDay = true;
    if (this_present_schooltimeDay || that_present_schooltimeDay) {
      if (!(this_present_schooltimeDay && that_present_schooltimeDay))
        return false;
      if (this.schooltimeDay != that.schooltimeDay)
        return false;
    }

    boolean this_present_schooltimeWeek = true;
    boolean that_present_schooltimeWeek = true;
    if (this_present_schooltimeWeek || that_present_schooltimeWeek) {
      if (!(this_present_schooltimeWeek && that_present_schooltimeWeek))
        return false;
      if (this.schooltimeWeek != that.schooltimeWeek)
        return false;
    }

    boolean this_present_idSet = true && this.isSetIdSet();
    boolean that_present_idSet = true && that.isSetIdSet();
    if (this_present_idSet || that_present_idSet) {
      if (!(this_present_idSet && that_present_idSet))
        return false;
      if (!this.idSet.equals(that.idSet))
        return false;
    }

    boolean this_present_lastModifyTimeStart = true;
    boolean that_present_lastModifyTimeStart = true;
    if (this_present_lastModifyTimeStart || that_present_lastModifyTimeStart) {
      if (!(this_present_lastModifyTimeStart && that_present_lastModifyTimeStart))
        return false;
      if (this.lastModifyTimeStart != that.lastModifyTimeStart)
        return false;
    }

    boolean this_present_lastModifyTimeEnd = true;
    boolean that_present_lastModifyTimeEnd = true;
    if (this_present_lastModifyTimeEnd || that_present_lastModifyTimeEnd) {
      if (!(this_present_lastModifyTimeEnd && that_present_lastModifyTimeEnd))
        return false;
      if (this.lastModifyTimeEnd != that.lastModifyTimeEnd)
        return false;
    }

    boolean this_present_createTimeStart = true;
    boolean that_present_createTimeStart = true;
    if (this_present_createTimeStart || that_present_createTimeStart) {
      if (!(this_present_createTimeStart && that_present_createTimeStart))
        return false;
      if (this.createTimeStart != that.createTimeStart)
        return false;
    }

    boolean this_present_createTimeEnd = true;
    boolean that_present_createTimeEnd = true;
    if (this_present_createTimeEnd || that_present_createTimeEnd) {
      if (!(this_present_createTimeEnd && that_present_createTimeEnd))
        return false;
      if (this.createTimeEnd != that.createTimeEnd)
        return false;
    }

    boolean this_present_categoryIdSet = true && this.isSetCategoryIdSet();
    boolean that_present_categoryIdSet = true && that.isSetCategoryIdSet();
    if (this_present_categoryIdSet || that_present_categoryIdSet) {
      if (!(this_present_categoryIdSet && that_present_categoryIdSet))
        return false;
      if (!this.categoryIdSet.equals(that.categoryIdSet))
        return false;
    }

    boolean this_present_locationIdSet = true && this.isSetLocationIdSet();
    boolean that_present_locationIdSet = true && that.isSetLocationIdSet();
    if (this_present_locationIdSet || that_present_locationIdSet) {
      if (!(this_present_locationIdSet && that_present_locationIdSet))
        return false;
      if (!this.locationIdSet.equals(that.locationIdSet))
        return false;
    }

    boolean this_present_circleIdSet = true && this.isSetCircleIdSet();
    boolean that_present_circleIdSet = true && that.isSetCircleIdSet();
    if (this_present_circleIdSet || that_present_circleIdSet) {
      if (!(this_present_circleIdSet && that_present_circleIdSet))
        return false;
      if (!this.circleIdSet.equals(that.circleIdSet))
        return false;
    }

    boolean this_present_partnerIdSet = true && this.isSetPartnerIdSet();
    boolean that_present_partnerIdSet = true && that.isSetPartnerIdSet();
    if (this_present_partnerIdSet || that_present_partnerIdSet) {
      if (!(this_present_partnerIdSet && that_present_partnerIdSet))
        return false;
      if (!this.partnerIdSet.equals(that.partnerIdSet))
        return false;
    }

    boolean this_present_statusSet = true && this.isSetStatusSet();
    boolean that_present_statusSet = true && that.isSetStatusSet();
    if (this_present_statusSet || that_present_statusSet) {
      if (!(this_present_statusSet && that_present_statusSet))
        return false;
      if (!this.statusSet.equals(that.statusSet))
        return false;
    }

    boolean this_present_priceStart = true;
    boolean that_present_priceStart = true;
    if (this_present_priceStart || that_present_priceStart) {
      if (!(this_present_priceStart && that_present_priceStart))
        return false;
      if (this.priceStart != that.priceStart)
        return false;
    }

    boolean this_present_priceEnd = true;
    boolean that_present_priceEnd = true;
    if (this_present_priceEnd || that_present_priceEnd) {
      if (!(this_present_priceEnd && that_present_priceEnd))
        return false;
      if (this.priceEnd != that.priceEnd)
        return false;
    }

    boolean this_present_originalPriceStart = true;
    boolean that_present_originalPriceStart = true;
    if (this_present_originalPriceStart || that_present_originalPriceStart) {
      if (!(this_present_originalPriceStart && that_present_originalPriceStart))
        return false;
      if (this.originalPriceStart != that.originalPriceStart)
        return false;
    }

    boolean this_present_originalPriceEnd = true;
    boolean that_present_originalPriceEnd = true;
    if (this_present_originalPriceEnd || that_present_originalPriceEnd) {
      if (!(this_present_originalPriceEnd && that_present_originalPriceEnd))
        return false;
      if (this.originalPriceEnd != that.originalPriceEnd)
        return false;
    }

    boolean this_present_cashbackStart = true;
    boolean that_present_cashbackStart = true;
    if (this_present_cashbackStart || that_present_cashbackStart) {
      if (!(this_present_cashbackStart && that_present_cashbackStart))
        return false;
      if (this.cashbackStart != that.cashbackStart)
        return false;
    }

    boolean this_present_cashbackEnd = true;
    boolean that_present_cashbackEnd = true;
    if (this_present_cashbackEnd || that_present_cashbackEnd) {
      if (!(this_present_cashbackEnd && that_present_cashbackEnd))
        return false;
      if (this.cashbackEnd != that.cashbackEnd)
        return false;
    }

    boolean this_present_popularityStart = true;
    boolean that_present_popularityStart = true;
    if (this_present_popularityStart || that_present_popularityStart) {
      if (!(this_present_popularityStart && that_present_popularityStart))
        return false;
      if (this.popularityStart != that.popularityStart)
        return false;
    }

    boolean this_present_popularityEnd = true;
    boolean that_present_popularityEnd = true;
    if (this_present_popularityEnd || that_present_popularityEnd) {
      if (!(this_present_popularityEnd && that_present_popularityEnd))
        return false;
      if (this.popularityEnd != that.popularityEnd)
        return false;
    }

    boolean this_present_popularitySet = true && this.isSetPopularitySet();
    boolean that_present_popularitySet = true && that.isSetPopularitySet();
    if (this_present_popularitySet || that_present_popularitySet) {
      if (!(this_present_popularitySet && that_present_popularitySet))
        return false;
      if (!this.popularitySet.equals(that.popularitySet))
        return false;
    }

    boolean this_present_courseHourNumStart = true;
    boolean that_present_courseHourNumStart = true;
    if (this_present_courseHourNumStart || that_present_courseHourNumStart) {
      if (!(this_present_courseHourNumStart && that_present_courseHourNumStart))
        return false;
      if (this.courseHourNumStart != that.courseHourNumStart)
        return false;
    }

    boolean this_present_courseHourNumEnd = true;
    boolean that_present_courseHourNumEnd = true;
    if (this_present_courseHourNumEnd || that_present_courseHourNumEnd) {
      if (!(this_present_courseHourNumEnd && that_present_courseHourNumEnd))
        return false;
      if (this.courseHourNumEnd != that.courseHourNumEnd)
        return false;
    }

    boolean this_present_courseHourNumSet = true && this.isSetCourseHourNumSet();
    boolean that_present_courseHourNumSet = true && that.isSetCourseHourNumSet();
    if (this_present_courseHourNumSet || that_present_courseHourNumSet) {
      if (!(this_present_courseHourNumSet && that_present_courseHourNumSet))
        return false;
      if (!this.courseHourNumSet.equals(that.courseHourNumSet))
        return false;
    }

    boolean this_present_startDateStart = true;
    boolean that_present_startDateStart = true;
    if (this_present_startDateStart || that_present_startDateStart) {
      if (!(this_present_startDateStart && that_present_startDateStart))
        return false;
      if (this.startDateStart != that.startDateStart)
        return false;
    }

    boolean this_present_startDateEnd = true;
    boolean that_present_startDateEnd = true;
    if (this_present_startDateEnd || that_present_startDateEnd) {
      if (!(this_present_startDateEnd && that_present_startDateEnd))
        return false;
      if (this.startDateEnd != that.startDateEnd)
        return false;
    }

    boolean this_present_finishDateStart = true;
    boolean that_present_finishDateStart = true;
    if (this_present_finishDateStart || that_present_finishDateStart) {
      if (!(this_present_finishDateStart && that_present_finishDateStart))
        return false;
      if (this.finishDateStart != that.finishDateStart)
        return false;
    }

    boolean this_present_finishDateEnd = true;
    boolean that_present_finishDateEnd = true;
    if (this_present_finishDateEnd || that_present_finishDateEnd) {
      if (!(this_present_finishDateEnd && that_present_finishDateEnd))
        return false;
      if (this.finishDateEnd != that.finishDateEnd)
        return false;
    }

    boolean this_present_cutoffDateStart = true;
    boolean that_present_cutoffDateStart = true;
    if (this_present_cutoffDateStart || that_present_cutoffDateStart) {
      if (!(this_present_cutoffDateStart && that_present_cutoffDateStart))
        return false;
      if (this.cutoffDateStart != that.cutoffDateStart)
        return false;
    }

    boolean this_present_cutoffDateEnd = true;
    boolean that_present_cutoffDateEnd = true;
    if (this_present_cutoffDateEnd || that_present_cutoffDateEnd) {
      if (!(this_present_cutoffDateEnd && that_present_cutoffDateEnd))
        return false;
      if (this.cutoffDateEnd != that.cutoffDateEnd)
        return false;
    }

    boolean this_present_classTypeSet = true && this.isSetClassTypeSet();
    boolean that_present_classTypeSet = true && that.isSetClassTypeSet();
    if (this_present_classTypeSet || that_present_classTypeSet) {
      if (!(this_present_classTypeSet && that_present_classTypeSet))
        return false;
      if (!this.classTypeSet.equals(that.classTypeSet))
        return false;
    }

    boolean this_present_discountStart = true;
    boolean that_present_discountStart = true;
    if (this_present_discountStart || that_present_discountStart) {
      if (!(this_present_discountStart && that_present_discountStart))
        return false;
      if (this.discountStart != that.discountStart)
        return false;
    }

    boolean this_present_discountEnd = true;
    boolean that_present_discountEnd = true;
    if (this_present_discountEnd || that_present_discountEnd) {
      if (!(this_present_discountEnd && that_present_discountEnd))
        return false;
      if (this.discountEnd != that.discountEnd)
        return false;
    }

    boolean this_present_ratingStart = true;
    boolean that_present_ratingStart = true;
    if (this_present_ratingStart || that_present_ratingStart) {
      if (!(this_present_ratingStart && that_present_ratingStart))
        return false;
      if (this.ratingStart != that.ratingStart)
        return false;
    }

    boolean this_present_ratingEnd = true;
    boolean that_present_ratingEnd = true;
    if (this_present_ratingEnd || that_present_ratingEnd) {
      if (!(this_present_ratingEnd && that_present_ratingEnd))
        return false;
      if (this.ratingEnd != that.ratingEnd)
        return false;
    }

    boolean this_present_bookingTotalStart = true;
    boolean that_present_bookingTotalStart = true;
    if (this_present_bookingTotalStart || that_present_bookingTotalStart) {
      if (!(this_present_bookingTotalStart && that_present_bookingTotalStart))
        return false;
      if (this.bookingTotalStart != that.bookingTotalStart)
        return false;
    }

    boolean this_present_bookingTotalEnd = true;
    boolean that_present_bookingTotalEnd = true;
    if (this_present_bookingTotalEnd || that_present_bookingTotalEnd) {
      if (!(this_present_bookingTotalEnd && that_present_bookingTotalEnd))
        return false;
      if (this.bookingTotalEnd != that.bookingTotalEnd)
        return false;
    }

    boolean this_present_bookingTotalSet = true && this.isSetBookingTotalSet();
    boolean that_present_bookingTotalSet = true && that.isSetBookingTotalSet();
    if (this_present_bookingTotalSet || that_present_bookingTotalSet) {
      if (!(this_present_bookingTotalSet && that_present_bookingTotalSet))
        return false;
      if (!this.bookingTotalSet.equals(that.bookingTotalSet))
        return false;
    }

    boolean this_present_schooltimeDaySet = true && this.isSetSchooltimeDaySet();
    boolean that_present_schooltimeDaySet = true && that.isSetSchooltimeDaySet();
    if (this_present_schooltimeDaySet || that_present_schooltimeDaySet) {
      if (!(this_present_schooltimeDaySet && that_present_schooltimeDaySet))
        return false;
      if (!this.schooltimeDaySet.equals(that.schooltimeDaySet))
        return false;
    }

    boolean this_present_schooltimeWeekSet = true && this.isSetSchooltimeWeekSet();
    boolean that_present_schooltimeWeekSet = true && that.isSetSchooltimeWeekSet();
    if (this_present_schooltimeWeekSet || that_present_schooltimeWeekSet) {
      if (!(this_present_schooltimeWeekSet && that_present_schooltimeWeekSet))
        return false;
      if (!this.schooltimeWeekSet.equals(that.schooltimeWeekSet))
        return false;
    }

    boolean this_present_teacherList = true && this.isSetTeacherList();
    boolean that_present_teacherList = true && that.isSetTeacherList();
    if (this_present_teacherList || that_present_teacherList) {
      if (!(this_present_teacherList && that_present_teacherList))
        return false;
      if (!this.teacherList.equals(that.teacherList))
        return false;
    }

    boolean this_present_classPhotoList = true && this.isSetClassPhotoList();
    boolean that_present_classPhotoList = true && that.isSetClassPhotoList();
    if (this_present_classPhotoList || that_present_classPhotoList) {
      if (!(this_present_classPhotoList && that_present_classPhotoList))
        return false;
      if (!this.classPhotoList.equals(that.classPhotoList))
        return false;
    }

    boolean this_present_logoUrl = true && this.isSetLogoUrl();
    boolean that_present_logoUrl = true && that.isSetLogoUrl();
    if (this_present_logoUrl || that_present_logoUrl) {
      if (!(this_present_logoUrl && that_present_logoUrl))
        return false;
      if (!this.logoUrl.equals(that.logoUrl))
        return false;
    }

    boolean this_present_wholeName = true && this.isSetWholeName();
    boolean that_present_wholeName = true && that.isSetWholeName();
    if (this_present_wholeName || that_present_wholeName) {
      if (!(this_present_wholeName && that_present_wholeName))
        return false;
      if (!this.wholeName.equals(that.wholeName))
        return false;
    }

    boolean this_present_instName = true && this.isSetInstName();
    boolean that_present_instName = true && that.isSetInstName();
    if (this_present_instName || that_present_instName) {
      if (!(this_present_instName && that_present_instName))
        return false;
      if (!this.instName.equals(that.instName))
        return false;
    }

    boolean this_present_partnerIntro = true && this.isSetPartnerIntro();
    boolean that_present_partnerIntro = true && that.isSetPartnerIntro();
    if (this_present_partnerIntro || that_present_partnerIntro) {
      if (!(this_present_partnerIntro && that_present_partnerIntro))
        return false;
      if (!this.partnerIntro.equals(that.partnerIntro))
        return false;
    }

    boolean this_present_partnerQualification = true;
    boolean that_present_partnerQualification = true;
    if (this_present_partnerQualification || that_present_partnerQualification) {
      if (!(this_present_partnerQualification && that_present_partnerQualification))
        return false;
      if (this.partnerQualification != that.partnerQualification)
        return false;
    }

    boolean this_present_partnerDistinction = true && this.isSetPartnerDistinction();
    boolean that_present_partnerDistinction = true && that.isSetPartnerDistinction();
    if (this_present_partnerDistinction || that_present_partnerDistinction) {
      if (!(this_present_partnerDistinction && that_present_partnerDistinction))
        return false;
      if (!this.partnerDistinction.equals(that.partnerDistinction))
        return false;
    }

    boolean this_present_partnerRating = true;
    boolean that_present_partnerRating = true;
    if (this_present_partnerRating || that_present_partnerRating) {
      if (!(this_present_partnerRating && that_present_partnerRating))
        return false;
      if (this.partnerRating != that.partnerRating)
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_addressLat = true;
    boolean that_present_addressLat = true;
    if (this_present_addressLat || that_present_addressLat) {
      if (!(this_present_addressLat && that_present_addressLat))
        return false;
      if (this.addressLat != that.addressLat)
        return false;
    }

    boolean this_present_addressLng = true;
    boolean that_present_addressLng = true;
    if (this_present_addressLng || that_present_addressLng) {
      if (!(this_present_addressLng && that_present_addressLng))
        return false;
      if (this.addressLng != that.addressLng)
        return false;
    }

    boolean this_present_categoryValue = true && this.isSetCategoryValue();
    boolean that_present_categoryValue = true && that.isSetCategoryValue();
    if (this_present_categoryValue || that_present_categoryValue) {
      if (!(this_present_categoryValue && that_present_categoryValue))
        return false;
      if (!this.categoryValue.equals(that.categoryValue))
        return false;
    }

    boolean this_present_categoryName = true && this.isSetCategoryName();
    boolean that_present_categoryName = true && that.isSetCategoryName();
    if (this_present_categoryName || that_present_categoryName) {
      if (!(this_present_categoryName && that_present_categoryName))
        return false;
      if (!this.categoryName.equals(that.categoryName))
        return false;
    }

    boolean this_present_categoryRank = true;
    boolean that_present_categoryRank = true;
    if (this_present_categoryRank || that_present_categoryRank) {
      if (!(this_present_categoryRank && that_present_categoryRank))
        return false;
      if (this.categoryRank != that.categoryRank)
        return false;
    }

    boolean this_present_locationValue = true && this.isSetLocationValue();
    boolean that_present_locationValue = true && that.isSetLocationValue();
    if (this_present_locationValue || that_present_locationValue) {
      if (!(this_present_locationValue && that_present_locationValue))
        return false;
      if (!this.locationValue.equals(that.locationValue))
        return false;
    }

    boolean this_present_locationName = true && this.isSetLocationName();
    boolean that_present_locationName = true && that.isSetLocationName();
    if (this_present_locationName || that_present_locationName) {
      if (!(this_present_locationName && that_present_locationName))
        return false;
      if (!this.locationName.equals(that.locationName))
        return false;
    }

    boolean this_present_circleValue = true && this.isSetCircleValue();
    boolean that_present_circleValue = true && that.isSetCircleValue();
    if (this_present_circleValue || that_present_circleValue) {
      if (!(this_present_circleValue && that_present_circleValue))
        return false;
      if (!this.circleValue.equals(that.circleValue))
        return false;
    }

    boolean this_present_circleName = true && this.isSetCircleName();
    boolean that_present_circleName = true && that.isSetCircleName();
    if (this_present_circleName || that_present_circleName) {
      if (!(this_present_circleName && that_present_circleName))
        return false;
      if (!this.circleName.equals(that.circleName))
        return false;
    }

    boolean this_present_rating = true;
    boolean that_present_rating = true;
    if (this_present_rating || that_present_rating) {
      if (!(this_present_rating && that_present_rating))
        return false;
      if (this.rating != that.rating)
        return false;
    }

    boolean this_present_bookingTotal = true;
    boolean that_present_bookingTotal = true;
    if (this_present_bookingTotal || that_present_bookingTotal) {
      if (!(this_present_bookingTotal && that_present_bookingTotal))
        return false;
      if (this.bookingTotal != that.bookingTotal)
        return false;
    }

    boolean this_present_noRefundDateStart = true;
    boolean that_present_noRefundDateStart = true;
    if (this_present_noRefundDateStart || that_present_noRefundDateStart) {
      if (!(this_present_noRefundDateStart && that_present_noRefundDateStart))
        return false;
      if (this.noRefundDateStart != that.noRefundDateStart)
        return false;
    }

    boolean this_present_noRefundDateEnd = true;
    boolean that_present_noRefundDateEnd = true;
    if (this_present_noRefundDateEnd || that_present_noRefundDateEnd) {
      if (!(this_present_noRefundDateEnd && that_present_noRefundDateEnd))
        return false;
      if (this.noRefundDateEnd != that.noRefundDateEnd)
        return false;
    }

    boolean this_present_cashbackDateStart = true;
    boolean that_present_cashbackDateStart = true;
    if (this_present_cashbackDateStart || that_present_cashbackDateStart) {
      if (!(this_present_cashbackDateStart && that_present_cashbackDateStart))
        return false;
      if (this.cashbackDateStart != that.cashbackDateStart)
        return false;
    }

    boolean this_present_cashbackDateEnd = true;
    boolean that_present_cashbackDateEnd = true;
    if (this_present_cashbackDateEnd || that_present_cashbackDateEnd) {
      if (!(this_present_cashbackDateEnd && that_present_cashbackDateEnd))
        return false;
      if (this.cashbackDateEnd != that.cashbackDateEnd)
        return false;
    }

    boolean this_present_courseTemplateIdSet = true && this.isSetCourseTemplateIdSet();
    boolean that_present_courseTemplateIdSet = true && that.isSetCourseTemplateIdSet();
    if (this_present_courseTemplateIdSet || that_present_courseTemplateIdSet) {
      if (!(this_present_courseTemplateIdSet && that_present_courseTemplateIdSet))
        return false;
      if (!this.courseTemplateIdSet.equals(that.courseTemplateIdSet))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_courseName = true && (isSetCourseName());
    builder.append(present_courseName);
    if (present_courseName)
      builder.append(courseName);

    boolean present_courseTemplateId = true;
    builder.append(present_courseTemplateId);
    if (present_courseTemplateId)
      builder.append(courseTemplateId);

    boolean present_categoryId = true;
    builder.append(present_categoryId);
    if (present_categoryId)
      builder.append(categoryId);

    boolean present_locationId = true;
    builder.append(present_locationId);
    if (present_locationId)
      builder.append(locationId);

    boolean present_circleId = true;
    builder.append(present_circleId);
    if (present_circleId)
      builder.append(circleId);

    boolean present_partnerId = true;
    builder.append(present_partnerId);
    if (present_partnerId)
      builder.append(partnerId);

    boolean present_addressId = true;
    builder.append(present_addressId);
    if (present_addressId)
      builder.append(addressId);

    boolean present_price = true;
    builder.append(present_price);
    if (present_price)
      builder.append(price);

    boolean present_originalPrice = true;
    builder.append(present_originalPrice);
    if (present_originalPrice)
      builder.append(originalPrice);

    boolean present_cashback = true;
    builder.append(present_cashback);
    if (present_cashback)
      builder.append(cashback);

    boolean present_commission = true;
    builder.append(present_commission);
    if (present_commission)
      builder.append(commission);

    boolean present_serviceCharge = true;
    builder.append(present_serviceCharge);
    if (present_serviceCharge)
      builder.append(serviceCharge);

    boolean present_status = true;
    builder.append(present_status);
    if (present_status)
      builder.append(status);

    boolean present_lastModifyTime = true;
    builder.append(present_lastModifyTime);
    if (present_lastModifyTime)
      builder.append(lastModifyTime);

    boolean present_createTime = true;
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);

    boolean present_enabled = true;
    builder.append(present_enabled);
    if (present_enabled)
      builder.append(enabled);

    boolean present_courseHourLength = true;
    builder.append(present_courseHourLength);
    if (present_courseHourLength)
      builder.append(courseHourLength);

    boolean present_teachingMethod = true && (isSetTeachingMethod());
    builder.append(present_teachingMethod);
    if (present_teachingMethod)
      builder.append(teachingMethod);

    boolean present_teachingMaterialFee = true && (isSetTeachingMaterialFee());
    builder.append(present_teachingMaterialFee);
    if (present_teachingMaterialFee)
      builder.append(teachingMaterialFee);

    boolean present_downloadMaterials = true && (isSetDownloadMaterials());
    builder.append(present_downloadMaterials);
    if (present_downloadMaterials)
      builder.append(downloadMaterials);

    boolean present_bonusService = true && (isSetBonusService());
    builder.append(present_bonusService);
    if (present_bonusService)
      builder.append(bonusService);

    boolean present_marking = true && (isSetMarking());
    builder.append(present_marking);
    if (present_marking)
      builder.append(marking);

    boolean present_assignments = true && (isSetAssignments());
    builder.append(present_assignments);
    if (present_assignments)
      builder.append(assignments);

    boolean present_trail = true && (isSetTrail());
    builder.append(present_trail);
    if (present_trail)
      builder.append(trail);

    boolean present_questionSession = true && (isSetQuestionSession());
    builder.append(present_questionSession);
    if (present_questionSession)
      builder.append(questionSession);

    boolean present_teachingAndExercise = true && (isSetTeachingAndExercise());
    builder.append(present_teachingAndExercise);
    if (present_teachingAndExercise)
      builder.append(teachingAndExercise);

    boolean present_classTeacher = true && (isSetClassTeacher());
    builder.append(present_classTeacher);
    if (present_classTeacher)
      builder.append(classTeacher);

    boolean present_goal = true && (isSetGoal());
    builder.append(present_goal);
    if (present_goal)
      builder.append(goal);

    boolean present_outline = true && (isSetOutline());
    builder.append(present_outline);
    if (present_outline)
      builder.append(outline);

    boolean present_regPhone = true && (isSetRegPhone());
    builder.append(present_regPhone);
    if (present_regPhone)
      builder.append(regPhone);

    boolean present_contact = true && (isSetContact());
    builder.append(present_contact);
    if (present_contact)
      builder.append(contact);

    boolean present_extracurricular = true && (isSetExtracurricular());
    builder.append(present_extracurricular);
    if (present_extracurricular)
      builder.append(extracurricular);

    boolean present_passAgreement = true && (isSetPassAgreement());
    builder.append(present_passAgreement);
    if (present_passAgreement)
      builder.append(passAgreement);

    boolean present_qualityAssurance = true && (isSetQualityAssurance());
    builder.append(present_qualityAssurance);
    if (present_qualityAssurance)
      builder.append(qualityAssurance);

    boolean present_questionBank = true && (isSetQuestionBank());
    builder.append(present_questionBank);
    if (present_questionBank)
      builder.append(questionBank);

    boolean present_teachingMaterialIntro = true && (isSetTeachingMaterialIntro());
    builder.append(present_teachingMaterialIntro);
    if (present_teachingMaterialIntro)
      builder.append(teachingMaterialIntro);

    boolean present_studyDayNote = true && (isSetStudyDayNote());
    builder.append(present_studyDayNote);
    if (present_studyDayNote)
      builder.append(studyDayNote);

    boolean present_highScoreReward = true && (isSetHighScoreReward());
    builder.append(present_highScoreReward);
    if (present_highScoreReward)
      builder.append(highScoreReward);

    boolean present_prerequest = true && (isSetPrerequest());
    builder.append(present_prerequest);
    if (present_prerequest)
      builder.append(prerequest);

    boolean present_suitableStudent = true && (isSetSuitableStudent());
    builder.append(present_suitableStudent);
    if (present_suitableStudent)
      builder.append(suitableStudent);

    boolean present_openCourseRequirement = true && (isSetOpenCourseRequirement());
    builder.append(present_openCourseRequirement);
    if (present_openCourseRequirement)
      builder.append(openCourseRequirement);

    boolean present_certification = true && (isSetCertification());
    builder.append(present_certification);
    if (present_certification)
      builder.append(certification);

    boolean present_quiz = true && (isSetQuiz());
    builder.append(present_quiz);
    if (present_quiz)
      builder.append(quiz);

    boolean present_courseIntro = true && (isSetCourseIntro());
    builder.append(present_courseIntro);
    if (present_courseIntro)
      builder.append(courseIntro);

    boolean present_reference = true && (isSetReference());
    builder.append(present_reference);
    if (present_reference)
      builder.append(reference);

    boolean present_regLocation = true && (isSetRegLocation());
    builder.append(present_regLocation);
    if (present_regLocation)
      builder.append(regLocation);

    boolean present_finishTime2 = true;
    builder.append(present_finishTime2);
    if (present_finishTime2)
      builder.append(finishTime2);

    boolean present_startTime2 = true;
    builder.append(present_startTime2);
    if (present_startTime2)
      builder.append(startTime2);

    boolean present_finishTime1 = true;
    builder.append(present_finishTime1);
    if (present_finishTime1)
      builder.append(finishTime1);

    boolean present_startTime1 = true;
    builder.append(present_startTime1);
    if (present_startTime1)
      builder.append(startTime1);

    boolean present_startUponArrival = true;
    builder.append(present_startUponArrival);
    if (present_startUponArrival)
      builder.append(startUponArrival);

    boolean present_bookingType = true;
    builder.append(present_bookingType);
    if (present_bookingType)
      builder.append(bookingType);

    boolean present_cashbackDate = true;
    builder.append(present_cashbackDate);
    if (present_cashbackDate)
      builder.append(cashbackDate);

    boolean present_noRefundDate = true;
    builder.append(present_noRefundDate);
    if (present_noRefundDate)
      builder.append(noRefundDate);

    boolean present_cutoffDate = true;
    builder.append(present_cutoffDate);
    if (present_cutoffDate)
      builder.append(cutoffDate);

    boolean present_finishDate = true;
    builder.append(present_finishDate);
    if (present_finishDate)
      builder.append(finishDate);

    boolean present_startDate = true;
    builder.append(present_startDate);
    if (present_startDate)
      builder.append(startDate);

    boolean present_popularity = true;
    builder.append(present_popularity);
    if (present_popularity)
      builder.append(popularity);

    boolean present_courseHourNum = true;
    builder.append(present_courseHourNum);
    if (present_courseHourNum)
      builder.append(courseHourNum);

    boolean present_classSize = true && (isSetClassSize());
    builder.append(present_classSize);
    if (present_classSize)
      builder.append(classSize);

    boolean present_classType = true;
    builder.append(present_classType);
    if (present_classType)
      builder.append(classType);

    boolean present_discount = true;
    builder.append(present_discount);
    if (present_discount)
      builder.append(discount);

    boolean present_schooltimeDay = true;
    builder.append(present_schooltimeDay);
    if (present_schooltimeDay)
      builder.append(schooltimeDay);

    boolean present_schooltimeWeek = true;
    builder.append(present_schooltimeWeek);
    if (present_schooltimeWeek)
      builder.append(schooltimeWeek);

    boolean present_idSet = true && (isSetIdSet());
    builder.append(present_idSet);
    if (present_idSet)
      builder.append(idSet);

    boolean present_lastModifyTimeStart = true;
    builder.append(present_lastModifyTimeStart);
    if (present_lastModifyTimeStart)
      builder.append(lastModifyTimeStart);

    boolean present_lastModifyTimeEnd = true;
    builder.append(present_lastModifyTimeEnd);
    if (present_lastModifyTimeEnd)
      builder.append(lastModifyTimeEnd);

    boolean present_createTimeStart = true;
    builder.append(present_createTimeStart);
    if (present_createTimeStart)
      builder.append(createTimeStart);

    boolean present_createTimeEnd = true;
    builder.append(present_createTimeEnd);
    if (present_createTimeEnd)
      builder.append(createTimeEnd);

    boolean present_categoryIdSet = true && (isSetCategoryIdSet());
    builder.append(present_categoryIdSet);
    if (present_categoryIdSet)
      builder.append(categoryIdSet);

    boolean present_locationIdSet = true && (isSetLocationIdSet());
    builder.append(present_locationIdSet);
    if (present_locationIdSet)
      builder.append(locationIdSet);

    boolean present_circleIdSet = true && (isSetCircleIdSet());
    builder.append(present_circleIdSet);
    if (present_circleIdSet)
      builder.append(circleIdSet);

    boolean present_partnerIdSet = true && (isSetPartnerIdSet());
    builder.append(present_partnerIdSet);
    if (present_partnerIdSet)
      builder.append(partnerIdSet);

    boolean present_statusSet = true && (isSetStatusSet());
    builder.append(present_statusSet);
    if (present_statusSet)
      builder.append(statusSet);

    boolean present_priceStart = true;
    builder.append(present_priceStart);
    if (present_priceStart)
      builder.append(priceStart);

    boolean present_priceEnd = true;
    builder.append(present_priceEnd);
    if (present_priceEnd)
      builder.append(priceEnd);

    boolean present_originalPriceStart = true;
    builder.append(present_originalPriceStart);
    if (present_originalPriceStart)
      builder.append(originalPriceStart);

    boolean present_originalPriceEnd = true;
    builder.append(present_originalPriceEnd);
    if (present_originalPriceEnd)
      builder.append(originalPriceEnd);

    boolean present_cashbackStart = true;
    builder.append(present_cashbackStart);
    if (present_cashbackStart)
      builder.append(cashbackStart);

    boolean present_cashbackEnd = true;
    builder.append(present_cashbackEnd);
    if (present_cashbackEnd)
      builder.append(cashbackEnd);

    boolean present_popularityStart = true;
    builder.append(present_popularityStart);
    if (present_popularityStart)
      builder.append(popularityStart);

    boolean present_popularityEnd = true;
    builder.append(present_popularityEnd);
    if (present_popularityEnd)
      builder.append(popularityEnd);

    boolean present_popularitySet = true && (isSetPopularitySet());
    builder.append(present_popularitySet);
    if (present_popularitySet)
      builder.append(popularitySet);

    boolean present_courseHourNumStart = true;
    builder.append(present_courseHourNumStart);
    if (present_courseHourNumStart)
      builder.append(courseHourNumStart);

    boolean present_courseHourNumEnd = true;
    builder.append(present_courseHourNumEnd);
    if (present_courseHourNumEnd)
      builder.append(courseHourNumEnd);

    boolean present_courseHourNumSet = true && (isSetCourseHourNumSet());
    builder.append(present_courseHourNumSet);
    if (present_courseHourNumSet)
      builder.append(courseHourNumSet);

    boolean present_startDateStart = true;
    builder.append(present_startDateStart);
    if (present_startDateStart)
      builder.append(startDateStart);

    boolean present_startDateEnd = true;
    builder.append(present_startDateEnd);
    if (present_startDateEnd)
      builder.append(startDateEnd);

    boolean present_finishDateStart = true;
    builder.append(present_finishDateStart);
    if (present_finishDateStart)
      builder.append(finishDateStart);

    boolean present_finishDateEnd = true;
    builder.append(present_finishDateEnd);
    if (present_finishDateEnd)
      builder.append(finishDateEnd);

    boolean present_cutoffDateStart = true;
    builder.append(present_cutoffDateStart);
    if (present_cutoffDateStart)
      builder.append(cutoffDateStart);

    boolean present_cutoffDateEnd = true;
    builder.append(present_cutoffDateEnd);
    if (present_cutoffDateEnd)
      builder.append(cutoffDateEnd);

    boolean present_classTypeSet = true && (isSetClassTypeSet());
    builder.append(present_classTypeSet);
    if (present_classTypeSet)
      builder.append(classTypeSet);

    boolean present_discountStart = true;
    builder.append(present_discountStart);
    if (present_discountStart)
      builder.append(discountStart);

    boolean present_discountEnd = true;
    builder.append(present_discountEnd);
    if (present_discountEnd)
      builder.append(discountEnd);

    boolean present_ratingStart = true;
    builder.append(present_ratingStart);
    if (present_ratingStart)
      builder.append(ratingStart);

    boolean present_ratingEnd = true;
    builder.append(present_ratingEnd);
    if (present_ratingEnd)
      builder.append(ratingEnd);

    boolean present_bookingTotalStart = true;
    builder.append(present_bookingTotalStart);
    if (present_bookingTotalStart)
      builder.append(bookingTotalStart);

    boolean present_bookingTotalEnd = true;
    builder.append(present_bookingTotalEnd);
    if (present_bookingTotalEnd)
      builder.append(bookingTotalEnd);

    boolean present_bookingTotalSet = true && (isSetBookingTotalSet());
    builder.append(present_bookingTotalSet);
    if (present_bookingTotalSet)
      builder.append(bookingTotalSet);

    boolean present_schooltimeDaySet = true && (isSetSchooltimeDaySet());
    builder.append(present_schooltimeDaySet);
    if (present_schooltimeDaySet)
      builder.append(schooltimeDaySet);

    boolean present_schooltimeWeekSet = true && (isSetSchooltimeWeekSet());
    builder.append(present_schooltimeWeekSet);
    if (present_schooltimeWeekSet)
      builder.append(schooltimeWeekSet);

    boolean present_teacherList = true && (isSetTeacherList());
    builder.append(present_teacherList);
    if (present_teacherList)
      builder.append(teacherList);

    boolean present_classPhotoList = true && (isSetClassPhotoList());
    builder.append(present_classPhotoList);
    if (present_classPhotoList)
      builder.append(classPhotoList);

    boolean present_logoUrl = true && (isSetLogoUrl());
    builder.append(present_logoUrl);
    if (present_logoUrl)
      builder.append(logoUrl);

    boolean present_wholeName = true && (isSetWholeName());
    builder.append(present_wholeName);
    if (present_wholeName)
      builder.append(wholeName);

    boolean present_instName = true && (isSetInstName());
    builder.append(present_instName);
    if (present_instName)
      builder.append(instName);

    boolean present_partnerIntro = true && (isSetPartnerIntro());
    builder.append(present_partnerIntro);
    if (present_partnerIntro)
      builder.append(partnerIntro);

    boolean present_partnerQualification = true;
    builder.append(present_partnerQualification);
    if (present_partnerQualification)
      builder.append(partnerQualification);

    boolean present_partnerDistinction = true && (isSetPartnerDistinction());
    builder.append(present_partnerDistinction);
    if (present_partnerDistinction)
      builder.append(partnerDistinction);

    boolean present_partnerRating = true;
    builder.append(present_partnerRating);
    if (present_partnerRating)
      builder.append(partnerRating);

    boolean present_address = true && (isSetAddress());
    builder.append(present_address);
    if (present_address)
      builder.append(address);

    boolean present_addressLat = true;
    builder.append(present_addressLat);
    if (present_addressLat)
      builder.append(addressLat);

    boolean present_addressLng = true;
    builder.append(present_addressLng);
    if (present_addressLng)
      builder.append(addressLng);

    boolean present_categoryValue = true && (isSetCategoryValue());
    builder.append(present_categoryValue);
    if (present_categoryValue)
      builder.append(categoryValue);

    boolean present_categoryName = true && (isSetCategoryName());
    builder.append(present_categoryName);
    if (present_categoryName)
      builder.append(categoryName);

    boolean present_categoryRank = true;
    builder.append(present_categoryRank);
    if (present_categoryRank)
      builder.append(categoryRank);

    boolean present_locationValue = true && (isSetLocationValue());
    builder.append(present_locationValue);
    if (present_locationValue)
      builder.append(locationValue);

    boolean present_locationName = true && (isSetLocationName());
    builder.append(present_locationName);
    if (present_locationName)
      builder.append(locationName);

    boolean present_circleValue = true && (isSetCircleValue());
    builder.append(present_circleValue);
    if (present_circleValue)
      builder.append(circleValue);

    boolean present_circleName = true && (isSetCircleName());
    builder.append(present_circleName);
    if (present_circleName)
      builder.append(circleName);

    boolean present_rating = true;
    builder.append(present_rating);
    if (present_rating)
      builder.append(rating);

    boolean present_bookingTotal = true;
    builder.append(present_bookingTotal);
    if (present_bookingTotal)
      builder.append(bookingTotal);

    boolean present_noRefundDateStart = true;
    builder.append(present_noRefundDateStart);
    if (present_noRefundDateStart)
      builder.append(noRefundDateStart);

    boolean present_noRefundDateEnd = true;
    builder.append(present_noRefundDateEnd);
    if (present_noRefundDateEnd)
      builder.append(noRefundDateEnd);

    boolean present_cashbackDateStart = true;
    builder.append(present_cashbackDateStart);
    if (present_cashbackDateStart)
      builder.append(cashbackDateStart);

    boolean present_cashbackDateEnd = true;
    builder.append(present_cashbackDateEnd);
    if (present_cashbackDateEnd)
      builder.append(cashbackDateEnd);

    boolean present_courseTemplateIdSet = true && (isSetCourseTemplateIdSet());
    builder.append(present_courseTemplateIdSet);
    if (present_courseTemplateIdSet)
      builder.append(courseTemplateIdSet);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(CourseBo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseName()).compareTo(other.isSetCourseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseName, other.courseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseTemplateId()).compareTo(other.isSetCourseTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateId, other.courseTemplateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationId()).compareTo(other.isSetLocationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationId, other.locationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCircleId()).compareTo(other.isSetCircleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCircleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.circleId, other.circleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddressId()).compareTo(other.isSetAddressId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressId, other.addressId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginalPrice()).compareTo(other.isSetOriginalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalPrice, other.originalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashback()).compareTo(other.isSetCashback());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashback()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashback, other.cashback);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommission()).compareTo(other.isSetCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commission, other.commission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceCharge()).compareTo(other.isSetServiceCharge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceCharge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceCharge, other.serviceCharge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTime()).compareTo(other.isSetLastModifyTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTime, other.lastModifyTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnabled()).compareTo(other.isSetEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enabled, other.enabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseHourLength()).compareTo(other.isSetCourseHourLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseHourLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseHourLength, other.courseHourLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeachingMethod()).compareTo(other.isSetTeachingMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeachingMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teachingMethod, other.teachingMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeachingMaterialFee()).compareTo(other.isSetTeachingMaterialFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeachingMaterialFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teachingMaterialFee, other.teachingMaterialFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownloadMaterials()).compareTo(other.isSetDownloadMaterials());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownloadMaterials()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downloadMaterials, other.downloadMaterials);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBonusService()).compareTo(other.isSetBonusService());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBonusService()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bonusService, other.bonusService);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarking()).compareTo(other.isSetMarking());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarking()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marking, other.marking);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssignments()).compareTo(other.isSetAssignments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssignments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assignments, other.assignments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrail()).compareTo(other.isSetTrail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trail, other.trail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionSession()).compareTo(other.isSetQuestionSession());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionSession()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionSession, other.questionSession);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeachingAndExercise()).compareTo(other.isSetTeachingAndExercise());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeachingAndExercise()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teachingAndExercise, other.teachingAndExercise);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClassTeacher()).compareTo(other.isSetClassTeacher());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassTeacher()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classTeacher, other.classTeacher);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoal()).compareTo(other.isSetGoal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goal, other.goal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutline()).compareTo(other.isSetOutline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outline, other.outline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegPhone()).compareTo(other.isSetRegPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regPhone, other.regPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContact()).compareTo(other.isSetContact());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContact()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contact, other.contact);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtracurricular()).compareTo(other.isSetExtracurricular());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtracurricular()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extracurricular, other.extracurricular);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassAgreement()).compareTo(other.isSetPassAgreement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassAgreement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passAgreement, other.passAgreement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQualityAssurance()).compareTo(other.isSetQualityAssurance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQualityAssurance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qualityAssurance, other.qualityAssurance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionBank()).compareTo(other.isSetQuestionBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionBank, other.questionBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeachingMaterialIntro()).compareTo(other.isSetTeachingMaterialIntro());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeachingMaterialIntro()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teachingMaterialIntro, other.teachingMaterialIntro);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStudyDayNote()).compareTo(other.isSetStudyDayNote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudyDayNote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studyDayNote, other.studyDayNote);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighScoreReward()).compareTo(other.isSetHighScoreReward());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighScoreReward()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highScoreReward, other.highScoreReward);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrerequest()).compareTo(other.isSetPrerequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrerequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prerequest, other.prerequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuitableStudent()).compareTo(other.isSetSuitableStudent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuitableStudent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suitableStudent, other.suitableStudent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenCourseRequirement()).compareTo(other.isSetOpenCourseRequirement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenCourseRequirement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openCourseRequirement, other.openCourseRequirement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertification()).compareTo(other.isSetCertification());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertification()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certification, other.certification);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuiz()).compareTo(other.isSetQuiz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuiz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quiz, other.quiz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseIntro()).compareTo(other.isSetCourseIntro());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseIntro()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseIntro, other.courseIntro);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReference()).compareTo(other.isSetReference());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReference()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference, other.reference);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegLocation()).compareTo(other.isSetRegLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regLocation, other.regLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishTime2()).compareTo(other.isSetFinishTime2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishTime2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishTime2, other.finishTime2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime2()).compareTo(other.isSetStartTime2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime2, other.startTime2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishTime1()).compareTo(other.isSetFinishTime1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishTime1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishTime1, other.finishTime1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime1()).compareTo(other.isSetStartTime1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime1, other.startTime1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartUponArrival()).compareTo(other.isSetStartUponArrival());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartUponArrival()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startUponArrival, other.startUponArrival);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBookingType()).compareTo(other.isSetBookingType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBookingType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingType, other.bookingType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashbackDate()).compareTo(other.isSetCashbackDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashbackDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashbackDate, other.cashbackDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoRefundDate()).compareTo(other.isSetNoRefundDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoRefundDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noRefundDate, other.noRefundDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCutoffDate()).compareTo(other.isSetCutoffDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCutoffDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cutoffDate, other.cutoffDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishDate()).compareTo(other.isSetFinishDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishDate, other.finishDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPopularity()).compareTo(other.isSetPopularity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopularity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.popularity, other.popularity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseHourNum()).compareTo(other.isSetCourseHourNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseHourNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseHourNum, other.courseHourNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClassSize()).compareTo(other.isSetClassSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classSize, other.classSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClassType()).compareTo(other.isSetClassType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classType, other.classType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiscount()).compareTo(other.isSetDiscount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discount, other.discount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchooltimeDay()).compareTo(other.isSetSchooltimeDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchooltimeDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schooltimeDay, other.schooltimeDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchooltimeWeek()).compareTo(other.isSetSchooltimeWeek());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchooltimeWeek()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schooltimeWeek, other.schooltimeWeek);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdSet()).compareTo(other.isSetIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idSet, other.idSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimeStart()).compareTo(other.isSetLastModifyTimeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimeStart, other.lastModifyTimeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimeEnd()).compareTo(other.isSetLastModifyTimeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimeEnd, other.lastModifyTimeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimeStart()).compareTo(other.isSetCreateTimeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimeStart, other.createTimeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimeEnd()).compareTo(other.isSetCreateTimeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimeEnd, other.createTimeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryIdSet()).compareTo(other.isSetCategoryIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryIdSet, other.categoryIdSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationIdSet()).compareTo(other.isSetLocationIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationIdSet, other.locationIdSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCircleIdSet()).compareTo(other.isSetCircleIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCircleIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.circleIdSet, other.circleIdSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerIdSet()).compareTo(other.isSetPartnerIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerIdSet, other.partnerIdSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusSet()).compareTo(other.isSetStatusSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusSet, other.statusSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceStart()).compareTo(other.isSetPriceStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceStart, other.priceStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceEnd()).compareTo(other.isSetPriceEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceEnd, other.priceEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginalPriceStart()).compareTo(other.isSetOriginalPriceStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalPriceStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalPriceStart, other.originalPriceStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginalPriceEnd()).compareTo(other.isSetOriginalPriceEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalPriceEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalPriceEnd, other.originalPriceEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashbackStart()).compareTo(other.isSetCashbackStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashbackStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashbackStart, other.cashbackStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashbackEnd()).compareTo(other.isSetCashbackEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashbackEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashbackEnd, other.cashbackEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPopularityStart()).compareTo(other.isSetPopularityStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopularityStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.popularityStart, other.popularityStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPopularityEnd()).compareTo(other.isSetPopularityEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopularityEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.popularityEnd, other.popularityEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPopularitySet()).compareTo(other.isSetPopularitySet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopularitySet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.popularitySet, other.popularitySet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseHourNumStart()).compareTo(other.isSetCourseHourNumStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseHourNumStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseHourNumStart, other.courseHourNumStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseHourNumEnd()).compareTo(other.isSetCourseHourNumEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseHourNumEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseHourNumEnd, other.courseHourNumEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseHourNumSet()).compareTo(other.isSetCourseHourNumSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseHourNumSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseHourNumSet, other.courseHourNumSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDateStart()).compareTo(other.isSetStartDateStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDateStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDateStart, other.startDateStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDateEnd()).compareTo(other.isSetStartDateEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDateEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDateEnd, other.startDateEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishDateStart()).compareTo(other.isSetFinishDateStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishDateStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishDateStart, other.finishDateStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishDateEnd()).compareTo(other.isSetFinishDateEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishDateEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishDateEnd, other.finishDateEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCutoffDateStart()).compareTo(other.isSetCutoffDateStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCutoffDateStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cutoffDateStart, other.cutoffDateStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCutoffDateEnd()).compareTo(other.isSetCutoffDateEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCutoffDateEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cutoffDateEnd, other.cutoffDateEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClassTypeSet()).compareTo(other.isSetClassTypeSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassTypeSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classTypeSet, other.classTypeSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiscountStart()).compareTo(other.isSetDiscountStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscountStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discountStart, other.discountStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiscountEnd()).compareTo(other.isSetDiscountEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscountEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discountEnd, other.discountEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRatingStart()).compareTo(other.isSetRatingStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRatingStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ratingStart, other.ratingStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRatingEnd()).compareTo(other.isSetRatingEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRatingEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ratingEnd, other.ratingEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBookingTotalStart()).compareTo(other.isSetBookingTotalStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBookingTotalStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingTotalStart, other.bookingTotalStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBookingTotalEnd()).compareTo(other.isSetBookingTotalEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBookingTotalEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingTotalEnd, other.bookingTotalEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBookingTotalSet()).compareTo(other.isSetBookingTotalSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBookingTotalSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingTotalSet, other.bookingTotalSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchooltimeDaySet()).compareTo(other.isSetSchooltimeDaySet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchooltimeDaySet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schooltimeDaySet, other.schooltimeDaySet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchooltimeWeekSet()).compareTo(other.isSetSchooltimeWeekSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchooltimeWeekSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schooltimeWeekSet, other.schooltimeWeekSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeacherList()).compareTo(other.isSetTeacherList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacherList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherList, other.teacherList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClassPhotoList()).compareTo(other.isSetClassPhotoList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassPhotoList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classPhotoList, other.classPhotoList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogoUrl()).compareTo(other.isSetLogoUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogoUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logoUrl, other.logoUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWholeName()).compareTo(other.isSetWholeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWholeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wholeName, other.wholeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstName()).compareTo(other.isSetInstName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instName, other.instName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerIntro()).compareTo(other.isSetPartnerIntro());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerIntro()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerIntro, other.partnerIntro);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerQualification()).compareTo(other.isSetPartnerQualification());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerQualification()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerQualification, other.partnerQualification);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerDistinction()).compareTo(other.isSetPartnerDistinction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerDistinction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerDistinction, other.partnerDistinction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerRating()).compareTo(other.isSetPartnerRating());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerRating()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerRating, other.partnerRating);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddressLat()).compareTo(other.isSetAddressLat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressLat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressLat, other.addressLat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddressLng()).compareTo(other.isSetAddressLng());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressLng()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressLng, other.addressLng);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryValue()).compareTo(other.isSetCategoryValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryValue, other.categoryValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryName()).compareTo(other.isSetCategoryName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryName, other.categoryName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryRank()).compareTo(other.isSetCategoryRank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryRank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryRank, other.categoryRank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationValue()).compareTo(other.isSetLocationValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationValue, other.locationValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationName()).compareTo(other.isSetLocationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationName, other.locationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCircleValue()).compareTo(other.isSetCircleValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCircleValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.circleValue, other.circleValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCircleName()).compareTo(other.isSetCircleName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCircleName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.circleName, other.circleName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRating()).compareTo(other.isSetRating());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRating()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rating, other.rating);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBookingTotal()).compareTo(other.isSetBookingTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBookingTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingTotal, other.bookingTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoRefundDateStart()).compareTo(other.isSetNoRefundDateStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoRefundDateStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noRefundDateStart, other.noRefundDateStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoRefundDateEnd()).compareTo(other.isSetNoRefundDateEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoRefundDateEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noRefundDateEnd, other.noRefundDateEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashbackDateStart()).compareTo(other.isSetCashbackDateStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashbackDateStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashbackDateStart, other.cashbackDateStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashbackDateEnd()).compareTo(other.isSetCashbackDateEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashbackDateEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashbackDateEnd, other.cashbackDateEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseTemplateIdSet()).compareTo(other.isSetCourseTemplateIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseTemplateIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateIdSet, other.courseTemplateIdSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CourseBo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("courseName:");
    if (this.courseName == null) {
      sb.append("null");
    } else {
      sb.append(this.courseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("courseTemplateId:");
    sb.append(this.courseTemplateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryId:");
    sb.append(this.categoryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("locationId:");
    sb.append(this.locationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("circleId:");
    sb.append(this.circleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerId:");
    sb.append(this.partnerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("addressId:");
    sb.append(this.addressId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("originalPrice:");
    sb.append(this.originalPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashback:");
    sb.append(this.cashback);
    first = false;
    if (!first) sb.append(", ");
    sb.append("commission:");
    sb.append(this.commission);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceCharge:");
    sb.append(this.serviceCharge);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastModifyTime:");
    sb.append(this.lastModifyTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("enabled:");
    sb.append(this.enabled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("courseHourLength:");
    sb.append(this.courseHourLength);
    first = false;
    if (!first) sb.append(", ");
    sb.append("teachingMethod:");
    if (this.teachingMethod == null) {
      sb.append("null");
    } else {
      sb.append(this.teachingMethod);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teachingMaterialFee:");
    if (this.teachingMaterialFee == null) {
      sb.append("null");
    } else {
      sb.append(this.teachingMaterialFee);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("downloadMaterials:");
    if (this.downloadMaterials == null) {
      sb.append("null");
    } else {
      sb.append(this.downloadMaterials);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bonusService:");
    if (this.bonusService == null) {
      sb.append("null");
    } else {
      sb.append(this.bonusService);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("marking:");
    if (this.marking == null) {
      sb.append("null");
    } else {
      sb.append(this.marking);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assignments:");
    if (this.assignments == null) {
      sb.append("null");
    } else {
      sb.append(this.assignments);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("trail:");
    if (this.trail == null) {
      sb.append("null");
    } else {
      sb.append(this.trail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionSession:");
    if (this.questionSession == null) {
      sb.append("null");
    } else {
      sb.append(this.questionSession);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teachingAndExercise:");
    if (this.teachingAndExercise == null) {
      sb.append("null");
    } else {
      sb.append(this.teachingAndExercise);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("classTeacher:");
    if (this.classTeacher == null) {
      sb.append("null");
    } else {
      sb.append(this.classTeacher);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("goal:");
    if (this.goal == null) {
      sb.append("null");
    } else {
      sb.append(this.goal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outline:");
    if (this.outline == null) {
      sb.append("null");
    } else {
      sb.append(this.outline);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regPhone:");
    if (this.regPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.regPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contact:");
    if (this.contact == null) {
      sb.append("null");
    } else {
      sb.append(this.contact);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extracurricular:");
    if (this.extracurricular == null) {
      sb.append("null");
    } else {
      sb.append(this.extracurricular);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("passAgreement:");
    if (this.passAgreement == null) {
      sb.append("null");
    } else {
      sb.append(this.passAgreement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("qualityAssurance:");
    if (this.qualityAssurance == null) {
      sb.append("null");
    } else {
      sb.append(this.qualityAssurance);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionBank:");
    if (this.questionBank == null) {
      sb.append("null");
    } else {
      sb.append(this.questionBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teachingMaterialIntro:");
    if (this.teachingMaterialIntro == null) {
      sb.append("null");
    } else {
      sb.append(this.teachingMaterialIntro);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("studyDayNote:");
    if (this.studyDayNote == null) {
      sb.append("null");
    } else {
      sb.append(this.studyDayNote);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("highScoreReward:");
    if (this.highScoreReward == null) {
      sb.append("null");
    } else {
      sb.append(this.highScoreReward);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("prerequest:");
    if (this.prerequest == null) {
      sb.append("null");
    } else {
      sb.append(this.prerequest);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("suitableStudent:");
    if (this.suitableStudent == null) {
      sb.append("null");
    } else {
      sb.append(this.suitableStudent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("openCourseRequirement:");
    if (this.openCourseRequirement == null) {
      sb.append("null");
    } else {
      sb.append(this.openCourseRequirement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certification:");
    if (this.certification == null) {
      sb.append("null");
    } else {
      sb.append(this.certification);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quiz:");
    if (this.quiz == null) {
      sb.append("null");
    } else {
      sb.append(this.quiz);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("courseIntro:");
    if (this.courseIntro == null) {
      sb.append("null");
    } else {
      sb.append(this.courseIntro);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reference:");
    if (this.reference == null) {
      sb.append("null");
    } else {
      sb.append(this.reference);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regLocation:");
    if (this.regLocation == null) {
      sb.append("null");
    } else {
      sb.append(this.regLocation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishTime2:");
    sb.append(this.finishTime2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime2:");
    sb.append(this.startTime2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishTime1:");
    sb.append(this.finishTime1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime1:");
    sb.append(this.startTime1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startUponArrival:");
    sb.append(this.startUponArrival);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bookingType:");
    sb.append(this.bookingType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashbackDate:");
    sb.append(this.cashbackDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noRefundDate:");
    sb.append(this.noRefundDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cutoffDate:");
    sb.append(this.cutoffDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishDate:");
    sb.append(this.finishDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startDate:");
    sb.append(this.startDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("popularity:");
    sb.append(this.popularity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("courseHourNum:");
    sb.append(this.courseHourNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("classSize:");
    if (this.classSize == null) {
      sb.append("null");
    } else {
      sb.append(this.classSize);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("classType:");
    sb.append(this.classType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("discount:");
    sb.append(this.discount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("schooltimeDay:");
    sb.append(this.schooltimeDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("schooltimeWeek:");
    sb.append(this.schooltimeWeek);
    first = false;
    if (!first) sb.append(", ");
    sb.append("idSet:");
    if (this.idSet == null) {
      sb.append("null");
    } else {
      sb.append(this.idSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastModifyTimeStart:");
    sb.append(this.lastModifyTimeStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastModifyTimeEnd:");
    sb.append(this.lastModifyTimeEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTimeStart:");
    sb.append(this.createTimeStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTimeEnd:");
    sb.append(this.createTimeEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryIdSet:");
    if (this.categoryIdSet == null) {
      sb.append("null");
    } else {
      sb.append(this.categoryIdSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locationIdSet:");
    if (this.locationIdSet == null) {
      sb.append("null");
    } else {
      sb.append(this.locationIdSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("circleIdSet:");
    if (this.circleIdSet == null) {
      sb.append("null");
    } else {
      sb.append(this.circleIdSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerIdSet:");
    if (this.partnerIdSet == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerIdSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusSet:");
    if (this.statusSet == null) {
      sb.append("null");
    } else {
      sb.append(this.statusSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("priceStart:");
    sb.append(this.priceStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priceEnd:");
    sb.append(this.priceEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("originalPriceStart:");
    sb.append(this.originalPriceStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("originalPriceEnd:");
    sb.append(this.originalPriceEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashbackStart:");
    sb.append(this.cashbackStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashbackEnd:");
    sb.append(this.cashbackEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("popularityStart:");
    sb.append(this.popularityStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("popularityEnd:");
    sb.append(this.popularityEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("popularitySet:");
    if (this.popularitySet == null) {
      sb.append("null");
    } else {
      sb.append(this.popularitySet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("courseHourNumStart:");
    sb.append(this.courseHourNumStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("courseHourNumEnd:");
    sb.append(this.courseHourNumEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("courseHourNumSet:");
    if (this.courseHourNumSet == null) {
      sb.append("null");
    } else {
      sb.append(this.courseHourNumSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startDateStart:");
    sb.append(this.startDateStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startDateEnd:");
    sb.append(this.startDateEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishDateStart:");
    sb.append(this.finishDateStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishDateEnd:");
    sb.append(this.finishDateEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cutoffDateStart:");
    sb.append(this.cutoffDateStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cutoffDateEnd:");
    sb.append(this.cutoffDateEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("classTypeSet:");
    if (this.classTypeSet == null) {
      sb.append("null");
    } else {
      sb.append(this.classTypeSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("discountStart:");
    sb.append(this.discountStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("discountEnd:");
    sb.append(this.discountEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ratingStart:");
    sb.append(this.ratingStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ratingEnd:");
    sb.append(this.ratingEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bookingTotalStart:");
    sb.append(this.bookingTotalStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bookingTotalEnd:");
    sb.append(this.bookingTotalEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bookingTotalSet:");
    if (this.bookingTotalSet == null) {
      sb.append("null");
    } else {
      sb.append(this.bookingTotalSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("schooltimeDaySet:");
    if (this.schooltimeDaySet == null) {
      sb.append("null");
    } else {
      sb.append(this.schooltimeDaySet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("schooltimeWeekSet:");
    if (this.schooltimeWeekSet == null) {
      sb.append("null");
    } else {
      sb.append(this.schooltimeWeekSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacherList:");
    if (this.teacherList == null) {
      sb.append("null");
    } else {
      sb.append(this.teacherList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("classPhotoList:");
    if (this.classPhotoList == null) {
      sb.append("null");
    } else {
      sb.append(this.classPhotoList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("logoUrl:");
    if (this.logoUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.logoUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wholeName:");
    if (this.wholeName == null) {
      sb.append("null");
    } else {
      sb.append(this.wholeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instName:");
    if (this.instName == null) {
      sb.append("null");
    } else {
      sb.append(this.instName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerIntro:");
    if (this.partnerIntro == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerIntro);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerQualification:");
    sb.append(this.partnerQualification);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerDistinction:");
    if (this.partnerDistinction == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerDistinction);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerRating:");
    sb.append(this.partnerRating);
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("addressLat:");
    sb.append(this.addressLat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("addressLng:");
    sb.append(this.addressLng);
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryValue:");
    if (this.categoryValue == null) {
      sb.append("null");
    } else {
      sb.append(this.categoryValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryName:");
    if (this.categoryName == null) {
      sb.append("null");
    } else {
      sb.append(this.categoryName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryRank:");
    sb.append(this.categoryRank);
    first = false;
    if (!first) sb.append(", ");
    sb.append("locationValue:");
    if (this.locationValue == null) {
      sb.append("null");
    } else {
      sb.append(this.locationValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locationName:");
    if (this.locationName == null) {
      sb.append("null");
    } else {
      sb.append(this.locationName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("circleValue:");
    if (this.circleValue == null) {
      sb.append("null");
    } else {
      sb.append(this.circleValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("circleName:");
    if (this.circleName == null) {
      sb.append("null");
    } else {
      sb.append(this.circleName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rating:");
    sb.append(this.rating);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bookingTotal:");
    sb.append(this.bookingTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noRefundDateStart:");
    sb.append(this.noRefundDateStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noRefundDateEnd:");
    sb.append(this.noRefundDateEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashbackDateStart:");
    sb.append(this.cashbackDateStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashbackDateEnd:");
    sb.append(this.cashbackDateEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("courseTemplateIdSet:");
    if (this.courseTemplateIdSet == null) {
      sb.append("null");
    } else {
      sb.append(this.courseTemplateIdSet);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CourseBoStandardSchemeFactory implements SchemeFactory {
    public CourseBoStandardScheme getScheme() {
      return new CourseBoStandardScheme();
    }
  }

  private static class CourseBoStandardScheme extends StandardScheme<CourseBo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CourseBo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COURSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.courseName = iprot.readString();
              struct.setCourseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COURSE_TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.courseTemplateId = iprot.readI32();
              struct.setCourseTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.categoryId = iprot.readI32();
              struct.setCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOCATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.locationId = iprot.readI32();
              struct.setLocationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CIRCLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.circleId = iprot.readI32();
              struct.setCircleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partnerId = iprot.readI32();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ADDRESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.addressId = iprot.readI32();
              struct.setAddressIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ORIGINAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.originalPrice = iprot.readDouble();
              struct.setOriginalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CASHBACK
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cashback = iprot.readDouble();
              struct.setCashbackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.commission = iprot.readDouble();
              struct.setCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SERVICE_CHARGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.serviceCharge = iprot.readDouble();
              struct.setServiceChargeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LAST_MODIFY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTime = iprot.readI64();
              struct.setLastModifyTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.enabled = iprot.readI32();
              struct.setEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // COURSE_HOUR_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.courseHourLength = iprot.readI32();
              struct.setCourseHourLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TEACHING_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teachingMethod = iprot.readString();
              struct.setTeachingMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TEACHING_MATERIAL_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teachingMaterialFee = iprot.readString();
              struct.setTeachingMaterialFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // DOWNLOAD_MATERIALS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.downloadMaterials = iprot.readString();
              struct.setDownloadMaterialsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // BONUS_SERVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bonusService = iprot.readString();
              struct.setBonusServiceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // MARKING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.marking = iprot.readString();
              struct.setMarkingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ASSIGNMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assignments = iprot.readString();
              struct.setAssignmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // TRAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trail = iprot.readString();
              struct.setTrailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // QUESTION_SESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.questionSession = iprot.readString();
              struct.setQuestionSessionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // TEACHING_AND_EXERCISE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teachingAndExercise = iprot.readString();
              struct.setTeachingAndExerciseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // CLASS_TEACHER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.classTeacher = iprot.readString();
              struct.setClassTeacherIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // GOAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.goal = iprot.readString();
              struct.setGoalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // OUTLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outline = iprot.readString();
              struct.setOutlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // REG_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regPhone = iprot.readString();
              struct.setRegPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // CONTACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contact = iprot.readString();
              struct.setContactIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // EXTRACURRICULAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extracurricular = iprot.readString();
              struct.setExtracurricularIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // PASS_AGREEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passAgreement = iprot.readString();
              struct.setPassAgreementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // QUALITY_ASSURANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qualityAssurance = iprot.readString();
              struct.setQualityAssuranceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // QUESTION_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.questionBank = iprot.readString();
              struct.setQuestionBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // TEACHING_MATERIAL_INTRO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teachingMaterialIntro = iprot.readString();
              struct.setTeachingMaterialIntroIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // STUDY_DAY_NOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.studyDayNote = iprot.readString();
              struct.setStudyDayNoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // HIGH_SCORE_REWARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.highScoreReward = iprot.readString();
              struct.setHighScoreRewardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // PREREQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.prerequest = iprot.readString();
              struct.setPrerequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // SUITABLE_STUDENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.suitableStudent = iprot.readString();
              struct.setSuitableStudentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // OPEN_COURSE_REQUIREMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openCourseRequirement = iprot.readString();
              struct.setOpenCourseRequirementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // CERTIFICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certification = iprot.readString();
              struct.setCertificationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // QUIZ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.quiz = iprot.readString();
              struct.setQuizIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // COURSE_INTRO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.courseIntro = iprot.readString();
              struct.setCourseIntroIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // REFERENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reference = iprot.readString();
              struct.setReferenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // REG_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regLocation = iprot.readString();
              struct.setRegLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // FINISH_TIME2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.finishTime2 = iprot.readI32();
              struct.setFinishTime2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // START_TIME2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startTime2 = iprot.readI32();
              struct.setStartTime2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // FINISH_TIME1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.finishTime1 = iprot.readI32();
              struct.setFinishTime1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // START_TIME1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startTime1 = iprot.readI32();
              struct.setStartTime1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // START_UPON_ARRIVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startUponArrival = iprot.readI32();
              struct.setStartUponArrivalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // BOOKING_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bookingType = iprot.readI32();
              struct.setBookingTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // CASHBACK_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cashbackDate = iprot.readI64();
              struct.setCashbackDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // NO_REFUND_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.noRefundDate = iprot.readI64();
              struct.setNoRefundDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // CUTOFF_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cutoffDate = iprot.readI64();
              struct.setCutoffDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // FINISH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.finishDate = iprot.readI64();
              struct.setFinishDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startDate = iprot.readI64();
              struct.setStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // POPULARITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.popularity = iprot.readI32();
              struct.setPopularityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // COURSE_HOUR_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.courseHourNum = iprot.readI32();
              struct.setCourseHourNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // CLASS_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.classSize = iprot.readString();
              struct.setClassSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // CLASS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.classType = iprot.readI32();
              struct.setClassTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 63: // DISCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.discount = iprot.readDouble();
              struct.setDiscountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 64: // SCHOOLTIME_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.schooltimeDay = iprot.readI32();
              struct.setSchooltimeDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 65: // SCHOOLTIME_WEEK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.schooltimeWeek = iprot.readI32();
              struct.setSchooltimeWeekIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 66: // ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.idSet = new HashSet<Integer>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  int _elem2;
                  _elem2 = iprot.readI32();
                  struct.idSet.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 67: // LAST_MODIFY_TIME_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimeStart = iprot.readI64();
              struct.setLastModifyTimeStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 68: // LAST_MODIFY_TIME_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimeEnd = iprot.readI64();
              struct.setLastModifyTimeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 69: // CREATE_TIME_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimeStart = iprot.readI64();
              struct.setCreateTimeStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // CREATE_TIME_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimeEnd = iprot.readI64();
              struct.setCreateTimeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 71: // CATEGORY_ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.categoryIdSet = new HashSet<Integer>(2*_set3.size);
                for (int _i4 = 0; _i4 < _set3.size; ++_i4)
                {
                  int _elem5;
                  _elem5 = iprot.readI32();
                  struct.categoryIdSet.add(_elem5);
                }
                iprot.readSetEnd();
              }
              struct.setCategoryIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 72: // LOCATION_ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set6 = iprot.readSetBegin();
                struct.locationIdSet = new HashSet<Integer>(2*_set6.size);
                for (int _i7 = 0; _i7 < _set6.size; ++_i7)
                {
                  int _elem8;
                  _elem8 = iprot.readI32();
                  struct.locationIdSet.add(_elem8);
                }
                iprot.readSetEnd();
              }
              struct.setLocationIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 73: // CIRCLE_ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set9 = iprot.readSetBegin();
                struct.circleIdSet = new HashSet<Integer>(2*_set9.size);
                for (int _i10 = 0; _i10 < _set9.size; ++_i10)
                {
                  int _elem11;
                  _elem11 = iprot.readI32();
                  struct.circleIdSet.add(_elem11);
                }
                iprot.readSetEnd();
              }
              struct.setCircleIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 74: // PARTNER_ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set12 = iprot.readSetBegin();
                struct.partnerIdSet = new HashSet<Integer>(2*_set12.size);
                for (int _i13 = 0; _i13 < _set12.size; ++_i13)
                {
                  int _elem14;
                  _elem14 = iprot.readI32();
                  struct.partnerIdSet.add(_elem14);
                }
                iprot.readSetEnd();
              }
              struct.setPartnerIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 75: // STATUS_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set15 = iprot.readSetBegin();
                struct.statusSet = new HashSet<Integer>(2*_set15.size);
                for (int _i16 = 0; _i16 < _set15.size; ++_i16)
                {
                  int _elem17;
                  _elem17 = iprot.readI32();
                  struct.statusSet.add(_elem17);
                }
                iprot.readSetEnd();
              }
              struct.setStatusSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 76: // PRICE_START
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.priceStart = iprot.readDouble();
              struct.setPriceStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 77: // PRICE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.priceEnd = iprot.readDouble();
              struct.setPriceEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 78: // ORIGINAL_PRICE_START
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.originalPriceStart = iprot.readDouble();
              struct.setOriginalPriceStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 79: // ORIGINAL_PRICE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.originalPriceEnd = iprot.readDouble();
              struct.setOriginalPriceEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 80: // CASHBACK_START
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cashbackStart = iprot.readDouble();
              struct.setCashbackStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 81: // CASHBACK_END
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cashbackEnd = iprot.readDouble();
              struct.setCashbackEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 82: // POPULARITY_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.popularityStart = iprot.readI32();
              struct.setPopularityStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 83: // POPULARITY_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.popularityEnd = iprot.readI32();
              struct.setPopularityEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 84: // POPULARITY_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set18 = iprot.readSetBegin();
                struct.popularitySet = new HashSet<Integer>(2*_set18.size);
                for (int _i19 = 0; _i19 < _set18.size; ++_i19)
                {
                  int _elem20;
                  _elem20 = iprot.readI32();
                  struct.popularitySet.add(_elem20);
                }
                iprot.readSetEnd();
              }
              struct.setPopularitySetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 85: // COURSE_HOUR_NUM_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.courseHourNumStart = iprot.readI32();
              struct.setCourseHourNumStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 86: // COURSE_HOUR_NUM_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.courseHourNumEnd = iprot.readI32();
              struct.setCourseHourNumEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 87: // COURSE_HOUR_NUM_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set21 = iprot.readSetBegin();
                struct.courseHourNumSet = new HashSet<Integer>(2*_set21.size);
                for (int _i22 = 0; _i22 < _set21.size; ++_i22)
                {
                  int _elem23;
                  _elem23 = iprot.readI32();
                  struct.courseHourNumSet.add(_elem23);
                }
                iprot.readSetEnd();
              }
              struct.setCourseHourNumSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 88: // START_DATE_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startDateStart = iprot.readI64();
              struct.setStartDateStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 89: // START_DATE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startDateEnd = iprot.readI64();
              struct.setStartDateEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 90: // FINISH_DATE_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.finishDateStart = iprot.readI64();
              struct.setFinishDateStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 91: // FINISH_DATE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.finishDateEnd = iprot.readI64();
              struct.setFinishDateEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 92: // CUTOFF_DATE_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cutoffDateStart = iprot.readI64();
              struct.setCutoffDateStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 93: // CUTOFF_DATE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cutoffDateEnd = iprot.readI64();
              struct.setCutoffDateEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 94: // CLASS_TYPE_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set24 = iprot.readSetBegin();
                struct.classTypeSet = new HashSet<Integer>(2*_set24.size);
                for (int _i25 = 0; _i25 < _set24.size; ++_i25)
                {
                  int _elem26;
                  _elem26 = iprot.readI32();
                  struct.classTypeSet.add(_elem26);
                }
                iprot.readSetEnd();
              }
              struct.setClassTypeSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 95: // DISCOUNT_START
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.discountStart = iprot.readDouble();
              struct.setDiscountStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 96: // DISCOUNT_END
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.discountEnd = iprot.readDouble();
              struct.setDiscountEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 97: // RATING_START
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ratingStart = iprot.readDouble();
              struct.setRatingStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 98: // RATING_END
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ratingEnd = iprot.readDouble();
              struct.setRatingEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 99: // BOOKING_TOTAL_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bookingTotalStart = iprot.readI32();
              struct.setBookingTotalStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // BOOKING_TOTAL_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bookingTotalEnd = iprot.readI32();
              struct.setBookingTotalEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // BOOKING_TOTAL_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set27 = iprot.readSetBegin();
                struct.bookingTotalSet = new HashSet<Integer>(2*_set27.size);
                for (int _i28 = 0; _i28 < _set27.size; ++_i28)
                {
                  int _elem29;
                  _elem29 = iprot.readI32();
                  struct.bookingTotalSet.add(_elem29);
                }
                iprot.readSetEnd();
              }
              struct.setBookingTotalSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // SCHOOLTIME_DAY_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set30 = iprot.readSetBegin();
                struct.schooltimeDaySet = new HashSet<Integer>(2*_set30.size);
                for (int _i31 = 0; _i31 < _set30.size; ++_i31)
                {
                  int _elem32;
                  _elem32 = iprot.readI32();
                  struct.schooltimeDaySet.add(_elem32);
                }
                iprot.readSetEnd();
              }
              struct.setSchooltimeDaySetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // SCHOOLTIME_WEEK_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set33 = iprot.readSetBegin();
                struct.schooltimeWeekSet = new HashSet<Integer>(2*_set33.size);
                for (int _i34 = 0; _i34 < _set33.size; ++_i34)
                {
                  int _elem35;
                  _elem35 = iprot.readI32();
                  struct.schooltimeWeekSet.add(_elem35);
                }
                iprot.readSetEnd();
              }
              struct.setSchooltimeWeekSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 104: // TEACHER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.teacherList = new ArrayList<com.ishangke.edunav.commoncontract.model.TeacherBo>(_list36.size);
                for (int _i37 = 0; _i37 < _list36.size; ++_i37)
                {
                  com.ishangke.edunav.commoncontract.model.TeacherBo _elem38;
                  _elem38 = new com.ishangke.edunav.commoncontract.model.TeacherBo();
                  _elem38.read(iprot);
                  struct.teacherList.add(_elem38);
                }
                iprot.readListEnd();
              }
              struct.setTeacherListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 105: // CLASS_PHOTO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list39 = iprot.readListBegin();
                struct.classPhotoList = new ArrayList<com.ishangke.edunav.commoncontract.model.ClassPhotoBo>(_list39.size);
                for (int _i40 = 0; _i40 < _list39.size; ++_i40)
                {
                  com.ishangke.edunav.commoncontract.model.ClassPhotoBo _elem41;
                  _elem41 = new com.ishangke.edunav.commoncontract.model.ClassPhotoBo();
                  _elem41.read(iprot);
                  struct.classPhotoList.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setClassPhotoListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 106: // LOGO_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logoUrl = iprot.readString();
              struct.setLogoUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 107: // WHOLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wholeName = iprot.readString();
              struct.setWholeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 108: // INST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instName = iprot.readString();
              struct.setInstNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 109: // PARTNER_INTRO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerIntro = iprot.readString();
              struct.setPartnerIntroIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 110: // PARTNER_QUALIFICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partnerQualification = iprot.readI32();
              struct.setPartnerQualificationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 111: // PARTNER_DISTINCTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerDistinction = iprot.readString();
              struct.setPartnerDistinctionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 112: // PARTNER_RATING
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.partnerRating = iprot.readDouble();
              struct.setPartnerRatingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 113: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 114: // ADDRESS_LAT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.addressLat = iprot.readDouble();
              struct.setAddressLatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 115: // ADDRESS_LNG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.addressLng = iprot.readDouble();
              struct.setAddressLngIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 116: // CATEGORY_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.categoryValue = iprot.readString();
              struct.setCategoryValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 117: // CATEGORY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.categoryName = iprot.readString();
              struct.setCategoryNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 118: // CATEGORY_RANK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.categoryRank = iprot.readI32();
              struct.setCategoryRankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 119: // LOCATION_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locationValue = iprot.readString();
              struct.setLocationValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 120: // LOCATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locationName = iprot.readString();
              struct.setLocationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 121: // CIRCLE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.circleValue = iprot.readString();
              struct.setCircleValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 122: // CIRCLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.circleName = iprot.readString();
              struct.setCircleNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 123: // RATING
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rating = iprot.readDouble();
              struct.setRatingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 124: // BOOKING_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bookingTotal = iprot.readI32();
              struct.setBookingTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 125: // NO_REFUND_DATE_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.noRefundDateStart = iprot.readI64();
              struct.setNoRefundDateStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 126: // NO_REFUND_DATE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.noRefundDateEnd = iprot.readI64();
              struct.setNoRefundDateEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 127: // CASHBACK_DATE_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cashbackDateStart = iprot.readI64();
              struct.setCashbackDateStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 128: // CASHBACK_DATE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cashbackDateEnd = iprot.readI64();
              struct.setCashbackDateEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 129: // COURSE_TEMPLATE_ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set42 = iprot.readSetBegin();
                struct.courseTemplateIdSet = new HashSet<Integer>(2*_set42.size);
                for (int _i43 = 0; _i43 < _set42.size; ++_i43)
                {
                  int _elem44;
                  _elem44 = iprot.readI32();
                  struct.courseTemplateIdSet.add(_elem44);
                }
                iprot.readSetEnd();
              }
              struct.setCourseTemplateIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CourseBo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.courseName != null) {
        oprot.writeFieldBegin(COURSE_NAME_FIELD_DESC);
        oprot.writeString(struct.courseName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COURSE_TEMPLATE_ID_FIELD_DESC);
      oprot.writeI32(struct.courseTemplateId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
      oprot.writeI32(struct.categoryId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCATION_ID_FIELD_DESC);
      oprot.writeI32(struct.locationId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CIRCLE_ID_FIELD_DESC);
      oprot.writeI32(struct.circleId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
      oprot.writeI32(struct.partnerId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADDRESS_ID_FIELD_DESC);
      oprot.writeI32(struct.addressId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeDouble(struct.price);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORIGINAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.originalPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CASHBACK_FIELD_DESC);
      oprot.writeDouble(struct.cashback);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMMISSION_FIELD_DESC);
      oprot.writeDouble(struct.commission);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVICE_CHARGE_FIELD_DESC);
      oprot.writeDouble(struct.serviceCharge);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_MODIFY_TIME_FIELD_DESC);
      oprot.writeI64(struct.lastModifyTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENABLED_FIELD_DESC);
      oprot.writeI32(struct.enabled);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COURSE_HOUR_LENGTH_FIELD_DESC);
      oprot.writeI32(struct.courseHourLength);
      oprot.writeFieldEnd();
      if (struct.teachingMethod != null) {
        oprot.writeFieldBegin(TEACHING_METHOD_FIELD_DESC);
        oprot.writeString(struct.teachingMethod);
        oprot.writeFieldEnd();
      }
      if (struct.teachingMaterialFee != null) {
        oprot.writeFieldBegin(TEACHING_MATERIAL_FEE_FIELD_DESC);
        oprot.writeString(struct.teachingMaterialFee);
        oprot.writeFieldEnd();
      }
      if (struct.downloadMaterials != null) {
        oprot.writeFieldBegin(DOWNLOAD_MATERIALS_FIELD_DESC);
        oprot.writeString(struct.downloadMaterials);
        oprot.writeFieldEnd();
      }
      if (struct.bonusService != null) {
        oprot.writeFieldBegin(BONUS_SERVICE_FIELD_DESC);
        oprot.writeString(struct.bonusService);
        oprot.writeFieldEnd();
      }
      if (struct.marking != null) {
        oprot.writeFieldBegin(MARKING_FIELD_DESC);
        oprot.writeString(struct.marking);
        oprot.writeFieldEnd();
      }
      if (struct.assignments != null) {
        oprot.writeFieldBegin(ASSIGNMENTS_FIELD_DESC);
        oprot.writeString(struct.assignments);
        oprot.writeFieldEnd();
      }
      if (struct.trail != null) {
        oprot.writeFieldBegin(TRAIL_FIELD_DESC);
        oprot.writeString(struct.trail);
        oprot.writeFieldEnd();
      }
      if (struct.questionSession != null) {
        oprot.writeFieldBegin(QUESTION_SESSION_FIELD_DESC);
        oprot.writeString(struct.questionSession);
        oprot.writeFieldEnd();
      }
      if (struct.teachingAndExercise != null) {
        oprot.writeFieldBegin(TEACHING_AND_EXERCISE_FIELD_DESC);
        oprot.writeString(struct.teachingAndExercise);
        oprot.writeFieldEnd();
      }
      if (struct.classTeacher != null) {
        oprot.writeFieldBegin(CLASS_TEACHER_FIELD_DESC);
        oprot.writeString(struct.classTeacher);
        oprot.writeFieldEnd();
      }
      if (struct.goal != null) {
        oprot.writeFieldBegin(GOAL_FIELD_DESC);
        oprot.writeString(struct.goal);
        oprot.writeFieldEnd();
      }
      if (struct.outline != null) {
        oprot.writeFieldBegin(OUTLINE_FIELD_DESC);
        oprot.writeString(struct.outline);
        oprot.writeFieldEnd();
      }
      if (struct.regPhone != null) {
        oprot.writeFieldBegin(REG_PHONE_FIELD_DESC);
        oprot.writeString(struct.regPhone);
        oprot.writeFieldEnd();
      }
      if (struct.contact != null) {
        oprot.writeFieldBegin(CONTACT_FIELD_DESC);
        oprot.writeString(struct.contact);
        oprot.writeFieldEnd();
      }
      if (struct.extracurricular != null) {
        oprot.writeFieldBegin(EXTRACURRICULAR_FIELD_DESC);
        oprot.writeString(struct.extracurricular);
        oprot.writeFieldEnd();
      }
      if (struct.passAgreement != null) {
        oprot.writeFieldBegin(PASS_AGREEMENT_FIELD_DESC);
        oprot.writeString(struct.passAgreement);
        oprot.writeFieldEnd();
      }
      if (struct.qualityAssurance != null) {
        oprot.writeFieldBegin(QUALITY_ASSURANCE_FIELD_DESC);
        oprot.writeString(struct.qualityAssurance);
        oprot.writeFieldEnd();
      }
      if (struct.questionBank != null) {
        oprot.writeFieldBegin(QUESTION_BANK_FIELD_DESC);
        oprot.writeString(struct.questionBank);
        oprot.writeFieldEnd();
      }
      if (struct.teachingMaterialIntro != null) {
        oprot.writeFieldBegin(TEACHING_MATERIAL_INTRO_FIELD_DESC);
        oprot.writeString(struct.teachingMaterialIntro);
        oprot.writeFieldEnd();
      }
      if (struct.studyDayNote != null) {
        oprot.writeFieldBegin(STUDY_DAY_NOTE_FIELD_DESC);
        oprot.writeString(struct.studyDayNote);
        oprot.writeFieldEnd();
      }
      if (struct.highScoreReward != null) {
        oprot.writeFieldBegin(HIGH_SCORE_REWARD_FIELD_DESC);
        oprot.writeString(struct.highScoreReward);
        oprot.writeFieldEnd();
      }
      if (struct.prerequest != null) {
        oprot.writeFieldBegin(PREREQUEST_FIELD_DESC);
        oprot.writeString(struct.prerequest);
        oprot.writeFieldEnd();
      }
      if (struct.suitableStudent != null) {
        oprot.writeFieldBegin(SUITABLE_STUDENT_FIELD_DESC);
        oprot.writeString(struct.suitableStudent);
        oprot.writeFieldEnd();
      }
      if (struct.openCourseRequirement != null) {
        oprot.writeFieldBegin(OPEN_COURSE_REQUIREMENT_FIELD_DESC);
        oprot.writeString(struct.openCourseRequirement);
        oprot.writeFieldEnd();
      }
      if (struct.certification != null) {
        oprot.writeFieldBegin(CERTIFICATION_FIELD_DESC);
        oprot.writeString(struct.certification);
        oprot.writeFieldEnd();
      }
      if (struct.quiz != null) {
        oprot.writeFieldBegin(QUIZ_FIELD_DESC);
        oprot.writeString(struct.quiz);
        oprot.writeFieldEnd();
      }
      if (struct.courseIntro != null) {
        oprot.writeFieldBegin(COURSE_INTRO_FIELD_DESC);
        oprot.writeString(struct.courseIntro);
        oprot.writeFieldEnd();
      }
      if (struct.reference != null) {
        oprot.writeFieldBegin(REFERENCE_FIELD_DESC);
        oprot.writeString(struct.reference);
        oprot.writeFieldEnd();
      }
      if (struct.regLocation != null) {
        oprot.writeFieldBegin(REG_LOCATION_FIELD_DESC);
        oprot.writeString(struct.regLocation);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FINISH_TIME2_FIELD_DESC);
      oprot.writeI32(struct.finishTime2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME2_FIELD_DESC);
      oprot.writeI32(struct.startTime2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINISH_TIME1_FIELD_DESC);
      oprot.writeI32(struct.finishTime1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME1_FIELD_DESC);
      oprot.writeI32(struct.startTime1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_UPON_ARRIVAL_FIELD_DESC);
      oprot.writeI32(struct.startUponArrival);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOOKING_TYPE_FIELD_DESC);
      oprot.writeI32(struct.bookingType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CASHBACK_DATE_FIELD_DESC);
      oprot.writeI64(struct.cashbackDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_REFUND_DATE_FIELD_DESC);
      oprot.writeI64(struct.noRefundDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUTOFF_DATE_FIELD_DESC);
      oprot.writeI64(struct.cutoffDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINISH_DATE_FIELD_DESC);
      oprot.writeI64(struct.finishDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_DATE_FIELD_DESC);
      oprot.writeI64(struct.startDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POPULARITY_FIELD_DESC);
      oprot.writeI32(struct.popularity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COURSE_HOUR_NUM_FIELD_DESC);
      oprot.writeI32(struct.courseHourNum);
      oprot.writeFieldEnd();
      if (struct.classSize != null) {
        oprot.writeFieldBegin(CLASS_SIZE_FIELD_DESC);
        oprot.writeString(struct.classSize);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CLASS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.classType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISCOUNT_FIELD_DESC);
      oprot.writeDouble(struct.discount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCHOOLTIME_DAY_FIELD_DESC);
      oprot.writeI32(struct.schooltimeDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCHOOLTIME_WEEK_FIELD_DESC);
      oprot.writeI32(struct.schooltimeWeek);
      oprot.writeFieldEnd();
      if (struct.idSet != null) {
        oprot.writeFieldBegin(ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.idSet.size()));
          for (int _iter45 : struct.idSet)
          {
            oprot.writeI32(_iter45);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_MODIFY_TIME_START_FIELD_DESC);
      oprot.writeI64(struct.lastModifyTimeStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_MODIFY_TIME_END_FIELD_DESC);
      oprot.writeI64(struct.lastModifyTimeEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_START_FIELD_DESC);
      oprot.writeI64(struct.createTimeStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_END_FIELD_DESC);
      oprot.writeI64(struct.createTimeEnd);
      oprot.writeFieldEnd();
      if (struct.categoryIdSet != null) {
        oprot.writeFieldBegin(CATEGORY_ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.categoryIdSet.size()));
          for (int _iter46 : struct.categoryIdSet)
          {
            oprot.writeI32(_iter46);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.locationIdSet != null) {
        oprot.writeFieldBegin(LOCATION_ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.locationIdSet.size()));
          for (int _iter47 : struct.locationIdSet)
          {
            oprot.writeI32(_iter47);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.circleIdSet != null) {
        oprot.writeFieldBegin(CIRCLE_ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.circleIdSet.size()));
          for (int _iter48 : struct.circleIdSet)
          {
            oprot.writeI32(_iter48);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.partnerIdSet != null) {
        oprot.writeFieldBegin(PARTNER_ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.partnerIdSet.size()));
          for (int _iter49 : struct.partnerIdSet)
          {
            oprot.writeI32(_iter49);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.statusSet != null) {
        oprot.writeFieldBegin(STATUS_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.statusSet.size()));
          for (int _iter50 : struct.statusSet)
          {
            oprot.writeI32(_iter50);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRICE_START_FIELD_DESC);
      oprot.writeDouble(struct.priceStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRICE_END_FIELD_DESC);
      oprot.writeDouble(struct.priceEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORIGINAL_PRICE_START_FIELD_DESC);
      oprot.writeDouble(struct.originalPriceStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORIGINAL_PRICE_END_FIELD_DESC);
      oprot.writeDouble(struct.originalPriceEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CASHBACK_START_FIELD_DESC);
      oprot.writeDouble(struct.cashbackStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CASHBACK_END_FIELD_DESC);
      oprot.writeDouble(struct.cashbackEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POPULARITY_START_FIELD_DESC);
      oprot.writeI32(struct.popularityStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POPULARITY_END_FIELD_DESC);
      oprot.writeI32(struct.popularityEnd);
      oprot.writeFieldEnd();
      if (struct.popularitySet != null) {
        oprot.writeFieldBegin(POPULARITY_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.popularitySet.size()));
          for (int _iter51 : struct.popularitySet)
          {
            oprot.writeI32(_iter51);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COURSE_HOUR_NUM_START_FIELD_DESC);
      oprot.writeI32(struct.courseHourNumStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COURSE_HOUR_NUM_END_FIELD_DESC);
      oprot.writeI32(struct.courseHourNumEnd);
      oprot.writeFieldEnd();
      if (struct.courseHourNumSet != null) {
        oprot.writeFieldBegin(COURSE_HOUR_NUM_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.courseHourNumSet.size()));
          for (int _iter52 : struct.courseHourNumSet)
          {
            oprot.writeI32(_iter52);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_DATE_START_FIELD_DESC);
      oprot.writeI64(struct.startDateStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_DATE_END_FIELD_DESC);
      oprot.writeI64(struct.startDateEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINISH_DATE_START_FIELD_DESC);
      oprot.writeI64(struct.finishDateStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINISH_DATE_END_FIELD_DESC);
      oprot.writeI64(struct.finishDateEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUTOFF_DATE_START_FIELD_DESC);
      oprot.writeI64(struct.cutoffDateStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUTOFF_DATE_END_FIELD_DESC);
      oprot.writeI64(struct.cutoffDateEnd);
      oprot.writeFieldEnd();
      if (struct.classTypeSet != null) {
        oprot.writeFieldBegin(CLASS_TYPE_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.classTypeSet.size()));
          for (int _iter53 : struct.classTypeSet)
          {
            oprot.writeI32(_iter53);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DISCOUNT_START_FIELD_DESC);
      oprot.writeDouble(struct.discountStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISCOUNT_END_FIELD_DESC);
      oprot.writeDouble(struct.discountEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RATING_START_FIELD_DESC);
      oprot.writeDouble(struct.ratingStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RATING_END_FIELD_DESC);
      oprot.writeDouble(struct.ratingEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOOKING_TOTAL_START_FIELD_DESC);
      oprot.writeI32(struct.bookingTotalStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOOKING_TOTAL_END_FIELD_DESC);
      oprot.writeI32(struct.bookingTotalEnd);
      oprot.writeFieldEnd();
      if (struct.bookingTotalSet != null) {
        oprot.writeFieldBegin(BOOKING_TOTAL_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.bookingTotalSet.size()));
          for (int _iter54 : struct.bookingTotalSet)
          {
            oprot.writeI32(_iter54);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.schooltimeDaySet != null) {
        oprot.writeFieldBegin(SCHOOLTIME_DAY_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.schooltimeDaySet.size()));
          for (int _iter55 : struct.schooltimeDaySet)
          {
            oprot.writeI32(_iter55);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.schooltimeWeekSet != null) {
        oprot.writeFieldBegin(SCHOOLTIME_WEEK_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.schooltimeWeekSet.size()));
          for (int _iter56 : struct.schooltimeWeekSet)
          {
            oprot.writeI32(_iter56);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.teacherList != null) {
        oprot.writeFieldBegin(TEACHER_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.teacherList.size()));
          for (com.ishangke.edunav.commoncontract.model.TeacherBo _iter57 : struct.teacherList)
          {
            _iter57.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.classPhotoList != null) {
        oprot.writeFieldBegin(CLASS_PHOTO_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.classPhotoList.size()));
          for (com.ishangke.edunav.commoncontract.model.ClassPhotoBo _iter58 : struct.classPhotoList)
          {
            _iter58.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.logoUrl != null) {
        oprot.writeFieldBegin(LOGO_URL_FIELD_DESC);
        oprot.writeString(struct.logoUrl);
        oprot.writeFieldEnd();
      }
      if (struct.wholeName != null) {
        oprot.writeFieldBegin(WHOLE_NAME_FIELD_DESC);
        oprot.writeString(struct.wholeName);
        oprot.writeFieldEnd();
      }
      if (struct.instName != null) {
        oprot.writeFieldBegin(INST_NAME_FIELD_DESC);
        oprot.writeString(struct.instName);
        oprot.writeFieldEnd();
      }
      if (struct.partnerIntro != null) {
        oprot.writeFieldBegin(PARTNER_INTRO_FIELD_DESC);
        oprot.writeString(struct.partnerIntro);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PARTNER_QUALIFICATION_FIELD_DESC);
      oprot.writeI32(struct.partnerQualification);
      oprot.writeFieldEnd();
      if (struct.partnerDistinction != null) {
        oprot.writeFieldBegin(PARTNER_DISTINCTION_FIELD_DESC);
        oprot.writeString(struct.partnerDistinction);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PARTNER_RATING_FIELD_DESC);
      oprot.writeDouble(struct.partnerRating);
      oprot.writeFieldEnd();
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ADDRESS_LAT_FIELD_DESC);
      oprot.writeDouble(struct.addressLat);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADDRESS_LNG_FIELD_DESC);
      oprot.writeDouble(struct.addressLng);
      oprot.writeFieldEnd();
      if (struct.categoryValue != null) {
        oprot.writeFieldBegin(CATEGORY_VALUE_FIELD_DESC);
        oprot.writeString(struct.categoryValue);
        oprot.writeFieldEnd();
      }
      if (struct.categoryName != null) {
        oprot.writeFieldBegin(CATEGORY_NAME_FIELD_DESC);
        oprot.writeString(struct.categoryName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CATEGORY_RANK_FIELD_DESC);
      oprot.writeI32(struct.categoryRank);
      oprot.writeFieldEnd();
      if (struct.locationValue != null) {
        oprot.writeFieldBegin(LOCATION_VALUE_FIELD_DESC);
        oprot.writeString(struct.locationValue);
        oprot.writeFieldEnd();
      }
      if (struct.locationName != null) {
        oprot.writeFieldBegin(LOCATION_NAME_FIELD_DESC);
        oprot.writeString(struct.locationName);
        oprot.writeFieldEnd();
      }
      if (struct.circleValue != null) {
        oprot.writeFieldBegin(CIRCLE_VALUE_FIELD_DESC);
        oprot.writeString(struct.circleValue);
        oprot.writeFieldEnd();
      }
      if (struct.circleName != null) {
        oprot.writeFieldBegin(CIRCLE_NAME_FIELD_DESC);
        oprot.writeString(struct.circleName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RATING_FIELD_DESC);
      oprot.writeDouble(struct.rating);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOOKING_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.bookingTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_REFUND_DATE_START_FIELD_DESC);
      oprot.writeI64(struct.noRefundDateStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_REFUND_DATE_END_FIELD_DESC);
      oprot.writeI64(struct.noRefundDateEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CASHBACK_DATE_START_FIELD_DESC);
      oprot.writeI64(struct.cashbackDateStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CASHBACK_DATE_END_FIELD_DESC);
      oprot.writeI64(struct.cashbackDateEnd);
      oprot.writeFieldEnd();
      if (struct.courseTemplateIdSet != null) {
        oprot.writeFieldBegin(COURSE_TEMPLATE_ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.courseTemplateIdSet.size()));
          for (int _iter59 : struct.courseTemplateIdSet)
          {
            oprot.writeI32(_iter59);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CourseBoTupleSchemeFactory implements SchemeFactory {
    public CourseBoTupleScheme getScheme() {
      return new CourseBoTupleScheme();
    }
  }

  private static class CourseBoTupleScheme extends TupleScheme<CourseBo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CourseBo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCourseName()) {
        optionals.set(1);
      }
      if (struct.isSetCourseTemplateId()) {
        optionals.set(2);
      }
      if (struct.isSetCategoryId()) {
        optionals.set(3);
      }
      if (struct.isSetLocationId()) {
        optionals.set(4);
      }
      if (struct.isSetCircleId()) {
        optionals.set(5);
      }
      if (struct.isSetPartnerId()) {
        optionals.set(6);
      }
      if (struct.isSetAddressId()) {
        optionals.set(7);
      }
      if (struct.isSetPrice()) {
        optionals.set(8);
      }
      if (struct.isSetOriginalPrice()) {
        optionals.set(9);
      }
      if (struct.isSetCashback()) {
        optionals.set(10);
      }
      if (struct.isSetCommission()) {
        optionals.set(11);
      }
      if (struct.isSetServiceCharge()) {
        optionals.set(12);
      }
      if (struct.isSetStatus()) {
        optionals.set(13);
      }
      if (struct.isSetLastModifyTime()) {
        optionals.set(14);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(15);
      }
      if (struct.isSetEnabled()) {
        optionals.set(16);
      }
      if (struct.isSetCourseHourLength()) {
        optionals.set(17);
      }
      if (struct.isSetTeachingMethod()) {
        optionals.set(18);
      }
      if (struct.isSetTeachingMaterialFee()) {
        optionals.set(19);
      }
      if (struct.isSetDownloadMaterials()) {
        optionals.set(20);
      }
      if (struct.isSetBonusService()) {
        optionals.set(21);
      }
      if (struct.isSetMarking()) {
        optionals.set(22);
      }
      if (struct.isSetAssignments()) {
        optionals.set(23);
      }
      if (struct.isSetTrail()) {
        optionals.set(24);
      }
      if (struct.isSetQuestionSession()) {
        optionals.set(25);
      }
      if (struct.isSetTeachingAndExercise()) {
        optionals.set(26);
      }
      if (struct.isSetClassTeacher()) {
        optionals.set(27);
      }
      if (struct.isSetGoal()) {
        optionals.set(28);
      }
      if (struct.isSetOutline()) {
        optionals.set(29);
      }
      if (struct.isSetRegPhone()) {
        optionals.set(30);
      }
      if (struct.isSetContact()) {
        optionals.set(31);
      }
      if (struct.isSetExtracurricular()) {
        optionals.set(32);
      }
      if (struct.isSetPassAgreement()) {
        optionals.set(33);
      }
      if (struct.isSetQualityAssurance()) {
        optionals.set(34);
      }
      if (struct.isSetQuestionBank()) {
        optionals.set(35);
      }
      if (struct.isSetTeachingMaterialIntro()) {
        optionals.set(36);
      }
      if (struct.isSetStudyDayNote()) {
        optionals.set(37);
      }
      if (struct.isSetHighScoreReward()) {
        optionals.set(38);
      }
      if (struct.isSetPrerequest()) {
        optionals.set(39);
      }
      if (struct.isSetSuitableStudent()) {
        optionals.set(40);
      }
      if (struct.isSetOpenCourseRequirement()) {
        optionals.set(41);
      }
      if (struct.isSetCertification()) {
        optionals.set(42);
      }
      if (struct.isSetQuiz()) {
        optionals.set(43);
      }
      if (struct.isSetCourseIntro()) {
        optionals.set(44);
      }
      if (struct.isSetReference()) {
        optionals.set(45);
      }
      if (struct.isSetRegLocation()) {
        optionals.set(46);
      }
      if (struct.isSetFinishTime2()) {
        optionals.set(47);
      }
      if (struct.isSetStartTime2()) {
        optionals.set(48);
      }
      if (struct.isSetFinishTime1()) {
        optionals.set(49);
      }
      if (struct.isSetStartTime1()) {
        optionals.set(50);
      }
      if (struct.isSetStartUponArrival()) {
        optionals.set(51);
      }
      if (struct.isSetBookingType()) {
        optionals.set(52);
      }
      if (struct.isSetCashbackDate()) {
        optionals.set(53);
      }
      if (struct.isSetNoRefundDate()) {
        optionals.set(54);
      }
      if (struct.isSetCutoffDate()) {
        optionals.set(55);
      }
      if (struct.isSetFinishDate()) {
        optionals.set(56);
      }
      if (struct.isSetStartDate()) {
        optionals.set(57);
      }
      if (struct.isSetPopularity()) {
        optionals.set(58);
      }
      if (struct.isSetCourseHourNum()) {
        optionals.set(59);
      }
      if (struct.isSetClassSize()) {
        optionals.set(60);
      }
      if (struct.isSetClassType()) {
        optionals.set(61);
      }
      if (struct.isSetDiscount()) {
        optionals.set(62);
      }
      if (struct.isSetSchooltimeDay()) {
        optionals.set(63);
      }
      if (struct.isSetSchooltimeWeek()) {
        optionals.set(64);
      }
      if (struct.isSetIdSet()) {
        optionals.set(65);
      }
      if (struct.isSetLastModifyTimeStart()) {
        optionals.set(66);
      }
      if (struct.isSetLastModifyTimeEnd()) {
        optionals.set(67);
      }
      if (struct.isSetCreateTimeStart()) {
        optionals.set(68);
      }
      if (struct.isSetCreateTimeEnd()) {
        optionals.set(69);
      }
      if (struct.isSetCategoryIdSet()) {
        optionals.set(70);
      }
      if (struct.isSetLocationIdSet()) {
        optionals.set(71);
      }
      if (struct.isSetCircleIdSet()) {
        optionals.set(72);
      }
      if (struct.isSetPartnerIdSet()) {
        optionals.set(73);
      }
      if (struct.isSetStatusSet()) {
        optionals.set(74);
      }
      if (struct.isSetPriceStart()) {
        optionals.set(75);
      }
      if (struct.isSetPriceEnd()) {
        optionals.set(76);
      }
      if (struct.isSetOriginalPriceStart()) {
        optionals.set(77);
      }
      if (struct.isSetOriginalPriceEnd()) {
        optionals.set(78);
      }
      if (struct.isSetCashbackStart()) {
        optionals.set(79);
      }
      if (struct.isSetCashbackEnd()) {
        optionals.set(80);
      }
      if (struct.isSetPopularityStart()) {
        optionals.set(81);
      }
      if (struct.isSetPopularityEnd()) {
        optionals.set(82);
      }
      if (struct.isSetPopularitySet()) {
        optionals.set(83);
      }
      if (struct.isSetCourseHourNumStart()) {
        optionals.set(84);
      }
      if (struct.isSetCourseHourNumEnd()) {
        optionals.set(85);
      }
      if (struct.isSetCourseHourNumSet()) {
        optionals.set(86);
      }
      if (struct.isSetStartDateStart()) {
        optionals.set(87);
      }
      if (struct.isSetStartDateEnd()) {
        optionals.set(88);
      }
      if (struct.isSetFinishDateStart()) {
        optionals.set(89);
      }
      if (struct.isSetFinishDateEnd()) {
        optionals.set(90);
      }
      if (struct.isSetCutoffDateStart()) {
        optionals.set(91);
      }
      if (struct.isSetCutoffDateEnd()) {
        optionals.set(92);
      }
      if (struct.isSetClassTypeSet()) {
        optionals.set(93);
      }
      if (struct.isSetDiscountStart()) {
        optionals.set(94);
      }
      if (struct.isSetDiscountEnd()) {
        optionals.set(95);
      }
      if (struct.isSetRatingStart()) {
        optionals.set(96);
      }
      if (struct.isSetRatingEnd()) {
        optionals.set(97);
      }
      if (struct.isSetBookingTotalStart()) {
        optionals.set(98);
      }
      if (struct.isSetBookingTotalEnd()) {
        optionals.set(99);
      }
      if (struct.isSetBookingTotalSet()) {
        optionals.set(100);
      }
      if (struct.isSetSchooltimeDaySet()) {
        optionals.set(101);
      }
      if (struct.isSetSchooltimeWeekSet()) {
        optionals.set(102);
      }
      if (struct.isSetTeacherList()) {
        optionals.set(103);
      }
      if (struct.isSetClassPhotoList()) {
        optionals.set(104);
      }
      if (struct.isSetLogoUrl()) {
        optionals.set(105);
      }
      if (struct.isSetWholeName()) {
        optionals.set(106);
      }
      if (struct.isSetInstName()) {
        optionals.set(107);
      }
      if (struct.isSetPartnerIntro()) {
        optionals.set(108);
      }
      if (struct.isSetPartnerQualification()) {
        optionals.set(109);
      }
      if (struct.isSetPartnerDistinction()) {
        optionals.set(110);
      }
      if (struct.isSetPartnerRating()) {
        optionals.set(111);
      }
      if (struct.isSetAddress()) {
        optionals.set(112);
      }
      if (struct.isSetAddressLat()) {
        optionals.set(113);
      }
      if (struct.isSetAddressLng()) {
        optionals.set(114);
      }
      if (struct.isSetCategoryValue()) {
        optionals.set(115);
      }
      if (struct.isSetCategoryName()) {
        optionals.set(116);
      }
      if (struct.isSetCategoryRank()) {
        optionals.set(117);
      }
      if (struct.isSetLocationValue()) {
        optionals.set(118);
      }
      if (struct.isSetLocationName()) {
        optionals.set(119);
      }
      if (struct.isSetCircleValue()) {
        optionals.set(120);
      }
      if (struct.isSetCircleName()) {
        optionals.set(121);
      }
      if (struct.isSetRating()) {
        optionals.set(122);
      }
      if (struct.isSetBookingTotal()) {
        optionals.set(123);
      }
      if (struct.isSetNoRefundDateStart()) {
        optionals.set(124);
      }
      if (struct.isSetNoRefundDateEnd()) {
        optionals.set(125);
      }
      if (struct.isSetCashbackDateStart()) {
        optionals.set(126);
      }
      if (struct.isSetCashbackDateEnd()) {
        optionals.set(127);
      }
      if (struct.isSetCourseTemplateIdSet()) {
        optionals.set(128);
      }
      oprot.writeBitSet(optionals, 129);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetCourseName()) {
        oprot.writeString(struct.courseName);
      }
      if (struct.isSetCourseTemplateId()) {
        oprot.writeI32(struct.courseTemplateId);
      }
      if (struct.isSetCategoryId()) {
        oprot.writeI32(struct.categoryId);
      }
      if (struct.isSetLocationId()) {
        oprot.writeI32(struct.locationId);
      }
      if (struct.isSetCircleId()) {
        oprot.writeI32(struct.circleId);
      }
      if (struct.isSetPartnerId()) {
        oprot.writeI32(struct.partnerId);
      }
      if (struct.isSetAddressId()) {
        oprot.writeI32(struct.addressId);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetOriginalPrice()) {
        oprot.writeDouble(struct.originalPrice);
      }
      if (struct.isSetCashback()) {
        oprot.writeDouble(struct.cashback);
      }
      if (struct.isSetCommission()) {
        oprot.writeDouble(struct.commission);
      }
      if (struct.isSetServiceCharge()) {
        oprot.writeDouble(struct.serviceCharge);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetLastModifyTime()) {
        oprot.writeI64(struct.lastModifyTime);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetEnabled()) {
        oprot.writeI32(struct.enabled);
      }
      if (struct.isSetCourseHourLength()) {
        oprot.writeI32(struct.courseHourLength);
      }
      if (struct.isSetTeachingMethod()) {
        oprot.writeString(struct.teachingMethod);
      }
      if (struct.isSetTeachingMaterialFee()) {
        oprot.writeString(struct.teachingMaterialFee);
      }
      if (struct.isSetDownloadMaterials()) {
        oprot.writeString(struct.downloadMaterials);
      }
      if (struct.isSetBonusService()) {
        oprot.writeString(struct.bonusService);
      }
      if (struct.isSetMarking()) {
        oprot.writeString(struct.marking);
      }
      if (struct.isSetAssignments()) {
        oprot.writeString(struct.assignments);
      }
      if (struct.isSetTrail()) {
        oprot.writeString(struct.trail);
      }
      if (struct.isSetQuestionSession()) {
        oprot.writeString(struct.questionSession);
      }
      if (struct.isSetTeachingAndExercise()) {
        oprot.writeString(struct.teachingAndExercise);
      }
      if (struct.isSetClassTeacher()) {
        oprot.writeString(struct.classTeacher);
      }
      if (struct.isSetGoal()) {
        oprot.writeString(struct.goal);
      }
      if (struct.isSetOutline()) {
        oprot.writeString(struct.outline);
      }
      if (struct.isSetRegPhone()) {
        oprot.writeString(struct.regPhone);
      }
      if (struct.isSetContact()) {
        oprot.writeString(struct.contact);
      }
      if (struct.isSetExtracurricular()) {
        oprot.writeString(struct.extracurricular);
      }
      if (struct.isSetPassAgreement()) {
        oprot.writeString(struct.passAgreement);
      }
      if (struct.isSetQualityAssurance()) {
        oprot.writeString(struct.qualityAssurance);
      }
      if (struct.isSetQuestionBank()) {
        oprot.writeString(struct.questionBank);
      }
      if (struct.isSetTeachingMaterialIntro()) {
        oprot.writeString(struct.teachingMaterialIntro);
      }
      if (struct.isSetStudyDayNote()) {
        oprot.writeString(struct.studyDayNote);
      }
      if (struct.isSetHighScoreReward()) {
        oprot.writeString(struct.highScoreReward);
      }
      if (struct.isSetPrerequest()) {
        oprot.writeString(struct.prerequest);
      }
      if (struct.isSetSuitableStudent()) {
        oprot.writeString(struct.suitableStudent);
      }
      if (struct.isSetOpenCourseRequirement()) {
        oprot.writeString(struct.openCourseRequirement);
      }
      if (struct.isSetCertification()) {
        oprot.writeString(struct.certification);
      }
      if (struct.isSetQuiz()) {
        oprot.writeString(struct.quiz);
      }
      if (struct.isSetCourseIntro()) {
        oprot.writeString(struct.courseIntro);
      }
      if (struct.isSetReference()) {
        oprot.writeString(struct.reference);
      }
      if (struct.isSetRegLocation()) {
        oprot.writeString(struct.regLocation);
      }
      if (struct.isSetFinishTime2()) {
        oprot.writeI32(struct.finishTime2);
      }
      if (struct.isSetStartTime2()) {
        oprot.writeI32(struct.startTime2);
      }
      if (struct.isSetFinishTime1()) {
        oprot.writeI32(struct.finishTime1);
      }
      if (struct.isSetStartTime1()) {
        oprot.writeI32(struct.startTime1);
      }
      if (struct.isSetStartUponArrival()) {
        oprot.writeI32(struct.startUponArrival);
      }
      if (struct.isSetBookingType()) {
        oprot.writeI32(struct.bookingType);
      }
      if (struct.isSetCashbackDate()) {
        oprot.writeI64(struct.cashbackDate);
      }
      if (struct.isSetNoRefundDate()) {
        oprot.writeI64(struct.noRefundDate);
      }
      if (struct.isSetCutoffDate()) {
        oprot.writeI64(struct.cutoffDate);
      }
      if (struct.isSetFinishDate()) {
        oprot.writeI64(struct.finishDate);
      }
      if (struct.isSetStartDate()) {
        oprot.writeI64(struct.startDate);
      }
      if (struct.isSetPopularity()) {
        oprot.writeI32(struct.popularity);
      }
      if (struct.isSetCourseHourNum()) {
        oprot.writeI32(struct.courseHourNum);
      }
      if (struct.isSetClassSize()) {
        oprot.writeString(struct.classSize);
      }
      if (struct.isSetClassType()) {
        oprot.writeI32(struct.classType);
      }
      if (struct.isSetDiscount()) {
        oprot.writeDouble(struct.discount);
      }
      if (struct.isSetSchooltimeDay()) {
        oprot.writeI32(struct.schooltimeDay);
      }
      if (struct.isSetSchooltimeWeek()) {
        oprot.writeI32(struct.schooltimeWeek);
      }
      if (struct.isSetIdSet()) {
        {
          oprot.writeI32(struct.idSet.size());
          for (int _iter60 : struct.idSet)
          {
            oprot.writeI32(_iter60);
          }
        }
      }
      if (struct.isSetLastModifyTimeStart()) {
        oprot.writeI64(struct.lastModifyTimeStart);
      }
      if (struct.isSetLastModifyTimeEnd()) {
        oprot.writeI64(struct.lastModifyTimeEnd);
      }
      if (struct.isSetCreateTimeStart()) {
        oprot.writeI64(struct.createTimeStart);
      }
      if (struct.isSetCreateTimeEnd()) {
        oprot.writeI64(struct.createTimeEnd);
      }
      if (struct.isSetCategoryIdSet()) {
        {
          oprot.writeI32(struct.categoryIdSet.size());
          for (int _iter61 : struct.categoryIdSet)
          {
            oprot.writeI32(_iter61);
          }
        }
      }
      if (struct.isSetLocationIdSet()) {
        {
          oprot.writeI32(struct.locationIdSet.size());
          for (int _iter62 : struct.locationIdSet)
          {
            oprot.writeI32(_iter62);
          }
        }
      }
      if (struct.isSetCircleIdSet()) {
        {
          oprot.writeI32(struct.circleIdSet.size());
          for (int _iter63 : struct.circleIdSet)
          {
            oprot.writeI32(_iter63);
          }
        }
      }
      if (struct.isSetPartnerIdSet()) {
        {
          oprot.writeI32(struct.partnerIdSet.size());
          for (int _iter64 : struct.partnerIdSet)
          {
            oprot.writeI32(_iter64);
          }
        }
      }
      if (struct.isSetStatusSet()) {
        {
          oprot.writeI32(struct.statusSet.size());
          for (int _iter65 : struct.statusSet)
          {
            oprot.writeI32(_iter65);
          }
        }
      }
      if (struct.isSetPriceStart()) {
        oprot.writeDouble(struct.priceStart);
      }
      if (struct.isSetPriceEnd()) {
        oprot.writeDouble(struct.priceEnd);
      }
      if (struct.isSetOriginalPriceStart()) {
        oprot.writeDouble(struct.originalPriceStart);
      }
      if (struct.isSetOriginalPriceEnd()) {
        oprot.writeDouble(struct.originalPriceEnd);
      }
      if (struct.isSetCashbackStart()) {
        oprot.writeDouble(struct.cashbackStart);
      }
      if (struct.isSetCashbackEnd()) {
        oprot.writeDouble(struct.cashbackEnd);
      }
      if (struct.isSetPopularityStart()) {
        oprot.writeI32(struct.popularityStart);
      }
      if (struct.isSetPopularityEnd()) {
        oprot.writeI32(struct.popularityEnd);
      }
      if (struct.isSetPopularitySet()) {
        {
          oprot.writeI32(struct.popularitySet.size());
          for (int _iter66 : struct.popularitySet)
          {
            oprot.writeI32(_iter66);
          }
        }
      }
      if (struct.isSetCourseHourNumStart()) {
        oprot.writeI32(struct.courseHourNumStart);
      }
      if (struct.isSetCourseHourNumEnd()) {
        oprot.writeI32(struct.courseHourNumEnd);
      }
      if (struct.isSetCourseHourNumSet()) {
        {
          oprot.writeI32(struct.courseHourNumSet.size());
          for (int _iter67 : struct.courseHourNumSet)
          {
            oprot.writeI32(_iter67);
          }
        }
      }
      if (struct.isSetStartDateStart()) {
        oprot.writeI64(struct.startDateStart);
      }
      if (struct.isSetStartDateEnd()) {
        oprot.writeI64(struct.startDateEnd);
      }
      if (struct.isSetFinishDateStart()) {
        oprot.writeI64(struct.finishDateStart);
      }
      if (struct.isSetFinishDateEnd()) {
        oprot.writeI64(struct.finishDateEnd);
      }
      if (struct.isSetCutoffDateStart()) {
        oprot.writeI64(struct.cutoffDateStart);
      }
      if (struct.isSetCutoffDateEnd()) {
        oprot.writeI64(struct.cutoffDateEnd);
      }
      if (struct.isSetClassTypeSet()) {
        {
          oprot.writeI32(struct.classTypeSet.size());
          for (int _iter68 : struct.classTypeSet)
          {
            oprot.writeI32(_iter68);
          }
        }
      }
      if (struct.isSetDiscountStart()) {
        oprot.writeDouble(struct.discountStart);
      }
      if (struct.isSetDiscountEnd()) {
        oprot.writeDouble(struct.discountEnd);
      }
      if (struct.isSetRatingStart()) {
        oprot.writeDouble(struct.ratingStart);
      }
      if (struct.isSetRatingEnd()) {
        oprot.writeDouble(struct.ratingEnd);
      }
      if (struct.isSetBookingTotalStart()) {
        oprot.writeI32(struct.bookingTotalStart);
      }
      if (struct.isSetBookingTotalEnd()) {
        oprot.writeI32(struct.bookingTotalEnd);
      }
      if (struct.isSetBookingTotalSet()) {
        {
          oprot.writeI32(struct.bookingTotalSet.size());
          for (int _iter69 : struct.bookingTotalSet)
          {
            oprot.writeI32(_iter69);
          }
        }
      }
      if (struct.isSetSchooltimeDaySet()) {
        {
          oprot.writeI32(struct.schooltimeDaySet.size());
          for (int _iter70 : struct.schooltimeDaySet)
          {
            oprot.writeI32(_iter70);
          }
        }
      }
      if (struct.isSetSchooltimeWeekSet()) {
        {
          oprot.writeI32(struct.schooltimeWeekSet.size());
          for (int _iter71 : struct.schooltimeWeekSet)
          {
            oprot.writeI32(_iter71);
          }
        }
      }
      if (struct.isSetTeacherList()) {
        {
          oprot.writeI32(struct.teacherList.size());
          for (com.ishangke.edunav.commoncontract.model.TeacherBo _iter72 : struct.teacherList)
          {
            _iter72.write(oprot);
          }
        }
      }
      if (struct.isSetClassPhotoList()) {
        {
          oprot.writeI32(struct.classPhotoList.size());
          for (com.ishangke.edunav.commoncontract.model.ClassPhotoBo _iter73 : struct.classPhotoList)
          {
            _iter73.write(oprot);
          }
        }
      }
      if (struct.isSetLogoUrl()) {
        oprot.writeString(struct.logoUrl);
      }
      if (struct.isSetWholeName()) {
        oprot.writeString(struct.wholeName);
      }
      if (struct.isSetInstName()) {
        oprot.writeString(struct.instName);
      }
      if (struct.isSetPartnerIntro()) {
        oprot.writeString(struct.partnerIntro);
      }
      if (struct.isSetPartnerQualification()) {
        oprot.writeI32(struct.partnerQualification);
      }
      if (struct.isSetPartnerDistinction()) {
        oprot.writeString(struct.partnerDistinction);
      }
      if (struct.isSetPartnerRating()) {
        oprot.writeDouble(struct.partnerRating);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetAddressLat()) {
        oprot.writeDouble(struct.addressLat);
      }
      if (struct.isSetAddressLng()) {
        oprot.writeDouble(struct.addressLng);
      }
      if (struct.isSetCategoryValue()) {
        oprot.writeString(struct.categoryValue);
      }
      if (struct.isSetCategoryName()) {
        oprot.writeString(struct.categoryName);
      }
      if (struct.isSetCategoryRank()) {
        oprot.writeI32(struct.categoryRank);
      }
      if (struct.isSetLocationValue()) {
        oprot.writeString(struct.locationValue);
      }
      if (struct.isSetLocationName()) {
        oprot.writeString(struct.locationName);
      }
      if (struct.isSetCircleValue()) {
        oprot.writeString(struct.circleValue);
      }
      if (struct.isSetCircleName()) {
        oprot.writeString(struct.circleName);
      }
      if (struct.isSetRating()) {
        oprot.writeDouble(struct.rating);
      }
      if (struct.isSetBookingTotal()) {
        oprot.writeI32(struct.bookingTotal);
      }
      if (struct.isSetNoRefundDateStart()) {
        oprot.writeI64(struct.noRefundDateStart);
      }
      if (struct.isSetNoRefundDateEnd()) {
        oprot.writeI64(struct.noRefundDateEnd);
      }
      if (struct.isSetCashbackDateStart()) {
        oprot.writeI64(struct.cashbackDateStart);
      }
      if (struct.isSetCashbackDateEnd()) {
        oprot.writeI64(struct.cashbackDateEnd);
      }
      if (struct.isSetCourseTemplateIdSet()) {
        {
          oprot.writeI32(struct.courseTemplateIdSet.size());
          for (int _iter74 : struct.courseTemplateIdSet)
          {
            oprot.writeI32(_iter74);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CourseBo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(129);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.courseName = iprot.readString();
        struct.setCourseNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.courseTemplateId = iprot.readI32();
        struct.setCourseTemplateIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.categoryId = iprot.readI32();
        struct.setCategoryIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.locationId = iprot.readI32();
        struct.setLocationIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.circleId = iprot.readI32();
        struct.setCircleIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.partnerId = iprot.readI32();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.addressId = iprot.readI32();
        struct.setAddressIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.originalPrice = iprot.readDouble();
        struct.setOriginalPriceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cashback = iprot.readDouble();
        struct.setCashbackIsSet(true);
      }
      if (incoming.get(11)) {
        struct.commission = iprot.readDouble();
        struct.setCommissionIsSet(true);
      }
      if (incoming.get(12)) {
        struct.serviceCharge = iprot.readDouble();
        struct.setServiceChargeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(14)) {
        struct.lastModifyTime = iprot.readI64();
        struct.setLastModifyTimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.enabled = iprot.readI32();
        struct.setEnabledIsSet(true);
      }
      if (incoming.get(17)) {
        struct.courseHourLength = iprot.readI32();
        struct.setCourseHourLengthIsSet(true);
      }
      if (incoming.get(18)) {
        struct.teachingMethod = iprot.readString();
        struct.setTeachingMethodIsSet(true);
      }
      if (incoming.get(19)) {
        struct.teachingMaterialFee = iprot.readString();
        struct.setTeachingMaterialFeeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.downloadMaterials = iprot.readString();
        struct.setDownloadMaterialsIsSet(true);
      }
      if (incoming.get(21)) {
        struct.bonusService = iprot.readString();
        struct.setBonusServiceIsSet(true);
      }
      if (incoming.get(22)) {
        struct.marking = iprot.readString();
        struct.setMarkingIsSet(true);
      }
      if (incoming.get(23)) {
        struct.assignments = iprot.readString();
        struct.setAssignmentsIsSet(true);
      }
      if (incoming.get(24)) {
        struct.trail = iprot.readString();
        struct.setTrailIsSet(true);
      }
      if (incoming.get(25)) {
        struct.questionSession = iprot.readString();
        struct.setQuestionSessionIsSet(true);
      }
      if (incoming.get(26)) {
        struct.teachingAndExercise = iprot.readString();
        struct.setTeachingAndExerciseIsSet(true);
      }
      if (incoming.get(27)) {
        struct.classTeacher = iprot.readString();
        struct.setClassTeacherIsSet(true);
      }
      if (incoming.get(28)) {
        struct.goal = iprot.readString();
        struct.setGoalIsSet(true);
      }
      if (incoming.get(29)) {
        struct.outline = iprot.readString();
        struct.setOutlineIsSet(true);
      }
      if (incoming.get(30)) {
        struct.regPhone = iprot.readString();
        struct.setRegPhoneIsSet(true);
      }
      if (incoming.get(31)) {
        struct.contact = iprot.readString();
        struct.setContactIsSet(true);
      }
      if (incoming.get(32)) {
        struct.extracurricular = iprot.readString();
        struct.setExtracurricularIsSet(true);
      }
      if (incoming.get(33)) {
        struct.passAgreement = iprot.readString();
        struct.setPassAgreementIsSet(true);
      }
      if (incoming.get(34)) {
        struct.qualityAssurance = iprot.readString();
        struct.setQualityAssuranceIsSet(true);
      }
      if (incoming.get(35)) {
        struct.questionBank = iprot.readString();
        struct.setQuestionBankIsSet(true);
      }
      if (incoming.get(36)) {
        struct.teachingMaterialIntro = iprot.readString();
        struct.setTeachingMaterialIntroIsSet(true);
      }
      if (incoming.get(37)) {
        struct.studyDayNote = iprot.readString();
        struct.setStudyDayNoteIsSet(true);
      }
      if (incoming.get(38)) {
        struct.highScoreReward = iprot.readString();
        struct.setHighScoreRewardIsSet(true);
      }
      if (incoming.get(39)) {
        struct.prerequest = iprot.readString();
        struct.setPrerequestIsSet(true);
      }
      if (incoming.get(40)) {
        struct.suitableStudent = iprot.readString();
        struct.setSuitableStudentIsSet(true);
      }
      if (incoming.get(41)) {
        struct.openCourseRequirement = iprot.readString();
        struct.setOpenCourseRequirementIsSet(true);
      }
      if (incoming.get(42)) {
        struct.certification = iprot.readString();
        struct.setCertificationIsSet(true);
      }
      if (incoming.get(43)) {
        struct.quiz = iprot.readString();
        struct.setQuizIsSet(true);
      }
      if (incoming.get(44)) {
        struct.courseIntro = iprot.readString();
        struct.setCourseIntroIsSet(true);
      }
      if (incoming.get(45)) {
        struct.reference = iprot.readString();
        struct.setReferenceIsSet(true);
      }
      if (incoming.get(46)) {
        struct.regLocation = iprot.readString();
        struct.setRegLocationIsSet(true);
      }
      if (incoming.get(47)) {
        struct.finishTime2 = iprot.readI32();
        struct.setFinishTime2IsSet(true);
      }
      if (incoming.get(48)) {
        struct.startTime2 = iprot.readI32();
        struct.setStartTime2IsSet(true);
      }
      if (incoming.get(49)) {
        struct.finishTime1 = iprot.readI32();
        struct.setFinishTime1IsSet(true);
      }
      if (incoming.get(50)) {
        struct.startTime1 = iprot.readI32();
        struct.setStartTime1IsSet(true);
      }
      if (incoming.get(51)) {
        struct.startUponArrival = iprot.readI32();
        struct.setStartUponArrivalIsSet(true);
      }
      if (incoming.get(52)) {
        struct.bookingType = iprot.readI32();
        struct.setBookingTypeIsSet(true);
      }
      if (incoming.get(53)) {
        struct.cashbackDate = iprot.readI64();
        struct.setCashbackDateIsSet(true);
      }
      if (incoming.get(54)) {
        struct.noRefundDate = iprot.readI64();
        struct.setNoRefundDateIsSet(true);
      }
      if (incoming.get(55)) {
        struct.cutoffDate = iprot.readI64();
        struct.setCutoffDateIsSet(true);
      }
      if (incoming.get(56)) {
        struct.finishDate = iprot.readI64();
        struct.setFinishDateIsSet(true);
      }
      if (incoming.get(57)) {
        struct.startDate = iprot.readI64();
        struct.setStartDateIsSet(true);
      }
      if (incoming.get(58)) {
        struct.popularity = iprot.readI32();
        struct.setPopularityIsSet(true);
      }
      if (incoming.get(59)) {
        struct.courseHourNum = iprot.readI32();
        struct.setCourseHourNumIsSet(true);
      }
      if (incoming.get(60)) {
        struct.classSize = iprot.readString();
        struct.setClassSizeIsSet(true);
      }
      if (incoming.get(61)) {
        struct.classType = iprot.readI32();
        struct.setClassTypeIsSet(true);
      }
      if (incoming.get(62)) {
        struct.discount = iprot.readDouble();
        struct.setDiscountIsSet(true);
      }
      if (incoming.get(63)) {
        struct.schooltimeDay = iprot.readI32();
        struct.setSchooltimeDayIsSet(true);
      }
      if (incoming.get(64)) {
        struct.schooltimeWeek = iprot.readI32();
        struct.setSchooltimeWeekIsSet(true);
      }
      if (incoming.get(65)) {
        {
          org.apache.thrift.protocol.TSet _set75 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.idSet = new HashSet<Integer>(2*_set75.size);
          for (int _i76 = 0; _i76 < _set75.size; ++_i76)
          {
            int _elem77;
            _elem77 = iprot.readI32();
            struct.idSet.add(_elem77);
          }
        }
        struct.setIdSetIsSet(true);
      }
      if (incoming.get(66)) {
        struct.lastModifyTimeStart = iprot.readI64();
        struct.setLastModifyTimeStartIsSet(true);
      }
      if (incoming.get(67)) {
        struct.lastModifyTimeEnd = iprot.readI64();
        struct.setLastModifyTimeEndIsSet(true);
      }
      if (incoming.get(68)) {
        struct.createTimeStart = iprot.readI64();
        struct.setCreateTimeStartIsSet(true);
      }
      if (incoming.get(69)) {
        struct.createTimeEnd = iprot.readI64();
        struct.setCreateTimeEndIsSet(true);
      }
      if (incoming.get(70)) {
        {
          org.apache.thrift.protocol.TSet _set78 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.categoryIdSet = new HashSet<Integer>(2*_set78.size);
          for (int _i79 = 0; _i79 < _set78.size; ++_i79)
          {
            int _elem80;
            _elem80 = iprot.readI32();
            struct.categoryIdSet.add(_elem80);
          }
        }
        struct.setCategoryIdSetIsSet(true);
      }
      if (incoming.get(71)) {
        {
          org.apache.thrift.protocol.TSet _set81 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.locationIdSet = new HashSet<Integer>(2*_set81.size);
          for (int _i82 = 0; _i82 < _set81.size; ++_i82)
          {
            int _elem83;
            _elem83 = iprot.readI32();
            struct.locationIdSet.add(_elem83);
          }
        }
        struct.setLocationIdSetIsSet(true);
      }
      if (incoming.get(72)) {
        {
          org.apache.thrift.protocol.TSet _set84 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.circleIdSet = new HashSet<Integer>(2*_set84.size);
          for (int _i85 = 0; _i85 < _set84.size; ++_i85)
          {
            int _elem86;
            _elem86 = iprot.readI32();
            struct.circleIdSet.add(_elem86);
          }
        }
        struct.setCircleIdSetIsSet(true);
      }
      if (incoming.get(73)) {
        {
          org.apache.thrift.protocol.TSet _set87 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.partnerIdSet = new HashSet<Integer>(2*_set87.size);
          for (int _i88 = 0; _i88 < _set87.size; ++_i88)
          {
            int _elem89;
            _elem89 = iprot.readI32();
            struct.partnerIdSet.add(_elem89);
          }
        }
        struct.setPartnerIdSetIsSet(true);
      }
      if (incoming.get(74)) {
        {
          org.apache.thrift.protocol.TSet _set90 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.statusSet = new HashSet<Integer>(2*_set90.size);
          for (int _i91 = 0; _i91 < _set90.size; ++_i91)
          {
            int _elem92;
            _elem92 = iprot.readI32();
            struct.statusSet.add(_elem92);
          }
        }
        struct.setStatusSetIsSet(true);
      }
      if (incoming.get(75)) {
        struct.priceStart = iprot.readDouble();
        struct.setPriceStartIsSet(true);
      }
      if (incoming.get(76)) {
        struct.priceEnd = iprot.readDouble();
        struct.setPriceEndIsSet(true);
      }
      if (incoming.get(77)) {
        struct.originalPriceStart = iprot.readDouble();
        struct.setOriginalPriceStartIsSet(true);
      }
      if (incoming.get(78)) {
        struct.originalPriceEnd = iprot.readDouble();
        struct.setOriginalPriceEndIsSet(true);
      }
      if (incoming.get(79)) {
        struct.cashbackStart = iprot.readDouble();
        struct.setCashbackStartIsSet(true);
      }
      if (incoming.get(80)) {
        struct.cashbackEnd = iprot.readDouble();
        struct.setCashbackEndIsSet(true);
      }
      if (incoming.get(81)) {
        struct.popularityStart = iprot.readI32();
        struct.setPopularityStartIsSet(true);
      }
      if (incoming.get(82)) {
        struct.popularityEnd = iprot.readI32();
        struct.setPopularityEndIsSet(true);
      }
      if (incoming.get(83)) {
        {
          org.apache.thrift.protocol.TSet _set93 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.popularitySet = new HashSet<Integer>(2*_set93.size);
          for (int _i94 = 0; _i94 < _set93.size; ++_i94)
          {
            int _elem95;
            _elem95 = iprot.readI32();
            struct.popularitySet.add(_elem95);
          }
        }
        struct.setPopularitySetIsSet(true);
      }
      if (incoming.get(84)) {
        struct.courseHourNumStart = iprot.readI32();
        struct.setCourseHourNumStartIsSet(true);
      }
      if (incoming.get(85)) {
        struct.courseHourNumEnd = iprot.readI32();
        struct.setCourseHourNumEndIsSet(true);
      }
      if (incoming.get(86)) {
        {
          org.apache.thrift.protocol.TSet _set96 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.courseHourNumSet = new HashSet<Integer>(2*_set96.size);
          for (int _i97 = 0; _i97 < _set96.size; ++_i97)
          {
            int _elem98;
            _elem98 = iprot.readI32();
            struct.courseHourNumSet.add(_elem98);
          }
        }
        struct.setCourseHourNumSetIsSet(true);
      }
      if (incoming.get(87)) {
        struct.startDateStart = iprot.readI64();
        struct.setStartDateStartIsSet(true);
      }
      if (incoming.get(88)) {
        struct.startDateEnd = iprot.readI64();
        struct.setStartDateEndIsSet(true);
      }
      if (incoming.get(89)) {
        struct.finishDateStart = iprot.readI64();
        struct.setFinishDateStartIsSet(true);
      }
      if (incoming.get(90)) {
        struct.finishDateEnd = iprot.readI64();
        struct.setFinishDateEndIsSet(true);
      }
      if (incoming.get(91)) {
        struct.cutoffDateStart = iprot.readI64();
        struct.setCutoffDateStartIsSet(true);
      }
      if (incoming.get(92)) {
        struct.cutoffDateEnd = iprot.readI64();
        struct.setCutoffDateEndIsSet(true);
      }
      if (incoming.get(93)) {
        {
          org.apache.thrift.protocol.TSet _set99 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.classTypeSet = new HashSet<Integer>(2*_set99.size);
          for (int _i100 = 0; _i100 < _set99.size; ++_i100)
          {
            int _elem101;
            _elem101 = iprot.readI32();
            struct.classTypeSet.add(_elem101);
          }
        }
        struct.setClassTypeSetIsSet(true);
      }
      if (incoming.get(94)) {
        struct.discountStart = iprot.readDouble();
        struct.setDiscountStartIsSet(true);
      }
      if (incoming.get(95)) {
        struct.discountEnd = iprot.readDouble();
        struct.setDiscountEndIsSet(true);
      }
      if (incoming.get(96)) {
        struct.ratingStart = iprot.readDouble();
        struct.setRatingStartIsSet(true);
      }
      if (incoming.get(97)) {
        struct.ratingEnd = iprot.readDouble();
        struct.setRatingEndIsSet(true);
      }
      if (incoming.get(98)) {
        struct.bookingTotalStart = iprot.readI32();
        struct.setBookingTotalStartIsSet(true);
      }
      if (incoming.get(99)) {
        struct.bookingTotalEnd = iprot.readI32();
        struct.setBookingTotalEndIsSet(true);
      }
      if (incoming.get(100)) {
        {
          org.apache.thrift.protocol.TSet _set102 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.bookingTotalSet = new HashSet<Integer>(2*_set102.size);
          for (int _i103 = 0; _i103 < _set102.size; ++_i103)
          {
            int _elem104;
            _elem104 = iprot.readI32();
            struct.bookingTotalSet.add(_elem104);
          }
        }
        struct.setBookingTotalSetIsSet(true);
      }
      if (incoming.get(101)) {
        {
          org.apache.thrift.protocol.TSet _set105 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.schooltimeDaySet = new HashSet<Integer>(2*_set105.size);
          for (int _i106 = 0; _i106 < _set105.size; ++_i106)
          {
            int _elem107;
            _elem107 = iprot.readI32();
            struct.schooltimeDaySet.add(_elem107);
          }
        }
        struct.setSchooltimeDaySetIsSet(true);
      }
      if (incoming.get(102)) {
        {
          org.apache.thrift.protocol.TSet _set108 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.schooltimeWeekSet = new HashSet<Integer>(2*_set108.size);
          for (int _i109 = 0; _i109 < _set108.size; ++_i109)
          {
            int _elem110;
            _elem110 = iprot.readI32();
            struct.schooltimeWeekSet.add(_elem110);
          }
        }
        struct.setSchooltimeWeekSetIsSet(true);
      }
      if (incoming.get(103)) {
        {
          org.apache.thrift.protocol.TList _list111 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.teacherList = new ArrayList<com.ishangke.edunav.commoncontract.model.TeacherBo>(_list111.size);
          for (int _i112 = 0; _i112 < _list111.size; ++_i112)
          {
            com.ishangke.edunav.commoncontract.model.TeacherBo _elem113;
            _elem113 = new com.ishangke.edunav.commoncontract.model.TeacherBo();
            _elem113.read(iprot);
            struct.teacherList.add(_elem113);
          }
        }
        struct.setTeacherListIsSet(true);
      }
      if (incoming.get(104)) {
        {
          org.apache.thrift.protocol.TList _list114 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.classPhotoList = new ArrayList<com.ishangke.edunav.commoncontract.model.ClassPhotoBo>(_list114.size);
          for (int _i115 = 0; _i115 < _list114.size; ++_i115)
          {
            com.ishangke.edunav.commoncontract.model.ClassPhotoBo _elem116;
            _elem116 = new com.ishangke.edunav.commoncontract.model.ClassPhotoBo();
            _elem116.read(iprot);
            struct.classPhotoList.add(_elem116);
          }
        }
        struct.setClassPhotoListIsSet(true);
      }
      if (incoming.get(105)) {
        struct.logoUrl = iprot.readString();
        struct.setLogoUrlIsSet(true);
      }
      if (incoming.get(106)) {
        struct.wholeName = iprot.readString();
        struct.setWholeNameIsSet(true);
      }
      if (incoming.get(107)) {
        struct.instName = iprot.readString();
        struct.setInstNameIsSet(true);
      }
      if (incoming.get(108)) {
        struct.partnerIntro = iprot.readString();
        struct.setPartnerIntroIsSet(true);
      }
      if (incoming.get(109)) {
        struct.partnerQualification = iprot.readI32();
        struct.setPartnerQualificationIsSet(true);
      }
      if (incoming.get(110)) {
        struct.partnerDistinction = iprot.readString();
        struct.setPartnerDistinctionIsSet(true);
      }
      if (incoming.get(111)) {
        struct.partnerRating = iprot.readDouble();
        struct.setPartnerRatingIsSet(true);
      }
      if (incoming.get(112)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(113)) {
        struct.addressLat = iprot.readDouble();
        struct.setAddressLatIsSet(true);
      }
      if (incoming.get(114)) {
        struct.addressLng = iprot.readDouble();
        struct.setAddressLngIsSet(true);
      }
      if (incoming.get(115)) {
        struct.categoryValue = iprot.readString();
        struct.setCategoryValueIsSet(true);
      }
      if (incoming.get(116)) {
        struct.categoryName = iprot.readString();
        struct.setCategoryNameIsSet(true);
      }
      if (incoming.get(117)) {
        struct.categoryRank = iprot.readI32();
        struct.setCategoryRankIsSet(true);
      }
      if (incoming.get(118)) {
        struct.locationValue = iprot.readString();
        struct.setLocationValueIsSet(true);
      }
      if (incoming.get(119)) {
        struct.locationName = iprot.readString();
        struct.setLocationNameIsSet(true);
      }
      if (incoming.get(120)) {
        struct.circleValue = iprot.readString();
        struct.setCircleValueIsSet(true);
      }
      if (incoming.get(121)) {
        struct.circleName = iprot.readString();
        struct.setCircleNameIsSet(true);
      }
      if (incoming.get(122)) {
        struct.rating = iprot.readDouble();
        struct.setRatingIsSet(true);
      }
      if (incoming.get(123)) {
        struct.bookingTotal = iprot.readI32();
        struct.setBookingTotalIsSet(true);
      }
      if (incoming.get(124)) {
        struct.noRefundDateStart = iprot.readI64();
        struct.setNoRefundDateStartIsSet(true);
      }
      if (incoming.get(125)) {
        struct.noRefundDateEnd = iprot.readI64();
        struct.setNoRefundDateEndIsSet(true);
      }
      if (incoming.get(126)) {
        struct.cashbackDateStart = iprot.readI64();
        struct.setCashbackDateStartIsSet(true);
      }
      if (incoming.get(127)) {
        struct.cashbackDateEnd = iprot.readI64();
        struct.setCashbackDateEndIsSet(true);
      }
      if (incoming.get(128)) {
        {
          org.apache.thrift.protocol.TSet _set117 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.courseTemplateIdSet = new HashSet<Integer>(2*_set117.size);
          for (int _i118 = 0; _i118 < _set117.size; ++_i118)
          {
            int _elem119;
            _elem119 = iprot.readI32();
            struct.courseTemplateIdSet.add(_elem119);
          }
        }
        struct.setCourseTemplateIdSetIsSet(true);
      }
    }
  }

}

