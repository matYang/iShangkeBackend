/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ishangke.edunav.commoncontract.model;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MessageBo implements org.apache.thrift.TBase<MessageBo, MessageBo._Fields>, java.io.Serializable, Cloneable, Comparable<MessageBo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageBo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("messageText", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_FROM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userFromId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField USER_TO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userToId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField READ_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("readTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("idSet", org.apache.thrift.protocol.TType.SET, (short)8);
  private static final org.apache.thrift.protocol.TField USER_FROM_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("userFromIdSet", org.apache.thrift.protocol.TType.SET, (short)9);
  private static final org.apache.thrift.protocol.TField USER_TO_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("userToIdSet", org.apache.thrift.protocol.TType.SET, (short)10);
  private static final org.apache.thrift.protocol.TField STATUS_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("statusSet", org.apache.thrift.protocol.TType.SET, (short)11);
  private static final org.apache.thrift.protocol.TField READ_TIME_START_FIELD_DESC = new org.apache.thrift.protocol.TField("readTimeStart", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField READ_TIME_END_FIELD_DESC = new org.apache.thrift.protocol.TField("readTimeEnd", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_START_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimeStart", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_END_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimeEnd", org.apache.thrift.protocol.TType.I64, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessageBoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MessageBoTupleSchemeFactory());
  }

  public int id; // required
  public String messageText; // required
  public int userFromId; // required
  public int userToId; // required
  public int status; // required
  public long readTime; // required
  public long createTime; // required
  public Set<Integer> idSet; // required
  public Set<Integer> userFromIdSet; // required
  public Set<Integer> userToIdSet; // required
  public Set<Integer> statusSet; // required
  public long readTimeStart; // required
  public long readTimeEnd; // required
  public long createTimeStart; // required
  public long createTimeEnd; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    MESSAGE_TEXT((short)2, "messageText"),
    USER_FROM_ID((short)3, "userFromId"),
    USER_TO_ID((short)4, "userToId"),
    STATUS((short)5, "status"),
    READ_TIME((short)6, "readTime"),
    CREATE_TIME((short)7, "createTime"),
    ID_SET((short)8, "idSet"),
    USER_FROM_ID_SET((short)9, "userFromIdSet"),
    USER_TO_ID_SET((short)10, "userToIdSet"),
    STATUS_SET((short)11, "statusSet"),
    READ_TIME_START((short)12, "readTimeStart"),
    READ_TIME_END((short)13, "readTimeEnd"),
    CREATE_TIME_START((short)14, "createTimeStart"),
    CREATE_TIME_END((short)15, "createTimeEnd");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MESSAGE_TEXT
          return MESSAGE_TEXT;
        case 3: // USER_FROM_ID
          return USER_FROM_ID;
        case 4: // USER_TO_ID
          return USER_TO_ID;
        case 5: // STATUS
          return STATUS;
        case 6: // READ_TIME
          return READ_TIME;
        case 7: // CREATE_TIME
          return CREATE_TIME;
        case 8: // ID_SET
          return ID_SET;
        case 9: // USER_FROM_ID_SET
          return USER_FROM_ID_SET;
        case 10: // USER_TO_ID_SET
          return USER_TO_ID_SET;
        case 11: // STATUS_SET
          return STATUS_SET;
        case 12: // READ_TIME_START
          return READ_TIME_START;
        case 13: // READ_TIME_END
          return READ_TIME_END;
        case 14: // CREATE_TIME_START
          return CREATE_TIME_START;
        case 15: // CREATE_TIME_END
          return CREATE_TIME_END;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __USERFROMID_ISSET_ID = 1;
  private static final int __USERTOID_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __READTIME_ISSET_ID = 4;
  private static final int __CREATETIME_ISSET_ID = 5;
  private static final int __READTIMESTART_ISSET_ID = 6;
  private static final int __READTIMEEND_ISSET_ID = 7;
  private static final int __CREATETIMESTART_ISSET_ID = 8;
  private static final int __CREATETIMEEND_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MESSAGE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("messageText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_FROM_ID, new org.apache.thrift.meta_data.FieldMetaData("userFromId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_TO_ID, new org.apache.thrift.meta_data.FieldMetaData("userToId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.READ_TIME, new org.apache.thrift.meta_data.FieldMetaData("readTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ID_SET, new org.apache.thrift.meta_data.FieldMetaData("idSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.USER_FROM_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("userFromIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.USER_TO_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("userToIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.STATUS_SET, new org.apache.thrift.meta_data.FieldMetaData("statusSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.READ_TIME_START, new org.apache.thrift.meta_data.FieldMetaData("readTimeStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.READ_TIME_END, new org.apache.thrift.meta_data.FieldMetaData("readTimeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME_START, new org.apache.thrift.meta_data.FieldMetaData("createTimeStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME_END, new org.apache.thrift.meta_data.FieldMetaData("createTimeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageBo.class, metaDataMap);
  }

  public MessageBo() {
  }

  public MessageBo(
    int id,
    String messageText,
    int userFromId,
    int userToId,
    int status,
    long readTime,
    long createTime,
    Set<Integer> idSet,
    Set<Integer> userFromIdSet,
    Set<Integer> userToIdSet,
    Set<Integer> statusSet,
    long readTimeStart,
    long readTimeEnd,
    long createTimeStart,
    long createTimeEnd)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.messageText = messageText;
    this.userFromId = userFromId;
    setUserFromIdIsSet(true);
    this.userToId = userToId;
    setUserToIdIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.readTime = readTime;
    setReadTimeIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.idSet = idSet;
    this.userFromIdSet = userFromIdSet;
    this.userToIdSet = userToIdSet;
    this.statusSet = statusSet;
    this.readTimeStart = readTimeStart;
    setReadTimeStartIsSet(true);
    this.readTimeEnd = readTimeEnd;
    setReadTimeEndIsSet(true);
    this.createTimeStart = createTimeStart;
    setCreateTimeStartIsSet(true);
    this.createTimeEnd = createTimeEnd;
    setCreateTimeEndIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessageBo(MessageBo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetMessageText()) {
      this.messageText = other.messageText;
    }
    this.userFromId = other.userFromId;
    this.userToId = other.userToId;
    this.status = other.status;
    this.readTime = other.readTime;
    this.createTime = other.createTime;
    if (other.isSetIdSet()) {
      Set<Integer> __this__idSet = new HashSet<Integer>(other.idSet);
      this.idSet = __this__idSet;
    }
    if (other.isSetUserFromIdSet()) {
      Set<Integer> __this__userFromIdSet = new HashSet<Integer>(other.userFromIdSet);
      this.userFromIdSet = __this__userFromIdSet;
    }
    if (other.isSetUserToIdSet()) {
      Set<Integer> __this__userToIdSet = new HashSet<Integer>(other.userToIdSet);
      this.userToIdSet = __this__userToIdSet;
    }
    if (other.isSetStatusSet()) {
      Set<Integer> __this__statusSet = new HashSet<Integer>(other.statusSet);
      this.statusSet = __this__statusSet;
    }
    this.readTimeStart = other.readTimeStart;
    this.readTimeEnd = other.readTimeEnd;
    this.createTimeStart = other.createTimeStart;
    this.createTimeEnd = other.createTimeEnd;
  }

  public MessageBo deepCopy() {
    return new MessageBo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.messageText = null;
    setUserFromIdIsSet(false);
    this.userFromId = 0;
    setUserToIdIsSet(false);
    this.userToId = 0;
    setStatusIsSet(false);
    this.status = 0;
    setReadTimeIsSet(false);
    this.readTime = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    this.idSet = null;
    this.userFromIdSet = null;
    this.userToIdSet = null;
    this.statusSet = null;
    setReadTimeStartIsSet(false);
    this.readTimeStart = 0;
    setReadTimeEndIsSet(false);
    this.readTimeEnd = 0;
    setCreateTimeStartIsSet(false);
    this.createTimeStart = 0;
    setCreateTimeEndIsSet(false);
    this.createTimeEnd = 0;
  }

  public int getId() {
    return this.id;
  }

  public MessageBo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getMessageText() {
    return this.messageText;
  }

  public MessageBo setMessageText(String messageText) {
    this.messageText = messageText;
    return this;
  }

  public void unsetMessageText() {
    this.messageText = null;
  }

  /** Returns true if field messageText is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageText() {
    return this.messageText != null;
  }

  public void setMessageTextIsSet(boolean value) {
    if (!value) {
      this.messageText = null;
    }
  }

  public int getUserFromId() {
    return this.userFromId;
  }

  public MessageBo setUserFromId(int userFromId) {
    this.userFromId = userFromId;
    setUserFromIdIsSet(true);
    return this;
  }

  public void unsetUserFromId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERFROMID_ISSET_ID);
  }

  /** Returns true if field userFromId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserFromId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERFROMID_ISSET_ID);
  }

  public void setUserFromIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERFROMID_ISSET_ID, value);
  }

  public int getUserToId() {
    return this.userToId;
  }

  public MessageBo setUserToId(int userToId) {
    this.userToId = userToId;
    setUserToIdIsSet(true);
    return this;
  }

  public void unsetUserToId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERTOID_ISSET_ID);
  }

  /** Returns true if field userToId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserToId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERTOID_ISSET_ID);
  }

  public void setUserToIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERTOID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public MessageBo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public long getReadTime() {
    return this.readTime;
  }

  public MessageBo setReadTime(long readTime) {
    this.readTime = readTime;
    setReadTimeIsSet(true);
    return this;
  }

  public void unsetReadTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READTIME_ISSET_ID);
  }

  /** Returns true if field readTime is set (has been assigned a value) and false otherwise */
  public boolean isSetReadTime() {
    return EncodingUtils.testBit(__isset_bitfield, __READTIME_ISSET_ID);
  }

  public void setReadTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READTIME_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public MessageBo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getIdSetSize() {
    return (this.idSet == null) ? 0 : this.idSet.size();
  }

  public java.util.Iterator<Integer> getIdSetIterator() {
    return (this.idSet == null) ? null : this.idSet.iterator();
  }

  public void addToIdSet(int elem) {
    if (this.idSet == null) {
      this.idSet = new HashSet<Integer>();
    }
    this.idSet.add(elem);
  }

  public Set<Integer> getIdSet() {
    return this.idSet;
  }

  public MessageBo setIdSet(Set<Integer> idSet) {
    this.idSet = idSet;
    return this;
  }

  public void unsetIdSet() {
    this.idSet = null;
  }

  /** Returns true if field idSet is set (has been assigned a value) and false otherwise */
  public boolean isSetIdSet() {
    return this.idSet != null;
  }

  public void setIdSetIsSet(boolean value) {
    if (!value) {
      this.idSet = null;
    }
  }

  public int getUserFromIdSetSize() {
    return (this.userFromIdSet == null) ? 0 : this.userFromIdSet.size();
  }

  public java.util.Iterator<Integer> getUserFromIdSetIterator() {
    return (this.userFromIdSet == null) ? null : this.userFromIdSet.iterator();
  }

  public void addToUserFromIdSet(int elem) {
    if (this.userFromIdSet == null) {
      this.userFromIdSet = new HashSet<Integer>();
    }
    this.userFromIdSet.add(elem);
  }

  public Set<Integer> getUserFromIdSet() {
    return this.userFromIdSet;
  }

  public MessageBo setUserFromIdSet(Set<Integer> userFromIdSet) {
    this.userFromIdSet = userFromIdSet;
    return this;
  }

  public void unsetUserFromIdSet() {
    this.userFromIdSet = null;
  }

  /** Returns true if field userFromIdSet is set (has been assigned a value) and false otherwise */
  public boolean isSetUserFromIdSet() {
    return this.userFromIdSet != null;
  }

  public void setUserFromIdSetIsSet(boolean value) {
    if (!value) {
      this.userFromIdSet = null;
    }
  }

  public int getUserToIdSetSize() {
    return (this.userToIdSet == null) ? 0 : this.userToIdSet.size();
  }

  public java.util.Iterator<Integer> getUserToIdSetIterator() {
    return (this.userToIdSet == null) ? null : this.userToIdSet.iterator();
  }

  public void addToUserToIdSet(int elem) {
    if (this.userToIdSet == null) {
      this.userToIdSet = new HashSet<Integer>();
    }
    this.userToIdSet.add(elem);
  }

  public Set<Integer> getUserToIdSet() {
    return this.userToIdSet;
  }

  public MessageBo setUserToIdSet(Set<Integer> userToIdSet) {
    this.userToIdSet = userToIdSet;
    return this;
  }

  public void unsetUserToIdSet() {
    this.userToIdSet = null;
  }

  /** Returns true if field userToIdSet is set (has been assigned a value) and false otherwise */
  public boolean isSetUserToIdSet() {
    return this.userToIdSet != null;
  }

  public void setUserToIdSetIsSet(boolean value) {
    if (!value) {
      this.userToIdSet = null;
    }
  }

  public int getStatusSetSize() {
    return (this.statusSet == null) ? 0 : this.statusSet.size();
  }

  public java.util.Iterator<Integer> getStatusSetIterator() {
    return (this.statusSet == null) ? null : this.statusSet.iterator();
  }

  public void addToStatusSet(int elem) {
    if (this.statusSet == null) {
      this.statusSet = new HashSet<Integer>();
    }
    this.statusSet.add(elem);
  }

  public Set<Integer> getStatusSet() {
    return this.statusSet;
  }

  public MessageBo setStatusSet(Set<Integer> statusSet) {
    this.statusSet = statusSet;
    return this;
  }

  public void unsetStatusSet() {
    this.statusSet = null;
  }

  /** Returns true if field statusSet is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusSet() {
    return this.statusSet != null;
  }

  public void setStatusSetIsSet(boolean value) {
    if (!value) {
      this.statusSet = null;
    }
  }

  public long getReadTimeStart() {
    return this.readTimeStart;
  }

  public MessageBo setReadTimeStart(long readTimeStart) {
    this.readTimeStart = readTimeStart;
    setReadTimeStartIsSet(true);
    return this;
  }

  public void unsetReadTimeStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READTIMESTART_ISSET_ID);
  }

  /** Returns true if field readTimeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetReadTimeStart() {
    return EncodingUtils.testBit(__isset_bitfield, __READTIMESTART_ISSET_ID);
  }

  public void setReadTimeStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READTIMESTART_ISSET_ID, value);
  }

  public long getReadTimeEnd() {
    return this.readTimeEnd;
  }

  public MessageBo setReadTimeEnd(long readTimeEnd) {
    this.readTimeEnd = readTimeEnd;
    setReadTimeEndIsSet(true);
    return this;
  }

  public void unsetReadTimeEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READTIMEEND_ISSET_ID);
  }

  /** Returns true if field readTimeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetReadTimeEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __READTIMEEND_ISSET_ID);
  }

  public void setReadTimeEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READTIMEEND_ISSET_ID, value);
  }

  public long getCreateTimeStart() {
    return this.createTimeStart;
  }

  public MessageBo setCreateTimeStart(long createTimeStart) {
    this.createTimeStart = createTimeStart;
    setCreateTimeStartIsSet(true);
    return this;
  }

  public void unsetCreateTimeStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTART_ISSET_ID);
  }

  /** Returns true if field createTimeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimeStart() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTART_ISSET_ID);
  }

  public void setCreateTimeStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTART_ISSET_ID, value);
  }

  public long getCreateTimeEnd() {
    return this.createTimeEnd;
  }

  public MessageBo setCreateTimeEnd(long createTimeEnd) {
    this.createTimeEnd = createTimeEnd;
    setCreateTimeEndIsSet(true);
    return this;
  }

  public void unsetCreateTimeEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMEEND_ISSET_ID);
  }

  /** Returns true if field createTimeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimeEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMEEND_ISSET_ID);
  }

  public void setCreateTimeEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMEEND_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case MESSAGE_TEXT:
      if (value == null) {
        unsetMessageText();
      } else {
        setMessageText((String)value);
      }
      break;

    case USER_FROM_ID:
      if (value == null) {
        unsetUserFromId();
      } else {
        setUserFromId((Integer)value);
      }
      break;

    case USER_TO_ID:
      if (value == null) {
        unsetUserToId();
      } else {
        setUserToId((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case READ_TIME:
      if (value == null) {
        unsetReadTime();
      } else {
        setReadTime((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case ID_SET:
      if (value == null) {
        unsetIdSet();
      } else {
        setIdSet((Set<Integer>)value);
      }
      break;

    case USER_FROM_ID_SET:
      if (value == null) {
        unsetUserFromIdSet();
      } else {
        setUserFromIdSet((Set<Integer>)value);
      }
      break;

    case USER_TO_ID_SET:
      if (value == null) {
        unsetUserToIdSet();
      } else {
        setUserToIdSet((Set<Integer>)value);
      }
      break;

    case STATUS_SET:
      if (value == null) {
        unsetStatusSet();
      } else {
        setStatusSet((Set<Integer>)value);
      }
      break;

    case READ_TIME_START:
      if (value == null) {
        unsetReadTimeStart();
      } else {
        setReadTimeStart((Long)value);
      }
      break;

    case READ_TIME_END:
      if (value == null) {
        unsetReadTimeEnd();
      } else {
        setReadTimeEnd((Long)value);
      }
      break;

    case CREATE_TIME_START:
      if (value == null) {
        unsetCreateTimeStart();
      } else {
        setCreateTimeStart((Long)value);
      }
      break;

    case CREATE_TIME_END:
      if (value == null) {
        unsetCreateTimeEnd();
      } else {
        setCreateTimeEnd((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case MESSAGE_TEXT:
      return getMessageText();

    case USER_FROM_ID:
      return Integer.valueOf(getUserFromId());

    case USER_TO_ID:
      return Integer.valueOf(getUserToId());

    case STATUS:
      return Integer.valueOf(getStatus());

    case READ_TIME:
      return Long.valueOf(getReadTime());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case ID_SET:
      return getIdSet();

    case USER_FROM_ID_SET:
      return getUserFromIdSet();

    case USER_TO_ID_SET:
      return getUserToIdSet();

    case STATUS_SET:
      return getStatusSet();

    case READ_TIME_START:
      return Long.valueOf(getReadTimeStart());

    case READ_TIME_END:
      return Long.valueOf(getReadTimeEnd());

    case CREATE_TIME_START:
      return Long.valueOf(getCreateTimeStart());

    case CREATE_TIME_END:
      return Long.valueOf(getCreateTimeEnd());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MESSAGE_TEXT:
      return isSetMessageText();
    case USER_FROM_ID:
      return isSetUserFromId();
    case USER_TO_ID:
      return isSetUserToId();
    case STATUS:
      return isSetStatus();
    case READ_TIME:
      return isSetReadTime();
    case CREATE_TIME:
      return isSetCreateTime();
    case ID_SET:
      return isSetIdSet();
    case USER_FROM_ID_SET:
      return isSetUserFromIdSet();
    case USER_TO_ID_SET:
      return isSetUserToIdSet();
    case STATUS_SET:
      return isSetStatusSet();
    case READ_TIME_START:
      return isSetReadTimeStart();
    case READ_TIME_END:
      return isSetReadTimeEnd();
    case CREATE_TIME_START:
      return isSetCreateTimeStart();
    case CREATE_TIME_END:
      return isSetCreateTimeEnd();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MessageBo)
      return this.equals((MessageBo)that);
    return false;
  }

  public boolean equals(MessageBo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_messageText = true && this.isSetMessageText();
    boolean that_present_messageText = true && that.isSetMessageText();
    if (this_present_messageText || that_present_messageText) {
      if (!(this_present_messageText && that_present_messageText))
        return false;
      if (!this.messageText.equals(that.messageText))
        return false;
    }

    boolean this_present_userFromId = true;
    boolean that_present_userFromId = true;
    if (this_present_userFromId || that_present_userFromId) {
      if (!(this_present_userFromId && that_present_userFromId))
        return false;
      if (this.userFromId != that.userFromId)
        return false;
    }

    boolean this_present_userToId = true;
    boolean that_present_userToId = true;
    if (this_present_userToId || that_present_userToId) {
      if (!(this_present_userToId && that_present_userToId))
        return false;
      if (this.userToId != that.userToId)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_readTime = true;
    boolean that_present_readTime = true;
    if (this_present_readTime || that_present_readTime) {
      if (!(this_present_readTime && that_present_readTime))
        return false;
      if (this.readTime != that.readTime)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_idSet = true && this.isSetIdSet();
    boolean that_present_idSet = true && that.isSetIdSet();
    if (this_present_idSet || that_present_idSet) {
      if (!(this_present_idSet && that_present_idSet))
        return false;
      if (!this.idSet.equals(that.idSet))
        return false;
    }

    boolean this_present_userFromIdSet = true && this.isSetUserFromIdSet();
    boolean that_present_userFromIdSet = true && that.isSetUserFromIdSet();
    if (this_present_userFromIdSet || that_present_userFromIdSet) {
      if (!(this_present_userFromIdSet && that_present_userFromIdSet))
        return false;
      if (!this.userFromIdSet.equals(that.userFromIdSet))
        return false;
    }

    boolean this_present_userToIdSet = true && this.isSetUserToIdSet();
    boolean that_present_userToIdSet = true && that.isSetUserToIdSet();
    if (this_present_userToIdSet || that_present_userToIdSet) {
      if (!(this_present_userToIdSet && that_present_userToIdSet))
        return false;
      if (!this.userToIdSet.equals(that.userToIdSet))
        return false;
    }

    boolean this_present_statusSet = true && this.isSetStatusSet();
    boolean that_present_statusSet = true && that.isSetStatusSet();
    if (this_present_statusSet || that_present_statusSet) {
      if (!(this_present_statusSet && that_present_statusSet))
        return false;
      if (!this.statusSet.equals(that.statusSet))
        return false;
    }

    boolean this_present_readTimeStart = true;
    boolean that_present_readTimeStart = true;
    if (this_present_readTimeStart || that_present_readTimeStart) {
      if (!(this_present_readTimeStart && that_present_readTimeStart))
        return false;
      if (this.readTimeStart != that.readTimeStart)
        return false;
    }

    boolean this_present_readTimeEnd = true;
    boolean that_present_readTimeEnd = true;
    if (this_present_readTimeEnd || that_present_readTimeEnd) {
      if (!(this_present_readTimeEnd && that_present_readTimeEnd))
        return false;
      if (this.readTimeEnd != that.readTimeEnd)
        return false;
    }

    boolean this_present_createTimeStart = true;
    boolean that_present_createTimeStart = true;
    if (this_present_createTimeStart || that_present_createTimeStart) {
      if (!(this_present_createTimeStart && that_present_createTimeStart))
        return false;
      if (this.createTimeStart != that.createTimeStart)
        return false;
    }

    boolean this_present_createTimeEnd = true;
    boolean that_present_createTimeEnd = true;
    if (this_present_createTimeEnd || that_present_createTimeEnd) {
      if (!(this_present_createTimeEnd && that_present_createTimeEnd))
        return false;
      if (this.createTimeEnd != that.createTimeEnd)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_messageText = true && (isSetMessageText());
    builder.append(present_messageText);
    if (present_messageText)
      builder.append(messageText);

    boolean present_userFromId = true;
    builder.append(present_userFromId);
    if (present_userFromId)
      builder.append(userFromId);

    boolean present_userToId = true;
    builder.append(present_userToId);
    if (present_userToId)
      builder.append(userToId);

    boolean present_status = true;
    builder.append(present_status);
    if (present_status)
      builder.append(status);

    boolean present_readTime = true;
    builder.append(present_readTime);
    if (present_readTime)
      builder.append(readTime);

    boolean present_createTime = true;
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);

    boolean present_idSet = true && (isSetIdSet());
    builder.append(present_idSet);
    if (present_idSet)
      builder.append(idSet);

    boolean present_userFromIdSet = true && (isSetUserFromIdSet());
    builder.append(present_userFromIdSet);
    if (present_userFromIdSet)
      builder.append(userFromIdSet);

    boolean present_userToIdSet = true && (isSetUserToIdSet());
    builder.append(present_userToIdSet);
    if (present_userToIdSet)
      builder.append(userToIdSet);

    boolean present_statusSet = true && (isSetStatusSet());
    builder.append(present_statusSet);
    if (present_statusSet)
      builder.append(statusSet);

    boolean present_readTimeStart = true;
    builder.append(present_readTimeStart);
    if (present_readTimeStart)
      builder.append(readTimeStart);

    boolean present_readTimeEnd = true;
    builder.append(present_readTimeEnd);
    if (present_readTimeEnd)
      builder.append(readTimeEnd);

    boolean present_createTimeStart = true;
    builder.append(present_createTimeStart);
    if (present_createTimeStart)
      builder.append(createTimeStart);

    boolean present_createTimeEnd = true;
    builder.append(present_createTimeEnd);
    if (present_createTimeEnd)
      builder.append(createTimeEnd);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(MessageBo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageText()).compareTo(other.isSetMessageText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageText, other.messageText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserFromId()).compareTo(other.isSetUserFromId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserFromId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userFromId, other.userFromId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserToId()).compareTo(other.isSetUserToId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserToId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userToId, other.userToId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadTime()).compareTo(other.isSetReadTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readTime, other.readTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdSet()).compareTo(other.isSetIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idSet, other.idSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserFromIdSet()).compareTo(other.isSetUserFromIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserFromIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userFromIdSet, other.userFromIdSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserToIdSet()).compareTo(other.isSetUserToIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserToIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userToIdSet, other.userToIdSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusSet()).compareTo(other.isSetStatusSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusSet, other.statusSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadTimeStart()).compareTo(other.isSetReadTimeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadTimeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readTimeStart, other.readTimeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadTimeEnd()).compareTo(other.isSetReadTimeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadTimeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readTimeEnd, other.readTimeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimeStart()).compareTo(other.isSetCreateTimeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimeStart, other.createTimeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimeEnd()).compareTo(other.isSetCreateTimeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimeEnd, other.createTimeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MessageBo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageText:");
    if (this.messageText == null) {
      sb.append("null");
    } else {
      sb.append(this.messageText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userFromId:");
    sb.append(this.userFromId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userToId:");
    sb.append(this.userToId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("readTime:");
    sb.append(this.readTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("idSet:");
    if (this.idSet == null) {
      sb.append("null");
    } else {
      sb.append(this.idSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userFromIdSet:");
    if (this.userFromIdSet == null) {
      sb.append("null");
    } else {
      sb.append(this.userFromIdSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userToIdSet:");
    if (this.userToIdSet == null) {
      sb.append("null");
    } else {
      sb.append(this.userToIdSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusSet:");
    if (this.statusSet == null) {
      sb.append("null");
    } else {
      sb.append(this.statusSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("readTimeStart:");
    sb.append(this.readTimeStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("readTimeEnd:");
    sb.append(this.readTimeEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTimeStart:");
    sb.append(this.createTimeStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTimeEnd:");
    sb.append(this.createTimeEnd);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageBoStandardSchemeFactory implements SchemeFactory {
    public MessageBoStandardScheme getScheme() {
      return new MessageBoStandardScheme();
    }
  }

  private static class MessageBoStandardScheme extends StandardScheme<MessageBo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MessageBo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.messageText = iprot.readString();
              struct.setMessageTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_FROM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userFromId = iprot.readI32();
              struct.setUserFromIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_TO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userToId = iprot.readI32();
              struct.setUserToIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // READ_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.readTime = iprot.readI64();
              struct.setReadTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.idSet = new HashSet<Integer>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  int _elem2;
                  _elem2 = iprot.readI32();
                  struct.idSet.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USER_FROM_ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.userFromIdSet = new HashSet<Integer>(2*_set3.size);
                for (int _i4 = 0; _i4 < _set3.size; ++_i4)
                {
                  int _elem5;
                  _elem5 = iprot.readI32();
                  struct.userFromIdSet.add(_elem5);
                }
                iprot.readSetEnd();
              }
              struct.setUserFromIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // USER_TO_ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set6 = iprot.readSetBegin();
                struct.userToIdSet = new HashSet<Integer>(2*_set6.size);
                for (int _i7 = 0; _i7 < _set6.size; ++_i7)
                {
                  int _elem8;
                  _elem8 = iprot.readI32();
                  struct.userToIdSet.add(_elem8);
                }
                iprot.readSetEnd();
              }
              struct.setUserToIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set9 = iprot.readSetBegin();
                struct.statusSet = new HashSet<Integer>(2*_set9.size);
                for (int _i10 = 0; _i10 < _set9.size; ++_i10)
                {
                  int _elem11;
                  _elem11 = iprot.readI32();
                  struct.statusSet.add(_elem11);
                }
                iprot.readSetEnd();
              }
              struct.setStatusSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // READ_TIME_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.readTimeStart = iprot.readI64();
              struct.setReadTimeStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // READ_TIME_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.readTimeEnd = iprot.readI64();
              struct.setReadTimeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREATE_TIME_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimeStart = iprot.readI64();
              struct.setCreateTimeStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREATE_TIME_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimeEnd = iprot.readI64();
              struct.setCreateTimeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MessageBo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.messageText != null) {
        oprot.writeFieldBegin(MESSAGE_TEXT_FIELD_DESC);
        oprot.writeString(struct.messageText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_FROM_ID_FIELD_DESC);
      oprot.writeI32(struct.userFromId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_TO_ID_FIELD_DESC);
      oprot.writeI32(struct.userToId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(READ_TIME_FIELD_DESC);
      oprot.writeI64(struct.readTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      if (struct.idSet != null) {
        oprot.writeFieldBegin(ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.idSet.size()));
          for (int _iter12 : struct.idSet)
          {
            oprot.writeI32(_iter12);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.userFromIdSet != null) {
        oprot.writeFieldBegin(USER_FROM_ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.userFromIdSet.size()));
          for (int _iter13 : struct.userFromIdSet)
          {
            oprot.writeI32(_iter13);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.userToIdSet != null) {
        oprot.writeFieldBegin(USER_TO_ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.userToIdSet.size()));
          for (int _iter14 : struct.userToIdSet)
          {
            oprot.writeI32(_iter14);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.statusSet != null) {
        oprot.writeFieldBegin(STATUS_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.statusSet.size()));
          for (int _iter15 : struct.statusSet)
          {
            oprot.writeI32(_iter15);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(READ_TIME_START_FIELD_DESC);
      oprot.writeI64(struct.readTimeStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(READ_TIME_END_FIELD_DESC);
      oprot.writeI64(struct.readTimeEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_START_FIELD_DESC);
      oprot.writeI64(struct.createTimeStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_END_FIELD_DESC);
      oprot.writeI64(struct.createTimeEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageBoTupleSchemeFactory implements SchemeFactory {
    public MessageBoTupleScheme getScheme() {
      return new MessageBoTupleScheme();
    }
  }

  private static class MessageBoTupleScheme extends TupleScheme<MessageBo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MessageBo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetMessageText()) {
        optionals.set(1);
      }
      if (struct.isSetUserFromId()) {
        optionals.set(2);
      }
      if (struct.isSetUserToId()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetReadTime()) {
        optionals.set(5);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(6);
      }
      if (struct.isSetIdSet()) {
        optionals.set(7);
      }
      if (struct.isSetUserFromIdSet()) {
        optionals.set(8);
      }
      if (struct.isSetUserToIdSet()) {
        optionals.set(9);
      }
      if (struct.isSetStatusSet()) {
        optionals.set(10);
      }
      if (struct.isSetReadTimeStart()) {
        optionals.set(11);
      }
      if (struct.isSetReadTimeEnd()) {
        optionals.set(12);
      }
      if (struct.isSetCreateTimeStart()) {
        optionals.set(13);
      }
      if (struct.isSetCreateTimeEnd()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetMessageText()) {
        oprot.writeString(struct.messageText);
      }
      if (struct.isSetUserFromId()) {
        oprot.writeI32(struct.userFromId);
      }
      if (struct.isSetUserToId()) {
        oprot.writeI32(struct.userToId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetReadTime()) {
        oprot.writeI64(struct.readTime);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetIdSet()) {
        {
          oprot.writeI32(struct.idSet.size());
          for (int _iter16 : struct.idSet)
          {
            oprot.writeI32(_iter16);
          }
        }
      }
      if (struct.isSetUserFromIdSet()) {
        {
          oprot.writeI32(struct.userFromIdSet.size());
          for (int _iter17 : struct.userFromIdSet)
          {
            oprot.writeI32(_iter17);
          }
        }
      }
      if (struct.isSetUserToIdSet()) {
        {
          oprot.writeI32(struct.userToIdSet.size());
          for (int _iter18 : struct.userToIdSet)
          {
            oprot.writeI32(_iter18);
          }
        }
      }
      if (struct.isSetStatusSet()) {
        {
          oprot.writeI32(struct.statusSet.size());
          for (int _iter19 : struct.statusSet)
          {
            oprot.writeI32(_iter19);
          }
        }
      }
      if (struct.isSetReadTimeStart()) {
        oprot.writeI64(struct.readTimeStart);
      }
      if (struct.isSetReadTimeEnd()) {
        oprot.writeI64(struct.readTimeEnd);
      }
      if (struct.isSetCreateTimeStart()) {
        oprot.writeI64(struct.createTimeStart);
      }
      if (struct.isSetCreateTimeEnd()) {
        oprot.writeI64(struct.createTimeEnd);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MessageBo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.messageText = iprot.readString();
        struct.setMessageTextIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userFromId = iprot.readI32();
        struct.setUserFromIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userToId = iprot.readI32();
        struct.setUserToIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.readTime = iprot.readI64();
        struct.setReadTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TSet _set20 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.idSet = new HashSet<Integer>(2*_set20.size);
          for (int _i21 = 0; _i21 < _set20.size; ++_i21)
          {
            int _elem22;
            _elem22 = iprot.readI32();
            struct.idSet.add(_elem22);
          }
        }
        struct.setIdSetIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TSet _set23 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userFromIdSet = new HashSet<Integer>(2*_set23.size);
          for (int _i24 = 0; _i24 < _set23.size; ++_i24)
          {
            int _elem25;
            _elem25 = iprot.readI32();
            struct.userFromIdSet.add(_elem25);
          }
        }
        struct.setUserFromIdSetIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TSet _set26 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userToIdSet = new HashSet<Integer>(2*_set26.size);
          for (int _i27 = 0; _i27 < _set26.size; ++_i27)
          {
            int _elem28;
            _elem28 = iprot.readI32();
            struct.userToIdSet.add(_elem28);
          }
        }
        struct.setUserToIdSetIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TSet _set29 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.statusSet = new HashSet<Integer>(2*_set29.size);
          for (int _i30 = 0; _i30 < _set29.size; ++_i30)
          {
            int _elem31;
            _elem31 = iprot.readI32();
            struct.statusSet.add(_elem31);
          }
        }
        struct.setStatusSetIsSet(true);
      }
      if (incoming.get(11)) {
        struct.readTimeStart = iprot.readI64();
        struct.setReadTimeStartIsSet(true);
      }
      if (incoming.get(12)) {
        struct.readTimeEnd = iprot.readI64();
        struct.setReadTimeEndIsSet(true);
      }
      if (incoming.get(13)) {
        struct.createTimeStart = iprot.readI64();
        struct.setCreateTimeStartIsSet(true);
      }
      if (incoming.get(14)) {
        struct.createTimeEnd = iprot.readI64();
        struct.setCreateTimeEndIsSet(true);
      }
    }
  }

}

