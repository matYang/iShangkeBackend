/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ishangke.edunav.commoncontract.model;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * OrderBo
 */
public class OrderBo implements org.apache.thrift.TBase<OrderBo, OrderBo._Fields>, java.io.Serializable, Cloneable, Comparable<OrderBo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderBo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BOOKING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField RUNING_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("runingNumber", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("enabled", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("idSet", org.apache.thrift.protocol.TType.SET, (short)9);
  private static final org.apache.thrift.protocol.TField BOOKING_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingIdSet", org.apache.thrift.protocol.TType.SET, (short)10);
  private static final org.apache.thrift.protocol.TField STATUS_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("statusSet", org.apache.thrift.protocol.TType.SET, (short)11);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_START_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimeStart", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_END_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimeEnd", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField PRICE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("priceStart", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField PRICE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("priceEnd", org.apache.thrift.protocol.TType.DOUBLE, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderBoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderBoTupleSchemeFactory());
  }

  public int id; // required
  public int bookingId; // required
  public long createTime; // required
  public String type; // required
  public double price; // required
  public String runingNumber; // required
  public int status; // required
  public int enabled; // required
  public Set<Integer> idSet; // required
  public Set<Integer> bookingIdSet; // required
  public Set<Integer> statusSet; // required
  public long createTimeStart; // required
  public long createTimeEnd; // required
  public double priceStart; // required
  public double priceEnd; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    BOOKING_ID((short)2, "bookingId"),
    CREATE_TIME((short)3, "createTime"),
    TYPE((short)4, "type"),
    PRICE((short)5, "price"),
    RUNING_NUMBER((short)6, "runingNumber"),
    STATUS((short)7, "status"),
    ENABLED((short)8, "enabled"),
    ID_SET((short)9, "idSet"),
    BOOKING_ID_SET((short)10, "bookingIdSet"),
    STATUS_SET((short)11, "statusSet"),
    CREATE_TIME_START((short)12, "createTimeStart"),
    CREATE_TIME_END((short)13, "createTimeEnd"),
    PRICE_START((short)14, "priceStart"),
    PRICE_END((short)15, "priceEnd");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // BOOKING_ID
          return BOOKING_ID;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        case 4: // TYPE
          return TYPE;
        case 5: // PRICE
          return PRICE;
        case 6: // RUNING_NUMBER
          return RUNING_NUMBER;
        case 7: // STATUS
          return STATUS;
        case 8: // ENABLED
          return ENABLED;
        case 9: // ID_SET
          return ID_SET;
        case 10: // BOOKING_ID_SET
          return BOOKING_ID_SET;
        case 11: // STATUS_SET
          return STATUS_SET;
        case 12: // CREATE_TIME_START
          return CREATE_TIME_START;
        case 13: // CREATE_TIME_END
          return CREATE_TIME_END;
        case 14: // PRICE_START
          return PRICE_START;
        case 15: // PRICE_END
          return PRICE_END;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __BOOKINGID_ISSET_ID = 1;
  private static final int __CREATETIME_ISSET_ID = 2;
  private static final int __PRICE_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __ENABLED_ISSET_ID = 5;
  private static final int __CREATETIMESTART_ISSET_ID = 6;
  private static final int __CREATETIMEEND_ISSET_ID = 7;
  private static final int __PRICESTART_ISSET_ID = 8;
  private static final int __PRICEEND_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOOKING_ID, new org.apache.thrift.meta_data.FieldMetaData("bookingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RUNING_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("runingNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENABLED, new org.apache.thrift.meta_data.FieldMetaData("enabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID_SET, new org.apache.thrift.meta_data.FieldMetaData("idSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BOOKING_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("bookingIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.STATUS_SET, new org.apache.thrift.meta_data.FieldMetaData("statusSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CREATE_TIME_START, new org.apache.thrift.meta_data.FieldMetaData("createTimeStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME_END, new org.apache.thrift.meta_data.FieldMetaData("createTimeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRICE_START, new org.apache.thrift.meta_data.FieldMetaData("priceStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRICE_END, new org.apache.thrift.meta_data.FieldMetaData("priceEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderBo.class, metaDataMap);
  }

  public OrderBo() {
  }

  public OrderBo(
    int id,
    int bookingId,
    long createTime,
    String type,
    double price,
    String runingNumber,
    int status,
    int enabled,
    Set<Integer> idSet,
    Set<Integer> bookingIdSet,
    Set<Integer> statusSet,
    long createTimeStart,
    long createTimeEnd,
    double priceStart,
    double priceEnd)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.bookingId = bookingId;
    setBookingIdIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.type = type;
    this.price = price;
    setPriceIsSet(true);
    this.runingNumber = runingNumber;
    this.status = status;
    setStatusIsSet(true);
    this.enabled = enabled;
    setEnabledIsSet(true);
    this.idSet = idSet;
    this.bookingIdSet = bookingIdSet;
    this.statusSet = statusSet;
    this.createTimeStart = createTimeStart;
    setCreateTimeStartIsSet(true);
    this.createTimeEnd = createTimeEnd;
    setCreateTimeEndIsSet(true);
    this.priceStart = priceStart;
    setPriceStartIsSet(true);
    this.priceEnd = priceEnd;
    setPriceEndIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderBo(OrderBo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.bookingId = other.bookingId;
    this.createTime = other.createTime;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.price = other.price;
    if (other.isSetRuningNumber()) {
      this.runingNumber = other.runingNumber;
    }
    this.status = other.status;
    this.enabled = other.enabled;
    if (other.isSetIdSet()) {
      Set<Integer> __this__idSet = new HashSet<Integer>(other.idSet);
      this.idSet = __this__idSet;
    }
    if (other.isSetBookingIdSet()) {
      Set<Integer> __this__bookingIdSet = new HashSet<Integer>(other.bookingIdSet);
      this.bookingIdSet = __this__bookingIdSet;
    }
    if (other.isSetStatusSet()) {
      Set<Integer> __this__statusSet = new HashSet<Integer>(other.statusSet);
      this.statusSet = __this__statusSet;
    }
    this.createTimeStart = other.createTimeStart;
    this.createTimeEnd = other.createTimeEnd;
    this.priceStart = other.priceStart;
    this.priceEnd = other.priceEnd;
  }

  public OrderBo deepCopy() {
    return new OrderBo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setBookingIdIsSet(false);
    this.bookingId = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    this.type = null;
    setPriceIsSet(false);
    this.price = 0.0;
    this.runingNumber = null;
    setStatusIsSet(false);
    this.status = 0;
    setEnabledIsSet(false);
    this.enabled = 0;
    this.idSet = null;
    this.bookingIdSet = null;
    this.statusSet = null;
    setCreateTimeStartIsSet(false);
    this.createTimeStart = 0;
    setCreateTimeEndIsSet(false);
    this.createTimeEnd = 0;
    setPriceStartIsSet(false);
    this.priceStart = 0.0;
    setPriceEndIsSet(false);
    this.priceEnd = 0.0;
  }

  public int getId() {
    return this.id;
  }

  public OrderBo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getBookingId() {
    return this.bookingId;
  }

  public OrderBo setBookingId(int bookingId) {
    this.bookingId = bookingId;
    setBookingIdIsSet(true);
    return this;
  }

  public void unsetBookingId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOKINGID_ISSET_ID);
  }

  /** Returns true if field bookingId is set (has been assigned a value) and false otherwise */
  public boolean isSetBookingId() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOKINGID_ISSET_ID);
  }

  public void setBookingIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOKINGID_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public OrderBo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public String getType() {
    return this.type;
  }

  public OrderBo setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public double getPrice() {
    return this.price;
  }

  public OrderBo setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public String getRuningNumber() {
    return this.runingNumber;
  }

  public OrderBo setRuningNumber(String runingNumber) {
    this.runingNumber = runingNumber;
    return this;
  }

  public void unsetRuningNumber() {
    this.runingNumber = null;
  }

  /** Returns true if field runingNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetRuningNumber() {
    return this.runingNumber != null;
  }

  public void setRuningNumberIsSet(boolean value) {
    if (!value) {
      this.runingNumber = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public OrderBo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getEnabled() {
    return this.enabled;
  }

  public OrderBo setEnabled(int enabled) {
    this.enabled = enabled;
    setEnabledIsSet(true);
    return this;
  }

  public void unsetEnabled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENABLED_ISSET_ID);
  }

  /** Returns true if field enabled is set (has been assigned a value) and false otherwise */
  public boolean isSetEnabled() {
    return EncodingUtils.testBit(__isset_bitfield, __ENABLED_ISSET_ID);
  }

  public void setEnabledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENABLED_ISSET_ID, value);
  }

  public int getIdSetSize() {
    return (this.idSet == null) ? 0 : this.idSet.size();
  }

  public java.util.Iterator<Integer> getIdSetIterator() {
    return (this.idSet == null) ? null : this.idSet.iterator();
  }

  public void addToIdSet(int elem) {
    if (this.idSet == null) {
      this.idSet = new HashSet<Integer>();
    }
    this.idSet.add(elem);
  }

  public Set<Integer> getIdSet() {
    return this.idSet;
  }

  public OrderBo setIdSet(Set<Integer> idSet) {
    this.idSet = idSet;
    return this;
  }

  public void unsetIdSet() {
    this.idSet = null;
  }

  /** Returns true if field idSet is set (has been assigned a value) and false otherwise */
  public boolean isSetIdSet() {
    return this.idSet != null;
  }

  public void setIdSetIsSet(boolean value) {
    if (!value) {
      this.idSet = null;
    }
  }

  public int getBookingIdSetSize() {
    return (this.bookingIdSet == null) ? 0 : this.bookingIdSet.size();
  }

  public java.util.Iterator<Integer> getBookingIdSetIterator() {
    return (this.bookingIdSet == null) ? null : this.bookingIdSet.iterator();
  }

  public void addToBookingIdSet(int elem) {
    if (this.bookingIdSet == null) {
      this.bookingIdSet = new HashSet<Integer>();
    }
    this.bookingIdSet.add(elem);
  }

  public Set<Integer> getBookingIdSet() {
    return this.bookingIdSet;
  }

  public OrderBo setBookingIdSet(Set<Integer> bookingIdSet) {
    this.bookingIdSet = bookingIdSet;
    return this;
  }

  public void unsetBookingIdSet() {
    this.bookingIdSet = null;
  }

  /** Returns true if field bookingIdSet is set (has been assigned a value) and false otherwise */
  public boolean isSetBookingIdSet() {
    return this.bookingIdSet != null;
  }

  public void setBookingIdSetIsSet(boolean value) {
    if (!value) {
      this.bookingIdSet = null;
    }
  }

  public int getStatusSetSize() {
    return (this.statusSet == null) ? 0 : this.statusSet.size();
  }

  public java.util.Iterator<Integer> getStatusSetIterator() {
    return (this.statusSet == null) ? null : this.statusSet.iterator();
  }

  public void addToStatusSet(int elem) {
    if (this.statusSet == null) {
      this.statusSet = new HashSet<Integer>();
    }
    this.statusSet.add(elem);
  }

  public Set<Integer> getStatusSet() {
    return this.statusSet;
  }

  public OrderBo setStatusSet(Set<Integer> statusSet) {
    this.statusSet = statusSet;
    return this;
  }

  public void unsetStatusSet() {
    this.statusSet = null;
  }

  /** Returns true if field statusSet is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusSet() {
    return this.statusSet != null;
  }

  public void setStatusSetIsSet(boolean value) {
    if (!value) {
      this.statusSet = null;
    }
  }

  public long getCreateTimeStart() {
    return this.createTimeStart;
  }

  public OrderBo setCreateTimeStart(long createTimeStart) {
    this.createTimeStart = createTimeStart;
    setCreateTimeStartIsSet(true);
    return this;
  }

  public void unsetCreateTimeStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTART_ISSET_ID);
  }

  /** Returns true if field createTimeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimeStart() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTART_ISSET_ID);
  }

  public void setCreateTimeStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTART_ISSET_ID, value);
  }

  public long getCreateTimeEnd() {
    return this.createTimeEnd;
  }

  public OrderBo setCreateTimeEnd(long createTimeEnd) {
    this.createTimeEnd = createTimeEnd;
    setCreateTimeEndIsSet(true);
    return this;
  }

  public void unsetCreateTimeEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMEEND_ISSET_ID);
  }

  /** Returns true if field createTimeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimeEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMEEND_ISSET_ID);
  }

  public void setCreateTimeEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMEEND_ISSET_ID, value);
  }

  public double getPriceStart() {
    return this.priceStart;
  }

  public OrderBo setPriceStart(double priceStart) {
    this.priceStart = priceStart;
    setPriceStartIsSet(true);
    return this;
  }

  public void unsetPriceStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICESTART_ISSET_ID);
  }

  /** Returns true if field priceStart is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceStart() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICESTART_ISSET_ID);
  }

  public void setPriceStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICESTART_ISSET_ID, value);
  }

  public double getPriceEnd() {
    return this.priceEnd;
  }

  public OrderBo setPriceEnd(double priceEnd) {
    this.priceEnd = priceEnd;
    setPriceEndIsSet(true);
    return this;
  }

  public void unsetPriceEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICEEND_ISSET_ID);
  }

  /** Returns true if field priceEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICEEND_ISSET_ID);
  }

  public void setPriceEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICEEND_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case BOOKING_ID:
      if (value == null) {
        unsetBookingId();
      } else {
        setBookingId((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case RUNING_NUMBER:
      if (value == null) {
        unsetRuningNumber();
      } else {
        setRuningNumber((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case ENABLED:
      if (value == null) {
        unsetEnabled();
      } else {
        setEnabled((Integer)value);
      }
      break;

    case ID_SET:
      if (value == null) {
        unsetIdSet();
      } else {
        setIdSet((Set<Integer>)value);
      }
      break;

    case BOOKING_ID_SET:
      if (value == null) {
        unsetBookingIdSet();
      } else {
        setBookingIdSet((Set<Integer>)value);
      }
      break;

    case STATUS_SET:
      if (value == null) {
        unsetStatusSet();
      } else {
        setStatusSet((Set<Integer>)value);
      }
      break;

    case CREATE_TIME_START:
      if (value == null) {
        unsetCreateTimeStart();
      } else {
        setCreateTimeStart((Long)value);
      }
      break;

    case CREATE_TIME_END:
      if (value == null) {
        unsetCreateTimeEnd();
      } else {
        setCreateTimeEnd((Long)value);
      }
      break;

    case PRICE_START:
      if (value == null) {
        unsetPriceStart();
      } else {
        setPriceStart((Double)value);
      }
      break;

    case PRICE_END:
      if (value == null) {
        unsetPriceEnd();
      } else {
        setPriceEnd((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case BOOKING_ID:
      return Integer.valueOf(getBookingId());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case TYPE:
      return getType();

    case PRICE:
      return Double.valueOf(getPrice());

    case RUNING_NUMBER:
      return getRuningNumber();

    case STATUS:
      return Integer.valueOf(getStatus());

    case ENABLED:
      return Integer.valueOf(getEnabled());

    case ID_SET:
      return getIdSet();

    case BOOKING_ID_SET:
      return getBookingIdSet();

    case STATUS_SET:
      return getStatusSet();

    case CREATE_TIME_START:
      return Long.valueOf(getCreateTimeStart());

    case CREATE_TIME_END:
      return Long.valueOf(getCreateTimeEnd());

    case PRICE_START:
      return Double.valueOf(getPriceStart());

    case PRICE_END:
      return Double.valueOf(getPriceEnd());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case BOOKING_ID:
      return isSetBookingId();
    case CREATE_TIME:
      return isSetCreateTime();
    case TYPE:
      return isSetType();
    case PRICE:
      return isSetPrice();
    case RUNING_NUMBER:
      return isSetRuningNumber();
    case STATUS:
      return isSetStatus();
    case ENABLED:
      return isSetEnabled();
    case ID_SET:
      return isSetIdSet();
    case BOOKING_ID_SET:
      return isSetBookingIdSet();
    case STATUS_SET:
      return isSetStatusSet();
    case CREATE_TIME_START:
      return isSetCreateTimeStart();
    case CREATE_TIME_END:
      return isSetCreateTimeEnd();
    case PRICE_START:
      return isSetPriceStart();
    case PRICE_END:
      return isSetPriceEnd();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderBo)
      return this.equals((OrderBo)that);
    return false;
  }

  public boolean equals(OrderBo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_bookingId = true;
    boolean that_present_bookingId = true;
    if (this_present_bookingId || that_present_bookingId) {
      if (!(this_present_bookingId && that_present_bookingId))
        return false;
      if (this.bookingId != that.bookingId)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_runingNumber = true && this.isSetRuningNumber();
    boolean that_present_runingNumber = true && that.isSetRuningNumber();
    if (this_present_runingNumber || that_present_runingNumber) {
      if (!(this_present_runingNumber && that_present_runingNumber))
        return false;
      if (!this.runingNumber.equals(that.runingNumber))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_enabled = true;
    boolean that_present_enabled = true;
    if (this_present_enabled || that_present_enabled) {
      if (!(this_present_enabled && that_present_enabled))
        return false;
      if (this.enabled != that.enabled)
        return false;
    }

    boolean this_present_idSet = true && this.isSetIdSet();
    boolean that_present_idSet = true && that.isSetIdSet();
    if (this_present_idSet || that_present_idSet) {
      if (!(this_present_idSet && that_present_idSet))
        return false;
      if (!this.idSet.equals(that.idSet))
        return false;
    }

    boolean this_present_bookingIdSet = true && this.isSetBookingIdSet();
    boolean that_present_bookingIdSet = true && that.isSetBookingIdSet();
    if (this_present_bookingIdSet || that_present_bookingIdSet) {
      if (!(this_present_bookingIdSet && that_present_bookingIdSet))
        return false;
      if (!this.bookingIdSet.equals(that.bookingIdSet))
        return false;
    }

    boolean this_present_statusSet = true && this.isSetStatusSet();
    boolean that_present_statusSet = true && that.isSetStatusSet();
    if (this_present_statusSet || that_present_statusSet) {
      if (!(this_present_statusSet && that_present_statusSet))
        return false;
      if (!this.statusSet.equals(that.statusSet))
        return false;
    }

    boolean this_present_createTimeStart = true;
    boolean that_present_createTimeStart = true;
    if (this_present_createTimeStart || that_present_createTimeStart) {
      if (!(this_present_createTimeStart && that_present_createTimeStart))
        return false;
      if (this.createTimeStart != that.createTimeStart)
        return false;
    }

    boolean this_present_createTimeEnd = true;
    boolean that_present_createTimeEnd = true;
    if (this_present_createTimeEnd || that_present_createTimeEnd) {
      if (!(this_present_createTimeEnd && that_present_createTimeEnd))
        return false;
      if (this.createTimeEnd != that.createTimeEnd)
        return false;
    }

    boolean this_present_priceStart = true;
    boolean that_present_priceStart = true;
    if (this_present_priceStart || that_present_priceStart) {
      if (!(this_present_priceStart && that_present_priceStart))
        return false;
      if (this.priceStart != that.priceStart)
        return false;
    }

    boolean this_present_priceEnd = true;
    boolean that_present_priceEnd = true;
    if (this_present_priceEnd || that_present_priceEnd) {
      if (!(this_present_priceEnd && that_present_priceEnd))
        return false;
      if (this.priceEnd != that.priceEnd)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_bookingId = true;
    builder.append(present_bookingId);
    if (present_bookingId)
      builder.append(bookingId);

    boolean present_createTime = true;
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);

    boolean present_type = true && (isSetType());
    builder.append(present_type);
    if (present_type)
      builder.append(type);

    boolean present_price = true;
    builder.append(present_price);
    if (present_price)
      builder.append(price);

    boolean present_runingNumber = true && (isSetRuningNumber());
    builder.append(present_runingNumber);
    if (present_runingNumber)
      builder.append(runingNumber);

    boolean present_status = true;
    builder.append(present_status);
    if (present_status)
      builder.append(status);

    boolean present_enabled = true;
    builder.append(present_enabled);
    if (present_enabled)
      builder.append(enabled);

    boolean present_idSet = true && (isSetIdSet());
    builder.append(present_idSet);
    if (present_idSet)
      builder.append(idSet);

    boolean present_bookingIdSet = true && (isSetBookingIdSet());
    builder.append(present_bookingIdSet);
    if (present_bookingIdSet)
      builder.append(bookingIdSet);

    boolean present_statusSet = true && (isSetStatusSet());
    builder.append(present_statusSet);
    if (present_statusSet)
      builder.append(statusSet);

    boolean present_createTimeStart = true;
    builder.append(present_createTimeStart);
    if (present_createTimeStart)
      builder.append(createTimeStart);

    boolean present_createTimeEnd = true;
    builder.append(present_createTimeEnd);
    if (present_createTimeEnd)
      builder.append(createTimeEnd);

    boolean present_priceStart = true;
    builder.append(present_priceStart);
    if (present_priceStart)
      builder.append(priceStart);

    boolean present_priceEnd = true;
    builder.append(present_priceEnd);
    if (present_priceEnd)
      builder.append(priceEnd);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(OrderBo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBookingId()).compareTo(other.isSetBookingId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBookingId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingId, other.bookingId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuningNumber()).compareTo(other.isSetRuningNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuningNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runingNumber, other.runingNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnabled()).compareTo(other.isSetEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enabled, other.enabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdSet()).compareTo(other.isSetIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idSet, other.idSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBookingIdSet()).compareTo(other.isSetBookingIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBookingIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingIdSet, other.bookingIdSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusSet()).compareTo(other.isSetStatusSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusSet, other.statusSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimeStart()).compareTo(other.isSetCreateTimeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimeStart, other.createTimeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimeEnd()).compareTo(other.isSetCreateTimeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimeEnd, other.createTimeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceStart()).compareTo(other.isSetPriceStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceStart, other.priceStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceEnd()).compareTo(other.isSetPriceEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceEnd, other.priceEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderBo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bookingId:");
    sb.append(this.bookingId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("runingNumber:");
    if (this.runingNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.runingNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("enabled:");
    sb.append(this.enabled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("idSet:");
    if (this.idSet == null) {
      sb.append("null");
    } else {
      sb.append(this.idSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bookingIdSet:");
    if (this.bookingIdSet == null) {
      sb.append("null");
    } else {
      sb.append(this.bookingIdSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusSet:");
    if (this.statusSet == null) {
      sb.append("null");
    } else {
      sb.append(this.statusSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTimeStart:");
    sb.append(this.createTimeStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTimeEnd:");
    sb.append(this.createTimeEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priceStart:");
    sb.append(this.priceStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priceEnd:");
    sb.append(this.priceEnd);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderBoStandardSchemeFactory implements SchemeFactory {
    public OrderBoStandardScheme getScheme() {
      return new OrderBoStandardScheme();
    }
  }

  private static class OrderBoStandardScheme extends StandardScheme<OrderBo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderBo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BOOKING_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bookingId = iprot.readI32();
              struct.setBookingIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RUNING_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.runingNumber = iprot.readString();
              struct.setRuningNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.enabled = iprot.readI32();
              struct.setEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.idSet = new HashSet<Integer>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  int _elem2;
                  _elem2 = iprot.readI32();
                  struct.idSet.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BOOKING_ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.bookingIdSet = new HashSet<Integer>(2*_set3.size);
                for (int _i4 = 0; _i4 < _set3.size; ++_i4)
                {
                  int _elem5;
                  _elem5 = iprot.readI32();
                  struct.bookingIdSet.add(_elem5);
                }
                iprot.readSetEnd();
              }
              struct.setBookingIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set6 = iprot.readSetBegin();
                struct.statusSet = new HashSet<Integer>(2*_set6.size);
                for (int _i7 = 0; _i7 < _set6.size; ++_i7)
                {
                  int _elem8;
                  _elem8 = iprot.readI32();
                  struct.statusSet.add(_elem8);
                }
                iprot.readSetEnd();
              }
              struct.setStatusSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATE_TIME_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimeStart = iprot.readI64();
              struct.setCreateTimeStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CREATE_TIME_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimeEnd = iprot.readI64();
              struct.setCreateTimeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PRICE_START
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.priceStart = iprot.readDouble();
              struct.setPriceStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PRICE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.priceEnd = iprot.readDouble();
              struct.setPriceEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderBo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOOKING_ID_FIELD_DESC);
      oprot.writeI32(struct.bookingId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeDouble(struct.price);
      oprot.writeFieldEnd();
      if (struct.runingNumber != null) {
        oprot.writeFieldBegin(RUNING_NUMBER_FIELD_DESC);
        oprot.writeString(struct.runingNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENABLED_FIELD_DESC);
      oprot.writeI32(struct.enabled);
      oprot.writeFieldEnd();
      if (struct.idSet != null) {
        oprot.writeFieldBegin(ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.idSet.size()));
          for (int _iter9 : struct.idSet)
          {
            oprot.writeI32(_iter9);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.bookingIdSet != null) {
        oprot.writeFieldBegin(BOOKING_ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.bookingIdSet.size()));
          for (int _iter10 : struct.bookingIdSet)
          {
            oprot.writeI32(_iter10);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.statusSet != null) {
        oprot.writeFieldBegin(STATUS_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.statusSet.size()));
          for (int _iter11 : struct.statusSet)
          {
            oprot.writeI32(_iter11);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_START_FIELD_DESC);
      oprot.writeI64(struct.createTimeStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_END_FIELD_DESC);
      oprot.writeI64(struct.createTimeEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRICE_START_FIELD_DESC);
      oprot.writeDouble(struct.priceStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRICE_END_FIELD_DESC);
      oprot.writeDouble(struct.priceEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderBoTupleSchemeFactory implements SchemeFactory {
    public OrderBoTupleScheme getScheme() {
      return new OrderBoTupleScheme();
    }
  }

  private static class OrderBoTupleScheme extends TupleScheme<OrderBo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderBo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetBookingId()) {
        optionals.set(1);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(2);
      }
      if (struct.isSetType()) {
        optionals.set(3);
      }
      if (struct.isSetPrice()) {
        optionals.set(4);
      }
      if (struct.isSetRuningNumber()) {
        optionals.set(5);
      }
      if (struct.isSetStatus()) {
        optionals.set(6);
      }
      if (struct.isSetEnabled()) {
        optionals.set(7);
      }
      if (struct.isSetIdSet()) {
        optionals.set(8);
      }
      if (struct.isSetBookingIdSet()) {
        optionals.set(9);
      }
      if (struct.isSetStatusSet()) {
        optionals.set(10);
      }
      if (struct.isSetCreateTimeStart()) {
        optionals.set(11);
      }
      if (struct.isSetCreateTimeEnd()) {
        optionals.set(12);
      }
      if (struct.isSetPriceStart()) {
        optionals.set(13);
      }
      if (struct.isSetPriceEnd()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetBookingId()) {
        oprot.writeI32(struct.bookingId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetRuningNumber()) {
        oprot.writeString(struct.runingNumber);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetEnabled()) {
        oprot.writeI32(struct.enabled);
      }
      if (struct.isSetIdSet()) {
        {
          oprot.writeI32(struct.idSet.size());
          for (int _iter12 : struct.idSet)
          {
            oprot.writeI32(_iter12);
          }
        }
      }
      if (struct.isSetBookingIdSet()) {
        {
          oprot.writeI32(struct.bookingIdSet.size());
          for (int _iter13 : struct.bookingIdSet)
          {
            oprot.writeI32(_iter13);
          }
        }
      }
      if (struct.isSetStatusSet()) {
        {
          oprot.writeI32(struct.statusSet.size());
          for (int _iter14 : struct.statusSet)
          {
            oprot.writeI32(_iter14);
          }
        }
      }
      if (struct.isSetCreateTimeStart()) {
        oprot.writeI64(struct.createTimeStart);
      }
      if (struct.isSetCreateTimeEnd()) {
        oprot.writeI64(struct.createTimeEnd);
      }
      if (struct.isSetPriceStart()) {
        oprot.writeDouble(struct.priceStart);
      }
      if (struct.isSetPriceEnd()) {
        oprot.writeDouble(struct.priceEnd);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderBo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bookingId = iprot.readI32();
        struct.setBookingIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.runingNumber = iprot.readString();
        struct.setRuningNumberIsSet(true);
      }
      if (incoming.get(6)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.enabled = iprot.readI32();
        struct.setEnabledIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TSet _set15 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.idSet = new HashSet<Integer>(2*_set15.size);
          for (int _i16 = 0; _i16 < _set15.size; ++_i16)
          {
            int _elem17;
            _elem17 = iprot.readI32();
            struct.idSet.add(_elem17);
          }
        }
        struct.setIdSetIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TSet _set18 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.bookingIdSet = new HashSet<Integer>(2*_set18.size);
          for (int _i19 = 0; _i19 < _set18.size; ++_i19)
          {
            int _elem20;
            _elem20 = iprot.readI32();
            struct.bookingIdSet.add(_elem20);
          }
        }
        struct.setBookingIdSetIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TSet _set21 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.statusSet = new HashSet<Integer>(2*_set21.size);
          for (int _i22 = 0; _i22 < _set21.size; ++_i22)
          {
            int _elem23;
            _elem23 = iprot.readI32();
            struct.statusSet.add(_elem23);
          }
        }
        struct.setStatusSetIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createTimeStart = iprot.readI64();
        struct.setCreateTimeStartIsSet(true);
      }
      if (incoming.get(12)) {
        struct.createTimeEnd = iprot.readI64();
        struct.setCreateTimeEndIsSet(true);
      }
      if (incoming.get(13)) {
        struct.priceStart = iprot.readDouble();
        struct.setPriceStartIsSet(true);
      }
      if (incoming.get(14)) {
        struct.priceEnd = iprot.readDouble();
        struct.setPriceEndIsSet(true);
      }
    }
  }

}

