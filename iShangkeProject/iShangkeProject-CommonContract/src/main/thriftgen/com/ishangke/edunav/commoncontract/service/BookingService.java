/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ishangke.edunav.commoncontract.service;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BookingService {

  public interface Iface {

    /**
     * 本方法为用户预定课程的功能。<br>
     * 用户可以预定一个课程
     * 
     * @param  courseBo                     被预定的课程信息
     * @param  bookingBo                    预定单信息
     * @param  CommentBookingAcceptBo       创建预定单留言信息
     * @param  userBo                       调用方法的用户的信息
     * 
     * @return 预定单实体 BookingBo
     * 
     * 
     * @param courseBo
     * @param bookingBo
     * @param commentBookingCreateBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.BookingBo createBookingByUser(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCreateBo commentBookingCreateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为合作商受理一个预定单功能。<br>
     * 合作商可以受理一个用户预定请求
     * 
     * @param  bookingBo                    预定单信息
     * @param  CommentBookingAcceptBo       受理预定单留言信息
     * @param  userBo                       调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param bookingBo
     * @param commentBookingAcceptBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.BookingBo acceptBookingByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptBo commentBookingAcceptBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为合作商受理成功一个预定单功能。<br>
     * 合作商可以将正在受理的预定单标注为受理成功
     * 
     * @param  bookingBo                           预定单信息
     * @param  CommentBookingAcceptSuccessBo       受理成功预定单留言信息
     * @param  userBo                              调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param bookinbBo
     * @param commentBookingAcceptSuccessBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.BookingBo acceptBookingSucceedByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookinbBo, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptSuccessBo commentBookingAcceptSuccessBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为合作商受理失败一个预定单功能。<br>
     * 合作商可以将正在受理的预定单标注为受理失败
     * 
     * @param  bookingBo                          预定单信息
     * @param  CommentBookingAcceptFailedBo       受理失败预定单留言信息
     * @param  userBo                             调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param bookingBo
     * @param commentBookingAcceptFailedBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.BookingBo acceptBookingFailedByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptFailedBo commentBookingAcceptFailedBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为合作商确认一个订单已生效。<br>
     * 合作商将一个受理成功的预定单标注为已付款
     * 
     * @param  bookingBo                      预定单信息
     * @param  CommentBookingValidateBo       接收已付款预定单留言信息
     * @param  userBo                         调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param bookingBo
     * @param commentBookingValidateBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.BookingBo validateBookingByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingValidateBo commentBookingValidateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为取消一个预定单功能。<br>
     * 用户可以取消一个相关预定单
     * 
     * @param  bookingBo                   预定单信息
     * @param  commentBookingCancelBo      取消预定单留言信息
     * @param  userBo                      调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param bookingBo
     * @param commentBookingCancelBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.BookingBo cancelBookingByUser(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为取消一个预定单功能。<br>
     * 合作商可以取消一个相关预定单
     * 
     * @param  bookingBo                   预定单信息
     * @param  commentBookingCancelBo      取消预定单留言信息
     * @param  userBo                      调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param bookingBo
     * @param commentBookingCancelBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.BookingBo cancelBookingByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为取消一个预定单功能。<br>
     * 管理员可以取消一个相关预定单
     * 
     * @param  bookingBo                    预定单信息
     * @param  commentBookingCancelBo       取消预定单留言信息
     * @param  userBo                       调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param bookingBo
     * @param commentBookingCancelBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.BookingBo cancelBookingByAdmin(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为查询预定单预定单功能。<br>
     * 合作商可以按条件查询自己的所有预定单，ishangke管理员可以按条件查找所有合作商的预定单
     * 
     * @param  bookingBo       需要检索和过滤的预定单信息
     * @param  partnerBo       合作商信息
     * @param  userBo          调用方法的用户的信息
     * @param  paginationBo    分页信息
     * 
     * @return 预定单实体 BookingBo 列表
     * 
     * 
     * @param bookingBo
     * @param partnerBo
     * @param userBo
     * @param paginationBo
     */
    public List<com.ishangke.edunav.commoncontract.model.BookingBo> query(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为查询订单历史操作。<br>
     * 合作商可以按条件查询自己的所有预定单历史操作，ishangke管理员可以按条件查找所有合作商的预定单历史操作
     * 
     * @param  bookingHistoryBo        需要检索和过滤的预定单历史信息
     * @param  partnerBo               合作商信息
     * @param  userBo                  调用方法的用户的信息
     * @param  paginationBo            分页信息
     * 
     * @return 预定单实体 bookingHistoryBo 列表
     * 
     * 
     * @param bookingHistoryBo
     * @param partnerBo
     * @param userBo
     * @param paginationBo
     */
    public List<com.ishangke.edunav.commoncontract.model.BookingHistoryBo> queryHistory(com.ishangke.edunav.commoncontract.model.BookingHistoryBo bookingHistoryBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createBookingByUser(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCreateBo commentBookingCreateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void acceptBookingByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptBo commentBookingAcceptBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void acceptBookingSucceedByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookinbBo, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptSuccessBo commentBookingAcceptSuccessBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void acceptBookingFailedByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptFailedBo commentBookingAcceptFailedBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void validateBookingByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingValidateBo commentBookingValidateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelBookingByUser(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelBookingByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelBookingByAdmin(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void query(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryHistory(com.ishangke.edunav.commoncontract.model.BookingHistoryBo bookingHistoryBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo createBookingByUser(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCreateBo commentBookingCreateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_createBookingByUser(courseBo, bookingBo, commentBookingCreateBo, userBo);
      return recv_createBookingByUser();
    }

    public void send_createBookingByUser(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCreateBo commentBookingCreateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      createBookingByUser_args args = new createBookingByUser_args();
      args.setCourseBo(courseBo);
      args.setBookingBo(bookingBo);
      args.setCommentBookingCreateBo(commentBookingCreateBo);
      args.setUserBo(userBo);
      sendBase("createBookingByUser", args);
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo recv_createBookingByUser() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      createBookingByUser_result result = new createBookingByUser_result();
      receiveBase(result, "createBookingByUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createBookingByUser failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo acceptBookingByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptBo commentBookingAcceptBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_acceptBookingByPartner(bookingBo, commentBookingAcceptBo, userBo);
      return recv_acceptBookingByPartner();
    }

    public void send_acceptBookingByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptBo commentBookingAcceptBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      acceptBookingByPartner_args args = new acceptBookingByPartner_args();
      args.setBookingBo(bookingBo);
      args.setCommentBookingAcceptBo(commentBookingAcceptBo);
      args.setUserBo(userBo);
      sendBase("acceptBookingByPartner", args);
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo recv_acceptBookingByPartner() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      acceptBookingByPartner_result result = new acceptBookingByPartner_result();
      receiveBase(result, "acceptBookingByPartner");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "acceptBookingByPartner failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo acceptBookingSucceedByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookinbBo, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptSuccessBo commentBookingAcceptSuccessBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_acceptBookingSucceedByPartner(bookinbBo, commentBookingAcceptSuccessBo, userBo);
      return recv_acceptBookingSucceedByPartner();
    }

    public void send_acceptBookingSucceedByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookinbBo, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptSuccessBo commentBookingAcceptSuccessBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      acceptBookingSucceedByPartner_args args = new acceptBookingSucceedByPartner_args();
      args.setBookinbBo(bookinbBo);
      args.setCommentBookingAcceptSuccessBo(commentBookingAcceptSuccessBo);
      args.setUserBo(userBo);
      sendBase("acceptBookingSucceedByPartner", args);
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo recv_acceptBookingSucceedByPartner() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      acceptBookingSucceedByPartner_result result = new acceptBookingSucceedByPartner_result();
      receiveBase(result, "acceptBookingSucceedByPartner");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "acceptBookingSucceedByPartner failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo acceptBookingFailedByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptFailedBo commentBookingAcceptFailedBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_acceptBookingFailedByPartner(bookingBo, commentBookingAcceptFailedBo, userBo);
      return recv_acceptBookingFailedByPartner();
    }

    public void send_acceptBookingFailedByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptFailedBo commentBookingAcceptFailedBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      acceptBookingFailedByPartner_args args = new acceptBookingFailedByPartner_args();
      args.setBookingBo(bookingBo);
      args.setCommentBookingAcceptFailedBo(commentBookingAcceptFailedBo);
      args.setUserBo(userBo);
      sendBase("acceptBookingFailedByPartner", args);
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo recv_acceptBookingFailedByPartner() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      acceptBookingFailedByPartner_result result = new acceptBookingFailedByPartner_result();
      receiveBase(result, "acceptBookingFailedByPartner");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "acceptBookingFailedByPartner failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo validateBookingByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingValidateBo commentBookingValidateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_validateBookingByPartner(bookingBo, commentBookingValidateBo, userBo);
      return recv_validateBookingByPartner();
    }

    public void send_validateBookingByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingValidateBo commentBookingValidateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      validateBookingByPartner_args args = new validateBookingByPartner_args();
      args.setBookingBo(bookingBo);
      args.setCommentBookingValidateBo(commentBookingValidateBo);
      args.setUserBo(userBo);
      sendBase("validateBookingByPartner", args);
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo recv_validateBookingByPartner() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      validateBookingByPartner_result result = new validateBookingByPartner_result();
      receiveBase(result, "validateBookingByPartner");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "validateBookingByPartner failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo cancelBookingByUser(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_cancelBookingByUser(bookingBo, commentBookingCancelBo, userBo);
      return recv_cancelBookingByUser();
    }

    public void send_cancelBookingByUser(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      cancelBookingByUser_args args = new cancelBookingByUser_args();
      args.setBookingBo(bookingBo);
      args.setCommentBookingCancelBo(commentBookingCancelBo);
      args.setUserBo(userBo);
      sendBase("cancelBookingByUser", args);
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo recv_cancelBookingByUser() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      cancelBookingByUser_result result = new cancelBookingByUser_result();
      receiveBase(result, "cancelBookingByUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelBookingByUser failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo cancelBookingByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_cancelBookingByPartner(bookingBo, commentBookingCancelBo, userBo);
      return recv_cancelBookingByPartner();
    }

    public void send_cancelBookingByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      cancelBookingByPartner_args args = new cancelBookingByPartner_args();
      args.setBookingBo(bookingBo);
      args.setCommentBookingCancelBo(commentBookingCancelBo);
      args.setUserBo(userBo);
      sendBase("cancelBookingByPartner", args);
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo recv_cancelBookingByPartner() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      cancelBookingByPartner_result result = new cancelBookingByPartner_result();
      receiveBase(result, "cancelBookingByPartner");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelBookingByPartner failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo cancelBookingByAdmin(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_cancelBookingByAdmin(bookingBo, commentBookingCancelBo, userBo);
      return recv_cancelBookingByAdmin();
    }

    public void send_cancelBookingByAdmin(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      cancelBookingByAdmin_args args = new cancelBookingByAdmin_args();
      args.setBookingBo(bookingBo);
      args.setCommentBookingCancelBo(commentBookingCancelBo);
      args.setUserBo(userBo);
      sendBase("cancelBookingByAdmin", args);
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo recv_cancelBookingByAdmin() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      cancelBookingByAdmin_result result = new cancelBookingByAdmin_result();
      receiveBase(result, "cancelBookingByAdmin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelBookingByAdmin failed: unknown result");
    }

    public List<com.ishangke.edunav.commoncontract.model.BookingBo> query(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_query(bookingBo, partnerBo, userBo, paginationBo);
      return recv_query();
    }

    public void send_query(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws org.apache.thrift.TException
    {
      query_args args = new query_args();
      args.setBookingBo(bookingBo);
      args.setPartnerBo(partnerBo);
      args.setUserBo(userBo);
      args.setPaginationBo(paginationBo);
      sendBase("query", args);
    }

    public List<com.ishangke.edunav.commoncontract.model.BookingBo> recv_query() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      query_result result = new query_result();
      receiveBase(result, "query");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query failed: unknown result");
    }

    public List<com.ishangke.edunav.commoncontract.model.BookingHistoryBo> queryHistory(com.ishangke.edunav.commoncontract.model.BookingHistoryBo bookingHistoryBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_queryHistory(bookingHistoryBo, partnerBo, userBo, paginationBo);
      return recv_queryHistory();
    }

    public void send_queryHistory(com.ishangke.edunav.commoncontract.model.BookingHistoryBo bookingHistoryBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws org.apache.thrift.TException
    {
      queryHistory_args args = new queryHistory_args();
      args.setBookingHistoryBo(bookingHistoryBo);
      args.setPartnerBo(partnerBo);
      args.setUserBo(userBo);
      args.setPaginationBo(paginationBo);
      sendBase("queryHistory", args);
    }

    public List<com.ishangke.edunav.commoncontract.model.BookingHistoryBo> recv_queryHistory() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      queryHistory_result result = new queryHistory_result();
      receiveBase(result, "queryHistory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryHistory failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createBookingByUser(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCreateBo commentBookingCreateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createBookingByUser_call method_call = new createBookingByUser_call(courseBo, bookingBo, commentBookingCreateBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createBookingByUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseBo courseBo;
      private com.ishangke.edunav.commoncontract.model.BookingBo bookingBo;
      private com.ishangke.edunav.commoncontract.model.CommentBookingCreateBo commentBookingCreateBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public createBookingByUser_call(com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCreateBo commentBookingCreateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseBo = courseBo;
        this.bookingBo = bookingBo;
        this.commentBookingCreateBo = commentBookingCreateBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createBookingByUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createBookingByUser_args args = new createBookingByUser_args();
        args.setCourseBo(courseBo);
        args.setBookingBo(bookingBo);
        args.setCommentBookingCreateBo(commentBookingCreateBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.BookingBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createBookingByUser();
      }
    }

    public void acceptBookingByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptBo commentBookingAcceptBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      acceptBookingByPartner_call method_call = new acceptBookingByPartner_call(bookingBo, commentBookingAcceptBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class acceptBookingByPartner_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.BookingBo bookingBo;
      private com.ishangke.edunav.commoncontract.model.CommentBookingAcceptBo commentBookingAcceptBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public acceptBookingByPartner_call(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptBo commentBookingAcceptBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookingBo = bookingBo;
        this.commentBookingAcceptBo = commentBookingAcceptBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("acceptBookingByPartner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        acceptBookingByPartner_args args = new acceptBookingByPartner_args();
        args.setBookingBo(bookingBo);
        args.setCommentBookingAcceptBo(commentBookingAcceptBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.BookingBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_acceptBookingByPartner();
      }
    }

    public void acceptBookingSucceedByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookinbBo, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptSuccessBo commentBookingAcceptSuccessBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      acceptBookingSucceedByPartner_call method_call = new acceptBookingSucceedByPartner_call(bookinbBo, commentBookingAcceptSuccessBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class acceptBookingSucceedByPartner_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.BookingBo bookinbBo;
      private com.ishangke.edunav.commoncontract.model.CommentBookingAcceptSuccessBo commentBookingAcceptSuccessBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public acceptBookingSucceedByPartner_call(com.ishangke.edunav.commoncontract.model.BookingBo bookinbBo, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptSuccessBo commentBookingAcceptSuccessBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookinbBo = bookinbBo;
        this.commentBookingAcceptSuccessBo = commentBookingAcceptSuccessBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("acceptBookingSucceedByPartner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        acceptBookingSucceedByPartner_args args = new acceptBookingSucceedByPartner_args();
        args.setBookinbBo(bookinbBo);
        args.setCommentBookingAcceptSuccessBo(commentBookingAcceptSuccessBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.BookingBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_acceptBookingSucceedByPartner();
      }
    }

    public void acceptBookingFailedByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptFailedBo commentBookingAcceptFailedBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      acceptBookingFailedByPartner_call method_call = new acceptBookingFailedByPartner_call(bookingBo, commentBookingAcceptFailedBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class acceptBookingFailedByPartner_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.BookingBo bookingBo;
      private com.ishangke.edunav.commoncontract.model.CommentBookingAcceptFailedBo commentBookingAcceptFailedBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public acceptBookingFailedByPartner_call(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptFailedBo commentBookingAcceptFailedBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookingBo = bookingBo;
        this.commentBookingAcceptFailedBo = commentBookingAcceptFailedBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("acceptBookingFailedByPartner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        acceptBookingFailedByPartner_args args = new acceptBookingFailedByPartner_args();
        args.setBookingBo(bookingBo);
        args.setCommentBookingAcceptFailedBo(commentBookingAcceptFailedBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.BookingBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_acceptBookingFailedByPartner();
      }
    }

    public void validateBookingByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingValidateBo commentBookingValidateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      validateBookingByPartner_call method_call = new validateBookingByPartner_call(bookingBo, commentBookingValidateBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class validateBookingByPartner_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.BookingBo bookingBo;
      private com.ishangke.edunav.commoncontract.model.CommentBookingValidateBo commentBookingValidateBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public validateBookingByPartner_call(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingValidateBo commentBookingValidateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookingBo = bookingBo;
        this.commentBookingValidateBo = commentBookingValidateBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("validateBookingByPartner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        validateBookingByPartner_args args = new validateBookingByPartner_args();
        args.setBookingBo(bookingBo);
        args.setCommentBookingValidateBo(commentBookingValidateBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.BookingBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_validateBookingByPartner();
      }
    }

    public void cancelBookingByUser(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelBookingByUser_call method_call = new cancelBookingByUser_call(bookingBo, commentBookingCancelBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelBookingByUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.BookingBo bookingBo;
      private com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public cancelBookingByUser_call(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookingBo = bookingBo;
        this.commentBookingCancelBo = commentBookingCancelBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelBookingByUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelBookingByUser_args args = new cancelBookingByUser_args();
        args.setBookingBo(bookingBo);
        args.setCommentBookingCancelBo(commentBookingCancelBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.BookingBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelBookingByUser();
      }
    }

    public void cancelBookingByPartner(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelBookingByPartner_call method_call = new cancelBookingByPartner_call(bookingBo, commentBookingCancelBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelBookingByPartner_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.BookingBo bookingBo;
      private com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public cancelBookingByPartner_call(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookingBo = bookingBo;
        this.commentBookingCancelBo = commentBookingCancelBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelBookingByPartner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelBookingByPartner_args args = new cancelBookingByPartner_args();
        args.setBookingBo(bookingBo);
        args.setCommentBookingCancelBo(commentBookingCancelBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.BookingBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelBookingByPartner();
      }
    }

    public void cancelBookingByAdmin(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelBookingByAdmin_call method_call = new cancelBookingByAdmin_call(bookingBo, commentBookingCancelBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelBookingByAdmin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.BookingBo bookingBo;
      private com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public cancelBookingByAdmin_call(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookingBo = bookingBo;
        this.commentBookingCancelBo = commentBookingCancelBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelBookingByAdmin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelBookingByAdmin_args args = new cancelBookingByAdmin_args();
        args.setBookingBo(bookingBo);
        args.setCommentBookingCancelBo(commentBookingCancelBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.BookingBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelBookingByAdmin();
      }
    }

    public void query(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_call method_call = new query_call(bookingBo, partnerBo, userBo, paginationBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.BookingBo bookingBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      private com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo;
      public query_call(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookingBo = bookingBo;
        this.partnerBo = partnerBo;
        this.userBo = userBo;
        this.paginationBo = paginationBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_args args = new query_args();
        args.setBookingBo(bookingBo);
        args.setPartnerBo(partnerBo);
        args.setUserBo(userBo);
        args.setPaginationBo(paginationBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.ishangke.edunav.commoncontract.model.BookingBo> getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query();
      }
    }

    public void queryHistory(com.ishangke.edunav.commoncontract.model.BookingHistoryBo bookingHistoryBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryHistory_call method_call = new queryHistory_call(bookingHistoryBo, partnerBo, userBo, paginationBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryHistory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.BookingHistoryBo bookingHistoryBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      private com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo;
      public queryHistory_call(com.ishangke.edunav.commoncontract.model.BookingHistoryBo bookingHistoryBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookingHistoryBo = bookingHistoryBo;
        this.partnerBo = partnerBo;
        this.userBo = userBo;
        this.paginationBo = paginationBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryHistory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryHistory_args args = new queryHistory_args();
        args.setBookingHistoryBo(bookingHistoryBo);
        args.setPartnerBo(partnerBo);
        args.setUserBo(userBo);
        args.setPaginationBo(paginationBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.ishangke.edunav.commoncontract.model.BookingHistoryBo> getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryHistory();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createBookingByUser", new createBookingByUser());
      processMap.put("acceptBookingByPartner", new acceptBookingByPartner());
      processMap.put("acceptBookingSucceedByPartner", new acceptBookingSucceedByPartner());
      processMap.put("acceptBookingFailedByPartner", new acceptBookingFailedByPartner());
      processMap.put("validateBookingByPartner", new validateBookingByPartner());
      processMap.put("cancelBookingByUser", new cancelBookingByUser());
      processMap.put("cancelBookingByPartner", new cancelBookingByPartner());
      processMap.put("cancelBookingByAdmin", new cancelBookingByAdmin());
      processMap.put("query", new query());
      processMap.put("queryHistory", new queryHistory());
      return processMap;
    }

    public static class createBookingByUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createBookingByUser_args> {
      public createBookingByUser() {
        super("createBookingByUser");
      }

      public createBookingByUser_args getEmptyArgsInstance() {
        return new createBookingByUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createBookingByUser_result getResult(I iface, createBookingByUser_args args) throws org.apache.thrift.TException {
        createBookingByUser_result result = new createBookingByUser_result();
        try {
          result.success = iface.createBookingByUser(args.courseBo, args.bookingBo, args.commentBookingCreateBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class acceptBookingByPartner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, acceptBookingByPartner_args> {
      public acceptBookingByPartner() {
        super("acceptBookingByPartner");
      }

      public acceptBookingByPartner_args getEmptyArgsInstance() {
        return new acceptBookingByPartner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public acceptBookingByPartner_result getResult(I iface, acceptBookingByPartner_args args) throws org.apache.thrift.TException {
        acceptBookingByPartner_result result = new acceptBookingByPartner_result();
        try {
          result.success = iface.acceptBookingByPartner(args.bookingBo, args.commentBookingAcceptBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class acceptBookingSucceedByPartner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, acceptBookingSucceedByPartner_args> {
      public acceptBookingSucceedByPartner() {
        super("acceptBookingSucceedByPartner");
      }

      public acceptBookingSucceedByPartner_args getEmptyArgsInstance() {
        return new acceptBookingSucceedByPartner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public acceptBookingSucceedByPartner_result getResult(I iface, acceptBookingSucceedByPartner_args args) throws org.apache.thrift.TException {
        acceptBookingSucceedByPartner_result result = new acceptBookingSucceedByPartner_result();
        try {
          result.success = iface.acceptBookingSucceedByPartner(args.bookinbBo, args.commentBookingAcceptSuccessBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class acceptBookingFailedByPartner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, acceptBookingFailedByPartner_args> {
      public acceptBookingFailedByPartner() {
        super("acceptBookingFailedByPartner");
      }

      public acceptBookingFailedByPartner_args getEmptyArgsInstance() {
        return new acceptBookingFailedByPartner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public acceptBookingFailedByPartner_result getResult(I iface, acceptBookingFailedByPartner_args args) throws org.apache.thrift.TException {
        acceptBookingFailedByPartner_result result = new acceptBookingFailedByPartner_result();
        try {
          result.success = iface.acceptBookingFailedByPartner(args.bookingBo, args.commentBookingAcceptFailedBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class validateBookingByPartner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, validateBookingByPartner_args> {
      public validateBookingByPartner() {
        super("validateBookingByPartner");
      }

      public validateBookingByPartner_args getEmptyArgsInstance() {
        return new validateBookingByPartner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public validateBookingByPartner_result getResult(I iface, validateBookingByPartner_args args) throws org.apache.thrift.TException {
        validateBookingByPartner_result result = new validateBookingByPartner_result();
        try {
          result.success = iface.validateBookingByPartner(args.bookingBo, args.commentBookingValidateBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class cancelBookingByUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelBookingByUser_args> {
      public cancelBookingByUser() {
        super("cancelBookingByUser");
      }

      public cancelBookingByUser_args getEmptyArgsInstance() {
        return new cancelBookingByUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelBookingByUser_result getResult(I iface, cancelBookingByUser_args args) throws org.apache.thrift.TException {
        cancelBookingByUser_result result = new cancelBookingByUser_result();
        try {
          result.success = iface.cancelBookingByUser(args.bookingBo, args.commentBookingCancelBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class cancelBookingByPartner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelBookingByPartner_args> {
      public cancelBookingByPartner() {
        super("cancelBookingByPartner");
      }

      public cancelBookingByPartner_args getEmptyArgsInstance() {
        return new cancelBookingByPartner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelBookingByPartner_result getResult(I iface, cancelBookingByPartner_args args) throws org.apache.thrift.TException {
        cancelBookingByPartner_result result = new cancelBookingByPartner_result();
        try {
          result.success = iface.cancelBookingByPartner(args.bookingBo, args.commentBookingCancelBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class cancelBookingByAdmin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelBookingByAdmin_args> {
      public cancelBookingByAdmin() {
        super("cancelBookingByAdmin");
      }

      public cancelBookingByAdmin_args getEmptyArgsInstance() {
        return new cancelBookingByAdmin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelBookingByAdmin_result getResult(I iface, cancelBookingByAdmin_args args) throws org.apache.thrift.TException {
        cancelBookingByAdmin_result result = new cancelBookingByAdmin_result();
        try {
          result.success = iface.cancelBookingByAdmin(args.bookingBo, args.commentBookingCancelBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class query<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_args> {
      public query() {
        super("query");
      }

      public query_args getEmptyArgsInstance() {
        return new query_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_result getResult(I iface, query_args args) throws org.apache.thrift.TException {
        query_result result = new query_result();
        try {
          result.success = iface.query(args.bookingBo, args.partnerBo, args.userBo, args.paginationBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class queryHistory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryHistory_args> {
      public queryHistory() {
        super("queryHistory");
      }

      public queryHistory_args getEmptyArgsInstance() {
        return new queryHistory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryHistory_result getResult(I iface, queryHistory_args args) throws org.apache.thrift.TException {
        queryHistory_result result = new queryHistory_result();
        try {
          result.success = iface.queryHistory(args.bookingHistoryBo, args.partnerBo, args.userBo, args.paginationBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createBookingByUser", new createBookingByUser());
      processMap.put("acceptBookingByPartner", new acceptBookingByPartner());
      processMap.put("acceptBookingSucceedByPartner", new acceptBookingSucceedByPartner());
      processMap.put("acceptBookingFailedByPartner", new acceptBookingFailedByPartner());
      processMap.put("validateBookingByPartner", new validateBookingByPartner());
      processMap.put("cancelBookingByUser", new cancelBookingByUser());
      processMap.put("cancelBookingByPartner", new cancelBookingByPartner());
      processMap.put("cancelBookingByAdmin", new cancelBookingByAdmin());
      processMap.put("query", new query());
      processMap.put("queryHistory", new queryHistory());
      return processMap;
    }

    public static class createBookingByUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createBookingByUser_args, com.ishangke.edunav.commoncontract.model.BookingBo> {
      public createBookingByUser() {
        super("createBookingByUser");
      }

      public createBookingByUser_args getEmptyArgsInstance() {
        return new createBookingByUser_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.BookingBo o) {
            createBookingByUser_result result = new createBookingByUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createBookingByUser_result result = new createBookingByUser_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createBookingByUser_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo> resultHandler) throws TException {
        iface.createBookingByUser(args.courseBo, args.bookingBo, args.commentBookingCreateBo, args.userBo,resultHandler);
      }
    }

    public static class acceptBookingByPartner<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, acceptBookingByPartner_args, com.ishangke.edunav.commoncontract.model.BookingBo> {
      public acceptBookingByPartner() {
        super("acceptBookingByPartner");
      }

      public acceptBookingByPartner_args getEmptyArgsInstance() {
        return new acceptBookingByPartner_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.BookingBo o) {
            acceptBookingByPartner_result result = new acceptBookingByPartner_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            acceptBookingByPartner_result result = new acceptBookingByPartner_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, acceptBookingByPartner_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo> resultHandler) throws TException {
        iface.acceptBookingByPartner(args.bookingBo, args.commentBookingAcceptBo, args.userBo,resultHandler);
      }
    }

    public static class acceptBookingSucceedByPartner<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, acceptBookingSucceedByPartner_args, com.ishangke.edunav.commoncontract.model.BookingBo> {
      public acceptBookingSucceedByPartner() {
        super("acceptBookingSucceedByPartner");
      }

      public acceptBookingSucceedByPartner_args getEmptyArgsInstance() {
        return new acceptBookingSucceedByPartner_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.BookingBo o) {
            acceptBookingSucceedByPartner_result result = new acceptBookingSucceedByPartner_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            acceptBookingSucceedByPartner_result result = new acceptBookingSucceedByPartner_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, acceptBookingSucceedByPartner_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo> resultHandler) throws TException {
        iface.acceptBookingSucceedByPartner(args.bookinbBo, args.commentBookingAcceptSuccessBo, args.userBo,resultHandler);
      }
    }

    public static class acceptBookingFailedByPartner<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, acceptBookingFailedByPartner_args, com.ishangke.edunav.commoncontract.model.BookingBo> {
      public acceptBookingFailedByPartner() {
        super("acceptBookingFailedByPartner");
      }

      public acceptBookingFailedByPartner_args getEmptyArgsInstance() {
        return new acceptBookingFailedByPartner_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.BookingBo o) {
            acceptBookingFailedByPartner_result result = new acceptBookingFailedByPartner_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            acceptBookingFailedByPartner_result result = new acceptBookingFailedByPartner_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, acceptBookingFailedByPartner_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo> resultHandler) throws TException {
        iface.acceptBookingFailedByPartner(args.bookingBo, args.commentBookingAcceptFailedBo, args.userBo,resultHandler);
      }
    }

    public static class validateBookingByPartner<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, validateBookingByPartner_args, com.ishangke.edunav.commoncontract.model.BookingBo> {
      public validateBookingByPartner() {
        super("validateBookingByPartner");
      }

      public validateBookingByPartner_args getEmptyArgsInstance() {
        return new validateBookingByPartner_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.BookingBo o) {
            validateBookingByPartner_result result = new validateBookingByPartner_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            validateBookingByPartner_result result = new validateBookingByPartner_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, validateBookingByPartner_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo> resultHandler) throws TException {
        iface.validateBookingByPartner(args.bookingBo, args.commentBookingValidateBo, args.userBo,resultHandler);
      }
    }

    public static class cancelBookingByUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelBookingByUser_args, com.ishangke.edunav.commoncontract.model.BookingBo> {
      public cancelBookingByUser() {
        super("cancelBookingByUser");
      }

      public cancelBookingByUser_args getEmptyArgsInstance() {
        return new cancelBookingByUser_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.BookingBo o) {
            cancelBookingByUser_result result = new cancelBookingByUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelBookingByUser_result result = new cancelBookingByUser_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelBookingByUser_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo> resultHandler) throws TException {
        iface.cancelBookingByUser(args.bookingBo, args.commentBookingCancelBo, args.userBo,resultHandler);
      }
    }

    public static class cancelBookingByPartner<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelBookingByPartner_args, com.ishangke.edunav.commoncontract.model.BookingBo> {
      public cancelBookingByPartner() {
        super("cancelBookingByPartner");
      }

      public cancelBookingByPartner_args getEmptyArgsInstance() {
        return new cancelBookingByPartner_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.BookingBo o) {
            cancelBookingByPartner_result result = new cancelBookingByPartner_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelBookingByPartner_result result = new cancelBookingByPartner_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelBookingByPartner_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo> resultHandler) throws TException {
        iface.cancelBookingByPartner(args.bookingBo, args.commentBookingCancelBo, args.userBo,resultHandler);
      }
    }

    public static class cancelBookingByAdmin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelBookingByAdmin_args, com.ishangke.edunav.commoncontract.model.BookingBo> {
      public cancelBookingByAdmin() {
        super("cancelBookingByAdmin");
      }

      public cancelBookingByAdmin_args getEmptyArgsInstance() {
        return new cancelBookingByAdmin_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.BookingBo o) {
            cancelBookingByAdmin_result result = new cancelBookingByAdmin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelBookingByAdmin_result result = new cancelBookingByAdmin_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelBookingByAdmin_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.BookingBo> resultHandler) throws TException {
        iface.cancelBookingByAdmin(args.bookingBo, args.commentBookingCancelBo, args.userBo,resultHandler);
      }
    }

    public static class query<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_args, List<com.ishangke.edunav.commoncontract.model.BookingBo>> {
      public query() {
        super("query");
      }

      public query_args getEmptyArgsInstance() {
        return new query_args();
      }

      public AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.BookingBo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.BookingBo>>() { 
          public void onComplete(List<com.ishangke.edunav.commoncontract.model.BookingBo> o) {
            query_result result = new query_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            query_result result = new query_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, query_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.BookingBo>> resultHandler) throws TException {
        iface.query(args.bookingBo, args.partnerBo, args.userBo, args.paginationBo,resultHandler);
      }
    }

    public static class queryHistory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryHistory_args, List<com.ishangke.edunav.commoncontract.model.BookingHistoryBo>> {
      public queryHistory() {
        super("queryHistory");
      }

      public queryHistory_args getEmptyArgsInstance() {
        return new queryHistory_args();
      }

      public AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.BookingHistoryBo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.BookingHistoryBo>>() { 
          public void onComplete(List<com.ishangke.edunav.commoncontract.model.BookingHistoryBo> o) {
            queryHistory_result result = new queryHistory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryHistory_result result = new queryHistory_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryHistory_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.BookingHistoryBo>> resultHandler) throws TException {
        iface.queryHistory(args.bookingHistoryBo, args.partnerBo, args.userBo, args.paginationBo,resultHandler);
      }
    }

  }

  public static class createBookingByUser_args implements org.apache.thrift.TBase<createBookingByUser_args, createBookingByUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<createBookingByUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createBookingByUser_args");

    private static final org.apache.thrift.protocol.TField COURSE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BOOKING_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField COMMENT_BOOKING_CREATE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("commentBookingCreateBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createBookingByUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createBookingByUser_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo courseBo; // required
    public com.ishangke.edunav.commoncontract.model.BookingBo bookingBo; // required
    public com.ishangke.edunav.commoncontract.model.CommentBookingCreateBo commentBookingCreateBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_BO((short)1, "courseBo"),
      BOOKING_BO((short)2, "bookingBo"),
      COMMENT_BOOKING_CREATE_BO((short)3, "commentBookingCreateBo"),
      USER_BO((short)4, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_BO
            return COURSE_BO;
          case 2: // BOOKING_BO
            return BOOKING_BO;
          case 3: // COMMENT_BOOKING_CREATE_BO
            return COMMENT_BOOKING_CREATE_BO;
          case 4: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.BOOKING_BO, new org.apache.thrift.meta_data.FieldMetaData("bookingBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.BookingBo.class)));
      tmpMap.put(_Fields.COMMENT_BOOKING_CREATE_BO, new org.apache.thrift.meta_data.FieldMetaData("commentBookingCreateBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CommentBookingCreateBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createBookingByUser_args.class, metaDataMap);
    }

    public createBookingByUser_args() {
    }

    public createBookingByUser_args(
      com.ishangke.edunav.commoncontract.model.CourseBo courseBo,
      com.ishangke.edunav.commoncontract.model.BookingBo bookingBo,
      com.ishangke.edunav.commoncontract.model.CommentBookingCreateBo commentBookingCreateBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseBo = courseBo;
      this.bookingBo = bookingBo;
      this.commentBookingCreateBo = commentBookingCreateBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createBookingByUser_args(createBookingByUser_args other) {
      if (other.isSetCourseBo()) {
        this.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo(other.courseBo);
      }
      if (other.isSetBookingBo()) {
        this.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo(other.bookingBo);
      }
      if (other.isSetCommentBookingCreateBo()) {
        this.commentBookingCreateBo = new com.ishangke.edunav.commoncontract.model.CommentBookingCreateBo(other.commentBookingCreateBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public createBookingByUser_args deepCopy() {
      return new createBookingByUser_args(this);
    }

    @Override
    public void clear() {
      this.courseBo = null;
      this.bookingBo = null;
      this.commentBookingCreateBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getCourseBo() {
      return this.courseBo;
    }

    public createBookingByUser_args setCourseBo(com.ishangke.edunav.commoncontract.model.CourseBo courseBo) {
      this.courseBo = courseBo;
      return this;
    }

    public void unsetCourseBo() {
      this.courseBo = null;
    }

    /** Returns true if field courseBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseBo() {
      return this.courseBo != null;
    }

    public void setCourseBoIsSet(boolean value) {
      if (!value) {
        this.courseBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo getBookingBo() {
      return this.bookingBo;
    }

    public createBookingByUser_args setBookingBo(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo) {
      this.bookingBo = bookingBo;
      return this;
    }

    public void unsetBookingBo() {
      this.bookingBo = null;
    }

    /** Returns true if field bookingBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBookingBo() {
      return this.bookingBo != null;
    }

    public void setBookingBoIsSet(boolean value) {
      if (!value) {
        this.bookingBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CommentBookingCreateBo getCommentBookingCreateBo() {
      return this.commentBookingCreateBo;
    }

    public createBookingByUser_args setCommentBookingCreateBo(com.ishangke.edunav.commoncontract.model.CommentBookingCreateBo commentBookingCreateBo) {
      this.commentBookingCreateBo = commentBookingCreateBo;
      return this;
    }

    public void unsetCommentBookingCreateBo() {
      this.commentBookingCreateBo = null;
    }

    /** Returns true if field commentBookingCreateBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommentBookingCreateBo() {
      return this.commentBookingCreateBo != null;
    }

    public void setCommentBookingCreateBoIsSet(boolean value) {
      if (!value) {
        this.commentBookingCreateBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public createBookingByUser_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_BO:
        if (value == null) {
          unsetCourseBo();
        } else {
          setCourseBo((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case BOOKING_BO:
        if (value == null) {
          unsetBookingBo();
        } else {
          setBookingBo((com.ishangke.edunav.commoncontract.model.BookingBo)value);
        }
        break;

      case COMMENT_BOOKING_CREATE_BO:
        if (value == null) {
          unsetCommentBookingCreateBo();
        } else {
          setCommentBookingCreateBo((com.ishangke.edunav.commoncontract.model.CommentBookingCreateBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_BO:
        return getCourseBo();

      case BOOKING_BO:
        return getBookingBo();

      case COMMENT_BOOKING_CREATE_BO:
        return getCommentBookingCreateBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_BO:
        return isSetCourseBo();
      case BOOKING_BO:
        return isSetBookingBo();
      case COMMENT_BOOKING_CREATE_BO:
        return isSetCommentBookingCreateBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createBookingByUser_args)
        return this.equals((createBookingByUser_args)that);
      return false;
    }

    public boolean equals(createBookingByUser_args that) {
      if (that == null)
        return false;

      boolean this_present_courseBo = true && this.isSetCourseBo();
      boolean that_present_courseBo = true && that.isSetCourseBo();
      if (this_present_courseBo || that_present_courseBo) {
        if (!(this_present_courseBo && that_present_courseBo))
          return false;
        if (!this.courseBo.equals(that.courseBo))
          return false;
      }

      boolean this_present_bookingBo = true && this.isSetBookingBo();
      boolean that_present_bookingBo = true && that.isSetBookingBo();
      if (this_present_bookingBo || that_present_bookingBo) {
        if (!(this_present_bookingBo && that_present_bookingBo))
          return false;
        if (!this.bookingBo.equals(that.bookingBo))
          return false;
      }

      boolean this_present_commentBookingCreateBo = true && this.isSetCommentBookingCreateBo();
      boolean that_present_commentBookingCreateBo = true && that.isSetCommentBookingCreateBo();
      if (this_present_commentBookingCreateBo || that_present_commentBookingCreateBo) {
        if (!(this_present_commentBookingCreateBo && that_present_commentBookingCreateBo))
          return false;
        if (!this.commentBookingCreateBo.equals(that.commentBookingCreateBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseBo = true && (isSetCourseBo());
      builder.append(present_courseBo);
      if (present_courseBo)
        builder.append(courseBo);

      boolean present_bookingBo = true && (isSetBookingBo());
      builder.append(present_bookingBo);
      if (present_bookingBo)
        builder.append(bookingBo);

      boolean present_commentBookingCreateBo = true && (isSetCommentBookingCreateBo());
      builder.append(present_commentBookingCreateBo);
      if (present_commentBookingCreateBo)
        builder.append(commentBookingCreateBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createBookingByUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseBo()).compareTo(other.isSetCourseBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseBo, other.courseBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBookingBo()).compareTo(other.isSetBookingBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookingBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingBo, other.bookingBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommentBookingCreateBo()).compareTo(other.isSetCommentBookingCreateBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommentBookingCreateBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentBookingCreateBo, other.commentBookingCreateBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createBookingByUser_args(");
      boolean first = true;

      sb.append("courseBo:");
      if (this.courseBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bookingBo:");
      if (this.bookingBo == null) {
        sb.append("null");
      } else {
        sb.append(this.bookingBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commentBookingCreateBo:");
      if (this.commentBookingCreateBo == null) {
        sb.append("null");
      } else {
        sb.append(this.commentBookingCreateBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseBo != null) {
        courseBo.validate();
      }
      if (bookingBo != null) {
        bookingBo.validate();
      }
      if (commentBookingCreateBo != null) {
        commentBookingCreateBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createBookingByUser_argsStandardSchemeFactory implements SchemeFactory {
      public createBookingByUser_argsStandardScheme getScheme() {
        return new createBookingByUser_argsStandardScheme();
      }
    }

    private static class createBookingByUser_argsStandardScheme extends StandardScheme<createBookingByUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createBookingByUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.courseBo.read(iprot);
                struct.setCourseBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BOOKING_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo();
                struct.bookingBo.read(iprot);
                struct.setBookingBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMMENT_BOOKING_CREATE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commentBookingCreateBo = new com.ishangke.edunav.commoncontract.model.CommentBookingCreateBo();
                struct.commentBookingCreateBo.read(iprot);
                struct.setCommentBookingCreateBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createBookingByUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseBo != null) {
          oprot.writeFieldBegin(COURSE_BO_FIELD_DESC);
          struct.courseBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bookingBo != null) {
          oprot.writeFieldBegin(BOOKING_BO_FIELD_DESC);
          struct.bookingBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.commentBookingCreateBo != null) {
          oprot.writeFieldBegin(COMMENT_BOOKING_CREATE_BO_FIELD_DESC);
          struct.commentBookingCreateBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createBookingByUser_argsTupleSchemeFactory implements SchemeFactory {
      public createBookingByUser_argsTupleScheme getScheme() {
        return new createBookingByUser_argsTupleScheme();
      }
    }

    private static class createBookingByUser_argsTupleScheme extends TupleScheme<createBookingByUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createBookingByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseBo()) {
          optionals.set(0);
        }
        if (struct.isSetBookingBo()) {
          optionals.set(1);
        }
        if (struct.isSetCommentBookingCreateBo()) {
          optionals.set(2);
        }
        if (struct.isSetUserBo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCourseBo()) {
          struct.courseBo.write(oprot);
        }
        if (struct.isSetBookingBo()) {
          struct.bookingBo.write(oprot);
        }
        if (struct.isSetCommentBookingCreateBo()) {
          struct.commentBookingCreateBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createBookingByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.courseBo.read(iprot);
          struct.setCourseBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo();
          struct.bookingBo.read(iprot);
          struct.setBookingBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.commentBookingCreateBo = new com.ishangke.edunav.commoncontract.model.CommentBookingCreateBo();
          struct.commentBookingCreateBo.read(iprot);
          struct.setCommentBookingCreateBoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class createBookingByUser_result implements org.apache.thrift.TBase<createBookingByUser_result, createBookingByUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<createBookingByUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createBookingByUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createBookingByUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createBookingByUser_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.BookingBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createBookingByUser_result.class, metaDataMap);
    }

    public createBookingByUser_result() {
    }

    public createBookingByUser_result(
      com.ishangke.edunav.commoncontract.model.BookingBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createBookingByUser_result(createBookingByUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.BookingBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public createBookingByUser_result deepCopy() {
      return new createBookingByUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo getSuccess() {
      return this.success;
    }

    public createBookingByUser_result setSuccess(com.ishangke.edunav.commoncontract.model.BookingBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public createBookingByUser_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.BookingBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createBookingByUser_result)
        return this.equals((createBookingByUser_result)that);
      return false;
    }

    public boolean equals(createBookingByUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createBookingByUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createBookingByUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createBookingByUser_resultStandardSchemeFactory implements SchemeFactory {
      public createBookingByUser_resultStandardScheme getScheme() {
        return new createBookingByUser_resultStandardScheme();
      }
    }

    private static class createBookingByUser_resultStandardScheme extends StandardScheme<createBookingByUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createBookingByUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.BookingBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createBookingByUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createBookingByUser_resultTupleSchemeFactory implements SchemeFactory {
      public createBookingByUser_resultTupleScheme getScheme() {
        return new createBookingByUser_resultTupleScheme();
      }
    }

    private static class createBookingByUser_resultTupleScheme extends TupleScheme<createBookingByUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createBookingByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createBookingByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.BookingBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class acceptBookingByPartner_args implements org.apache.thrift.TBase<acceptBookingByPartner_args, acceptBookingByPartner_args._Fields>, java.io.Serializable, Cloneable, Comparable<acceptBookingByPartner_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("acceptBookingByPartner_args");

    private static final org.apache.thrift.protocol.TField BOOKING_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COMMENT_BOOKING_ACCEPT_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("commentBookingAcceptBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new acceptBookingByPartner_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new acceptBookingByPartner_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo bookingBo; // required
    public com.ishangke.edunav.commoncontract.model.CommentBookingAcceptBo commentBookingAcceptBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOKING_BO((short)1, "bookingBo"),
      COMMENT_BOOKING_ACCEPT_BO((short)2, "commentBookingAcceptBo"),
      USER_BO((short)3, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOKING_BO
            return BOOKING_BO;
          case 2: // COMMENT_BOOKING_ACCEPT_BO
            return COMMENT_BOOKING_ACCEPT_BO;
          case 3: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOKING_BO, new org.apache.thrift.meta_data.FieldMetaData("bookingBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.BookingBo.class)));
      tmpMap.put(_Fields.COMMENT_BOOKING_ACCEPT_BO, new org.apache.thrift.meta_data.FieldMetaData("commentBookingAcceptBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(acceptBookingByPartner_args.class, metaDataMap);
    }

    public acceptBookingByPartner_args() {
    }

    public acceptBookingByPartner_args(
      com.ishangke.edunav.commoncontract.model.BookingBo bookingBo,
      com.ishangke.edunav.commoncontract.model.CommentBookingAcceptBo commentBookingAcceptBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.bookingBo = bookingBo;
      this.commentBookingAcceptBo = commentBookingAcceptBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acceptBookingByPartner_args(acceptBookingByPartner_args other) {
      if (other.isSetBookingBo()) {
        this.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo(other.bookingBo);
      }
      if (other.isSetCommentBookingAcceptBo()) {
        this.commentBookingAcceptBo = new com.ishangke.edunav.commoncontract.model.CommentBookingAcceptBo(other.commentBookingAcceptBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public acceptBookingByPartner_args deepCopy() {
      return new acceptBookingByPartner_args(this);
    }

    @Override
    public void clear() {
      this.bookingBo = null;
      this.commentBookingAcceptBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo getBookingBo() {
      return this.bookingBo;
    }

    public acceptBookingByPartner_args setBookingBo(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo) {
      this.bookingBo = bookingBo;
      return this;
    }

    public void unsetBookingBo() {
      this.bookingBo = null;
    }

    /** Returns true if field bookingBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBookingBo() {
      return this.bookingBo != null;
    }

    public void setBookingBoIsSet(boolean value) {
      if (!value) {
        this.bookingBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CommentBookingAcceptBo getCommentBookingAcceptBo() {
      return this.commentBookingAcceptBo;
    }

    public acceptBookingByPartner_args setCommentBookingAcceptBo(com.ishangke.edunav.commoncontract.model.CommentBookingAcceptBo commentBookingAcceptBo) {
      this.commentBookingAcceptBo = commentBookingAcceptBo;
      return this;
    }

    public void unsetCommentBookingAcceptBo() {
      this.commentBookingAcceptBo = null;
    }

    /** Returns true if field commentBookingAcceptBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommentBookingAcceptBo() {
      return this.commentBookingAcceptBo != null;
    }

    public void setCommentBookingAcceptBoIsSet(boolean value) {
      if (!value) {
        this.commentBookingAcceptBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public acceptBookingByPartner_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOOKING_BO:
        if (value == null) {
          unsetBookingBo();
        } else {
          setBookingBo((com.ishangke.edunav.commoncontract.model.BookingBo)value);
        }
        break;

      case COMMENT_BOOKING_ACCEPT_BO:
        if (value == null) {
          unsetCommentBookingAcceptBo();
        } else {
          setCommentBookingAcceptBo((com.ishangke.edunav.commoncontract.model.CommentBookingAcceptBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOKING_BO:
        return getBookingBo();

      case COMMENT_BOOKING_ACCEPT_BO:
        return getCommentBookingAcceptBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOOKING_BO:
        return isSetBookingBo();
      case COMMENT_BOOKING_ACCEPT_BO:
        return isSetCommentBookingAcceptBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acceptBookingByPartner_args)
        return this.equals((acceptBookingByPartner_args)that);
      return false;
    }

    public boolean equals(acceptBookingByPartner_args that) {
      if (that == null)
        return false;

      boolean this_present_bookingBo = true && this.isSetBookingBo();
      boolean that_present_bookingBo = true && that.isSetBookingBo();
      if (this_present_bookingBo || that_present_bookingBo) {
        if (!(this_present_bookingBo && that_present_bookingBo))
          return false;
        if (!this.bookingBo.equals(that.bookingBo))
          return false;
      }

      boolean this_present_commentBookingAcceptBo = true && this.isSetCommentBookingAcceptBo();
      boolean that_present_commentBookingAcceptBo = true && that.isSetCommentBookingAcceptBo();
      if (this_present_commentBookingAcceptBo || that_present_commentBookingAcceptBo) {
        if (!(this_present_commentBookingAcceptBo && that_present_commentBookingAcceptBo))
          return false;
        if (!this.commentBookingAcceptBo.equals(that.commentBookingAcceptBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_bookingBo = true && (isSetBookingBo());
      builder.append(present_bookingBo);
      if (present_bookingBo)
        builder.append(bookingBo);

      boolean present_commentBookingAcceptBo = true && (isSetCommentBookingAcceptBo());
      builder.append(present_commentBookingAcceptBo);
      if (present_commentBookingAcceptBo)
        builder.append(commentBookingAcceptBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(acceptBookingByPartner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBookingBo()).compareTo(other.isSetBookingBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookingBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingBo, other.bookingBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommentBookingAcceptBo()).compareTo(other.isSetCommentBookingAcceptBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommentBookingAcceptBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentBookingAcceptBo, other.commentBookingAcceptBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("acceptBookingByPartner_args(");
      boolean first = true;

      sb.append("bookingBo:");
      if (this.bookingBo == null) {
        sb.append("null");
      } else {
        sb.append(this.bookingBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commentBookingAcceptBo:");
      if (this.commentBookingAcceptBo == null) {
        sb.append("null");
      } else {
        sb.append(this.commentBookingAcceptBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bookingBo != null) {
        bookingBo.validate();
      }
      if (commentBookingAcceptBo != null) {
        commentBookingAcceptBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class acceptBookingByPartner_argsStandardSchemeFactory implements SchemeFactory {
      public acceptBookingByPartner_argsStandardScheme getScheme() {
        return new acceptBookingByPartner_argsStandardScheme();
      }
    }

    private static class acceptBookingByPartner_argsStandardScheme extends StandardScheme<acceptBookingByPartner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, acceptBookingByPartner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOKING_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo();
                struct.bookingBo.read(iprot);
                struct.setBookingBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMENT_BOOKING_ACCEPT_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commentBookingAcceptBo = new com.ishangke.edunav.commoncontract.model.CommentBookingAcceptBo();
                struct.commentBookingAcceptBo.read(iprot);
                struct.setCommentBookingAcceptBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, acceptBookingByPartner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookingBo != null) {
          oprot.writeFieldBegin(BOOKING_BO_FIELD_DESC);
          struct.bookingBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.commentBookingAcceptBo != null) {
          oprot.writeFieldBegin(COMMENT_BOOKING_ACCEPT_BO_FIELD_DESC);
          struct.commentBookingAcceptBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class acceptBookingByPartner_argsTupleSchemeFactory implements SchemeFactory {
      public acceptBookingByPartner_argsTupleScheme getScheme() {
        return new acceptBookingByPartner_argsTupleScheme();
      }
    }

    private static class acceptBookingByPartner_argsTupleScheme extends TupleScheme<acceptBookingByPartner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, acceptBookingByPartner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBookingBo()) {
          optionals.set(0);
        }
        if (struct.isSetCommentBookingAcceptBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBookingBo()) {
          struct.bookingBo.write(oprot);
        }
        if (struct.isSetCommentBookingAcceptBo()) {
          struct.commentBookingAcceptBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, acceptBookingByPartner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo();
          struct.bookingBo.read(iprot);
          struct.setBookingBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.commentBookingAcceptBo = new com.ishangke.edunav.commoncontract.model.CommentBookingAcceptBo();
          struct.commentBookingAcceptBo.read(iprot);
          struct.setCommentBookingAcceptBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class acceptBookingByPartner_result implements org.apache.thrift.TBase<acceptBookingByPartner_result, acceptBookingByPartner_result._Fields>, java.io.Serializable, Cloneable, Comparable<acceptBookingByPartner_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("acceptBookingByPartner_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new acceptBookingByPartner_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new acceptBookingByPartner_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.BookingBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(acceptBookingByPartner_result.class, metaDataMap);
    }

    public acceptBookingByPartner_result() {
    }

    public acceptBookingByPartner_result(
      com.ishangke.edunav.commoncontract.model.BookingBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acceptBookingByPartner_result(acceptBookingByPartner_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.BookingBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public acceptBookingByPartner_result deepCopy() {
      return new acceptBookingByPartner_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo getSuccess() {
      return this.success;
    }

    public acceptBookingByPartner_result setSuccess(com.ishangke.edunav.commoncontract.model.BookingBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public acceptBookingByPartner_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.BookingBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acceptBookingByPartner_result)
        return this.equals((acceptBookingByPartner_result)that);
      return false;
    }

    public boolean equals(acceptBookingByPartner_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(acceptBookingByPartner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("acceptBookingByPartner_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class acceptBookingByPartner_resultStandardSchemeFactory implements SchemeFactory {
      public acceptBookingByPartner_resultStandardScheme getScheme() {
        return new acceptBookingByPartner_resultStandardScheme();
      }
    }

    private static class acceptBookingByPartner_resultStandardScheme extends StandardScheme<acceptBookingByPartner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, acceptBookingByPartner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.BookingBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, acceptBookingByPartner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class acceptBookingByPartner_resultTupleSchemeFactory implements SchemeFactory {
      public acceptBookingByPartner_resultTupleScheme getScheme() {
        return new acceptBookingByPartner_resultTupleScheme();
      }
    }

    private static class acceptBookingByPartner_resultTupleScheme extends TupleScheme<acceptBookingByPartner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, acceptBookingByPartner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, acceptBookingByPartner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.BookingBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class acceptBookingSucceedByPartner_args implements org.apache.thrift.TBase<acceptBookingSucceedByPartner_args, acceptBookingSucceedByPartner_args._Fields>, java.io.Serializable, Cloneable, Comparable<acceptBookingSucceedByPartner_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("acceptBookingSucceedByPartner_args");

    private static final org.apache.thrift.protocol.TField BOOKINB_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("bookinbBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COMMENT_BOOKING_ACCEPT_SUCCESS_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("commentBookingAcceptSuccessBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new acceptBookingSucceedByPartner_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new acceptBookingSucceedByPartner_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo bookinbBo; // required
    public com.ishangke.edunav.commoncontract.model.CommentBookingAcceptSuccessBo commentBookingAcceptSuccessBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOKINB_BO((short)1, "bookinbBo"),
      COMMENT_BOOKING_ACCEPT_SUCCESS_BO((short)2, "commentBookingAcceptSuccessBo"),
      USER_BO((short)3, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOKINB_BO
            return BOOKINB_BO;
          case 2: // COMMENT_BOOKING_ACCEPT_SUCCESS_BO
            return COMMENT_BOOKING_ACCEPT_SUCCESS_BO;
          case 3: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOKINB_BO, new org.apache.thrift.meta_data.FieldMetaData("bookinbBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.BookingBo.class)));
      tmpMap.put(_Fields.COMMENT_BOOKING_ACCEPT_SUCCESS_BO, new org.apache.thrift.meta_data.FieldMetaData("commentBookingAcceptSuccessBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptSuccessBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(acceptBookingSucceedByPartner_args.class, metaDataMap);
    }

    public acceptBookingSucceedByPartner_args() {
    }

    public acceptBookingSucceedByPartner_args(
      com.ishangke.edunav.commoncontract.model.BookingBo bookinbBo,
      com.ishangke.edunav.commoncontract.model.CommentBookingAcceptSuccessBo commentBookingAcceptSuccessBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.bookinbBo = bookinbBo;
      this.commentBookingAcceptSuccessBo = commentBookingAcceptSuccessBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acceptBookingSucceedByPartner_args(acceptBookingSucceedByPartner_args other) {
      if (other.isSetBookinbBo()) {
        this.bookinbBo = new com.ishangke.edunav.commoncontract.model.BookingBo(other.bookinbBo);
      }
      if (other.isSetCommentBookingAcceptSuccessBo()) {
        this.commentBookingAcceptSuccessBo = new com.ishangke.edunav.commoncontract.model.CommentBookingAcceptSuccessBo(other.commentBookingAcceptSuccessBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public acceptBookingSucceedByPartner_args deepCopy() {
      return new acceptBookingSucceedByPartner_args(this);
    }

    @Override
    public void clear() {
      this.bookinbBo = null;
      this.commentBookingAcceptSuccessBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo getBookinbBo() {
      return this.bookinbBo;
    }

    public acceptBookingSucceedByPartner_args setBookinbBo(com.ishangke.edunav.commoncontract.model.BookingBo bookinbBo) {
      this.bookinbBo = bookinbBo;
      return this;
    }

    public void unsetBookinbBo() {
      this.bookinbBo = null;
    }

    /** Returns true if field bookinbBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBookinbBo() {
      return this.bookinbBo != null;
    }

    public void setBookinbBoIsSet(boolean value) {
      if (!value) {
        this.bookinbBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CommentBookingAcceptSuccessBo getCommentBookingAcceptSuccessBo() {
      return this.commentBookingAcceptSuccessBo;
    }

    public acceptBookingSucceedByPartner_args setCommentBookingAcceptSuccessBo(com.ishangke.edunav.commoncontract.model.CommentBookingAcceptSuccessBo commentBookingAcceptSuccessBo) {
      this.commentBookingAcceptSuccessBo = commentBookingAcceptSuccessBo;
      return this;
    }

    public void unsetCommentBookingAcceptSuccessBo() {
      this.commentBookingAcceptSuccessBo = null;
    }

    /** Returns true if field commentBookingAcceptSuccessBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommentBookingAcceptSuccessBo() {
      return this.commentBookingAcceptSuccessBo != null;
    }

    public void setCommentBookingAcceptSuccessBoIsSet(boolean value) {
      if (!value) {
        this.commentBookingAcceptSuccessBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public acceptBookingSucceedByPartner_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOOKINB_BO:
        if (value == null) {
          unsetBookinbBo();
        } else {
          setBookinbBo((com.ishangke.edunav.commoncontract.model.BookingBo)value);
        }
        break;

      case COMMENT_BOOKING_ACCEPT_SUCCESS_BO:
        if (value == null) {
          unsetCommentBookingAcceptSuccessBo();
        } else {
          setCommentBookingAcceptSuccessBo((com.ishangke.edunav.commoncontract.model.CommentBookingAcceptSuccessBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOKINB_BO:
        return getBookinbBo();

      case COMMENT_BOOKING_ACCEPT_SUCCESS_BO:
        return getCommentBookingAcceptSuccessBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOOKINB_BO:
        return isSetBookinbBo();
      case COMMENT_BOOKING_ACCEPT_SUCCESS_BO:
        return isSetCommentBookingAcceptSuccessBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acceptBookingSucceedByPartner_args)
        return this.equals((acceptBookingSucceedByPartner_args)that);
      return false;
    }

    public boolean equals(acceptBookingSucceedByPartner_args that) {
      if (that == null)
        return false;

      boolean this_present_bookinbBo = true && this.isSetBookinbBo();
      boolean that_present_bookinbBo = true && that.isSetBookinbBo();
      if (this_present_bookinbBo || that_present_bookinbBo) {
        if (!(this_present_bookinbBo && that_present_bookinbBo))
          return false;
        if (!this.bookinbBo.equals(that.bookinbBo))
          return false;
      }

      boolean this_present_commentBookingAcceptSuccessBo = true && this.isSetCommentBookingAcceptSuccessBo();
      boolean that_present_commentBookingAcceptSuccessBo = true && that.isSetCommentBookingAcceptSuccessBo();
      if (this_present_commentBookingAcceptSuccessBo || that_present_commentBookingAcceptSuccessBo) {
        if (!(this_present_commentBookingAcceptSuccessBo && that_present_commentBookingAcceptSuccessBo))
          return false;
        if (!this.commentBookingAcceptSuccessBo.equals(that.commentBookingAcceptSuccessBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_bookinbBo = true && (isSetBookinbBo());
      builder.append(present_bookinbBo);
      if (present_bookinbBo)
        builder.append(bookinbBo);

      boolean present_commentBookingAcceptSuccessBo = true && (isSetCommentBookingAcceptSuccessBo());
      builder.append(present_commentBookingAcceptSuccessBo);
      if (present_commentBookingAcceptSuccessBo)
        builder.append(commentBookingAcceptSuccessBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(acceptBookingSucceedByPartner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBookinbBo()).compareTo(other.isSetBookinbBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookinbBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookinbBo, other.bookinbBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommentBookingAcceptSuccessBo()).compareTo(other.isSetCommentBookingAcceptSuccessBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommentBookingAcceptSuccessBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentBookingAcceptSuccessBo, other.commentBookingAcceptSuccessBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("acceptBookingSucceedByPartner_args(");
      boolean first = true;

      sb.append("bookinbBo:");
      if (this.bookinbBo == null) {
        sb.append("null");
      } else {
        sb.append(this.bookinbBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commentBookingAcceptSuccessBo:");
      if (this.commentBookingAcceptSuccessBo == null) {
        sb.append("null");
      } else {
        sb.append(this.commentBookingAcceptSuccessBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bookinbBo != null) {
        bookinbBo.validate();
      }
      if (commentBookingAcceptSuccessBo != null) {
        commentBookingAcceptSuccessBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class acceptBookingSucceedByPartner_argsStandardSchemeFactory implements SchemeFactory {
      public acceptBookingSucceedByPartner_argsStandardScheme getScheme() {
        return new acceptBookingSucceedByPartner_argsStandardScheme();
      }
    }

    private static class acceptBookingSucceedByPartner_argsStandardScheme extends StandardScheme<acceptBookingSucceedByPartner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, acceptBookingSucceedByPartner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOKINB_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bookinbBo = new com.ishangke.edunav.commoncontract.model.BookingBo();
                struct.bookinbBo.read(iprot);
                struct.setBookinbBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMENT_BOOKING_ACCEPT_SUCCESS_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commentBookingAcceptSuccessBo = new com.ishangke.edunav.commoncontract.model.CommentBookingAcceptSuccessBo();
                struct.commentBookingAcceptSuccessBo.read(iprot);
                struct.setCommentBookingAcceptSuccessBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, acceptBookingSucceedByPartner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookinbBo != null) {
          oprot.writeFieldBegin(BOOKINB_BO_FIELD_DESC);
          struct.bookinbBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.commentBookingAcceptSuccessBo != null) {
          oprot.writeFieldBegin(COMMENT_BOOKING_ACCEPT_SUCCESS_BO_FIELD_DESC);
          struct.commentBookingAcceptSuccessBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class acceptBookingSucceedByPartner_argsTupleSchemeFactory implements SchemeFactory {
      public acceptBookingSucceedByPartner_argsTupleScheme getScheme() {
        return new acceptBookingSucceedByPartner_argsTupleScheme();
      }
    }

    private static class acceptBookingSucceedByPartner_argsTupleScheme extends TupleScheme<acceptBookingSucceedByPartner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, acceptBookingSucceedByPartner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBookinbBo()) {
          optionals.set(0);
        }
        if (struct.isSetCommentBookingAcceptSuccessBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBookinbBo()) {
          struct.bookinbBo.write(oprot);
        }
        if (struct.isSetCommentBookingAcceptSuccessBo()) {
          struct.commentBookingAcceptSuccessBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, acceptBookingSucceedByPartner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bookinbBo = new com.ishangke.edunav.commoncontract.model.BookingBo();
          struct.bookinbBo.read(iprot);
          struct.setBookinbBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.commentBookingAcceptSuccessBo = new com.ishangke.edunav.commoncontract.model.CommentBookingAcceptSuccessBo();
          struct.commentBookingAcceptSuccessBo.read(iprot);
          struct.setCommentBookingAcceptSuccessBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class acceptBookingSucceedByPartner_result implements org.apache.thrift.TBase<acceptBookingSucceedByPartner_result, acceptBookingSucceedByPartner_result._Fields>, java.io.Serializable, Cloneable, Comparable<acceptBookingSucceedByPartner_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("acceptBookingSucceedByPartner_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new acceptBookingSucceedByPartner_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new acceptBookingSucceedByPartner_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.BookingBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(acceptBookingSucceedByPartner_result.class, metaDataMap);
    }

    public acceptBookingSucceedByPartner_result() {
    }

    public acceptBookingSucceedByPartner_result(
      com.ishangke.edunav.commoncontract.model.BookingBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acceptBookingSucceedByPartner_result(acceptBookingSucceedByPartner_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.BookingBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public acceptBookingSucceedByPartner_result deepCopy() {
      return new acceptBookingSucceedByPartner_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo getSuccess() {
      return this.success;
    }

    public acceptBookingSucceedByPartner_result setSuccess(com.ishangke.edunav.commoncontract.model.BookingBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public acceptBookingSucceedByPartner_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.BookingBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acceptBookingSucceedByPartner_result)
        return this.equals((acceptBookingSucceedByPartner_result)that);
      return false;
    }

    public boolean equals(acceptBookingSucceedByPartner_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(acceptBookingSucceedByPartner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("acceptBookingSucceedByPartner_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class acceptBookingSucceedByPartner_resultStandardSchemeFactory implements SchemeFactory {
      public acceptBookingSucceedByPartner_resultStandardScheme getScheme() {
        return new acceptBookingSucceedByPartner_resultStandardScheme();
      }
    }

    private static class acceptBookingSucceedByPartner_resultStandardScheme extends StandardScheme<acceptBookingSucceedByPartner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, acceptBookingSucceedByPartner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.BookingBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, acceptBookingSucceedByPartner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class acceptBookingSucceedByPartner_resultTupleSchemeFactory implements SchemeFactory {
      public acceptBookingSucceedByPartner_resultTupleScheme getScheme() {
        return new acceptBookingSucceedByPartner_resultTupleScheme();
      }
    }

    private static class acceptBookingSucceedByPartner_resultTupleScheme extends TupleScheme<acceptBookingSucceedByPartner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, acceptBookingSucceedByPartner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, acceptBookingSucceedByPartner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.BookingBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class acceptBookingFailedByPartner_args implements org.apache.thrift.TBase<acceptBookingFailedByPartner_args, acceptBookingFailedByPartner_args._Fields>, java.io.Serializable, Cloneable, Comparable<acceptBookingFailedByPartner_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("acceptBookingFailedByPartner_args");

    private static final org.apache.thrift.protocol.TField BOOKING_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COMMENT_BOOKING_ACCEPT_FAILED_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("commentBookingAcceptFailedBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new acceptBookingFailedByPartner_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new acceptBookingFailedByPartner_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo bookingBo; // required
    public com.ishangke.edunav.commoncontract.model.CommentBookingAcceptFailedBo commentBookingAcceptFailedBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOKING_BO((short)1, "bookingBo"),
      COMMENT_BOOKING_ACCEPT_FAILED_BO((short)2, "commentBookingAcceptFailedBo"),
      USER_BO((short)3, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOKING_BO
            return BOOKING_BO;
          case 2: // COMMENT_BOOKING_ACCEPT_FAILED_BO
            return COMMENT_BOOKING_ACCEPT_FAILED_BO;
          case 3: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOKING_BO, new org.apache.thrift.meta_data.FieldMetaData("bookingBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.BookingBo.class)));
      tmpMap.put(_Fields.COMMENT_BOOKING_ACCEPT_FAILED_BO, new org.apache.thrift.meta_data.FieldMetaData("commentBookingAcceptFailedBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CommentBookingAcceptFailedBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(acceptBookingFailedByPartner_args.class, metaDataMap);
    }

    public acceptBookingFailedByPartner_args() {
    }

    public acceptBookingFailedByPartner_args(
      com.ishangke.edunav.commoncontract.model.BookingBo bookingBo,
      com.ishangke.edunav.commoncontract.model.CommentBookingAcceptFailedBo commentBookingAcceptFailedBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.bookingBo = bookingBo;
      this.commentBookingAcceptFailedBo = commentBookingAcceptFailedBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acceptBookingFailedByPartner_args(acceptBookingFailedByPartner_args other) {
      if (other.isSetBookingBo()) {
        this.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo(other.bookingBo);
      }
      if (other.isSetCommentBookingAcceptFailedBo()) {
        this.commentBookingAcceptFailedBo = new com.ishangke.edunav.commoncontract.model.CommentBookingAcceptFailedBo(other.commentBookingAcceptFailedBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public acceptBookingFailedByPartner_args deepCopy() {
      return new acceptBookingFailedByPartner_args(this);
    }

    @Override
    public void clear() {
      this.bookingBo = null;
      this.commentBookingAcceptFailedBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo getBookingBo() {
      return this.bookingBo;
    }

    public acceptBookingFailedByPartner_args setBookingBo(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo) {
      this.bookingBo = bookingBo;
      return this;
    }

    public void unsetBookingBo() {
      this.bookingBo = null;
    }

    /** Returns true if field bookingBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBookingBo() {
      return this.bookingBo != null;
    }

    public void setBookingBoIsSet(boolean value) {
      if (!value) {
        this.bookingBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CommentBookingAcceptFailedBo getCommentBookingAcceptFailedBo() {
      return this.commentBookingAcceptFailedBo;
    }

    public acceptBookingFailedByPartner_args setCommentBookingAcceptFailedBo(com.ishangke.edunav.commoncontract.model.CommentBookingAcceptFailedBo commentBookingAcceptFailedBo) {
      this.commentBookingAcceptFailedBo = commentBookingAcceptFailedBo;
      return this;
    }

    public void unsetCommentBookingAcceptFailedBo() {
      this.commentBookingAcceptFailedBo = null;
    }

    /** Returns true if field commentBookingAcceptFailedBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommentBookingAcceptFailedBo() {
      return this.commentBookingAcceptFailedBo != null;
    }

    public void setCommentBookingAcceptFailedBoIsSet(boolean value) {
      if (!value) {
        this.commentBookingAcceptFailedBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public acceptBookingFailedByPartner_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOOKING_BO:
        if (value == null) {
          unsetBookingBo();
        } else {
          setBookingBo((com.ishangke.edunav.commoncontract.model.BookingBo)value);
        }
        break;

      case COMMENT_BOOKING_ACCEPT_FAILED_BO:
        if (value == null) {
          unsetCommentBookingAcceptFailedBo();
        } else {
          setCommentBookingAcceptFailedBo((com.ishangke.edunav.commoncontract.model.CommentBookingAcceptFailedBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOKING_BO:
        return getBookingBo();

      case COMMENT_BOOKING_ACCEPT_FAILED_BO:
        return getCommentBookingAcceptFailedBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOOKING_BO:
        return isSetBookingBo();
      case COMMENT_BOOKING_ACCEPT_FAILED_BO:
        return isSetCommentBookingAcceptFailedBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acceptBookingFailedByPartner_args)
        return this.equals((acceptBookingFailedByPartner_args)that);
      return false;
    }

    public boolean equals(acceptBookingFailedByPartner_args that) {
      if (that == null)
        return false;

      boolean this_present_bookingBo = true && this.isSetBookingBo();
      boolean that_present_bookingBo = true && that.isSetBookingBo();
      if (this_present_bookingBo || that_present_bookingBo) {
        if (!(this_present_bookingBo && that_present_bookingBo))
          return false;
        if (!this.bookingBo.equals(that.bookingBo))
          return false;
      }

      boolean this_present_commentBookingAcceptFailedBo = true && this.isSetCommentBookingAcceptFailedBo();
      boolean that_present_commentBookingAcceptFailedBo = true && that.isSetCommentBookingAcceptFailedBo();
      if (this_present_commentBookingAcceptFailedBo || that_present_commentBookingAcceptFailedBo) {
        if (!(this_present_commentBookingAcceptFailedBo && that_present_commentBookingAcceptFailedBo))
          return false;
        if (!this.commentBookingAcceptFailedBo.equals(that.commentBookingAcceptFailedBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_bookingBo = true && (isSetBookingBo());
      builder.append(present_bookingBo);
      if (present_bookingBo)
        builder.append(bookingBo);

      boolean present_commentBookingAcceptFailedBo = true && (isSetCommentBookingAcceptFailedBo());
      builder.append(present_commentBookingAcceptFailedBo);
      if (present_commentBookingAcceptFailedBo)
        builder.append(commentBookingAcceptFailedBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(acceptBookingFailedByPartner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBookingBo()).compareTo(other.isSetBookingBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookingBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingBo, other.bookingBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommentBookingAcceptFailedBo()).compareTo(other.isSetCommentBookingAcceptFailedBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommentBookingAcceptFailedBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentBookingAcceptFailedBo, other.commentBookingAcceptFailedBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("acceptBookingFailedByPartner_args(");
      boolean first = true;

      sb.append("bookingBo:");
      if (this.bookingBo == null) {
        sb.append("null");
      } else {
        sb.append(this.bookingBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commentBookingAcceptFailedBo:");
      if (this.commentBookingAcceptFailedBo == null) {
        sb.append("null");
      } else {
        sb.append(this.commentBookingAcceptFailedBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bookingBo != null) {
        bookingBo.validate();
      }
      if (commentBookingAcceptFailedBo != null) {
        commentBookingAcceptFailedBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class acceptBookingFailedByPartner_argsStandardSchemeFactory implements SchemeFactory {
      public acceptBookingFailedByPartner_argsStandardScheme getScheme() {
        return new acceptBookingFailedByPartner_argsStandardScheme();
      }
    }

    private static class acceptBookingFailedByPartner_argsStandardScheme extends StandardScheme<acceptBookingFailedByPartner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, acceptBookingFailedByPartner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOKING_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo();
                struct.bookingBo.read(iprot);
                struct.setBookingBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMENT_BOOKING_ACCEPT_FAILED_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commentBookingAcceptFailedBo = new com.ishangke.edunav.commoncontract.model.CommentBookingAcceptFailedBo();
                struct.commentBookingAcceptFailedBo.read(iprot);
                struct.setCommentBookingAcceptFailedBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, acceptBookingFailedByPartner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookingBo != null) {
          oprot.writeFieldBegin(BOOKING_BO_FIELD_DESC);
          struct.bookingBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.commentBookingAcceptFailedBo != null) {
          oprot.writeFieldBegin(COMMENT_BOOKING_ACCEPT_FAILED_BO_FIELD_DESC);
          struct.commentBookingAcceptFailedBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class acceptBookingFailedByPartner_argsTupleSchemeFactory implements SchemeFactory {
      public acceptBookingFailedByPartner_argsTupleScheme getScheme() {
        return new acceptBookingFailedByPartner_argsTupleScheme();
      }
    }

    private static class acceptBookingFailedByPartner_argsTupleScheme extends TupleScheme<acceptBookingFailedByPartner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, acceptBookingFailedByPartner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBookingBo()) {
          optionals.set(0);
        }
        if (struct.isSetCommentBookingAcceptFailedBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBookingBo()) {
          struct.bookingBo.write(oprot);
        }
        if (struct.isSetCommentBookingAcceptFailedBo()) {
          struct.commentBookingAcceptFailedBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, acceptBookingFailedByPartner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo();
          struct.bookingBo.read(iprot);
          struct.setBookingBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.commentBookingAcceptFailedBo = new com.ishangke.edunav.commoncontract.model.CommentBookingAcceptFailedBo();
          struct.commentBookingAcceptFailedBo.read(iprot);
          struct.setCommentBookingAcceptFailedBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class acceptBookingFailedByPartner_result implements org.apache.thrift.TBase<acceptBookingFailedByPartner_result, acceptBookingFailedByPartner_result._Fields>, java.io.Serializable, Cloneable, Comparable<acceptBookingFailedByPartner_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("acceptBookingFailedByPartner_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new acceptBookingFailedByPartner_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new acceptBookingFailedByPartner_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.BookingBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(acceptBookingFailedByPartner_result.class, metaDataMap);
    }

    public acceptBookingFailedByPartner_result() {
    }

    public acceptBookingFailedByPartner_result(
      com.ishangke.edunav.commoncontract.model.BookingBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acceptBookingFailedByPartner_result(acceptBookingFailedByPartner_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.BookingBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public acceptBookingFailedByPartner_result deepCopy() {
      return new acceptBookingFailedByPartner_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo getSuccess() {
      return this.success;
    }

    public acceptBookingFailedByPartner_result setSuccess(com.ishangke.edunav.commoncontract.model.BookingBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public acceptBookingFailedByPartner_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.BookingBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acceptBookingFailedByPartner_result)
        return this.equals((acceptBookingFailedByPartner_result)that);
      return false;
    }

    public boolean equals(acceptBookingFailedByPartner_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(acceptBookingFailedByPartner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("acceptBookingFailedByPartner_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class acceptBookingFailedByPartner_resultStandardSchemeFactory implements SchemeFactory {
      public acceptBookingFailedByPartner_resultStandardScheme getScheme() {
        return new acceptBookingFailedByPartner_resultStandardScheme();
      }
    }

    private static class acceptBookingFailedByPartner_resultStandardScheme extends StandardScheme<acceptBookingFailedByPartner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, acceptBookingFailedByPartner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.BookingBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, acceptBookingFailedByPartner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class acceptBookingFailedByPartner_resultTupleSchemeFactory implements SchemeFactory {
      public acceptBookingFailedByPartner_resultTupleScheme getScheme() {
        return new acceptBookingFailedByPartner_resultTupleScheme();
      }
    }

    private static class acceptBookingFailedByPartner_resultTupleScheme extends TupleScheme<acceptBookingFailedByPartner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, acceptBookingFailedByPartner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, acceptBookingFailedByPartner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.BookingBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class validateBookingByPartner_args implements org.apache.thrift.TBase<validateBookingByPartner_args, validateBookingByPartner_args._Fields>, java.io.Serializable, Cloneable, Comparable<validateBookingByPartner_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validateBookingByPartner_args");

    private static final org.apache.thrift.protocol.TField BOOKING_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COMMENT_BOOKING_VALIDATE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("commentBookingValidateBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new validateBookingByPartner_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new validateBookingByPartner_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo bookingBo; // required
    public com.ishangke.edunav.commoncontract.model.CommentBookingValidateBo commentBookingValidateBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOKING_BO((short)1, "bookingBo"),
      COMMENT_BOOKING_VALIDATE_BO((short)2, "commentBookingValidateBo"),
      USER_BO((short)3, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOKING_BO
            return BOOKING_BO;
          case 2: // COMMENT_BOOKING_VALIDATE_BO
            return COMMENT_BOOKING_VALIDATE_BO;
          case 3: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOKING_BO, new org.apache.thrift.meta_data.FieldMetaData("bookingBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.BookingBo.class)));
      tmpMap.put(_Fields.COMMENT_BOOKING_VALIDATE_BO, new org.apache.thrift.meta_data.FieldMetaData("commentBookingValidateBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CommentBookingValidateBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validateBookingByPartner_args.class, metaDataMap);
    }

    public validateBookingByPartner_args() {
    }

    public validateBookingByPartner_args(
      com.ishangke.edunav.commoncontract.model.BookingBo bookingBo,
      com.ishangke.edunav.commoncontract.model.CommentBookingValidateBo commentBookingValidateBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.bookingBo = bookingBo;
      this.commentBookingValidateBo = commentBookingValidateBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validateBookingByPartner_args(validateBookingByPartner_args other) {
      if (other.isSetBookingBo()) {
        this.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo(other.bookingBo);
      }
      if (other.isSetCommentBookingValidateBo()) {
        this.commentBookingValidateBo = new com.ishangke.edunav.commoncontract.model.CommentBookingValidateBo(other.commentBookingValidateBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public validateBookingByPartner_args deepCopy() {
      return new validateBookingByPartner_args(this);
    }

    @Override
    public void clear() {
      this.bookingBo = null;
      this.commentBookingValidateBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo getBookingBo() {
      return this.bookingBo;
    }

    public validateBookingByPartner_args setBookingBo(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo) {
      this.bookingBo = bookingBo;
      return this;
    }

    public void unsetBookingBo() {
      this.bookingBo = null;
    }

    /** Returns true if field bookingBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBookingBo() {
      return this.bookingBo != null;
    }

    public void setBookingBoIsSet(boolean value) {
      if (!value) {
        this.bookingBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CommentBookingValidateBo getCommentBookingValidateBo() {
      return this.commentBookingValidateBo;
    }

    public validateBookingByPartner_args setCommentBookingValidateBo(com.ishangke.edunav.commoncontract.model.CommentBookingValidateBo commentBookingValidateBo) {
      this.commentBookingValidateBo = commentBookingValidateBo;
      return this;
    }

    public void unsetCommentBookingValidateBo() {
      this.commentBookingValidateBo = null;
    }

    /** Returns true if field commentBookingValidateBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommentBookingValidateBo() {
      return this.commentBookingValidateBo != null;
    }

    public void setCommentBookingValidateBoIsSet(boolean value) {
      if (!value) {
        this.commentBookingValidateBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public validateBookingByPartner_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOOKING_BO:
        if (value == null) {
          unsetBookingBo();
        } else {
          setBookingBo((com.ishangke.edunav.commoncontract.model.BookingBo)value);
        }
        break;

      case COMMENT_BOOKING_VALIDATE_BO:
        if (value == null) {
          unsetCommentBookingValidateBo();
        } else {
          setCommentBookingValidateBo((com.ishangke.edunav.commoncontract.model.CommentBookingValidateBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOKING_BO:
        return getBookingBo();

      case COMMENT_BOOKING_VALIDATE_BO:
        return getCommentBookingValidateBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOOKING_BO:
        return isSetBookingBo();
      case COMMENT_BOOKING_VALIDATE_BO:
        return isSetCommentBookingValidateBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validateBookingByPartner_args)
        return this.equals((validateBookingByPartner_args)that);
      return false;
    }

    public boolean equals(validateBookingByPartner_args that) {
      if (that == null)
        return false;

      boolean this_present_bookingBo = true && this.isSetBookingBo();
      boolean that_present_bookingBo = true && that.isSetBookingBo();
      if (this_present_bookingBo || that_present_bookingBo) {
        if (!(this_present_bookingBo && that_present_bookingBo))
          return false;
        if (!this.bookingBo.equals(that.bookingBo))
          return false;
      }

      boolean this_present_commentBookingValidateBo = true && this.isSetCommentBookingValidateBo();
      boolean that_present_commentBookingValidateBo = true && that.isSetCommentBookingValidateBo();
      if (this_present_commentBookingValidateBo || that_present_commentBookingValidateBo) {
        if (!(this_present_commentBookingValidateBo && that_present_commentBookingValidateBo))
          return false;
        if (!this.commentBookingValidateBo.equals(that.commentBookingValidateBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_bookingBo = true && (isSetBookingBo());
      builder.append(present_bookingBo);
      if (present_bookingBo)
        builder.append(bookingBo);

      boolean present_commentBookingValidateBo = true && (isSetCommentBookingValidateBo());
      builder.append(present_commentBookingValidateBo);
      if (present_commentBookingValidateBo)
        builder.append(commentBookingValidateBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(validateBookingByPartner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBookingBo()).compareTo(other.isSetBookingBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookingBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingBo, other.bookingBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommentBookingValidateBo()).compareTo(other.isSetCommentBookingValidateBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommentBookingValidateBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentBookingValidateBo, other.commentBookingValidateBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validateBookingByPartner_args(");
      boolean first = true;

      sb.append("bookingBo:");
      if (this.bookingBo == null) {
        sb.append("null");
      } else {
        sb.append(this.bookingBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commentBookingValidateBo:");
      if (this.commentBookingValidateBo == null) {
        sb.append("null");
      } else {
        sb.append(this.commentBookingValidateBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bookingBo != null) {
        bookingBo.validate();
      }
      if (commentBookingValidateBo != null) {
        commentBookingValidateBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validateBookingByPartner_argsStandardSchemeFactory implements SchemeFactory {
      public validateBookingByPartner_argsStandardScheme getScheme() {
        return new validateBookingByPartner_argsStandardScheme();
      }
    }

    private static class validateBookingByPartner_argsStandardScheme extends StandardScheme<validateBookingByPartner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validateBookingByPartner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOKING_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo();
                struct.bookingBo.read(iprot);
                struct.setBookingBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMENT_BOOKING_VALIDATE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commentBookingValidateBo = new com.ishangke.edunav.commoncontract.model.CommentBookingValidateBo();
                struct.commentBookingValidateBo.read(iprot);
                struct.setCommentBookingValidateBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validateBookingByPartner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookingBo != null) {
          oprot.writeFieldBegin(BOOKING_BO_FIELD_DESC);
          struct.bookingBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.commentBookingValidateBo != null) {
          oprot.writeFieldBegin(COMMENT_BOOKING_VALIDATE_BO_FIELD_DESC);
          struct.commentBookingValidateBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validateBookingByPartner_argsTupleSchemeFactory implements SchemeFactory {
      public validateBookingByPartner_argsTupleScheme getScheme() {
        return new validateBookingByPartner_argsTupleScheme();
      }
    }

    private static class validateBookingByPartner_argsTupleScheme extends TupleScheme<validateBookingByPartner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validateBookingByPartner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBookingBo()) {
          optionals.set(0);
        }
        if (struct.isSetCommentBookingValidateBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBookingBo()) {
          struct.bookingBo.write(oprot);
        }
        if (struct.isSetCommentBookingValidateBo()) {
          struct.commentBookingValidateBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validateBookingByPartner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo();
          struct.bookingBo.read(iprot);
          struct.setBookingBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.commentBookingValidateBo = new com.ishangke.edunav.commoncontract.model.CommentBookingValidateBo();
          struct.commentBookingValidateBo.read(iprot);
          struct.setCommentBookingValidateBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class validateBookingByPartner_result implements org.apache.thrift.TBase<validateBookingByPartner_result, validateBookingByPartner_result._Fields>, java.io.Serializable, Cloneable, Comparable<validateBookingByPartner_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validateBookingByPartner_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new validateBookingByPartner_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new validateBookingByPartner_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.BookingBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validateBookingByPartner_result.class, metaDataMap);
    }

    public validateBookingByPartner_result() {
    }

    public validateBookingByPartner_result(
      com.ishangke.edunav.commoncontract.model.BookingBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validateBookingByPartner_result(validateBookingByPartner_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.BookingBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public validateBookingByPartner_result deepCopy() {
      return new validateBookingByPartner_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo getSuccess() {
      return this.success;
    }

    public validateBookingByPartner_result setSuccess(com.ishangke.edunav.commoncontract.model.BookingBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public validateBookingByPartner_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.BookingBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validateBookingByPartner_result)
        return this.equals((validateBookingByPartner_result)that);
      return false;
    }

    public boolean equals(validateBookingByPartner_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(validateBookingByPartner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validateBookingByPartner_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validateBookingByPartner_resultStandardSchemeFactory implements SchemeFactory {
      public validateBookingByPartner_resultStandardScheme getScheme() {
        return new validateBookingByPartner_resultStandardScheme();
      }
    }

    private static class validateBookingByPartner_resultStandardScheme extends StandardScheme<validateBookingByPartner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validateBookingByPartner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.BookingBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validateBookingByPartner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validateBookingByPartner_resultTupleSchemeFactory implements SchemeFactory {
      public validateBookingByPartner_resultTupleScheme getScheme() {
        return new validateBookingByPartner_resultTupleScheme();
      }
    }

    private static class validateBookingByPartner_resultTupleScheme extends TupleScheme<validateBookingByPartner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validateBookingByPartner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validateBookingByPartner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.BookingBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class cancelBookingByUser_args implements org.apache.thrift.TBase<cancelBookingByUser_args, cancelBookingByUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelBookingByUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelBookingByUser_args");

    private static final org.apache.thrift.protocol.TField BOOKING_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COMMENT_BOOKING_CANCEL_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("commentBookingCancelBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelBookingByUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelBookingByUser_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo bookingBo; // required
    public com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOKING_BO((short)1, "bookingBo"),
      COMMENT_BOOKING_CANCEL_BO((short)2, "commentBookingCancelBo"),
      USER_BO((short)3, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOKING_BO
            return BOOKING_BO;
          case 2: // COMMENT_BOOKING_CANCEL_BO
            return COMMENT_BOOKING_CANCEL_BO;
          case 3: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOKING_BO, new org.apache.thrift.meta_data.FieldMetaData("bookingBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.BookingBo.class)));
      tmpMap.put(_Fields.COMMENT_BOOKING_CANCEL_BO, new org.apache.thrift.meta_data.FieldMetaData("commentBookingCancelBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelBookingByUser_args.class, metaDataMap);
    }

    public cancelBookingByUser_args() {
    }

    public cancelBookingByUser_args(
      com.ishangke.edunav.commoncontract.model.BookingBo bookingBo,
      com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.bookingBo = bookingBo;
      this.commentBookingCancelBo = commentBookingCancelBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelBookingByUser_args(cancelBookingByUser_args other) {
      if (other.isSetBookingBo()) {
        this.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo(other.bookingBo);
      }
      if (other.isSetCommentBookingCancelBo()) {
        this.commentBookingCancelBo = new com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo(other.commentBookingCancelBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public cancelBookingByUser_args deepCopy() {
      return new cancelBookingByUser_args(this);
    }

    @Override
    public void clear() {
      this.bookingBo = null;
      this.commentBookingCancelBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo getBookingBo() {
      return this.bookingBo;
    }

    public cancelBookingByUser_args setBookingBo(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo) {
      this.bookingBo = bookingBo;
      return this;
    }

    public void unsetBookingBo() {
      this.bookingBo = null;
    }

    /** Returns true if field bookingBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBookingBo() {
      return this.bookingBo != null;
    }

    public void setBookingBoIsSet(boolean value) {
      if (!value) {
        this.bookingBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo getCommentBookingCancelBo() {
      return this.commentBookingCancelBo;
    }

    public cancelBookingByUser_args setCommentBookingCancelBo(com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo) {
      this.commentBookingCancelBo = commentBookingCancelBo;
      return this;
    }

    public void unsetCommentBookingCancelBo() {
      this.commentBookingCancelBo = null;
    }

    /** Returns true if field commentBookingCancelBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommentBookingCancelBo() {
      return this.commentBookingCancelBo != null;
    }

    public void setCommentBookingCancelBoIsSet(boolean value) {
      if (!value) {
        this.commentBookingCancelBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public cancelBookingByUser_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOOKING_BO:
        if (value == null) {
          unsetBookingBo();
        } else {
          setBookingBo((com.ishangke.edunav.commoncontract.model.BookingBo)value);
        }
        break;

      case COMMENT_BOOKING_CANCEL_BO:
        if (value == null) {
          unsetCommentBookingCancelBo();
        } else {
          setCommentBookingCancelBo((com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOKING_BO:
        return getBookingBo();

      case COMMENT_BOOKING_CANCEL_BO:
        return getCommentBookingCancelBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOOKING_BO:
        return isSetBookingBo();
      case COMMENT_BOOKING_CANCEL_BO:
        return isSetCommentBookingCancelBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelBookingByUser_args)
        return this.equals((cancelBookingByUser_args)that);
      return false;
    }

    public boolean equals(cancelBookingByUser_args that) {
      if (that == null)
        return false;

      boolean this_present_bookingBo = true && this.isSetBookingBo();
      boolean that_present_bookingBo = true && that.isSetBookingBo();
      if (this_present_bookingBo || that_present_bookingBo) {
        if (!(this_present_bookingBo && that_present_bookingBo))
          return false;
        if (!this.bookingBo.equals(that.bookingBo))
          return false;
      }

      boolean this_present_commentBookingCancelBo = true && this.isSetCommentBookingCancelBo();
      boolean that_present_commentBookingCancelBo = true && that.isSetCommentBookingCancelBo();
      if (this_present_commentBookingCancelBo || that_present_commentBookingCancelBo) {
        if (!(this_present_commentBookingCancelBo && that_present_commentBookingCancelBo))
          return false;
        if (!this.commentBookingCancelBo.equals(that.commentBookingCancelBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_bookingBo = true && (isSetBookingBo());
      builder.append(present_bookingBo);
      if (present_bookingBo)
        builder.append(bookingBo);

      boolean present_commentBookingCancelBo = true && (isSetCommentBookingCancelBo());
      builder.append(present_commentBookingCancelBo);
      if (present_commentBookingCancelBo)
        builder.append(commentBookingCancelBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(cancelBookingByUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBookingBo()).compareTo(other.isSetBookingBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookingBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingBo, other.bookingBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommentBookingCancelBo()).compareTo(other.isSetCommentBookingCancelBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommentBookingCancelBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentBookingCancelBo, other.commentBookingCancelBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelBookingByUser_args(");
      boolean first = true;

      sb.append("bookingBo:");
      if (this.bookingBo == null) {
        sb.append("null");
      } else {
        sb.append(this.bookingBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commentBookingCancelBo:");
      if (this.commentBookingCancelBo == null) {
        sb.append("null");
      } else {
        sb.append(this.commentBookingCancelBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bookingBo != null) {
        bookingBo.validate();
      }
      if (commentBookingCancelBo != null) {
        commentBookingCancelBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelBookingByUser_argsStandardSchemeFactory implements SchemeFactory {
      public cancelBookingByUser_argsStandardScheme getScheme() {
        return new cancelBookingByUser_argsStandardScheme();
      }
    }

    private static class cancelBookingByUser_argsStandardScheme extends StandardScheme<cancelBookingByUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelBookingByUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOKING_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo();
                struct.bookingBo.read(iprot);
                struct.setBookingBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMENT_BOOKING_CANCEL_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commentBookingCancelBo = new com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo();
                struct.commentBookingCancelBo.read(iprot);
                struct.setCommentBookingCancelBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelBookingByUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookingBo != null) {
          oprot.writeFieldBegin(BOOKING_BO_FIELD_DESC);
          struct.bookingBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.commentBookingCancelBo != null) {
          oprot.writeFieldBegin(COMMENT_BOOKING_CANCEL_BO_FIELD_DESC);
          struct.commentBookingCancelBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelBookingByUser_argsTupleSchemeFactory implements SchemeFactory {
      public cancelBookingByUser_argsTupleScheme getScheme() {
        return new cancelBookingByUser_argsTupleScheme();
      }
    }

    private static class cancelBookingByUser_argsTupleScheme extends TupleScheme<cancelBookingByUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelBookingByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBookingBo()) {
          optionals.set(0);
        }
        if (struct.isSetCommentBookingCancelBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBookingBo()) {
          struct.bookingBo.write(oprot);
        }
        if (struct.isSetCommentBookingCancelBo()) {
          struct.commentBookingCancelBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelBookingByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo();
          struct.bookingBo.read(iprot);
          struct.setBookingBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.commentBookingCancelBo = new com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo();
          struct.commentBookingCancelBo.read(iprot);
          struct.setCommentBookingCancelBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class cancelBookingByUser_result implements org.apache.thrift.TBase<cancelBookingByUser_result, cancelBookingByUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelBookingByUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelBookingByUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelBookingByUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelBookingByUser_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.BookingBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelBookingByUser_result.class, metaDataMap);
    }

    public cancelBookingByUser_result() {
    }

    public cancelBookingByUser_result(
      com.ishangke.edunav.commoncontract.model.BookingBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelBookingByUser_result(cancelBookingByUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.BookingBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public cancelBookingByUser_result deepCopy() {
      return new cancelBookingByUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo getSuccess() {
      return this.success;
    }

    public cancelBookingByUser_result setSuccess(com.ishangke.edunav.commoncontract.model.BookingBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public cancelBookingByUser_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.BookingBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelBookingByUser_result)
        return this.equals((cancelBookingByUser_result)that);
      return false;
    }

    public boolean equals(cancelBookingByUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(cancelBookingByUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelBookingByUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelBookingByUser_resultStandardSchemeFactory implements SchemeFactory {
      public cancelBookingByUser_resultStandardScheme getScheme() {
        return new cancelBookingByUser_resultStandardScheme();
      }
    }

    private static class cancelBookingByUser_resultStandardScheme extends StandardScheme<cancelBookingByUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelBookingByUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.BookingBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelBookingByUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelBookingByUser_resultTupleSchemeFactory implements SchemeFactory {
      public cancelBookingByUser_resultTupleScheme getScheme() {
        return new cancelBookingByUser_resultTupleScheme();
      }
    }

    private static class cancelBookingByUser_resultTupleScheme extends TupleScheme<cancelBookingByUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelBookingByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelBookingByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.BookingBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class cancelBookingByPartner_args implements org.apache.thrift.TBase<cancelBookingByPartner_args, cancelBookingByPartner_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelBookingByPartner_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelBookingByPartner_args");

    private static final org.apache.thrift.protocol.TField BOOKING_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COMMENT_BOOKING_CANCEL_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("commentBookingCancelBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelBookingByPartner_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelBookingByPartner_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo bookingBo; // required
    public com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOKING_BO((short)1, "bookingBo"),
      COMMENT_BOOKING_CANCEL_BO((short)2, "commentBookingCancelBo"),
      USER_BO((short)3, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOKING_BO
            return BOOKING_BO;
          case 2: // COMMENT_BOOKING_CANCEL_BO
            return COMMENT_BOOKING_CANCEL_BO;
          case 3: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOKING_BO, new org.apache.thrift.meta_data.FieldMetaData("bookingBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.BookingBo.class)));
      tmpMap.put(_Fields.COMMENT_BOOKING_CANCEL_BO, new org.apache.thrift.meta_data.FieldMetaData("commentBookingCancelBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelBookingByPartner_args.class, metaDataMap);
    }

    public cancelBookingByPartner_args() {
    }

    public cancelBookingByPartner_args(
      com.ishangke.edunav.commoncontract.model.BookingBo bookingBo,
      com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.bookingBo = bookingBo;
      this.commentBookingCancelBo = commentBookingCancelBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelBookingByPartner_args(cancelBookingByPartner_args other) {
      if (other.isSetBookingBo()) {
        this.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo(other.bookingBo);
      }
      if (other.isSetCommentBookingCancelBo()) {
        this.commentBookingCancelBo = new com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo(other.commentBookingCancelBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public cancelBookingByPartner_args deepCopy() {
      return new cancelBookingByPartner_args(this);
    }

    @Override
    public void clear() {
      this.bookingBo = null;
      this.commentBookingCancelBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo getBookingBo() {
      return this.bookingBo;
    }

    public cancelBookingByPartner_args setBookingBo(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo) {
      this.bookingBo = bookingBo;
      return this;
    }

    public void unsetBookingBo() {
      this.bookingBo = null;
    }

    /** Returns true if field bookingBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBookingBo() {
      return this.bookingBo != null;
    }

    public void setBookingBoIsSet(boolean value) {
      if (!value) {
        this.bookingBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo getCommentBookingCancelBo() {
      return this.commentBookingCancelBo;
    }

    public cancelBookingByPartner_args setCommentBookingCancelBo(com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo) {
      this.commentBookingCancelBo = commentBookingCancelBo;
      return this;
    }

    public void unsetCommentBookingCancelBo() {
      this.commentBookingCancelBo = null;
    }

    /** Returns true if field commentBookingCancelBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommentBookingCancelBo() {
      return this.commentBookingCancelBo != null;
    }

    public void setCommentBookingCancelBoIsSet(boolean value) {
      if (!value) {
        this.commentBookingCancelBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public cancelBookingByPartner_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOOKING_BO:
        if (value == null) {
          unsetBookingBo();
        } else {
          setBookingBo((com.ishangke.edunav.commoncontract.model.BookingBo)value);
        }
        break;

      case COMMENT_BOOKING_CANCEL_BO:
        if (value == null) {
          unsetCommentBookingCancelBo();
        } else {
          setCommentBookingCancelBo((com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOKING_BO:
        return getBookingBo();

      case COMMENT_BOOKING_CANCEL_BO:
        return getCommentBookingCancelBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOOKING_BO:
        return isSetBookingBo();
      case COMMENT_BOOKING_CANCEL_BO:
        return isSetCommentBookingCancelBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelBookingByPartner_args)
        return this.equals((cancelBookingByPartner_args)that);
      return false;
    }

    public boolean equals(cancelBookingByPartner_args that) {
      if (that == null)
        return false;

      boolean this_present_bookingBo = true && this.isSetBookingBo();
      boolean that_present_bookingBo = true && that.isSetBookingBo();
      if (this_present_bookingBo || that_present_bookingBo) {
        if (!(this_present_bookingBo && that_present_bookingBo))
          return false;
        if (!this.bookingBo.equals(that.bookingBo))
          return false;
      }

      boolean this_present_commentBookingCancelBo = true && this.isSetCommentBookingCancelBo();
      boolean that_present_commentBookingCancelBo = true && that.isSetCommentBookingCancelBo();
      if (this_present_commentBookingCancelBo || that_present_commentBookingCancelBo) {
        if (!(this_present_commentBookingCancelBo && that_present_commentBookingCancelBo))
          return false;
        if (!this.commentBookingCancelBo.equals(that.commentBookingCancelBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_bookingBo = true && (isSetBookingBo());
      builder.append(present_bookingBo);
      if (present_bookingBo)
        builder.append(bookingBo);

      boolean present_commentBookingCancelBo = true && (isSetCommentBookingCancelBo());
      builder.append(present_commentBookingCancelBo);
      if (present_commentBookingCancelBo)
        builder.append(commentBookingCancelBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(cancelBookingByPartner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBookingBo()).compareTo(other.isSetBookingBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookingBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingBo, other.bookingBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommentBookingCancelBo()).compareTo(other.isSetCommentBookingCancelBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommentBookingCancelBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentBookingCancelBo, other.commentBookingCancelBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelBookingByPartner_args(");
      boolean first = true;

      sb.append("bookingBo:");
      if (this.bookingBo == null) {
        sb.append("null");
      } else {
        sb.append(this.bookingBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commentBookingCancelBo:");
      if (this.commentBookingCancelBo == null) {
        sb.append("null");
      } else {
        sb.append(this.commentBookingCancelBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bookingBo != null) {
        bookingBo.validate();
      }
      if (commentBookingCancelBo != null) {
        commentBookingCancelBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelBookingByPartner_argsStandardSchemeFactory implements SchemeFactory {
      public cancelBookingByPartner_argsStandardScheme getScheme() {
        return new cancelBookingByPartner_argsStandardScheme();
      }
    }

    private static class cancelBookingByPartner_argsStandardScheme extends StandardScheme<cancelBookingByPartner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelBookingByPartner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOKING_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo();
                struct.bookingBo.read(iprot);
                struct.setBookingBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMENT_BOOKING_CANCEL_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commentBookingCancelBo = new com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo();
                struct.commentBookingCancelBo.read(iprot);
                struct.setCommentBookingCancelBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelBookingByPartner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookingBo != null) {
          oprot.writeFieldBegin(BOOKING_BO_FIELD_DESC);
          struct.bookingBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.commentBookingCancelBo != null) {
          oprot.writeFieldBegin(COMMENT_BOOKING_CANCEL_BO_FIELD_DESC);
          struct.commentBookingCancelBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelBookingByPartner_argsTupleSchemeFactory implements SchemeFactory {
      public cancelBookingByPartner_argsTupleScheme getScheme() {
        return new cancelBookingByPartner_argsTupleScheme();
      }
    }

    private static class cancelBookingByPartner_argsTupleScheme extends TupleScheme<cancelBookingByPartner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelBookingByPartner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBookingBo()) {
          optionals.set(0);
        }
        if (struct.isSetCommentBookingCancelBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBookingBo()) {
          struct.bookingBo.write(oprot);
        }
        if (struct.isSetCommentBookingCancelBo()) {
          struct.commentBookingCancelBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelBookingByPartner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo();
          struct.bookingBo.read(iprot);
          struct.setBookingBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.commentBookingCancelBo = new com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo();
          struct.commentBookingCancelBo.read(iprot);
          struct.setCommentBookingCancelBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class cancelBookingByPartner_result implements org.apache.thrift.TBase<cancelBookingByPartner_result, cancelBookingByPartner_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelBookingByPartner_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelBookingByPartner_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelBookingByPartner_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelBookingByPartner_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.BookingBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelBookingByPartner_result.class, metaDataMap);
    }

    public cancelBookingByPartner_result() {
    }

    public cancelBookingByPartner_result(
      com.ishangke.edunav.commoncontract.model.BookingBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelBookingByPartner_result(cancelBookingByPartner_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.BookingBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public cancelBookingByPartner_result deepCopy() {
      return new cancelBookingByPartner_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo getSuccess() {
      return this.success;
    }

    public cancelBookingByPartner_result setSuccess(com.ishangke.edunav.commoncontract.model.BookingBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public cancelBookingByPartner_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.BookingBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelBookingByPartner_result)
        return this.equals((cancelBookingByPartner_result)that);
      return false;
    }

    public boolean equals(cancelBookingByPartner_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(cancelBookingByPartner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelBookingByPartner_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelBookingByPartner_resultStandardSchemeFactory implements SchemeFactory {
      public cancelBookingByPartner_resultStandardScheme getScheme() {
        return new cancelBookingByPartner_resultStandardScheme();
      }
    }

    private static class cancelBookingByPartner_resultStandardScheme extends StandardScheme<cancelBookingByPartner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelBookingByPartner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.BookingBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelBookingByPartner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelBookingByPartner_resultTupleSchemeFactory implements SchemeFactory {
      public cancelBookingByPartner_resultTupleScheme getScheme() {
        return new cancelBookingByPartner_resultTupleScheme();
      }
    }

    private static class cancelBookingByPartner_resultTupleScheme extends TupleScheme<cancelBookingByPartner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelBookingByPartner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelBookingByPartner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.BookingBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class cancelBookingByAdmin_args implements org.apache.thrift.TBase<cancelBookingByAdmin_args, cancelBookingByAdmin_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelBookingByAdmin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelBookingByAdmin_args");

    private static final org.apache.thrift.protocol.TField BOOKING_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COMMENT_BOOKING_CANCEL_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("commentBookingCancelBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelBookingByAdmin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelBookingByAdmin_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo bookingBo; // required
    public com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOKING_BO((short)1, "bookingBo"),
      COMMENT_BOOKING_CANCEL_BO((short)2, "commentBookingCancelBo"),
      USER_BO((short)3, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOKING_BO
            return BOOKING_BO;
          case 2: // COMMENT_BOOKING_CANCEL_BO
            return COMMENT_BOOKING_CANCEL_BO;
          case 3: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOKING_BO, new org.apache.thrift.meta_data.FieldMetaData("bookingBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.BookingBo.class)));
      tmpMap.put(_Fields.COMMENT_BOOKING_CANCEL_BO, new org.apache.thrift.meta_data.FieldMetaData("commentBookingCancelBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelBookingByAdmin_args.class, metaDataMap);
    }

    public cancelBookingByAdmin_args() {
    }

    public cancelBookingByAdmin_args(
      com.ishangke.edunav.commoncontract.model.BookingBo bookingBo,
      com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.bookingBo = bookingBo;
      this.commentBookingCancelBo = commentBookingCancelBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelBookingByAdmin_args(cancelBookingByAdmin_args other) {
      if (other.isSetBookingBo()) {
        this.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo(other.bookingBo);
      }
      if (other.isSetCommentBookingCancelBo()) {
        this.commentBookingCancelBo = new com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo(other.commentBookingCancelBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public cancelBookingByAdmin_args deepCopy() {
      return new cancelBookingByAdmin_args(this);
    }

    @Override
    public void clear() {
      this.bookingBo = null;
      this.commentBookingCancelBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo getBookingBo() {
      return this.bookingBo;
    }

    public cancelBookingByAdmin_args setBookingBo(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo) {
      this.bookingBo = bookingBo;
      return this;
    }

    public void unsetBookingBo() {
      this.bookingBo = null;
    }

    /** Returns true if field bookingBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBookingBo() {
      return this.bookingBo != null;
    }

    public void setBookingBoIsSet(boolean value) {
      if (!value) {
        this.bookingBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo getCommentBookingCancelBo() {
      return this.commentBookingCancelBo;
    }

    public cancelBookingByAdmin_args setCommentBookingCancelBo(com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo commentBookingCancelBo) {
      this.commentBookingCancelBo = commentBookingCancelBo;
      return this;
    }

    public void unsetCommentBookingCancelBo() {
      this.commentBookingCancelBo = null;
    }

    /** Returns true if field commentBookingCancelBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommentBookingCancelBo() {
      return this.commentBookingCancelBo != null;
    }

    public void setCommentBookingCancelBoIsSet(boolean value) {
      if (!value) {
        this.commentBookingCancelBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public cancelBookingByAdmin_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOOKING_BO:
        if (value == null) {
          unsetBookingBo();
        } else {
          setBookingBo((com.ishangke.edunav.commoncontract.model.BookingBo)value);
        }
        break;

      case COMMENT_BOOKING_CANCEL_BO:
        if (value == null) {
          unsetCommentBookingCancelBo();
        } else {
          setCommentBookingCancelBo((com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOKING_BO:
        return getBookingBo();

      case COMMENT_BOOKING_CANCEL_BO:
        return getCommentBookingCancelBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOOKING_BO:
        return isSetBookingBo();
      case COMMENT_BOOKING_CANCEL_BO:
        return isSetCommentBookingCancelBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelBookingByAdmin_args)
        return this.equals((cancelBookingByAdmin_args)that);
      return false;
    }

    public boolean equals(cancelBookingByAdmin_args that) {
      if (that == null)
        return false;

      boolean this_present_bookingBo = true && this.isSetBookingBo();
      boolean that_present_bookingBo = true && that.isSetBookingBo();
      if (this_present_bookingBo || that_present_bookingBo) {
        if (!(this_present_bookingBo && that_present_bookingBo))
          return false;
        if (!this.bookingBo.equals(that.bookingBo))
          return false;
      }

      boolean this_present_commentBookingCancelBo = true && this.isSetCommentBookingCancelBo();
      boolean that_present_commentBookingCancelBo = true && that.isSetCommentBookingCancelBo();
      if (this_present_commentBookingCancelBo || that_present_commentBookingCancelBo) {
        if (!(this_present_commentBookingCancelBo && that_present_commentBookingCancelBo))
          return false;
        if (!this.commentBookingCancelBo.equals(that.commentBookingCancelBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_bookingBo = true && (isSetBookingBo());
      builder.append(present_bookingBo);
      if (present_bookingBo)
        builder.append(bookingBo);

      boolean present_commentBookingCancelBo = true && (isSetCommentBookingCancelBo());
      builder.append(present_commentBookingCancelBo);
      if (present_commentBookingCancelBo)
        builder.append(commentBookingCancelBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(cancelBookingByAdmin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBookingBo()).compareTo(other.isSetBookingBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookingBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingBo, other.bookingBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommentBookingCancelBo()).compareTo(other.isSetCommentBookingCancelBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommentBookingCancelBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentBookingCancelBo, other.commentBookingCancelBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelBookingByAdmin_args(");
      boolean first = true;

      sb.append("bookingBo:");
      if (this.bookingBo == null) {
        sb.append("null");
      } else {
        sb.append(this.bookingBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commentBookingCancelBo:");
      if (this.commentBookingCancelBo == null) {
        sb.append("null");
      } else {
        sb.append(this.commentBookingCancelBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bookingBo != null) {
        bookingBo.validate();
      }
      if (commentBookingCancelBo != null) {
        commentBookingCancelBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelBookingByAdmin_argsStandardSchemeFactory implements SchemeFactory {
      public cancelBookingByAdmin_argsStandardScheme getScheme() {
        return new cancelBookingByAdmin_argsStandardScheme();
      }
    }

    private static class cancelBookingByAdmin_argsStandardScheme extends StandardScheme<cancelBookingByAdmin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelBookingByAdmin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOKING_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo();
                struct.bookingBo.read(iprot);
                struct.setBookingBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMENT_BOOKING_CANCEL_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commentBookingCancelBo = new com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo();
                struct.commentBookingCancelBo.read(iprot);
                struct.setCommentBookingCancelBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelBookingByAdmin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookingBo != null) {
          oprot.writeFieldBegin(BOOKING_BO_FIELD_DESC);
          struct.bookingBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.commentBookingCancelBo != null) {
          oprot.writeFieldBegin(COMMENT_BOOKING_CANCEL_BO_FIELD_DESC);
          struct.commentBookingCancelBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelBookingByAdmin_argsTupleSchemeFactory implements SchemeFactory {
      public cancelBookingByAdmin_argsTupleScheme getScheme() {
        return new cancelBookingByAdmin_argsTupleScheme();
      }
    }

    private static class cancelBookingByAdmin_argsTupleScheme extends TupleScheme<cancelBookingByAdmin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelBookingByAdmin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBookingBo()) {
          optionals.set(0);
        }
        if (struct.isSetCommentBookingCancelBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBookingBo()) {
          struct.bookingBo.write(oprot);
        }
        if (struct.isSetCommentBookingCancelBo()) {
          struct.commentBookingCancelBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelBookingByAdmin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo();
          struct.bookingBo.read(iprot);
          struct.setBookingBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.commentBookingCancelBo = new com.ishangke.edunav.commoncontract.model.CommentBookingCancelBo();
          struct.commentBookingCancelBo.read(iprot);
          struct.setCommentBookingCancelBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class cancelBookingByAdmin_result implements org.apache.thrift.TBase<cancelBookingByAdmin_result, cancelBookingByAdmin_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelBookingByAdmin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelBookingByAdmin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelBookingByAdmin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelBookingByAdmin_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.BookingBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelBookingByAdmin_result.class, metaDataMap);
    }

    public cancelBookingByAdmin_result() {
    }

    public cancelBookingByAdmin_result(
      com.ishangke.edunav.commoncontract.model.BookingBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelBookingByAdmin_result(cancelBookingByAdmin_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.BookingBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public cancelBookingByAdmin_result deepCopy() {
      return new cancelBookingByAdmin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo getSuccess() {
      return this.success;
    }

    public cancelBookingByAdmin_result setSuccess(com.ishangke.edunav.commoncontract.model.BookingBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public cancelBookingByAdmin_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.BookingBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelBookingByAdmin_result)
        return this.equals((cancelBookingByAdmin_result)that);
      return false;
    }

    public boolean equals(cancelBookingByAdmin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(cancelBookingByAdmin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelBookingByAdmin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelBookingByAdmin_resultStandardSchemeFactory implements SchemeFactory {
      public cancelBookingByAdmin_resultStandardScheme getScheme() {
        return new cancelBookingByAdmin_resultStandardScheme();
      }
    }

    private static class cancelBookingByAdmin_resultStandardScheme extends StandardScheme<cancelBookingByAdmin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelBookingByAdmin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.BookingBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelBookingByAdmin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelBookingByAdmin_resultTupleSchemeFactory implements SchemeFactory {
      public cancelBookingByAdmin_resultTupleScheme getScheme() {
        return new cancelBookingByAdmin_resultTupleScheme();
      }
    }

    private static class cancelBookingByAdmin_resultTupleScheme extends TupleScheme<cancelBookingByAdmin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelBookingByAdmin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelBookingByAdmin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.BookingBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class query_args implements org.apache.thrift.TBase<query_args, query_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_args");

    private static final org.apache.thrift.protocol.TField BOOKING_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField PAGINATION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("paginationBo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo bookingBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required
    public com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOKING_BO((short)1, "bookingBo"),
      PARTNER_BO((short)2, "partnerBo"),
      USER_BO((short)3, "userBo"),
      PAGINATION_BO((short)4, "paginationBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOKING_BO
            return BOOKING_BO;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // USER_BO
            return USER_BO;
          case 4: // PAGINATION_BO
            return PAGINATION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOKING_BO, new org.apache.thrift.meta_data.FieldMetaData("bookingBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.BookingBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.PAGINATION_BO, new org.apache.thrift.meta_data.FieldMetaData("paginationBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PaginationBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_args.class, metaDataMap);
    }

    public query_args() {
    }

    public query_args(
      com.ishangke.edunav.commoncontract.model.BookingBo bookingBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo,
      com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo)
    {
      this();
      this.bookingBo = bookingBo;
      this.partnerBo = partnerBo;
      this.userBo = userBo;
      this.paginationBo = paginationBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_args(query_args other) {
      if (other.isSetBookingBo()) {
        this.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo(other.bookingBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
      if (other.isSetPaginationBo()) {
        this.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo(other.paginationBo);
      }
    }

    public query_args deepCopy() {
      return new query_args(this);
    }

    @Override
    public void clear() {
      this.bookingBo = null;
      this.partnerBo = null;
      this.userBo = null;
      this.paginationBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.BookingBo getBookingBo() {
      return this.bookingBo;
    }

    public query_args setBookingBo(com.ishangke.edunav.commoncontract.model.BookingBo bookingBo) {
      this.bookingBo = bookingBo;
      return this;
    }

    public void unsetBookingBo() {
      this.bookingBo = null;
    }

    /** Returns true if field bookingBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBookingBo() {
      return this.bookingBo != null;
    }

    public void setBookingBoIsSet(boolean value) {
      if (!value) {
        this.bookingBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public query_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public query_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PaginationBo getPaginationBo() {
      return this.paginationBo;
    }

    public query_args setPaginationBo(com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) {
      this.paginationBo = paginationBo;
      return this;
    }

    public void unsetPaginationBo() {
      this.paginationBo = null;
    }

    /** Returns true if field paginationBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPaginationBo() {
      return this.paginationBo != null;
    }

    public void setPaginationBoIsSet(boolean value) {
      if (!value) {
        this.paginationBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOOKING_BO:
        if (value == null) {
          unsetBookingBo();
        } else {
          setBookingBo((com.ishangke.edunav.commoncontract.model.BookingBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case PAGINATION_BO:
        if (value == null) {
          unsetPaginationBo();
        } else {
          setPaginationBo((com.ishangke.edunav.commoncontract.model.PaginationBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOKING_BO:
        return getBookingBo();

      case PARTNER_BO:
        return getPartnerBo();

      case USER_BO:
        return getUserBo();

      case PAGINATION_BO:
        return getPaginationBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOOKING_BO:
        return isSetBookingBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case USER_BO:
        return isSetUserBo();
      case PAGINATION_BO:
        return isSetPaginationBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_args)
        return this.equals((query_args)that);
      return false;
    }

    public boolean equals(query_args that) {
      if (that == null)
        return false;

      boolean this_present_bookingBo = true && this.isSetBookingBo();
      boolean that_present_bookingBo = true && that.isSetBookingBo();
      if (this_present_bookingBo || that_present_bookingBo) {
        if (!(this_present_bookingBo && that_present_bookingBo))
          return false;
        if (!this.bookingBo.equals(that.bookingBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      boolean this_present_paginationBo = true && this.isSetPaginationBo();
      boolean that_present_paginationBo = true && that.isSetPaginationBo();
      if (this_present_paginationBo || that_present_paginationBo) {
        if (!(this_present_paginationBo && that_present_paginationBo))
          return false;
        if (!this.paginationBo.equals(that.paginationBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_bookingBo = true && (isSetBookingBo());
      builder.append(present_bookingBo);
      if (present_bookingBo)
        builder.append(bookingBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      boolean present_paginationBo = true && (isSetPaginationBo());
      builder.append(present_paginationBo);
      if (present_paginationBo)
        builder.append(paginationBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(query_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBookingBo()).compareTo(other.isSetBookingBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookingBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingBo, other.bookingBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPaginationBo()).compareTo(other.isSetPaginationBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaginationBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paginationBo, other.paginationBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_args(");
      boolean first = true;

      sb.append("bookingBo:");
      if (this.bookingBo == null) {
        sb.append("null");
      } else {
        sb.append(this.bookingBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paginationBo:");
      if (this.paginationBo == null) {
        sb.append("null");
      } else {
        sb.append(this.paginationBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bookingBo != null) {
        bookingBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
      if (paginationBo != null) {
        paginationBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_argsStandardSchemeFactory implements SchemeFactory {
      public query_argsStandardScheme getScheme() {
        return new query_argsStandardScheme();
      }
    }

    private static class query_argsStandardScheme extends StandardScheme<query_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOKING_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo();
                struct.bookingBo.read(iprot);
                struct.setBookingBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGINATION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo();
                struct.paginationBo.read(iprot);
                struct.setPaginationBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookingBo != null) {
          oprot.writeFieldBegin(BOOKING_BO_FIELD_DESC);
          struct.bookingBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.paginationBo != null) {
          oprot.writeFieldBegin(PAGINATION_BO_FIELD_DESC);
          struct.paginationBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_argsTupleSchemeFactory implements SchemeFactory {
      public query_argsTupleScheme getScheme() {
        return new query_argsTupleScheme();
      }
    }

    private static class query_argsTupleScheme extends TupleScheme<query_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBookingBo()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        if (struct.isSetPaginationBo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBookingBo()) {
          struct.bookingBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
        if (struct.isSetPaginationBo()) {
          struct.paginationBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.bookingBo = new com.ishangke.edunav.commoncontract.model.BookingBo();
          struct.bookingBo.read(iprot);
          struct.setBookingBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo();
          struct.paginationBo.read(iprot);
          struct.setPaginationBoIsSet(true);
        }
      }
    }

  }

  public static class query_result implements org.apache.thrift.TBase<query_result, query_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_resultTupleSchemeFactory());
    }

    public List<com.ishangke.edunav.commoncontract.model.BookingBo> success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.BookingBo.class))));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_result.class, metaDataMap);
    }

    public query_result() {
    }

    public query_result(
      List<com.ishangke.edunav.commoncontract.model.BookingBo> success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_result(query_result other) {
      if (other.isSetSuccess()) {
        List<com.ishangke.edunav.commoncontract.model.BookingBo> __this__success = new ArrayList<com.ishangke.edunav.commoncontract.model.BookingBo>(other.success.size());
        for (com.ishangke.edunav.commoncontract.model.BookingBo other_element : other.success) {
          __this__success.add(new com.ishangke.edunav.commoncontract.model.BookingBo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public query_result deepCopy() {
      return new query_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.ishangke.edunav.commoncontract.model.BookingBo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.ishangke.edunav.commoncontract.model.BookingBo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.ishangke.edunav.commoncontract.model.BookingBo>();
      }
      this.success.add(elem);
    }

    public List<com.ishangke.edunav.commoncontract.model.BookingBo> getSuccess() {
      return this.success;
    }

    public query_result setSuccess(List<com.ishangke.edunav.commoncontract.model.BookingBo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public query_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.ishangke.edunav.commoncontract.model.BookingBo>)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_result)
        return this.equals((query_result)that);
      return false;
    }

    public boolean equals(query_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(query_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_resultStandardSchemeFactory implements SchemeFactory {
      public query_resultStandardScheme getScheme() {
        return new query_resultStandardScheme();
      }
    }

    private static class query_resultStandardScheme extends StandardScheme<query_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.BookingBo>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    com.ishangke.edunav.commoncontract.model.BookingBo _elem2;
                    _elem2 = new com.ishangke.edunav.commoncontract.model.BookingBo();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.ishangke.edunav.commoncontract.model.BookingBo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_resultTupleSchemeFactory implements SchemeFactory {
      public query_resultTupleScheme getScheme() {
        return new query_resultTupleScheme();
      }
    }

    private static class query_resultTupleScheme extends TupleScheme<query_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.ishangke.edunav.commoncontract.model.BookingBo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.BookingBo>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              com.ishangke.edunav.commoncontract.model.BookingBo _elem7;
              _elem7 = new com.ishangke.edunav.commoncontract.model.BookingBo();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class queryHistory_args implements org.apache.thrift.TBase<queryHistory_args, queryHistory_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryHistory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryHistory_args");

    private static final org.apache.thrift.protocol.TField BOOKING_HISTORY_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingHistoryBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField PAGINATION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("paginationBo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryHistory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryHistory_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.BookingHistoryBo bookingHistoryBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required
    public com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOKING_HISTORY_BO((short)1, "bookingHistoryBo"),
      PARTNER_BO((short)2, "partnerBo"),
      USER_BO((short)3, "userBo"),
      PAGINATION_BO((short)4, "paginationBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOKING_HISTORY_BO
            return BOOKING_HISTORY_BO;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // USER_BO
            return USER_BO;
          case 4: // PAGINATION_BO
            return PAGINATION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOKING_HISTORY_BO, new org.apache.thrift.meta_data.FieldMetaData("bookingHistoryBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.BookingHistoryBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.PAGINATION_BO, new org.apache.thrift.meta_data.FieldMetaData("paginationBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PaginationBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryHistory_args.class, metaDataMap);
    }

    public queryHistory_args() {
    }

    public queryHistory_args(
      com.ishangke.edunav.commoncontract.model.BookingHistoryBo bookingHistoryBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo,
      com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo)
    {
      this();
      this.bookingHistoryBo = bookingHistoryBo;
      this.partnerBo = partnerBo;
      this.userBo = userBo;
      this.paginationBo = paginationBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryHistory_args(queryHistory_args other) {
      if (other.isSetBookingHistoryBo()) {
        this.bookingHistoryBo = new com.ishangke.edunav.commoncontract.model.BookingHistoryBo(other.bookingHistoryBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
      if (other.isSetPaginationBo()) {
        this.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo(other.paginationBo);
      }
    }

    public queryHistory_args deepCopy() {
      return new queryHistory_args(this);
    }

    @Override
    public void clear() {
      this.bookingHistoryBo = null;
      this.partnerBo = null;
      this.userBo = null;
      this.paginationBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.BookingHistoryBo getBookingHistoryBo() {
      return this.bookingHistoryBo;
    }

    public queryHistory_args setBookingHistoryBo(com.ishangke.edunav.commoncontract.model.BookingHistoryBo bookingHistoryBo) {
      this.bookingHistoryBo = bookingHistoryBo;
      return this;
    }

    public void unsetBookingHistoryBo() {
      this.bookingHistoryBo = null;
    }

    /** Returns true if field bookingHistoryBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBookingHistoryBo() {
      return this.bookingHistoryBo != null;
    }

    public void setBookingHistoryBoIsSet(boolean value) {
      if (!value) {
        this.bookingHistoryBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public queryHistory_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public queryHistory_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PaginationBo getPaginationBo() {
      return this.paginationBo;
    }

    public queryHistory_args setPaginationBo(com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) {
      this.paginationBo = paginationBo;
      return this;
    }

    public void unsetPaginationBo() {
      this.paginationBo = null;
    }

    /** Returns true if field paginationBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPaginationBo() {
      return this.paginationBo != null;
    }

    public void setPaginationBoIsSet(boolean value) {
      if (!value) {
        this.paginationBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOOKING_HISTORY_BO:
        if (value == null) {
          unsetBookingHistoryBo();
        } else {
          setBookingHistoryBo((com.ishangke.edunav.commoncontract.model.BookingHistoryBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case PAGINATION_BO:
        if (value == null) {
          unsetPaginationBo();
        } else {
          setPaginationBo((com.ishangke.edunav.commoncontract.model.PaginationBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOKING_HISTORY_BO:
        return getBookingHistoryBo();

      case PARTNER_BO:
        return getPartnerBo();

      case USER_BO:
        return getUserBo();

      case PAGINATION_BO:
        return getPaginationBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOOKING_HISTORY_BO:
        return isSetBookingHistoryBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case USER_BO:
        return isSetUserBo();
      case PAGINATION_BO:
        return isSetPaginationBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryHistory_args)
        return this.equals((queryHistory_args)that);
      return false;
    }

    public boolean equals(queryHistory_args that) {
      if (that == null)
        return false;

      boolean this_present_bookingHistoryBo = true && this.isSetBookingHistoryBo();
      boolean that_present_bookingHistoryBo = true && that.isSetBookingHistoryBo();
      if (this_present_bookingHistoryBo || that_present_bookingHistoryBo) {
        if (!(this_present_bookingHistoryBo && that_present_bookingHistoryBo))
          return false;
        if (!this.bookingHistoryBo.equals(that.bookingHistoryBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      boolean this_present_paginationBo = true && this.isSetPaginationBo();
      boolean that_present_paginationBo = true && that.isSetPaginationBo();
      if (this_present_paginationBo || that_present_paginationBo) {
        if (!(this_present_paginationBo && that_present_paginationBo))
          return false;
        if (!this.paginationBo.equals(that.paginationBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_bookingHistoryBo = true && (isSetBookingHistoryBo());
      builder.append(present_bookingHistoryBo);
      if (present_bookingHistoryBo)
        builder.append(bookingHistoryBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      boolean present_paginationBo = true && (isSetPaginationBo());
      builder.append(present_paginationBo);
      if (present_paginationBo)
        builder.append(paginationBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(queryHistory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBookingHistoryBo()).compareTo(other.isSetBookingHistoryBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookingHistoryBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingHistoryBo, other.bookingHistoryBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPaginationBo()).compareTo(other.isSetPaginationBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaginationBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paginationBo, other.paginationBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryHistory_args(");
      boolean first = true;

      sb.append("bookingHistoryBo:");
      if (this.bookingHistoryBo == null) {
        sb.append("null");
      } else {
        sb.append(this.bookingHistoryBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paginationBo:");
      if (this.paginationBo == null) {
        sb.append("null");
      } else {
        sb.append(this.paginationBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bookingHistoryBo != null) {
        bookingHistoryBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
      if (paginationBo != null) {
        paginationBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryHistory_argsStandardSchemeFactory implements SchemeFactory {
      public queryHistory_argsStandardScheme getScheme() {
        return new queryHistory_argsStandardScheme();
      }
    }

    private static class queryHistory_argsStandardScheme extends StandardScheme<queryHistory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryHistory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOKING_HISTORY_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bookingHistoryBo = new com.ishangke.edunav.commoncontract.model.BookingHistoryBo();
                struct.bookingHistoryBo.read(iprot);
                struct.setBookingHistoryBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGINATION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo();
                struct.paginationBo.read(iprot);
                struct.setPaginationBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryHistory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookingHistoryBo != null) {
          oprot.writeFieldBegin(BOOKING_HISTORY_BO_FIELD_DESC);
          struct.bookingHistoryBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.paginationBo != null) {
          oprot.writeFieldBegin(PAGINATION_BO_FIELD_DESC);
          struct.paginationBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryHistory_argsTupleSchemeFactory implements SchemeFactory {
      public queryHistory_argsTupleScheme getScheme() {
        return new queryHistory_argsTupleScheme();
      }
    }

    private static class queryHistory_argsTupleScheme extends TupleScheme<queryHistory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryHistory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBookingHistoryBo()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        if (struct.isSetPaginationBo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBookingHistoryBo()) {
          struct.bookingHistoryBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
        if (struct.isSetPaginationBo()) {
          struct.paginationBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryHistory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.bookingHistoryBo = new com.ishangke.edunav.commoncontract.model.BookingHistoryBo();
          struct.bookingHistoryBo.read(iprot);
          struct.setBookingHistoryBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo();
          struct.paginationBo.read(iprot);
          struct.setPaginationBoIsSet(true);
        }
      }
    }

  }

  public static class queryHistory_result implements org.apache.thrift.TBase<queryHistory_result, queryHistory_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryHistory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryHistory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryHistory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryHistory_resultTupleSchemeFactory());
    }

    public List<com.ishangke.edunav.commoncontract.model.BookingHistoryBo> success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.BookingHistoryBo.class))));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryHistory_result.class, metaDataMap);
    }

    public queryHistory_result() {
    }

    public queryHistory_result(
      List<com.ishangke.edunav.commoncontract.model.BookingHistoryBo> success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryHistory_result(queryHistory_result other) {
      if (other.isSetSuccess()) {
        List<com.ishangke.edunav.commoncontract.model.BookingHistoryBo> __this__success = new ArrayList<com.ishangke.edunav.commoncontract.model.BookingHistoryBo>(other.success.size());
        for (com.ishangke.edunav.commoncontract.model.BookingHistoryBo other_element : other.success) {
          __this__success.add(new com.ishangke.edunav.commoncontract.model.BookingHistoryBo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public queryHistory_result deepCopy() {
      return new queryHistory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.ishangke.edunav.commoncontract.model.BookingHistoryBo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.ishangke.edunav.commoncontract.model.BookingHistoryBo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.ishangke.edunav.commoncontract.model.BookingHistoryBo>();
      }
      this.success.add(elem);
    }

    public List<com.ishangke.edunav.commoncontract.model.BookingHistoryBo> getSuccess() {
      return this.success;
    }

    public queryHistory_result setSuccess(List<com.ishangke.edunav.commoncontract.model.BookingHistoryBo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public queryHistory_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.ishangke.edunav.commoncontract.model.BookingHistoryBo>)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryHistory_result)
        return this.equals((queryHistory_result)that);
      return false;
    }

    public boolean equals(queryHistory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(queryHistory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryHistory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryHistory_resultStandardSchemeFactory implements SchemeFactory {
      public queryHistory_resultStandardScheme getScheme() {
        return new queryHistory_resultStandardScheme();
      }
    }

    private static class queryHistory_resultStandardScheme extends StandardScheme<queryHistory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryHistory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.BookingHistoryBo>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    com.ishangke.edunav.commoncontract.model.BookingHistoryBo _elem10;
                    _elem10 = new com.ishangke.edunav.commoncontract.model.BookingHistoryBo();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryHistory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.ishangke.edunav.commoncontract.model.BookingHistoryBo _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryHistory_resultTupleSchemeFactory implements SchemeFactory {
      public queryHistory_resultTupleScheme getScheme() {
        return new queryHistory_resultTupleScheme();
      }
    }

    private static class queryHistory_resultTupleScheme extends TupleScheme<queryHistory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryHistory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.ishangke.edunav.commoncontract.model.BookingHistoryBo _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryHistory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.BookingHistoryBo>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              com.ishangke.edunav.commoncontract.model.BookingHistoryBo _elem15;
              _elem15 = new com.ishangke.edunav.commoncontract.model.BookingHistoryBo();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

}
