/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ishangke.edunav.commoncontract.service;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SpreadService {

  public interface Iface {

    /**
     * 生成识别码。<br>
     * 每条推广信息都需要独立的识别码
     * 
     * @param  userBo          发布推广信息的用户
     * @param  partnerBo       用户推广的机构信息
     * @param  courseBo        用户推广的课程信息
     * @param  iShangkeBo      用户推广的爱上课信息
     * 
     * @return 创建完毕的识别码
     * 
     * 
     * @param userBo
     * @param partnerBo
     * @param courseBo
     */
    public com.ishangke.edunav.commoncontract.model.SpreadBo generateCode(com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CourseBo courseBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 查询推广信息。<br>
     * 管理员可以查询推广信息
     * 
     * @param  spreadBo           需要查询的推广信息
     * @param  userBo             推广相关的用户信息
     * @param  paginationBo       分页信息
     * 
     * @return 推广信息实体 SpreadBo 列表
     * 
     * 
     * @param spreadBo
     * @param userBo
     * @param paginationBo
     */
    public List<com.ishangke.edunav.commoncontract.model.SpreadBo> query(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 创建推广信息。<br>
     * 用户可以创建推广信息，以供管理员审查
     * 
     * @param  spreadBo        需要创建的推广信息
     * @param  partnerBo       用户推广的机构信息
     * @param  courseBo        用户推广的课程信息
     * @param  iShangkeBo      用户推广的爱上课信息
     * @param  userBo          发布推广信息的用户
     * 
     * @return 创建完毕的推广信息
     * 
     * 
     * @param spreadBo
     * @param partnerBo
     * @param courseBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.SpreadBo createSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 认可推广信息。<br>
     * 管理员可以审核认可用户发布的推广信息
     * 
     * @param  spreadBo           待认可的推广信息
     * @param  userBo             发起认可的管理员信息
     * 
     * @return 认可之后的推广信息
     * 
     * 
     * @param spreadBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.SpreadBo approveSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 拒绝推广信息。<br>
     * 管理员可以审核拒绝用户发布的推广信息
     * 
     * @param  spreadBo           待拒绝的推广信息
     * @param  userBo             发起拒绝的管理员信息
     * 
     * @return 拒绝之后的推广信息
     * 
     * 
     * @param spreadBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.SpreadBo rejectSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 取消推广信息。<br>
     * 用户可以取消待审核的推广信息
     * 
     * @param  spreadBo           待取消的推广信息
     * @param  userBo             发起取消的用户信息
     * 
     * @return 取消之后的推广信息
     * 
     * 
     * @param spreadBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.SpreadBo cancelSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 删除推广信息。<br>
     * 用户可以删除推广信息记录
     * 
     * @param  spreadBo           待删除的推广信息
     * @param  userBo             发起删除的用户信息
     * 
     * @return 删除之后的推广信息
     * 
     * 
     * @param spreadBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.SpreadBo deleteSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void generateCode(com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CourseBo courseBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void query(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void approveSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rejectSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo generateCode(com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CourseBo courseBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_generateCode(userBo, partnerBo, courseBo);
      return recv_generateCode();
    }

    public void send_generateCode(com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CourseBo courseBo) throws org.apache.thrift.TException
    {
      generateCode_args args = new generateCode_args();
      args.setUserBo(userBo);
      args.setPartnerBo(partnerBo);
      args.setCourseBo(courseBo);
      sendBase("generateCode", args);
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo recv_generateCode() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      generateCode_result result = new generateCode_result();
      receiveBase(result, "generateCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generateCode failed: unknown result");
    }

    public List<com.ishangke.edunav.commoncontract.model.SpreadBo> query(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_query(spreadBo, userBo, paginationBo);
      return recv_query();
    }

    public void send_query(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws org.apache.thrift.TException
    {
      query_args args = new query_args();
      args.setSpreadBo(spreadBo);
      args.setUserBo(userBo);
      args.setPaginationBo(paginationBo);
      sendBase("query", args);
    }

    public List<com.ishangke.edunav.commoncontract.model.SpreadBo> recv_query() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      query_result result = new query_result();
      receiveBase(result, "query");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo createSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_createSpread(spreadBo, partnerBo, courseBo, userBo);
      return recv_createSpread();
    }

    public void send_createSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      createSpread_args args = new createSpread_args();
      args.setSpreadBo(spreadBo);
      args.setPartnerBo(partnerBo);
      args.setCourseBo(courseBo);
      args.setUserBo(userBo);
      sendBase("createSpread", args);
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo recv_createSpread() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      createSpread_result result = new createSpread_result();
      receiveBase(result, "createSpread");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createSpread failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo approveSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_approveSpread(spreadBo, userBo);
      return recv_approveSpread();
    }

    public void send_approveSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      approveSpread_args args = new approveSpread_args();
      args.setSpreadBo(spreadBo);
      args.setUserBo(userBo);
      sendBase("approveSpread", args);
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo recv_approveSpread() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      approveSpread_result result = new approveSpread_result();
      receiveBase(result, "approveSpread");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "approveSpread failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo rejectSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_rejectSpread(spreadBo, userBo);
      return recv_rejectSpread();
    }

    public void send_rejectSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      rejectSpread_args args = new rejectSpread_args();
      args.setSpreadBo(spreadBo);
      args.setUserBo(userBo);
      sendBase("rejectSpread", args);
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo recv_rejectSpread() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      rejectSpread_result result = new rejectSpread_result();
      receiveBase(result, "rejectSpread");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rejectSpread failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo cancelSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_cancelSpread(spreadBo, userBo);
      return recv_cancelSpread();
    }

    public void send_cancelSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      cancelSpread_args args = new cancelSpread_args();
      args.setSpreadBo(spreadBo);
      args.setUserBo(userBo);
      sendBase("cancelSpread", args);
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo recv_cancelSpread() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      cancelSpread_result result = new cancelSpread_result();
      receiveBase(result, "cancelSpread");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelSpread failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo deleteSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_deleteSpread(spreadBo, userBo);
      return recv_deleteSpread();
    }

    public void send_deleteSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      deleteSpread_args args = new deleteSpread_args();
      args.setSpreadBo(spreadBo);
      args.setUserBo(userBo);
      sendBase("deleteSpread", args);
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo recv_deleteSpread() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      deleteSpread_result result = new deleteSpread_result();
      receiveBase(result, "deleteSpread");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteSpread failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void generateCode(com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CourseBo courseBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generateCode_call method_call = new generateCode_call(userBo, partnerBo, courseBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generateCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.CourseBo courseBo;
      public generateCode_call(com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CourseBo courseBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userBo = userBo;
        this.partnerBo = partnerBo;
        this.courseBo = courseBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generateCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generateCode_args args = new generateCode_args();
        args.setUserBo(userBo);
        args.setPartnerBo(partnerBo);
        args.setCourseBo(courseBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.SpreadBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_generateCode();
      }
    }

    public void query(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_call method_call = new query_call(spreadBo, userBo, paginationBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      private com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo;
      public query_call(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spreadBo = spreadBo;
        this.userBo = userBo;
        this.paginationBo = paginationBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_args args = new query_args();
        args.setSpreadBo(spreadBo);
        args.setUserBo(userBo);
        args.setPaginationBo(paginationBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.ishangke.edunav.commoncontract.model.SpreadBo> getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query();
      }
    }

    public void createSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createSpread_call method_call = new createSpread_call(spreadBo, partnerBo, courseBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createSpread_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.CourseBo courseBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public createSpread_call(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CourseBo courseBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spreadBo = spreadBo;
        this.partnerBo = partnerBo;
        this.courseBo = courseBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createSpread", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createSpread_args args = new createSpread_args();
        args.setSpreadBo(spreadBo);
        args.setPartnerBo(partnerBo);
        args.setCourseBo(courseBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.SpreadBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createSpread();
      }
    }

    public void approveSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      approveSpread_call method_call = new approveSpread_call(spreadBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class approveSpread_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public approveSpread_call(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spreadBo = spreadBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("approveSpread", org.apache.thrift.protocol.TMessageType.CALL, 0));
        approveSpread_args args = new approveSpread_args();
        args.setSpreadBo(spreadBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.SpreadBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_approveSpread();
      }
    }

    public void rejectSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rejectSpread_call method_call = new rejectSpread_call(spreadBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rejectSpread_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public rejectSpread_call(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spreadBo = spreadBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rejectSpread", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rejectSpread_args args = new rejectSpread_args();
        args.setSpreadBo(spreadBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.SpreadBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rejectSpread();
      }
    }

    public void cancelSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelSpread_call method_call = new cancelSpread_call(spreadBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelSpread_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public cancelSpread_call(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spreadBo = spreadBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelSpread", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelSpread_args args = new cancelSpread_args();
        args.setSpreadBo(spreadBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.SpreadBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelSpread();
      }
    }

    public void deleteSpread(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSpread_call method_call = new deleteSpread_call(spreadBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSpread_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public deleteSpread_call(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spreadBo = spreadBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSpread", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSpread_args args = new deleteSpread_args();
        args.setSpreadBo(spreadBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.SpreadBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteSpread();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("generateCode", new generateCode());
      processMap.put("query", new query());
      processMap.put("createSpread", new createSpread());
      processMap.put("approveSpread", new approveSpread());
      processMap.put("rejectSpread", new rejectSpread());
      processMap.put("cancelSpread", new cancelSpread());
      processMap.put("deleteSpread", new deleteSpread());
      return processMap;
    }

    public static class generateCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generateCode_args> {
      public generateCode() {
        super("generateCode");
      }

      public generateCode_args getEmptyArgsInstance() {
        return new generateCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public generateCode_result getResult(I iface, generateCode_args args) throws org.apache.thrift.TException {
        generateCode_result result = new generateCode_result();
        try {
          result.success = iface.generateCode(args.userBo, args.partnerBo, args.courseBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class query<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_args> {
      public query() {
        super("query");
      }

      public query_args getEmptyArgsInstance() {
        return new query_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_result getResult(I iface, query_args args) throws org.apache.thrift.TException {
        query_result result = new query_result();
        try {
          result.success = iface.query(args.spreadBo, args.userBo, args.paginationBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class createSpread<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createSpread_args> {
      public createSpread() {
        super("createSpread");
      }

      public createSpread_args getEmptyArgsInstance() {
        return new createSpread_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createSpread_result getResult(I iface, createSpread_args args) throws org.apache.thrift.TException {
        createSpread_result result = new createSpread_result();
        try {
          result.success = iface.createSpread(args.spreadBo, args.partnerBo, args.courseBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class approveSpread<I extends Iface> extends org.apache.thrift.ProcessFunction<I, approveSpread_args> {
      public approveSpread() {
        super("approveSpread");
      }

      public approveSpread_args getEmptyArgsInstance() {
        return new approveSpread_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public approveSpread_result getResult(I iface, approveSpread_args args) throws org.apache.thrift.TException {
        approveSpread_result result = new approveSpread_result();
        try {
          result.success = iface.approveSpread(args.spreadBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class rejectSpread<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rejectSpread_args> {
      public rejectSpread() {
        super("rejectSpread");
      }

      public rejectSpread_args getEmptyArgsInstance() {
        return new rejectSpread_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rejectSpread_result getResult(I iface, rejectSpread_args args) throws org.apache.thrift.TException {
        rejectSpread_result result = new rejectSpread_result();
        try {
          result.success = iface.rejectSpread(args.spreadBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class cancelSpread<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelSpread_args> {
      public cancelSpread() {
        super("cancelSpread");
      }

      public cancelSpread_args getEmptyArgsInstance() {
        return new cancelSpread_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelSpread_result getResult(I iface, cancelSpread_args args) throws org.apache.thrift.TException {
        cancelSpread_result result = new cancelSpread_result();
        try {
          result.success = iface.cancelSpread(args.spreadBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class deleteSpread<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSpread_args> {
      public deleteSpread() {
        super("deleteSpread");
      }

      public deleteSpread_args getEmptyArgsInstance() {
        return new deleteSpread_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteSpread_result getResult(I iface, deleteSpread_args args) throws org.apache.thrift.TException {
        deleteSpread_result result = new deleteSpread_result();
        try {
          result.success = iface.deleteSpread(args.spreadBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("generateCode", new generateCode());
      processMap.put("query", new query());
      processMap.put("createSpread", new createSpread());
      processMap.put("approveSpread", new approveSpread());
      processMap.put("rejectSpread", new rejectSpread());
      processMap.put("cancelSpread", new cancelSpread());
      processMap.put("deleteSpread", new deleteSpread());
      return processMap;
    }

    public static class generateCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, generateCode_args, com.ishangke.edunav.commoncontract.model.SpreadBo> {
      public generateCode() {
        super("generateCode");
      }

      public generateCode_args getEmptyArgsInstance() {
        return new generateCode_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.SpreadBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.SpreadBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.SpreadBo o) {
            generateCode_result result = new generateCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            generateCode_result result = new generateCode_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, generateCode_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.SpreadBo> resultHandler) throws TException {
        iface.generateCode(args.userBo, args.partnerBo, args.courseBo,resultHandler);
      }
    }

    public static class query<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_args, List<com.ishangke.edunav.commoncontract.model.SpreadBo>> {
      public query() {
        super("query");
      }

      public query_args getEmptyArgsInstance() {
        return new query_args();
      }

      public AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.SpreadBo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.SpreadBo>>() { 
          public void onComplete(List<com.ishangke.edunav.commoncontract.model.SpreadBo> o) {
            query_result result = new query_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            query_result result = new query_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, query_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.SpreadBo>> resultHandler) throws TException {
        iface.query(args.spreadBo, args.userBo, args.paginationBo,resultHandler);
      }
    }

    public static class createSpread<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createSpread_args, com.ishangke.edunav.commoncontract.model.SpreadBo> {
      public createSpread() {
        super("createSpread");
      }

      public createSpread_args getEmptyArgsInstance() {
        return new createSpread_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.SpreadBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.SpreadBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.SpreadBo o) {
            createSpread_result result = new createSpread_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createSpread_result result = new createSpread_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createSpread_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.SpreadBo> resultHandler) throws TException {
        iface.createSpread(args.spreadBo, args.partnerBo, args.courseBo, args.userBo,resultHandler);
      }
    }

    public static class approveSpread<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, approveSpread_args, com.ishangke.edunav.commoncontract.model.SpreadBo> {
      public approveSpread() {
        super("approveSpread");
      }

      public approveSpread_args getEmptyArgsInstance() {
        return new approveSpread_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.SpreadBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.SpreadBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.SpreadBo o) {
            approveSpread_result result = new approveSpread_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            approveSpread_result result = new approveSpread_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, approveSpread_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.SpreadBo> resultHandler) throws TException {
        iface.approveSpread(args.spreadBo, args.userBo,resultHandler);
      }
    }

    public static class rejectSpread<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rejectSpread_args, com.ishangke.edunav.commoncontract.model.SpreadBo> {
      public rejectSpread() {
        super("rejectSpread");
      }

      public rejectSpread_args getEmptyArgsInstance() {
        return new rejectSpread_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.SpreadBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.SpreadBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.SpreadBo o) {
            rejectSpread_result result = new rejectSpread_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rejectSpread_result result = new rejectSpread_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rejectSpread_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.SpreadBo> resultHandler) throws TException {
        iface.rejectSpread(args.spreadBo, args.userBo,resultHandler);
      }
    }

    public static class cancelSpread<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelSpread_args, com.ishangke.edunav.commoncontract.model.SpreadBo> {
      public cancelSpread() {
        super("cancelSpread");
      }

      public cancelSpread_args getEmptyArgsInstance() {
        return new cancelSpread_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.SpreadBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.SpreadBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.SpreadBo o) {
            cancelSpread_result result = new cancelSpread_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelSpread_result result = new cancelSpread_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelSpread_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.SpreadBo> resultHandler) throws TException {
        iface.cancelSpread(args.spreadBo, args.userBo,resultHandler);
      }
    }

    public static class deleteSpread<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteSpread_args, com.ishangke.edunav.commoncontract.model.SpreadBo> {
      public deleteSpread() {
        super("deleteSpread");
      }

      public deleteSpread_args getEmptyArgsInstance() {
        return new deleteSpread_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.SpreadBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.SpreadBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.SpreadBo o) {
            deleteSpread_result result = new deleteSpread_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteSpread_result result = new deleteSpread_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteSpread_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.SpreadBo> resultHandler) throws TException {
        iface.deleteSpread(args.spreadBo, args.userBo,resultHandler);
      }
    }

  }

  public static class generateCode_args implements org.apache.thrift.TBase<generateCode_args, generateCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<generateCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateCode_args");

    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField COURSE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generateCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generateCode_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.CourseBo courseBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_BO((short)1, "userBo"),
      PARTNER_BO((short)2, "partnerBo"),
      COURSE_BO((short)3, "courseBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_BO
            return USER_BO;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // COURSE_BO
            return COURSE_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.COURSE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateCode_args.class, metaDataMap);
    }

    public generateCode_args() {
    }

    public generateCode_args(
      com.ishangke.edunav.commoncontract.model.UserBo userBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.CourseBo courseBo)
    {
      this();
      this.userBo = userBo;
      this.partnerBo = partnerBo;
      this.courseBo = courseBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateCode_args(generateCode_args other) {
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetCourseBo()) {
        this.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo(other.courseBo);
      }
    }

    public generateCode_args deepCopy() {
      return new generateCode_args(this);
    }

    @Override
    public void clear() {
      this.userBo = null;
      this.partnerBo = null;
      this.courseBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public generateCode_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public generateCode_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getCourseBo() {
      return this.courseBo;
    }

    public generateCode_args setCourseBo(com.ishangke.edunav.commoncontract.model.CourseBo courseBo) {
      this.courseBo = courseBo;
      return this;
    }

    public void unsetCourseBo() {
      this.courseBo = null;
    }

    /** Returns true if field courseBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseBo() {
      return this.courseBo != null;
    }

    public void setCourseBoIsSet(boolean value) {
      if (!value) {
        this.courseBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case COURSE_BO:
        if (value == null) {
          unsetCourseBo();
        } else {
          setCourseBo((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_BO:
        return getUserBo();

      case PARTNER_BO:
        return getPartnerBo();

      case COURSE_BO:
        return getCourseBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_BO:
        return isSetUserBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case COURSE_BO:
        return isSetCourseBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateCode_args)
        return this.equals((generateCode_args)that);
      return false;
    }

    public boolean equals(generateCode_args that) {
      if (that == null)
        return false;

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_courseBo = true && this.isSetCourseBo();
      boolean that_present_courseBo = true && that.isSetCourseBo();
      if (this_present_courseBo || that_present_courseBo) {
        if (!(this_present_courseBo && that_present_courseBo))
          return false;
        if (!this.courseBo.equals(that.courseBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_courseBo = true && (isSetCourseBo());
      builder.append(present_courseBo);
      if (present_courseBo)
        builder.append(courseBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(generateCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCourseBo()).compareTo(other.isSetCourseBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseBo, other.courseBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateCode_args(");
      boolean first = true;

      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("courseBo:");
      if (this.courseBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userBo != null) {
        userBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (courseBo != null) {
        courseBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateCode_argsStandardSchemeFactory implements SchemeFactory {
      public generateCode_argsStandardScheme getScheme() {
        return new generateCode_argsStandardScheme();
      }
    }

    private static class generateCode_argsStandardScheme extends StandardScheme<generateCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generateCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COURSE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.courseBo.read(iprot);
                struct.setCourseBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generateCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.courseBo != null) {
          oprot.writeFieldBegin(COURSE_BO_FIELD_DESC);
          struct.courseBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateCode_argsTupleSchemeFactory implements SchemeFactory {
      public generateCode_argsTupleScheme getScheme() {
        return new generateCode_argsTupleScheme();
      }
    }

    private static class generateCode_argsTupleScheme extends TupleScheme<generateCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserBo()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetCourseBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetCourseBo()) {
          struct.courseBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.courseBo.read(iprot);
          struct.setCourseBoIsSet(true);
        }
      }
    }

  }

  public static class generateCode_result implements org.apache.thrift.TBase<generateCode_result, generateCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<generateCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generateCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generateCode_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.SpreadBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateCode_result.class, metaDataMap);
    }

    public generateCode_result() {
    }

    public generateCode_result(
      com.ishangke.edunav.commoncontract.model.SpreadBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateCode_result(generateCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.SpreadBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public generateCode_result deepCopy() {
      return new generateCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo getSuccess() {
      return this.success;
    }

    public generateCode_result setSuccess(com.ishangke.edunav.commoncontract.model.SpreadBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public generateCode_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.SpreadBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateCode_result)
        return this.equals((generateCode_result)that);
      return false;
    }

    public boolean equals(generateCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(generateCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateCode_resultStandardSchemeFactory implements SchemeFactory {
      public generateCode_resultStandardScheme getScheme() {
        return new generateCode_resultStandardScheme();
      }
    }

    private static class generateCode_resultStandardScheme extends StandardScheme<generateCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generateCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.SpreadBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generateCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateCode_resultTupleSchemeFactory implements SchemeFactory {
      public generateCode_resultTupleScheme getScheme() {
        return new generateCode_resultTupleScheme();
      }
    }

    private static class generateCode_resultTupleScheme extends TupleScheme<generateCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.SpreadBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class query_args implements org.apache.thrift.TBase<query_args, query_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_args");

    private static final org.apache.thrift.protocol.TField SPREAD_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("spreadBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PAGINATION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("paginationBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required
    public com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPREAD_BO((short)1, "spreadBo"),
      USER_BO((short)2, "userBo"),
      PAGINATION_BO((short)3, "paginationBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPREAD_BO
            return SPREAD_BO;
          case 2: // USER_BO
            return USER_BO;
          case 3: // PAGINATION_BO
            return PAGINATION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPREAD_BO, new org.apache.thrift.meta_data.FieldMetaData("spreadBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.SpreadBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.PAGINATION_BO, new org.apache.thrift.meta_data.FieldMetaData("paginationBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PaginationBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_args.class, metaDataMap);
    }

    public query_args() {
    }

    public query_args(
      com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo,
      com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo)
    {
      this();
      this.spreadBo = spreadBo;
      this.userBo = userBo;
      this.paginationBo = paginationBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_args(query_args other) {
      if (other.isSetSpreadBo()) {
        this.spreadBo = new com.ishangke.edunav.commoncontract.model.SpreadBo(other.spreadBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
      if (other.isSetPaginationBo()) {
        this.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo(other.paginationBo);
      }
    }

    public query_args deepCopy() {
      return new query_args(this);
    }

    @Override
    public void clear() {
      this.spreadBo = null;
      this.userBo = null;
      this.paginationBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo getSpreadBo() {
      return this.spreadBo;
    }

    public query_args setSpreadBo(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo) {
      this.spreadBo = spreadBo;
      return this;
    }

    public void unsetSpreadBo() {
      this.spreadBo = null;
    }

    /** Returns true if field spreadBo is set (has been assigned a value) and false otherwise */
    public boolean isSetSpreadBo() {
      return this.spreadBo != null;
    }

    public void setSpreadBoIsSet(boolean value) {
      if (!value) {
        this.spreadBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public query_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PaginationBo getPaginationBo() {
      return this.paginationBo;
    }

    public query_args setPaginationBo(com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) {
      this.paginationBo = paginationBo;
      return this;
    }

    public void unsetPaginationBo() {
      this.paginationBo = null;
    }

    /** Returns true if field paginationBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPaginationBo() {
      return this.paginationBo != null;
    }

    public void setPaginationBoIsSet(boolean value) {
      if (!value) {
        this.paginationBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPREAD_BO:
        if (value == null) {
          unsetSpreadBo();
        } else {
          setSpreadBo((com.ishangke.edunav.commoncontract.model.SpreadBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case PAGINATION_BO:
        if (value == null) {
          unsetPaginationBo();
        } else {
          setPaginationBo((com.ishangke.edunav.commoncontract.model.PaginationBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPREAD_BO:
        return getSpreadBo();

      case USER_BO:
        return getUserBo();

      case PAGINATION_BO:
        return getPaginationBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPREAD_BO:
        return isSetSpreadBo();
      case USER_BO:
        return isSetUserBo();
      case PAGINATION_BO:
        return isSetPaginationBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_args)
        return this.equals((query_args)that);
      return false;
    }

    public boolean equals(query_args that) {
      if (that == null)
        return false;

      boolean this_present_spreadBo = true && this.isSetSpreadBo();
      boolean that_present_spreadBo = true && that.isSetSpreadBo();
      if (this_present_spreadBo || that_present_spreadBo) {
        if (!(this_present_spreadBo && that_present_spreadBo))
          return false;
        if (!this.spreadBo.equals(that.spreadBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      boolean this_present_paginationBo = true && this.isSetPaginationBo();
      boolean that_present_paginationBo = true && that.isSetPaginationBo();
      if (this_present_paginationBo || that_present_paginationBo) {
        if (!(this_present_paginationBo && that_present_paginationBo))
          return false;
        if (!this.paginationBo.equals(that.paginationBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_spreadBo = true && (isSetSpreadBo());
      builder.append(present_spreadBo);
      if (present_spreadBo)
        builder.append(spreadBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      boolean present_paginationBo = true && (isSetPaginationBo());
      builder.append(present_paginationBo);
      if (present_paginationBo)
        builder.append(paginationBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(query_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpreadBo()).compareTo(other.isSetSpreadBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpreadBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spreadBo, other.spreadBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPaginationBo()).compareTo(other.isSetPaginationBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaginationBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paginationBo, other.paginationBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_args(");
      boolean first = true;

      sb.append("spreadBo:");
      if (this.spreadBo == null) {
        sb.append("null");
      } else {
        sb.append(this.spreadBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paginationBo:");
      if (this.paginationBo == null) {
        sb.append("null");
      } else {
        sb.append(this.paginationBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (spreadBo != null) {
        spreadBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
      if (paginationBo != null) {
        paginationBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_argsStandardSchemeFactory implements SchemeFactory {
      public query_argsStandardScheme getScheme() {
        return new query_argsStandardScheme();
      }
    }

    private static class query_argsStandardScheme extends StandardScheme<query_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPREAD_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.spreadBo = new com.ishangke.edunav.commoncontract.model.SpreadBo();
                struct.spreadBo.read(iprot);
                struct.setSpreadBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGINATION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo();
                struct.paginationBo.read(iprot);
                struct.setPaginationBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spreadBo != null) {
          oprot.writeFieldBegin(SPREAD_BO_FIELD_DESC);
          struct.spreadBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.paginationBo != null) {
          oprot.writeFieldBegin(PAGINATION_BO_FIELD_DESC);
          struct.paginationBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_argsTupleSchemeFactory implements SchemeFactory {
      public query_argsTupleScheme getScheme() {
        return new query_argsTupleScheme();
      }
    }

    private static class query_argsTupleScheme extends TupleScheme<query_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSpreadBo()) {
          optionals.set(0);
        }
        if (struct.isSetUserBo()) {
          optionals.set(1);
        }
        if (struct.isSetPaginationBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSpreadBo()) {
          struct.spreadBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
        if (struct.isSetPaginationBo()) {
          struct.paginationBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.spreadBo = new com.ishangke.edunav.commoncontract.model.SpreadBo();
          struct.spreadBo.read(iprot);
          struct.setSpreadBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo();
          struct.paginationBo.read(iprot);
          struct.setPaginationBoIsSet(true);
        }
      }
    }

  }

  public static class query_result implements org.apache.thrift.TBase<query_result, query_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_resultTupleSchemeFactory());
    }

    public List<com.ishangke.edunav.commoncontract.model.SpreadBo> success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.SpreadBo.class))));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_result.class, metaDataMap);
    }

    public query_result() {
    }

    public query_result(
      List<com.ishangke.edunav.commoncontract.model.SpreadBo> success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_result(query_result other) {
      if (other.isSetSuccess()) {
        List<com.ishangke.edunav.commoncontract.model.SpreadBo> __this__success = new ArrayList<com.ishangke.edunav.commoncontract.model.SpreadBo>(other.success.size());
        for (com.ishangke.edunav.commoncontract.model.SpreadBo other_element : other.success) {
          __this__success.add(new com.ishangke.edunav.commoncontract.model.SpreadBo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public query_result deepCopy() {
      return new query_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.ishangke.edunav.commoncontract.model.SpreadBo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.ishangke.edunav.commoncontract.model.SpreadBo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.ishangke.edunav.commoncontract.model.SpreadBo>();
      }
      this.success.add(elem);
    }

    public List<com.ishangke.edunav.commoncontract.model.SpreadBo> getSuccess() {
      return this.success;
    }

    public query_result setSuccess(List<com.ishangke.edunav.commoncontract.model.SpreadBo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public query_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.ishangke.edunav.commoncontract.model.SpreadBo>)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_result)
        return this.equals((query_result)that);
      return false;
    }

    public boolean equals(query_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(query_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_resultStandardSchemeFactory implements SchemeFactory {
      public query_resultStandardScheme getScheme() {
        return new query_resultStandardScheme();
      }
    }

    private static class query_resultStandardScheme extends StandardScheme<query_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.SpreadBo>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    com.ishangke.edunav.commoncontract.model.SpreadBo _elem2;
                    _elem2 = new com.ishangke.edunav.commoncontract.model.SpreadBo();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.ishangke.edunav.commoncontract.model.SpreadBo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_resultTupleSchemeFactory implements SchemeFactory {
      public query_resultTupleScheme getScheme() {
        return new query_resultTupleScheme();
      }
    }

    private static class query_resultTupleScheme extends TupleScheme<query_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.ishangke.edunav.commoncontract.model.SpreadBo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.SpreadBo>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              com.ishangke.edunav.commoncontract.model.SpreadBo _elem7;
              _elem7 = new com.ishangke.edunav.commoncontract.model.SpreadBo();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class createSpread_args implements org.apache.thrift.TBase<createSpread_args, createSpread_args._Fields>, java.io.Serializable, Cloneable, Comparable<createSpread_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createSpread_args");

    private static final org.apache.thrift.protocol.TField SPREAD_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("spreadBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField COURSE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createSpread_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createSpread_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.CourseBo courseBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPREAD_BO((short)1, "spreadBo"),
      PARTNER_BO((short)2, "partnerBo"),
      COURSE_BO((short)3, "courseBo"),
      USER_BO((short)4, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPREAD_BO
            return SPREAD_BO;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // COURSE_BO
            return COURSE_BO;
          case 4: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPREAD_BO, new org.apache.thrift.meta_data.FieldMetaData("spreadBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.SpreadBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.COURSE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createSpread_args.class, metaDataMap);
    }

    public createSpread_args() {
    }

    public createSpread_args(
      com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.CourseBo courseBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.spreadBo = spreadBo;
      this.partnerBo = partnerBo;
      this.courseBo = courseBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSpread_args(createSpread_args other) {
      if (other.isSetSpreadBo()) {
        this.spreadBo = new com.ishangke.edunav.commoncontract.model.SpreadBo(other.spreadBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetCourseBo()) {
        this.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo(other.courseBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public createSpread_args deepCopy() {
      return new createSpread_args(this);
    }

    @Override
    public void clear() {
      this.spreadBo = null;
      this.partnerBo = null;
      this.courseBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo getSpreadBo() {
      return this.spreadBo;
    }

    public createSpread_args setSpreadBo(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo) {
      this.spreadBo = spreadBo;
      return this;
    }

    public void unsetSpreadBo() {
      this.spreadBo = null;
    }

    /** Returns true if field spreadBo is set (has been assigned a value) and false otherwise */
    public boolean isSetSpreadBo() {
      return this.spreadBo != null;
    }

    public void setSpreadBoIsSet(boolean value) {
      if (!value) {
        this.spreadBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public createSpread_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CourseBo getCourseBo() {
      return this.courseBo;
    }

    public createSpread_args setCourseBo(com.ishangke.edunav.commoncontract.model.CourseBo courseBo) {
      this.courseBo = courseBo;
      return this;
    }

    public void unsetCourseBo() {
      this.courseBo = null;
    }

    /** Returns true if field courseBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseBo() {
      return this.courseBo != null;
    }

    public void setCourseBoIsSet(boolean value) {
      if (!value) {
        this.courseBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public createSpread_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPREAD_BO:
        if (value == null) {
          unsetSpreadBo();
        } else {
          setSpreadBo((com.ishangke.edunav.commoncontract.model.SpreadBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case COURSE_BO:
        if (value == null) {
          unsetCourseBo();
        } else {
          setCourseBo((com.ishangke.edunav.commoncontract.model.CourseBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPREAD_BO:
        return getSpreadBo();

      case PARTNER_BO:
        return getPartnerBo();

      case COURSE_BO:
        return getCourseBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPREAD_BO:
        return isSetSpreadBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case COURSE_BO:
        return isSetCourseBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSpread_args)
        return this.equals((createSpread_args)that);
      return false;
    }

    public boolean equals(createSpread_args that) {
      if (that == null)
        return false;

      boolean this_present_spreadBo = true && this.isSetSpreadBo();
      boolean that_present_spreadBo = true && that.isSetSpreadBo();
      if (this_present_spreadBo || that_present_spreadBo) {
        if (!(this_present_spreadBo && that_present_spreadBo))
          return false;
        if (!this.spreadBo.equals(that.spreadBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_courseBo = true && this.isSetCourseBo();
      boolean that_present_courseBo = true && that.isSetCourseBo();
      if (this_present_courseBo || that_present_courseBo) {
        if (!(this_present_courseBo && that_present_courseBo))
          return false;
        if (!this.courseBo.equals(that.courseBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_spreadBo = true && (isSetSpreadBo());
      builder.append(present_spreadBo);
      if (present_spreadBo)
        builder.append(spreadBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_courseBo = true && (isSetCourseBo());
      builder.append(present_courseBo);
      if (present_courseBo)
        builder.append(courseBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createSpread_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpreadBo()).compareTo(other.isSetSpreadBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpreadBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spreadBo, other.spreadBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCourseBo()).compareTo(other.isSetCourseBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseBo, other.courseBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createSpread_args(");
      boolean first = true;

      sb.append("spreadBo:");
      if (this.spreadBo == null) {
        sb.append("null");
      } else {
        sb.append(this.spreadBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("courseBo:");
      if (this.courseBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (spreadBo != null) {
        spreadBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (courseBo != null) {
        courseBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createSpread_argsStandardSchemeFactory implements SchemeFactory {
      public createSpread_argsStandardScheme getScheme() {
        return new createSpread_argsStandardScheme();
      }
    }

    private static class createSpread_argsStandardScheme extends StandardScheme<createSpread_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createSpread_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPREAD_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.spreadBo = new com.ishangke.edunav.commoncontract.model.SpreadBo();
                struct.spreadBo.read(iprot);
                struct.setSpreadBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COURSE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
                struct.courseBo.read(iprot);
                struct.setCourseBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createSpread_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spreadBo != null) {
          oprot.writeFieldBegin(SPREAD_BO_FIELD_DESC);
          struct.spreadBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.courseBo != null) {
          oprot.writeFieldBegin(COURSE_BO_FIELD_DESC);
          struct.courseBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createSpread_argsTupleSchemeFactory implements SchemeFactory {
      public createSpread_argsTupleScheme getScheme() {
        return new createSpread_argsTupleScheme();
      }
    }

    private static class createSpread_argsTupleScheme extends TupleScheme<createSpread_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createSpread_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSpreadBo()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetCourseBo()) {
          optionals.set(2);
        }
        if (struct.isSetUserBo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSpreadBo()) {
          struct.spreadBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetCourseBo()) {
          struct.courseBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createSpread_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.spreadBo = new com.ishangke.edunav.commoncontract.model.SpreadBo();
          struct.spreadBo.read(iprot);
          struct.setSpreadBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.courseBo = new com.ishangke.edunav.commoncontract.model.CourseBo();
          struct.courseBo.read(iprot);
          struct.setCourseBoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class createSpread_result implements org.apache.thrift.TBase<createSpread_result, createSpread_result._Fields>, java.io.Serializable, Cloneable, Comparable<createSpread_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createSpread_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createSpread_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createSpread_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.SpreadBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createSpread_result.class, metaDataMap);
    }

    public createSpread_result() {
    }

    public createSpread_result(
      com.ishangke.edunav.commoncontract.model.SpreadBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSpread_result(createSpread_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.SpreadBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public createSpread_result deepCopy() {
      return new createSpread_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo getSuccess() {
      return this.success;
    }

    public createSpread_result setSuccess(com.ishangke.edunav.commoncontract.model.SpreadBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public createSpread_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.SpreadBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSpread_result)
        return this.equals((createSpread_result)that);
      return false;
    }

    public boolean equals(createSpread_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createSpread_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createSpread_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createSpread_resultStandardSchemeFactory implements SchemeFactory {
      public createSpread_resultStandardScheme getScheme() {
        return new createSpread_resultStandardScheme();
      }
    }

    private static class createSpread_resultStandardScheme extends StandardScheme<createSpread_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createSpread_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.SpreadBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createSpread_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createSpread_resultTupleSchemeFactory implements SchemeFactory {
      public createSpread_resultTupleScheme getScheme() {
        return new createSpread_resultTupleScheme();
      }
    }

    private static class createSpread_resultTupleScheme extends TupleScheme<createSpread_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createSpread_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createSpread_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.SpreadBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class approveSpread_args implements org.apache.thrift.TBase<approveSpread_args, approveSpread_args._Fields>, java.io.Serializable, Cloneable, Comparable<approveSpread_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("approveSpread_args");

    private static final org.apache.thrift.protocol.TField SPREAD_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("spreadBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new approveSpread_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new approveSpread_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPREAD_BO((short)1, "spreadBo"),
      USER_BO((short)2, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPREAD_BO
            return SPREAD_BO;
          case 2: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPREAD_BO, new org.apache.thrift.meta_data.FieldMetaData("spreadBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.SpreadBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(approveSpread_args.class, metaDataMap);
    }

    public approveSpread_args() {
    }

    public approveSpread_args(
      com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.spreadBo = spreadBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public approveSpread_args(approveSpread_args other) {
      if (other.isSetSpreadBo()) {
        this.spreadBo = new com.ishangke.edunav.commoncontract.model.SpreadBo(other.spreadBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public approveSpread_args deepCopy() {
      return new approveSpread_args(this);
    }

    @Override
    public void clear() {
      this.spreadBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo getSpreadBo() {
      return this.spreadBo;
    }

    public approveSpread_args setSpreadBo(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo) {
      this.spreadBo = spreadBo;
      return this;
    }

    public void unsetSpreadBo() {
      this.spreadBo = null;
    }

    /** Returns true if field spreadBo is set (has been assigned a value) and false otherwise */
    public boolean isSetSpreadBo() {
      return this.spreadBo != null;
    }

    public void setSpreadBoIsSet(boolean value) {
      if (!value) {
        this.spreadBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public approveSpread_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPREAD_BO:
        if (value == null) {
          unsetSpreadBo();
        } else {
          setSpreadBo((com.ishangke.edunav.commoncontract.model.SpreadBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPREAD_BO:
        return getSpreadBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPREAD_BO:
        return isSetSpreadBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof approveSpread_args)
        return this.equals((approveSpread_args)that);
      return false;
    }

    public boolean equals(approveSpread_args that) {
      if (that == null)
        return false;

      boolean this_present_spreadBo = true && this.isSetSpreadBo();
      boolean that_present_spreadBo = true && that.isSetSpreadBo();
      if (this_present_spreadBo || that_present_spreadBo) {
        if (!(this_present_spreadBo && that_present_spreadBo))
          return false;
        if (!this.spreadBo.equals(that.spreadBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_spreadBo = true && (isSetSpreadBo());
      builder.append(present_spreadBo);
      if (present_spreadBo)
        builder.append(spreadBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(approveSpread_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpreadBo()).compareTo(other.isSetSpreadBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpreadBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spreadBo, other.spreadBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("approveSpread_args(");
      boolean first = true;

      sb.append("spreadBo:");
      if (this.spreadBo == null) {
        sb.append("null");
      } else {
        sb.append(this.spreadBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (spreadBo != null) {
        spreadBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class approveSpread_argsStandardSchemeFactory implements SchemeFactory {
      public approveSpread_argsStandardScheme getScheme() {
        return new approveSpread_argsStandardScheme();
      }
    }

    private static class approveSpread_argsStandardScheme extends StandardScheme<approveSpread_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, approveSpread_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPREAD_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.spreadBo = new com.ishangke.edunav.commoncontract.model.SpreadBo();
                struct.spreadBo.read(iprot);
                struct.setSpreadBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, approveSpread_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spreadBo != null) {
          oprot.writeFieldBegin(SPREAD_BO_FIELD_DESC);
          struct.spreadBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class approveSpread_argsTupleSchemeFactory implements SchemeFactory {
      public approveSpread_argsTupleScheme getScheme() {
        return new approveSpread_argsTupleScheme();
      }
    }

    private static class approveSpread_argsTupleScheme extends TupleScheme<approveSpread_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, approveSpread_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSpreadBo()) {
          optionals.set(0);
        }
        if (struct.isSetUserBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSpreadBo()) {
          struct.spreadBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, approveSpread_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.spreadBo = new com.ishangke.edunav.commoncontract.model.SpreadBo();
          struct.spreadBo.read(iprot);
          struct.setSpreadBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class approveSpread_result implements org.apache.thrift.TBase<approveSpread_result, approveSpread_result._Fields>, java.io.Serializable, Cloneable, Comparable<approveSpread_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("approveSpread_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new approveSpread_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new approveSpread_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.SpreadBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(approveSpread_result.class, metaDataMap);
    }

    public approveSpread_result() {
    }

    public approveSpread_result(
      com.ishangke.edunav.commoncontract.model.SpreadBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public approveSpread_result(approveSpread_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.SpreadBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public approveSpread_result deepCopy() {
      return new approveSpread_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo getSuccess() {
      return this.success;
    }

    public approveSpread_result setSuccess(com.ishangke.edunav.commoncontract.model.SpreadBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public approveSpread_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.SpreadBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof approveSpread_result)
        return this.equals((approveSpread_result)that);
      return false;
    }

    public boolean equals(approveSpread_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(approveSpread_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("approveSpread_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class approveSpread_resultStandardSchemeFactory implements SchemeFactory {
      public approveSpread_resultStandardScheme getScheme() {
        return new approveSpread_resultStandardScheme();
      }
    }

    private static class approveSpread_resultStandardScheme extends StandardScheme<approveSpread_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, approveSpread_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.SpreadBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, approveSpread_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class approveSpread_resultTupleSchemeFactory implements SchemeFactory {
      public approveSpread_resultTupleScheme getScheme() {
        return new approveSpread_resultTupleScheme();
      }
    }

    private static class approveSpread_resultTupleScheme extends TupleScheme<approveSpread_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, approveSpread_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, approveSpread_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.SpreadBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class rejectSpread_args implements org.apache.thrift.TBase<rejectSpread_args, rejectSpread_args._Fields>, java.io.Serializable, Cloneable, Comparable<rejectSpread_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rejectSpread_args");

    private static final org.apache.thrift.protocol.TField SPREAD_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("spreadBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rejectSpread_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rejectSpread_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPREAD_BO((short)1, "spreadBo"),
      USER_BO((short)2, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPREAD_BO
            return SPREAD_BO;
          case 2: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPREAD_BO, new org.apache.thrift.meta_data.FieldMetaData("spreadBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.SpreadBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rejectSpread_args.class, metaDataMap);
    }

    public rejectSpread_args() {
    }

    public rejectSpread_args(
      com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.spreadBo = spreadBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rejectSpread_args(rejectSpread_args other) {
      if (other.isSetSpreadBo()) {
        this.spreadBo = new com.ishangke.edunav.commoncontract.model.SpreadBo(other.spreadBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public rejectSpread_args deepCopy() {
      return new rejectSpread_args(this);
    }

    @Override
    public void clear() {
      this.spreadBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo getSpreadBo() {
      return this.spreadBo;
    }

    public rejectSpread_args setSpreadBo(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo) {
      this.spreadBo = spreadBo;
      return this;
    }

    public void unsetSpreadBo() {
      this.spreadBo = null;
    }

    /** Returns true if field spreadBo is set (has been assigned a value) and false otherwise */
    public boolean isSetSpreadBo() {
      return this.spreadBo != null;
    }

    public void setSpreadBoIsSet(boolean value) {
      if (!value) {
        this.spreadBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public rejectSpread_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPREAD_BO:
        if (value == null) {
          unsetSpreadBo();
        } else {
          setSpreadBo((com.ishangke.edunav.commoncontract.model.SpreadBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPREAD_BO:
        return getSpreadBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPREAD_BO:
        return isSetSpreadBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rejectSpread_args)
        return this.equals((rejectSpread_args)that);
      return false;
    }

    public boolean equals(rejectSpread_args that) {
      if (that == null)
        return false;

      boolean this_present_spreadBo = true && this.isSetSpreadBo();
      boolean that_present_spreadBo = true && that.isSetSpreadBo();
      if (this_present_spreadBo || that_present_spreadBo) {
        if (!(this_present_spreadBo && that_present_spreadBo))
          return false;
        if (!this.spreadBo.equals(that.spreadBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_spreadBo = true && (isSetSpreadBo());
      builder.append(present_spreadBo);
      if (present_spreadBo)
        builder.append(spreadBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(rejectSpread_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpreadBo()).compareTo(other.isSetSpreadBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpreadBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spreadBo, other.spreadBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rejectSpread_args(");
      boolean first = true;

      sb.append("spreadBo:");
      if (this.spreadBo == null) {
        sb.append("null");
      } else {
        sb.append(this.spreadBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (spreadBo != null) {
        spreadBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rejectSpread_argsStandardSchemeFactory implements SchemeFactory {
      public rejectSpread_argsStandardScheme getScheme() {
        return new rejectSpread_argsStandardScheme();
      }
    }

    private static class rejectSpread_argsStandardScheme extends StandardScheme<rejectSpread_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rejectSpread_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPREAD_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.spreadBo = new com.ishangke.edunav.commoncontract.model.SpreadBo();
                struct.spreadBo.read(iprot);
                struct.setSpreadBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rejectSpread_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spreadBo != null) {
          oprot.writeFieldBegin(SPREAD_BO_FIELD_DESC);
          struct.spreadBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rejectSpread_argsTupleSchemeFactory implements SchemeFactory {
      public rejectSpread_argsTupleScheme getScheme() {
        return new rejectSpread_argsTupleScheme();
      }
    }

    private static class rejectSpread_argsTupleScheme extends TupleScheme<rejectSpread_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rejectSpread_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSpreadBo()) {
          optionals.set(0);
        }
        if (struct.isSetUserBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSpreadBo()) {
          struct.spreadBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rejectSpread_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.spreadBo = new com.ishangke.edunav.commoncontract.model.SpreadBo();
          struct.spreadBo.read(iprot);
          struct.setSpreadBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class rejectSpread_result implements org.apache.thrift.TBase<rejectSpread_result, rejectSpread_result._Fields>, java.io.Serializable, Cloneable, Comparable<rejectSpread_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rejectSpread_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rejectSpread_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rejectSpread_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.SpreadBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rejectSpread_result.class, metaDataMap);
    }

    public rejectSpread_result() {
    }

    public rejectSpread_result(
      com.ishangke.edunav.commoncontract.model.SpreadBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rejectSpread_result(rejectSpread_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.SpreadBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public rejectSpread_result deepCopy() {
      return new rejectSpread_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo getSuccess() {
      return this.success;
    }

    public rejectSpread_result setSuccess(com.ishangke.edunav.commoncontract.model.SpreadBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public rejectSpread_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.SpreadBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rejectSpread_result)
        return this.equals((rejectSpread_result)that);
      return false;
    }

    public boolean equals(rejectSpread_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(rejectSpread_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rejectSpread_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rejectSpread_resultStandardSchemeFactory implements SchemeFactory {
      public rejectSpread_resultStandardScheme getScheme() {
        return new rejectSpread_resultStandardScheme();
      }
    }

    private static class rejectSpread_resultStandardScheme extends StandardScheme<rejectSpread_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rejectSpread_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.SpreadBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rejectSpread_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rejectSpread_resultTupleSchemeFactory implements SchemeFactory {
      public rejectSpread_resultTupleScheme getScheme() {
        return new rejectSpread_resultTupleScheme();
      }
    }

    private static class rejectSpread_resultTupleScheme extends TupleScheme<rejectSpread_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rejectSpread_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rejectSpread_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.SpreadBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class cancelSpread_args implements org.apache.thrift.TBase<cancelSpread_args, cancelSpread_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelSpread_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelSpread_args");

    private static final org.apache.thrift.protocol.TField SPREAD_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("spreadBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelSpread_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelSpread_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPREAD_BO((short)1, "spreadBo"),
      USER_BO((short)2, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPREAD_BO
            return SPREAD_BO;
          case 2: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPREAD_BO, new org.apache.thrift.meta_data.FieldMetaData("spreadBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.SpreadBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelSpread_args.class, metaDataMap);
    }

    public cancelSpread_args() {
    }

    public cancelSpread_args(
      com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.spreadBo = spreadBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelSpread_args(cancelSpread_args other) {
      if (other.isSetSpreadBo()) {
        this.spreadBo = new com.ishangke.edunav.commoncontract.model.SpreadBo(other.spreadBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public cancelSpread_args deepCopy() {
      return new cancelSpread_args(this);
    }

    @Override
    public void clear() {
      this.spreadBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo getSpreadBo() {
      return this.spreadBo;
    }

    public cancelSpread_args setSpreadBo(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo) {
      this.spreadBo = spreadBo;
      return this;
    }

    public void unsetSpreadBo() {
      this.spreadBo = null;
    }

    /** Returns true if field spreadBo is set (has been assigned a value) and false otherwise */
    public boolean isSetSpreadBo() {
      return this.spreadBo != null;
    }

    public void setSpreadBoIsSet(boolean value) {
      if (!value) {
        this.spreadBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public cancelSpread_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPREAD_BO:
        if (value == null) {
          unsetSpreadBo();
        } else {
          setSpreadBo((com.ishangke.edunav.commoncontract.model.SpreadBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPREAD_BO:
        return getSpreadBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPREAD_BO:
        return isSetSpreadBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelSpread_args)
        return this.equals((cancelSpread_args)that);
      return false;
    }

    public boolean equals(cancelSpread_args that) {
      if (that == null)
        return false;

      boolean this_present_spreadBo = true && this.isSetSpreadBo();
      boolean that_present_spreadBo = true && that.isSetSpreadBo();
      if (this_present_spreadBo || that_present_spreadBo) {
        if (!(this_present_spreadBo && that_present_spreadBo))
          return false;
        if (!this.spreadBo.equals(that.spreadBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_spreadBo = true && (isSetSpreadBo());
      builder.append(present_spreadBo);
      if (present_spreadBo)
        builder.append(spreadBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(cancelSpread_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpreadBo()).compareTo(other.isSetSpreadBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpreadBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spreadBo, other.spreadBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelSpread_args(");
      boolean first = true;

      sb.append("spreadBo:");
      if (this.spreadBo == null) {
        sb.append("null");
      } else {
        sb.append(this.spreadBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (spreadBo != null) {
        spreadBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelSpread_argsStandardSchemeFactory implements SchemeFactory {
      public cancelSpread_argsStandardScheme getScheme() {
        return new cancelSpread_argsStandardScheme();
      }
    }

    private static class cancelSpread_argsStandardScheme extends StandardScheme<cancelSpread_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelSpread_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPREAD_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.spreadBo = new com.ishangke.edunav.commoncontract.model.SpreadBo();
                struct.spreadBo.read(iprot);
                struct.setSpreadBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelSpread_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spreadBo != null) {
          oprot.writeFieldBegin(SPREAD_BO_FIELD_DESC);
          struct.spreadBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelSpread_argsTupleSchemeFactory implements SchemeFactory {
      public cancelSpread_argsTupleScheme getScheme() {
        return new cancelSpread_argsTupleScheme();
      }
    }

    private static class cancelSpread_argsTupleScheme extends TupleScheme<cancelSpread_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelSpread_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSpreadBo()) {
          optionals.set(0);
        }
        if (struct.isSetUserBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSpreadBo()) {
          struct.spreadBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelSpread_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.spreadBo = new com.ishangke.edunav.commoncontract.model.SpreadBo();
          struct.spreadBo.read(iprot);
          struct.setSpreadBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class cancelSpread_result implements org.apache.thrift.TBase<cancelSpread_result, cancelSpread_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelSpread_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelSpread_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelSpread_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelSpread_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.SpreadBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelSpread_result.class, metaDataMap);
    }

    public cancelSpread_result() {
    }

    public cancelSpread_result(
      com.ishangke.edunav.commoncontract.model.SpreadBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelSpread_result(cancelSpread_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.SpreadBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public cancelSpread_result deepCopy() {
      return new cancelSpread_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo getSuccess() {
      return this.success;
    }

    public cancelSpread_result setSuccess(com.ishangke.edunav.commoncontract.model.SpreadBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public cancelSpread_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.SpreadBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelSpread_result)
        return this.equals((cancelSpread_result)that);
      return false;
    }

    public boolean equals(cancelSpread_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(cancelSpread_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelSpread_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelSpread_resultStandardSchemeFactory implements SchemeFactory {
      public cancelSpread_resultStandardScheme getScheme() {
        return new cancelSpread_resultStandardScheme();
      }
    }

    private static class cancelSpread_resultStandardScheme extends StandardScheme<cancelSpread_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelSpread_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.SpreadBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelSpread_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelSpread_resultTupleSchemeFactory implements SchemeFactory {
      public cancelSpread_resultTupleScheme getScheme() {
        return new cancelSpread_resultTupleScheme();
      }
    }

    private static class cancelSpread_resultTupleScheme extends TupleScheme<cancelSpread_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelSpread_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelSpread_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.SpreadBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class deleteSpread_args implements org.apache.thrift.TBase<deleteSpread_args, deleteSpread_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSpread_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSpread_args");

    private static final org.apache.thrift.protocol.TField SPREAD_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("spreadBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSpread_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSpread_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPREAD_BO((short)1, "spreadBo"),
      USER_BO((short)2, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPREAD_BO
            return SPREAD_BO;
          case 2: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPREAD_BO, new org.apache.thrift.meta_data.FieldMetaData("spreadBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.SpreadBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSpread_args.class, metaDataMap);
    }

    public deleteSpread_args() {
    }

    public deleteSpread_args(
      com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.spreadBo = spreadBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSpread_args(deleteSpread_args other) {
      if (other.isSetSpreadBo()) {
        this.spreadBo = new com.ishangke.edunav.commoncontract.model.SpreadBo(other.spreadBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public deleteSpread_args deepCopy() {
      return new deleteSpread_args(this);
    }

    @Override
    public void clear() {
      this.spreadBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo getSpreadBo() {
      return this.spreadBo;
    }

    public deleteSpread_args setSpreadBo(com.ishangke.edunav.commoncontract.model.SpreadBo spreadBo) {
      this.spreadBo = spreadBo;
      return this;
    }

    public void unsetSpreadBo() {
      this.spreadBo = null;
    }

    /** Returns true if field spreadBo is set (has been assigned a value) and false otherwise */
    public boolean isSetSpreadBo() {
      return this.spreadBo != null;
    }

    public void setSpreadBoIsSet(boolean value) {
      if (!value) {
        this.spreadBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public deleteSpread_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPREAD_BO:
        if (value == null) {
          unsetSpreadBo();
        } else {
          setSpreadBo((com.ishangke.edunav.commoncontract.model.SpreadBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPREAD_BO:
        return getSpreadBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPREAD_BO:
        return isSetSpreadBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSpread_args)
        return this.equals((deleteSpread_args)that);
      return false;
    }

    public boolean equals(deleteSpread_args that) {
      if (that == null)
        return false;

      boolean this_present_spreadBo = true && this.isSetSpreadBo();
      boolean that_present_spreadBo = true && that.isSetSpreadBo();
      if (this_present_spreadBo || that_present_spreadBo) {
        if (!(this_present_spreadBo && that_present_spreadBo))
          return false;
        if (!this.spreadBo.equals(that.spreadBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_spreadBo = true && (isSetSpreadBo());
      builder.append(present_spreadBo);
      if (present_spreadBo)
        builder.append(spreadBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteSpread_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpreadBo()).compareTo(other.isSetSpreadBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpreadBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spreadBo, other.spreadBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSpread_args(");
      boolean first = true;

      sb.append("spreadBo:");
      if (this.spreadBo == null) {
        sb.append("null");
      } else {
        sb.append(this.spreadBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (spreadBo != null) {
        spreadBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSpread_argsStandardSchemeFactory implements SchemeFactory {
      public deleteSpread_argsStandardScheme getScheme() {
        return new deleteSpread_argsStandardScheme();
      }
    }

    private static class deleteSpread_argsStandardScheme extends StandardScheme<deleteSpread_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSpread_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPREAD_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.spreadBo = new com.ishangke.edunav.commoncontract.model.SpreadBo();
                struct.spreadBo.read(iprot);
                struct.setSpreadBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSpread_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spreadBo != null) {
          oprot.writeFieldBegin(SPREAD_BO_FIELD_DESC);
          struct.spreadBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSpread_argsTupleSchemeFactory implements SchemeFactory {
      public deleteSpread_argsTupleScheme getScheme() {
        return new deleteSpread_argsTupleScheme();
      }
    }

    private static class deleteSpread_argsTupleScheme extends TupleScheme<deleteSpread_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSpread_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSpreadBo()) {
          optionals.set(0);
        }
        if (struct.isSetUserBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSpreadBo()) {
          struct.spreadBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSpread_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.spreadBo = new com.ishangke.edunav.commoncontract.model.SpreadBo();
          struct.spreadBo.read(iprot);
          struct.setSpreadBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class deleteSpread_result implements org.apache.thrift.TBase<deleteSpread_result, deleteSpread_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSpread_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSpread_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSpread_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSpread_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.SpreadBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSpread_result.class, metaDataMap);
    }

    public deleteSpread_result() {
    }

    public deleteSpread_result(
      com.ishangke.edunav.commoncontract.model.SpreadBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSpread_result(deleteSpread_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.SpreadBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public deleteSpread_result deepCopy() {
      return new deleteSpread_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.SpreadBo getSuccess() {
      return this.success;
    }

    public deleteSpread_result setSuccess(com.ishangke.edunav.commoncontract.model.SpreadBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public deleteSpread_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.SpreadBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSpread_result)
        return this.equals((deleteSpread_result)that);
      return false;
    }

    public boolean equals(deleteSpread_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteSpread_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSpread_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSpread_resultStandardSchemeFactory implements SchemeFactory {
      public deleteSpread_resultStandardScheme getScheme() {
        return new deleteSpread_resultStandardScheme();
      }
    }

    private static class deleteSpread_resultStandardScheme extends StandardScheme<deleteSpread_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSpread_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.SpreadBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSpread_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSpread_resultTupleSchemeFactory implements SchemeFactory {
      public deleteSpread_resultTupleScheme getScheme() {
        return new deleteSpread_resultTupleScheme();
      }
    }

    private static class deleteSpread_resultTupleScheme extends TupleScheme<deleteSpread_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSpread_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSpread_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.SpreadBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

}
