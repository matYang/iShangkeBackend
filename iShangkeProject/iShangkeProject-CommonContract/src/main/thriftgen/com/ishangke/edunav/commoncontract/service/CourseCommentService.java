/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ishangke.edunav.commoncontract.service;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CourseCommentService {

  public interface Iface {

    /**
     * 创建课程评论。<br>
     * 用户可以创建课程评论
     * 
     * @param  courseCommentBo    需要创建的课程评论
     * @param  courseTemplateBo   评论相关的课程模板
     * @param  userBo             发起创建的用户信息
     * 
     * @return 创建完成的课程评论
     * 
     * 
     * @param courseCommentBo
     * @param courseTemplateBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.CourseCommentBo createCourseComment(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo, com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 删除课程评论。<br>
     * 用户可以删除课程评论
     * 
     * @param  courseCommentBo    需要删除的课程评论
     * @param  courseTemplateBo   评论相关的课程模板
     * @param  userBo             发起删除的用户信息
     * 
     * @return
     * 
     * 
     * @param courseCommentBo
     * @param courseTemplateBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.CourseCommentBo deleteCourseComment(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo, com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 查询课程评论。<br>
     * 用户可以查询课程评论
     * 
     * @param  courseCommentBo    需要查询的课程评论
     * @param  courseTemplateBo   评论相关的课程模板
     * @param  userBo             发起查询的用户信息
     * @param  paginationBo       分页信息
     * 
     * @return  CourseComment 列表
     * 
     * 
     * @param courseCommentBo
     * @param courseTemplateBo
     * @param userBo
     * @param paginationBo
     */
    public List<com.ishangke.edunav.commoncontract.model.CourseCommentBo> query(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo, com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createCourseComment(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo, com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteCourseComment(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo, com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void query(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo, com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.ishangke.edunav.commoncontract.model.CourseCommentBo createCourseComment(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo, com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_createCourseComment(courseCommentBo, courseTemplateBo, userBo);
      return recv_createCourseComment();
    }

    public void send_createCourseComment(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo, com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      createCourseComment_args args = new createCourseComment_args();
      args.setCourseCommentBo(courseCommentBo);
      args.setCourseTemplateBo(courseTemplateBo);
      args.setUserBo(userBo);
      sendBase("createCourseComment", args);
    }

    public com.ishangke.edunav.commoncontract.model.CourseCommentBo recv_createCourseComment() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      createCourseComment_result result = new createCourseComment_result();
      receiveBase(result, "createCourseComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createCourseComment failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.CourseCommentBo deleteCourseComment(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo, com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_deleteCourseComment(courseCommentBo, courseTemplateBo, userBo);
      return recv_deleteCourseComment();
    }

    public void send_deleteCourseComment(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo, com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      deleteCourseComment_args args = new deleteCourseComment_args();
      args.setCourseCommentBo(courseCommentBo);
      args.setCourseTemplateBo(courseTemplateBo);
      args.setUserBo(userBo);
      sendBase("deleteCourseComment", args);
    }

    public com.ishangke.edunav.commoncontract.model.CourseCommentBo recv_deleteCourseComment() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      deleteCourseComment_result result = new deleteCourseComment_result();
      receiveBase(result, "deleteCourseComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteCourseComment failed: unknown result");
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseCommentBo> query(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo, com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_query(courseCommentBo, courseTemplateBo, userBo, paginationBo);
      return recv_query();
    }

    public void send_query(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo, com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws org.apache.thrift.TException
    {
      query_args args = new query_args();
      args.setCourseCommentBo(courseCommentBo);
      args.setCourseTemplateBo(courseTemplateBo);
      args.setUserBo(userBo);
      args.setPaginationBo(paginationBo);
      sendBase("query", args);
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseCommentBo> recv_query() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      query_result result = new query_result();
      receiveBase(result, "query");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createCourseComment(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo, com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createCourseComment_call method_call = new createCourseComment_call(courseCommentBo, courseTemplateBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createCourseComment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo;
      private com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public createCourseComment_call(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo, com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseCommentBo = courseCommentBo;
        this.courseTemplateBo = courseTemplateBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createCourseComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createCourseComment_args args = new createCourseComment_args();
        args.setCourseCommentBo(courseCommentBo);
        args.setCourseTemplateBo(courseTemplateBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.CourseCommentBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createCourseComment();
      }
    }

    public void deleteCourseComment(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo, com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteCourseComment_call method_call = new deleteCourseComment_call(courseCommentBo, courseTemplateBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteCourseComment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo;
      private com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public deleteCourseComment_call(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo, com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseCommentBo = courseCommentBo;
        this.courseTemplateBo = courseTemplateBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteCourseComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteCourseComment_args args = new deleteCourseComment_args();
        args.setCourseCommentBo(courseCommentBo);
        args.setCourseTemplateBo(courseTemplateBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.CourseCommentBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteCourseComment();
      }
    }

    public void query(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo, com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_call method_call = new query_call(courseCommentBo, courseTemplateBo, userBo, paginationBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo;
      private com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      private com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo;
      public query_call(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo, com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseCommentBo = courseCommentBo;
        this.courseTemplateBo = courseTemplateBo;
        this.userBo = userBo;
        this.paginationBo = paginationBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_args args = new query_args();
        args.setCourseCommentBo(courseCommentBo);
        args.setCourseTemplateBo(courseTemplateBo);
        args.setUserBo(userBo);
        args.setPaginationBo(paginationBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.ishangke.edunav.commoncontract.model.CourseCommentBo> getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createCourseComment", new createCourseComment());
      processMap.put("deleteCourseComment", new deleteCourseComment());
      processMap.put("query", new query());
      return processMap;
    }

    public static class createCourseComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createCourseComment_args> {
      public createCourseComment() {
        super("createCourseComment");
      }

      public createCourseComment_args getEmptyArgsInstance() {
        return new createCourseComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createCourseComment_result getResult(I iface, createCourseComment_args args) throws org.apache.thrift.TException {
        createCourseComment_result result = new createCourseComment_result();
        try {
          result.success = iface.createCourseComment(args.courseCommentBo, args.courseTemplateBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class deleteCourseComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteCourseComment_args> {
      public deleteCourseComment() {
        super("deleteCourseComment");
      }

      public deleteCourseComment_args getEmptyArgsInstance() {
        return new deleteCourseComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteCourseComment_result getResult(I iface, deleteCourseComment_args args) throws org.apache.thrift.TException {
        deleteCourseComment_result result = new deleteCourseComment_result();
        try {
          result.success = iface.deleteCourseComment(args.courseCommentBo, args.courseTemplateBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class query<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_args> {
      public query() {
        super("query");
      }

      public query_args getEmptyArgsInstance() {
        return new query_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_result getResult(I iface, query_args args) throws org.apache.thrift.TException {
        query_result result = new query_result();
        try {
          result.success = iface.query(args.courseCommentBo, args.courseTemplateBo, args.userBo, args.paginationBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createCourseComment", new createCourseComment());
      processMap.put("deleteCourseComment", new deleteCourseComment());
      processMap.put("query", new query());
      return processMap;
    }

    public static class createCourseComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createCourseComment_args, com.ishangke.edunav.commoncontract.model.CourseCommentBo> {
      public createCourseComment() {
        super("createCourseComment");
      }

      public createCourseComment_args getEmptyArgsInstance() {
        return new createCourseComment_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseCommentBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseCommentBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.CourseCommentBo o) {
            createCourseComment_result result = new createCourseComment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createCourseComment_result result = new createCourseComment_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createCourseComment_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseCommentBo> resultHandler) throws TException {
        iface.createCourseComment(args.courseCommentBo, args.courseTemplateBo, args.userBo,resultHandler);
      }
    }

    public static class deleteCourseComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteCourseComment_args, com.ishangke.edunav.commoncontract.model.CourseCommentBo> {
      public deleteCourseComment() {
        super("deleteCourseComment");
      }

      public deleteCourseComment_args getEmptyArgsInstance() {
        return new deleteCourseComment_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseCommentBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseCommentBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.CourseCommentBo o) {
            deleteCourseComment_result result = new deleteCourseComment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteCourseComment_result result = new deleteCourseComment_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteCourseComment_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseCommentBo> resultHandler) throws TException {
        iface.deleteCourseComment(args.courseCommentBo, args.courseTemplateBo, args.userBo,resultHandler);
      }
    }

    public static class query<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_args, List<com.ishangke.edunav.commoncontract.model.CourseCommentBo>> {
      public query() {
        super("query");
      }

      public query_args getEmptyArgsInstance() {
        return new query_args();
      }

      public AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.CourseCommentBo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.CourseCommentBo>>() { 
          public void onComplete(List<com.ishangke.edunav.commoncontract.model.CourseCommentBo> o) {
            query_result result = new query_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            query_result result = new query_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, query_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.CourseCommentBo>> resultHandler) throws TException {
        iface.query(args.courseCommentBo, args.courseTemplateBo, args.userBo, args.paginationBo,resultHandler);
      }
    }

  }

  public static class createCourseComment_args implements org.apache.thrift.TBase<createCourseComment_args, createCourseComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<createCourseComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCourseComment_args");

    private static final org.apache.thrift.protocol.TField COURSE_COMMENT_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseCommentBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createCourseComment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createCourseComment_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo; // required
    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_COMMENT_BO((short)1, "courseCommentBo"),
      COURSE_TEMPLATE_BO((short)2, "courseTemplateBo"),
      USER_BO((short)3, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_COMMENT_BO
            return COURSE_COMMENT_BO;
          case 2: // COURSE_TEMPLATE_BO
            return COURSE_TEMPLATE_BO;
          case 3: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_COMMENT_BO, new org.apache.thrift.meta_data.FieldMetaData("courseCommentBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseCommentBo.class)));
      tmpMap.put(_Fields.COURSE_TEMPLATE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCourseComment_args.class, metaDataMap);
    }

    public createCourseComment_args() {
    }

    public createCourseComment_args(
      com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo,
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseCommentBo = courseCommentBo;
      this.courseTemplateBo = courseTemplateBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCourseComment_args(createCourseComment_args other) {
      if (other.isSetCourseCommentBo()) {
        this.courseCommentBo = new com.ishangke.edunav.commoncontract.model.CourseCommentBo(other.courseCommentBo);
      }
      if (other.isSetCourseTemplateBo()) {
        this.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.courseTemplateBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public createCourseComment_args deepCopy() {
      return new createCourseComment_args(this);
    }

    @Override
    public void clear() {
      this.courseCommentBo = null;
      this.courseTemplateBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseCommentBo getCourseCommentBo() {
      return this.courseCommentBo;
    }

    public createCourseComment_args setCourseCommentBo(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo) {
      this.courseCommentBo = courseCommentBo;
      return this;
    }

    public void unsetCourseCommentBo() {
      this.courseCommentBo = null;
    }

    /** Returns true if field courseCommentBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseCommentBo() {
      return this.courseCommentBo != null;
    }

    public void setCourseCommentBoIsSet(boolean value) {
      if (!value) {
        this.courseCommentBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getCourseTemplateBo() {
      return this.courseTemplateBo;
    }

    public createCourseComment_args setCourseTemplateBo(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo) {
      this.courseTemplateBo = courseTemplateBo;
      return this;
    }

    public void unsetCourseTemplateBo() {
      this.courseTemplateBo = null;
    }

    /** Returns true if field courseTemplateBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseTemplateBo() {
      return this.courseTemplateBo != null;
    }

    public void setCourseTemplateBoIsSet(boolean value) {
      if (!value) {
        this.courseTemplateBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public createCourseComment_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_COMMENT_BO:
        if (value == null) {
          unsetCourseCommentBo();
        } else {
          setCourseCommentBo((com.ishangke.edunav.commoncontract.model.CourseCommentBo)value);
        }
        break;

      case COURSE_TEMPLATE_BO:
        if (value == null) {
          unsetCourseTemplateBo();
        } else {
          setCourseTemplateBo((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_COMMENT_BO:
        return getCourseCommentBo();

      case COURSE_TEMPLATE_BO:
        return getCourseTemplateBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_COMMENT_BO:
        return isSetCourseCommentBo();
      case COURSE_TEMPLATE_BO:
        return isSetCourseTemplateBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createCourseComment_args)
        return this.equals((createCourseComment_args)that);
      return false;
    }

    public boolean equals(createCourseComment_args that) {
      if (that == null)
        return false;

      boolean this_present_courseCommentBo = true && this.isSetCourseCommentBo();
      boolean that_present_courseCommentBo = true && that.isSetCourseCommentBo();
      if (this_present_courseCommentBo || that_present_courseCommentBo) {
        if (!(this_present_courseCommentBo && that_present_courseCommentBo))
          return false;
        if (!this.courseCommentBo.equals(that.courseCommentBo))
          return false;
      }

      boolean this_present_courseTemplateBo = true && this.isSetCourseTemplateBo();
      boolean that_present_courseTemplateBo = true && that.isSetCourseTemplateBo();
      if (this_present_courseTemplateBo || that_present_courseTemplateBo) {
        if (!(this_present_courseTemplateBo && that_present_courseTemplateBo))
          return false;
        if (!this.courseTemplateBo.equals(that.courseTemplateBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseCommentBo = true && (isSetCourseCommentBo());
      builder.append(present_courseCommentBo);
      if (present_courseCommentBo)
        builder.append(courseCommentBo);

      boolean present_courseTemplateBo = true && (isSetCourseTemplateBo());
      builder.append(present_courseTemplateBo);
      if (present_courseTemplateBo)
        builder.append(courseTemplateBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createCourseComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseCommentBo()).compareTo(other.isSetCourseCommentBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseCommentBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseCommentBo, other.courseCommentBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCourseTemplateBo()).compareTo(other.isSetCourseTemplateBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseTemplateBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateBo, other.courseTemplateBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createCourseComment_args(");
      boolean first = true;

      sb.append("courseCommentBo:");
      if (this.courseCommentBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseCommentBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("courseTemplateBo:");
      if (this.courseTemplateBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseTemplateBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseCommentBo != null) {
        courseCommentBo.validate();
      }
      if (courseTemplateBo != null) {
        courseTemplateBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCourseComment_argsStandardSchemeFactory implements SchemeFactory {
      public createCourseComment_argsStandardScheme getScheme() {
        return new createCourseComment_argsStandardScheme();
      }
    }

    private static class createCourseComment_argsStandardScheme extends StandardScheme<createCourseComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCourseComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_COMMENT_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseCommentBo = new com.ishangke.edunav.commoncontract.model.CourseCommentBo();
                struct.courseCommentBo.read(iprot);
                struct.setCourseCommentBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COURSE_TEMPLATE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.courseTemplateBo.read(iprot);
                struct.setCourseTemplateBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCourseComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseCommentBo != null) {
          oprot.writeFieldBegin(COURSE_COMMENT_BO_FIELD_DESC);
          struct.courseCommentBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.courseTemplateBo != null) {
          oprot.writeFieldBegin(COURSE_TEMPLATE_BO_FIELD_DESC);
          struct.courseTemplateBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCourseComment_argsTupleSchemeFactory implements SchemeFactory {
      public createCourseComment_argsTupleScheme getScheme() {
        return new createCourseComment_argsTupleScheme();
      }
    }

    private static class createCourseComment_argsTupleScheme extends TupleScheme<createCourseComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCourseComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseCommentBo()) {
          optionals.set(0);
        }
        if (struct.isSetCourseTemplateBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCourseCommentBo()) {
          struct.courseCommentBo.write(oprot);
        }
        if (struct.isSetCourseTemplateBo()) {
          struct.courseTemplateBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCourseComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.courseCommentBo = new com.ishangke.edunav.commoncontract.model.CourseCommentBo();
          struct.courseCommentBo.read(iprot);
          struct.setCourseCommentBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.courseTemplateBo.read(iprot);
          struct.setCourseTemplateBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class createCourseComment_result implements org.apache.thrift.TBase<createCourseComment_result, createCourseComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<createCourseComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCourseComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createCourseComment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createCourseComment_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseCommentBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseCommentBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCourseComment_result.class, metaDataMap);
    }

    public createCourseComment_result() {
    }

    public createCourseComment_result(
      com.ishangke.edunav.commoncontract.model.CourseCommentBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCourseComment_result(createCourseComment_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.CourseCommentBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public createCourseComment_result deepCopy() {
      return new createCourseComment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseCommentBo getSuccess() {
      return this.success;
    }

    public createCourseComment_result setSuccess(com.ishangke.edunav.commoncontract.model.CourseCommentBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public createCourseComment_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.CourseCommentBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createCourseComment_result)
        return this.equals((createCourseComment_result)that);
      return false;
    }

    public boolean equals(createCourseComment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createCourseComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createCourseComment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCourseComment_resultStandardSchemeFactory implements SchemeFactory {
      public createCourseComment_resultStandardScheme getScheme() {
        return new createCourseComment_resultStandardScheme();
      }
    }

    private static class createCourseComment_resultStandardScheme extends StandardScheme<createCourseComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCourseComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.CourseCommentBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCourseComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCourseComment_resultTupleSchemeFactory implements SchemeFactory {
      public createCourseComment_resultTupleScheme getScheme() {
        return new createCourseComment_resultTupleScheme();
      }
    }

    private static class createCourseComment_resultTupleScheme extends TupleScheme<createCourseComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCourseComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCourseComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.CourseCommentBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class deleteCourseComment_args implements org.apache.thrift.TBase<deleteCourseComment_args, deleteCourseComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCourseComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCourseComment_args");

    private static final org.apache.thrift.protocol.TField COURSE_COMMENT_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseCommentBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteCourseComment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteCourseComment_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo; // required
    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_COMMENT_BO((short)1, "courseCommentBo"),
      COURSE_TEMPLATE_BO((short)2, "courseTemplateBo"),
      USER_BO((short)3, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_COMMENT_BO
            return COURSE_COMMENT_BO;
          case 2: // COURSE_TEMPLATE_BO
            return COURSE_TEMPLATE_BO;
          case 3: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_COMMENT_BO, new org.apache.thrift.meta_data.FieldMetaData("courseCommentBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseCommentBo.class)));
      tmpMap.put(_Fields.COURSE_TEMPLATE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCourseComment_args.class, metaDataMap);
    }

    public deleteCourseComment_args() {
    }

    public deleteCourseComment_args(
      com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo,
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseCommentBo = courseCommentBo;
      this.courseTemplateBo = courseTemplateBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCourseComment_args(deleteCourseComment_args other) {
      if (other.isSetCourseCommentBo()) {
        this.courseCommentBo = new com.ishangke.edunav.commoncontract.model.CourseCommentBo(other.courseCommentBo);
      }
      if (other.isSetCourseTemplateBo()) {
        this.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.courseTemplateBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public deleteCourseComment_args deepCopy() {
      return new deleteCourseComment_args(this);
    }

    @Override
    public void clear() {
      this.courseCommentBo = null;
      this.courseTemplateBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseCommentBo getCourseCommentBo() {
      return this.courseCommentBo;
    }

    public deleteCourseComment_args setCourseCommentBo(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo) {
      this.courseCommentBo = courseCommentBo;
      return this;
    }

    public void unsetCourseCommentBo() {
      this.courseCommentBo = null;
    }

    /** Returns true if field courseCommentBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseCommentBo() {
      return this.courseCommentBo != null;
    }

    public void setCourseCommentBoIsSet(boolean value) {
      if (!value) {
        this.courseCommentBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getCourseTemplateBo() {
      return this.courseTemplateBo;
    }

    public deleteCourseComment_args setCourseTemplateBo(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo) {
      this.courseTemplateBo = courseTemplateBo;
      return this;
    }

    public void unsetCourseTemplateBo() {
      this.courseTemplateBo = null;
    }

    /** Returns true if field courseTemplateBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseTemplateBo() {
      return this.courseTemplateBo != null;
    }

    public void setCourseTemplateBoIsSet(boolean value) {
      if (!value) {
        this.courseTemplateBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public deleteCourseComment_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_COMMENT_BO:
        if (value == null) {
          unsetCourseCommentBo();
        } else {
          setCourseCommentBo((com.ishangke.edunav.commoncontract.model.CourseCommentBo)value);
        }
        break;

      case COURSE_TEMPLATE_BO:
        if (value == null) {
          unsetCourseTemplateBo();
        } else {
          setCourseTemplateBo((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_COMMENT_BO:
        return getCourseCommentBo();

      case COURSE_TEMPLATE_BO:
        return getCourseTemplateBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_COMMENT_BO:
        return isSetCourseCommentBo();
      case COURSE_TEMPLATE_BO:
        return isSetCourseTemplateBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCourseComment_args)
        return this.equals((deleteCourseComment_args)that);
      return false;
    }

    public boolean equals(deleteCourseComment_args that) {
      if (that == null)
        return false;

      boolean this_present_courseCommentBo = true && this.isSetCourseCommentBo();
      boolean that_present_courseCommentBo = true && that.isSetCourseCommentBo();
      if (this_present_courseCommentBo || that_present_courseCommentBo) {
        if (!(this_present_courseCommentBo && that_present_courseCommentBo))
          return false;
        if (!this.courseCommentBo.equals(that.courseCommentBo))
          return false;
      }

      boolean this_present_courseTemplateBo = true && this.isSetCourseTemplateBo();
      boolean that_present_courseTemplateBo = true && that.isSetCourseTemplateBo();
      if (this_present_courseTemplateBo || that_present_courseTemplateBo) {
        if (!(this_present_courseTemplateBo && that_present_courseTemplateBo))
          return false;
        if (!this.courseTemplateBo.equals(that.courseTemplateBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseCommentBo = true && (isSetCourseCommentBo());
      builder.append(present_courseCommentBo);
      if (present_courseCommentBo)
        builder.append(courseCommentBo);

      boolean present_courseTemplateBo = true && (isSetCourseTemplateBo());
      builder.append(present_courseTemplateBo);
      if (present_courseTemplateBo)
        builder.append(courseTemplateBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteCourseComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseCommentBo()).compareTo(other.isSetCourseCommentBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseCommentBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseCommentBo, other.courseCommentBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCourseTemplateBo()).compareTo(other.isSetCourseTemplateBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseTemplateBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateBo, other.courseTemplateBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteCourseComment_args(");
      boolean first = true;

      sb.append("courseCommentBo:");
      if (this.courseCommentBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseCommentBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("courseTemplateBo:");
      if (this.courseTemplateBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseTemplateBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseCommentBo != null) {
        courseCommentBo.validate();
      }
      if (courseTemplateBo != null) {
        courseTemplateBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCourseComment_argsStandardSchemeFactory implements SchemeFactory {
      public deleteCourseComment_argsStandardScheme getScheme() {
        return new deleteCourseComment_argsStandardScheme();
      }
    }

    private static class deleteCourseComment_argsStandardScheme extends StandardScheme<deleteCourseComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCourseComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_COMMENT_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseCommentBo = new com.ishangke.edunav.commoncontract.model.CourseCommentBo();
                struct.courseCommentBo.read(iprot);
                struct.setCourseCommentBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COURSE_TEMPLATE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.courseTemplateBo.read(iprot);
                struct.setCourseTemplateBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCourseComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseCommentBo != null) {
          oprot.writeFieldBegin(COURSE_COMMENT_BO_FIELD_DESC);
          struct.courseCommentBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.courseTemplateBo != null) {
          oprot.writeFieldBegin(COURSE_TEMPLATE_BO_FIELD_DESC);
          struct.courseTemplateBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCourseComment_argsTupleSchemeFactory implements SchemeFactory {
      public deleteCourseComment_argsTupleScheme getScheme() {
        return new deleteCourseComment_argsTupleScheme();
      }
    }

    private static class deleteCourseComment_argsTupleScheme extends TupleScheme<deleteCourseComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCourseComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseCommentBo()) {
          optionals.set(0);
        }
        if (struct.isSetCourseTemplateBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCourseCommentBo()) {
          struct.courseCommentBo.write(oprot);
        }
        if (struct.isSetCourseTemplateBo()) {
          struct.courseTemplateBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCourseComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.courseCommentBo = new com.ishangke.edunav.commoncontract.model.CourseCommentBo();
          struct.courseCommentBo.read(iprot);
          struct.setCourseCommentBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.courseTemplateBo.read(iprot);
          struct.setCourseTemplateBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class deleteCourseComment_result implements org.apache.thrift.TBase<deleteCourseComment_result, deleteCourseComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCourseComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCourseComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteCourseComment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteCourseComment_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseCommentBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseCommentBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCourseComment_result.class, metaDataMap);
    }

    public deleteCourseComment_result() {
    }

    public deleteCourseComment_result(
      com.ishangke.edunav.commoncontract.model.CourseCommentBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCourseComment_result(deleteCourseComment_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.CourseCommentBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public deleteCourseComment_result deepCopy() {
      return new deleteCourseComment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseCommentBo getSuccess() {
      return this.success;
    }

    public deleteCourseComment_result setSuccess(com.ishangke.edunav.commoncontract.model.CourseCommentBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public deleteCourseComment_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.CourseCommentBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCourseComment_result)
        return this.equals((deleteCourseComment_result)that);
      return false;
    }

    public boolean equals(deleteCourseComment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteCourseComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteCourseComment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCourseComment_resultStandardSchemeFactory implements SchemeFactory {
      public deleteCourseComment_resultStandardScheme getScheme() {
        return new deleteCourseComment_resultStandardScheme();
      }
    }

    private static class deleteCourseComment_resultStandardScheme extends StandardScheme<deleteCourseComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCourseComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.CourseCommentBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCourseComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCourseComment_resultTupleSchemeFactory implements SchemeFactory {
      public deleteCourseComment_resultTupleScheme getScheme() {
        return new deleteCourseComment_resultTupleScheme();
      }
    }

    private static class deleteCourseComment_resultTupleScheme extends TupleScheme<deleteCourseComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCourseComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCourseComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.CourseCommentBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class query_args implements org.apache.thrift.TBase<query_args, query_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_args");

    private static final org.apache.thrift.protocol.TField COURSE_COMMENT_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseCommentBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField PAGINATION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("paginationBo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo; // required
    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required
    public com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_COMMENT_BO((short)1, "courseCommentBo"),
      COURSE_TEMPLATE_BO((short)2, "courseTemplateBo"),
      USER_BO((short)3, "userBo"),
      PAGINATION_BO((short)4, "paginationBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_COMMENT_BO
            return COURSE_COMMENT_BO;
          case 2: // COURSE_TEMPLATE_BO
            return COURSE_TEMPLATE_BO;
          case 3: // USER_BO
            return USER_BO;
          case 4: // PAGINATION_BO
            return PAGINATION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_COMMENT_BO, new org.apache.thrift.meta_data.FieldMetaData("courseCommentBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseCommentBo.class)));
      tmpMap.put(_Fields.COURSE_TEMPLATE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.PAGINATION_BO, new org.apache.thrift.meta_data.FieldMetaData("paginationBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PaginationBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_args.class, metaDataMap);
    }

    public query_args() {
    }

    public query_args(
      com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo,
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo,
      com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo)
    {
      this();
      this.courseCommentBo = courseCommentBo;
      this.courseTemplateBo = courseTemplateBo;
      this.userBo = userBo;
      this.paginationBo = paginationBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_args(query_args other) {
      if (other.isSetCourseCommentBo()) {
        this.courseCommentBo = new com.ishangke.edunav.commoncontract.model.CourseCommentBo(other.courseCommentBo);
      }
      if (other.isSetCourseTemplateBo()) {
        this.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.courseTemplateBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
      if (other.isSetPaginationBo()) {
        this.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo(other.paginationBo);
      }
    }

    public query_args deepCopy() {
      return new query_args(this);
    }

    @Override
    public void clear() {
      this.courseCommentBo = null;
      this.courseTemplateBo = null;
      this.userBo = null;
      this.paginationBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseCommentBo getCourseCommentBo() {
      return this.courseCommentBo;
    }

    public query_args setCourseCommentBo(com.ishangke.edunav.commoncontract.model.CourseCommentBo courseCommentBo) {
      this.courseCommentBo = courseCommentBo;
      return this;
    }

    public void unsetCourseCommentBo() {
      this.courseCommentBo = null;
    }

    /** Returns true if field courseCommentBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseCommentBo() {
      return this.courseCommentBo != null;
    }

    public void setCourseCommentBoIsSet(boolean value) {
      if (!value) {
        this.courseCommentBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getCourseTemplateBo() {
      return this.courseTemplateBo;
    }

    public query_args setCourseTemplateBo(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo) {
      this.courseTemplateBo = courseTemplateBo;
      return this;
    }

    public void unsetCourseTemplateBo() {
      this.courseTemplateBo = null;
    }

    /** Returns true if field courseTemplateBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseTemplateBo() {
      return this.courseTemplateBo != null;
    }

    public void setCourseTemplateBoIsSet(boolean value) {
      if (!value) {
        this.courseTemplateBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public query_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PaginationBo getPaginationBo() {
      return this.paginationBo;
    }

    public query_args setPaginationBo(com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) {
      this.paginationBo = paginationBo;
      return this;
    }

    public void unsetPaginationBo() {
      this.paginationBo = null;
    }

    /** Returns true if field paginationBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPaginationBo() {
      return this.paginationBo != null;
    }

    public void setPaginationBoIsSet(boolean value) {
      if (!value) {
        this.paginationBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_COMMENT_BO:
        if (value == null) {
          unsetCourseCommentBo();
        } else {
          setCourseCommentBo((com.ishangke.edunav.commoncontract.model.CourseCommentBo)value);
        }
        break;

      case COURSE_TEMPLATE_BO:
        if (value == null) {
          unsetCourseTemplateBo();
        } else {
          setCourseTemplateBo((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case PAGINATION_BO:
        if (value == null) {
          unsetPaginationBo();
        } else {
          setPaginationBo((com.ishangke.edunav.commoncontract.model.PaginationBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_COMMENT_BO:
        return getCourseCommentBo();

      case COURSE_TEMPLATE_BO:
        return getCourseTemplateBo();

      case USER_BO:
        return getUserBo();

      case PAGINATION_BO:
        return getPaginationBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_COMMENT_BO:
        return isSetCourseCommentBo();
      case COURSE_TEMPLATE_BO:
        return isSetCourseTemplateBo();
      case USER_BO:
        return isSetUserBo();
      case PAGINATION_BO:
        return isSetPaginationBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_args)
        return this.equals((query_args)that);
      return false;
    }

    public boolean equals(query_args that) {
      if (that == null)
        return false;

      boolean this_present_courseCommentBo = true && this.isSetCourseCommentBo();
      boolean that_present_courseCommentBo = true && that.isSetCourseCommentBo();
      if (this_present_courseCommentBo || that_present_courseCommentBo) {
        if (!(this_present_courseCommentBo && that_present_courseCommentBo))
          return false;
        if (!this.courseCommentBo.equals(that.courseCommentBo))
          return false;
      }

      boolean this_present_courseTemplateBo = true && this.isSetCourseTemplateBo();
      boolean that_present_courseTemplateBo = true && that.isSetCourseTemplateBo();
      if (this_present_courseTemplateBo || that_present_courseTemplateBo) {
        if (!(this_present_courseTemplateBo && that_present_courseTemplateBo))
          return false;
        if (!this.courseTemplateBo.equals(that.courseTemplateBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      boolean this_present_paginationBo = true && this.isSetPaginationBo();
      boolean that_present_paginationBo = true && that.isSetPaginationBo();
      if (this_present_paginationBo || that_present_paginationBo) {
        if (!(this_present_paginationBo && that_present_paginationBo))
          return false;
        if (!this.paginationBo.equals(that.paginationBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseCommentBo = true && (isSetCourseCommentBo());
      builder.append(present_courseCommentBo);
      if (present_courseCommentBo)
        builder.append(courseCommentBo);

      boolean present_courseTemplateBo = true && (isSetCourseTemplateBo());
      builder.append(present_courseTemplateBo);
      if (present_courseTemplateBo)
        builder.append(courseTemplateBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      boolean present_paginationBo = true && (isSetPaginationBo());
      builder.append(present_paginationBo);
      if (present_paginationBo)
        builder.append(paginationBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(query_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseCommentBo()).compareTo(other.isSetCourseCommentBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseCommentBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseCommentBo, other.courseCommentBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCourseTemplateBo()).compareTo(other.isSetCourseTemplateBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseTemplateBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateBo, other.courseTemplateBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPaginationBo()).compareTo(other.isSetPaginationBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaginationBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paginationBo, other.paginationBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_args(");
      boolean first = true;

      sb.append("courseCommentBo:");
      if (this.courseCommentBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseCommentBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("courseTemplateBo:");
      if (this.courseTemplateBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseTemplateBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paginationBo:");
      if (this.paginationBo == null) {
        sb.append("null");
      } else {
        sb.append(this.paginationBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseCommentBo != null) {
        courseCommentBo.validate();
      }
      if (courseTemplateBo != null) {
        courseTemplateBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
      if (paginationBo != null) {
        paginationBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_argsStandardSchemeFactory implements SchemeFactory {
      public query_argsStandardScheme getScheme() {
        return new query_argsStandardScheme();
      }
    }

    private static class query_argsStandardScheme extends StandardScheme<query_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_COMMENT_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseCommentBo = new com.ishangke.edunav.commoncontract.model.CourseCommentBo();
                struct.courseCommentBo.read(iprot);
                struct.setCourseCommentBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COURSE_TEMPLATE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.courseTemplateBo.read(iprot);
                struct.setCourseTemplateBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGINATION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo();
                struct.paginationBo.read(iprot);
                struct.setPaginationBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseCommentBo != null) {
          oprot.writeFieldBegin(COURSE_COMMENT_BO_FIELD_DESC);
          struct.courseCommentBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.courseTemplateBo != null) {
          oprot.writeFieldBegin(COURSE_TEMPLATE_BO_FIELD_DESC);
          struct.courseTemplateBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.paginationBo != null) {
          oprot.writeFieldBegin(PAGINATION_BO_FIELD_DESC);
          struct.paginationBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_argsTupleSchemeFactory implements SchemeFactory {
      public query_argsTupleScheme getScheme() {
        return new query_argsTupleScheme();
      }
    }

    private static class query_argsTupleScheme extends TupleScheme<query_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseCommentBo()) {
          optionals.set(0);
        }
        if (struct.isSetCourseTemplateBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        if (struct.isSetPaginationBo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCourseCommentBo()) {
          struct.courseCommentBo.write(oprot);
        }
        if (struct.isSetCourseTemplateBo()) {
          struct.courseTemplateBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
        if (struct.isSetPaginationBo()) {
          struct.paginationBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.courseCommentBo = new com.ishangke.edunav.commoncontract.model.CourseCommentBo();
          struct.courseCommentBo.read(iprot);
          struct.setCourseCommentBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.courseTemplateBo.read(iprot);
          struct.setCourseTemplateBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo();
          struct.paginationBo.read(iprot);
          struct.setPaginationBoIsSet(true);
        }
      }
    }

  }

  public static class query_result implements org.apache.thrift.TBase<query_result, query_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_resultTupleSchemeFactory());
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseCommentBo> success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseCommentBo.class))));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_result.class, metaDataMap);
    }

    public query_result() {
    }

    public query_result(
      List<com.ishangke.edunav.commoncontract.model.CourseCommentBo> success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_result(query_result other) {
      if (other.isSetSuccess()) {
        List<com.ishangke.edunav.commoncontract.model.CourseCommentBo> __this__success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseCommentBo>(other.success.size());
        for (com.ishangke.edunav.commoncontract.model.CourseCommentBo other_element : other.success) {
          __this__success.add(new com.ishangke.edunav.commoncontract.model.CourseCommentBo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public query_result deepCopy() {
      return new query_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.ishangke.edunav.commoncontract.model.CourseCommentBo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.ishangke.edunav.commoncontract.model.CourseCommentBo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseCommentBo>();
      }
      this.success.add(elem);
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseCommentBo> getSuccess() {
      return this.success;
    }

    public query_result setSuccess(List<com.ishangke.edunav.commoncontract.model.CourseCommentBo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public query_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.ishangke.edunav.commoncontract.model.CourseCommentBo>)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_result)
        return this.equals((query_result)that);
      return false;
    }

    public boolean equals(query_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(query_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_resultStandardSchemeFactory implements SchemeFactory {
      public query_resultStandardScheme getScheme() {
        return new query_resultStandardScheme();
      }
    }

    private static class query_resultStandardScheme extends StandardScheme<query_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseCommentBo>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    com.ishangke.edunav.commoncontract.model.CourseCommentBo _elem2;
                    _elem2 = new com.ishangke.edunav.commoncontract.model.CourseCommentBo();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.ishangke.edunav.commoncontract.model.CourseCommentBo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_resultTupleSchemeFactory implements SchemeFactory {
      public query_resultTupleScheme getScheme() {
        return new query_resultTupleScheme();
      }
    }

    private static class query_resultTupleScheme extends TupleScheme<query_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.ishangke.edunav.commoncontract.model.CourseCommentBo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseCommentBo>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              com.ishangke.edunav.commoncontract.model.CourseCommentBo _elem7;
              _elem7 = new com.ishangke.edunav.commoncontract.model.CourseCommentBo();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

}
