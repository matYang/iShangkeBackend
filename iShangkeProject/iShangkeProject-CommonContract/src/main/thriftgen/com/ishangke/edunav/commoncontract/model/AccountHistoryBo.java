/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ishangke.edunav.commoncontract.model;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AccountHistoryBo implements org.apache.thrift.TBase<AccountHistoryBo, AccountHistoryBo._Fields>, java.io.Serializable, Cloneable, Comparable<AccountHistoryBo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AccountHistoryBo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField WITHDRAW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("withdrawId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CHARGE_FIELD_DESC = new org.apache.thrift.protocol.TField("charge", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("idSet", org.apache.thrift.protocol.TType.SET, (short)8);
  private static final org.apache.thrift.protocol.TField USER_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdSet", org.apache.thrift.protocol.TType.SET, (short)9);
  private static final org.apache.thrift.protocol.TField WITHDRAW_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("withdrawIdSet", org.apache.thrift.protocol.TType.SET, (short)10);
  private static final org.apache.thrift.protocol.TField CHARGE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeStart", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField CHARGE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeEnd", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField TYPE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("typeSet", org.apache.thrift.protocol.TType.SET, (short)13);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_START_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimeStart", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_END_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimeEnd", org.apache.thrift.protocol.TType.I64, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AccountHistoryBoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AccountHistoryBoTupleSchemeFactory());
  }

  public int id; // required
  public int userId; // required
  public int withdrawId; // required
  public double charge; // required
  public int type; // required
  public long createTime; // required
  public String remark; // required
  public Set<Integer> idSet; // required
  public Set<Integer> userIdSet; // required
  public Set<Integer> withdrawIdSet; // required
  public double chargeStart; // required
  public double chargeEnd; // required
  public Set<Integer> typeSet; // required
  public long createTimeStart; // required
  public long createTimeEnd; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    USER_ID((short)2, "userId"),
    WITHDRAW_ID((short)3, "withdrawId"),
    CHARGE((short)4, "charge"),
    TYPE((short)5, "type"),
    CREATE_TIME((short)6, "createTime"),
    REMARK((short)7, "remark"),
    ID_SET((short)8, "idSet"),
    USER_ID_SET((short)9, "userIdSet"),
    WITHDRAW_ID_SET((short)10, "withdrawIdSet"),
    CHARGE_START((short)11, "chargeStart"),
    CHARGE_END((short)12, "chargeEnd"),
    TYPE_SET((short)13, "typeSet"),
    CREATE_TIME_START((short)14, "createTimeStart"),
    CREATE_TIME_END((short)15, "createTimeEnd");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // WITHDRAW_ID
          return WITHDRAW_ID;
        case 4: // CHARGE
          return CHARGE;
        case 5: // TYPE
          return TYPE;
        case 6: // CREATE_TIME
          return CREATE_TIME;
        case 7: // REMARK
          return REMARK;
        case 8: // ID_SET
          return ID_SET;
        case 9: // USER_ID_SET
          return USER_ID_SET;
        case 10: // WITHDRAW_ID_SET
          return WITHDRAW_ID_SET;
        case 11: // CHARGE_START
          return CHARGE_START;
        case 12: // CHARGE_END
          return CHARGE_END;
        case 13: // TYPE_SET
          return TYPE_SET;
        case 14: // CREATE_TIME_START
          return CREATE_TIME_START;
        case 15: // CREATE_TIME_END
          return CREATE_TIME_END;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __WITHDRAWID_ISSET_ID = 2;
  private static final int __CHARGE_ISSET_ID = 3;
  private static final int __TYPE_ISSET_ID = 4;
  private static final int __CREATETIME_ISSET_ID = 5;
  private static final int __CHARGESTART_ISSET_ID = 6;
  private static final int __CHARGEEND_ISSET_ID = 7;
  private static final int __CREATETIMESTART_ISSET_ID = 8;
  private static final int __CREATETIMEEND_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WITHDRAW_ID, new org.apache.thrift.meta_data.FieldMetaData("withdrawId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHARGE, new org.apache.thrift.meta_data.FieldMetaData("charge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID_SET, new org.apache.thrift.meta_data.FieldMetaData("idSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.USER_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("userIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.WITHDRAW_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("withdrawIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CHARGE_START, new org.apache.thrift.meta_data.FieldMetaData("chargeStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CHARGE_END, new org.apache.thrift.meta_data.FieldMetaData("chargeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TYPE_SET, new org.apache.thrift.meta_data.FieldMetaData("typeSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CREATE_TIME_START, new org.apache.thrift.meta_data.FieldMetaData("createTimeStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME_END, new org.apache.thrift.meta_data.FieldMetaData("createTimeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AccountHistoryBo.class, metaDataMap);
  }

  public AccountHistoryBo() {
  }

  public AccountHistoryBo(
    int id,
    int userId,
    int withdrawId,
    double charge,
    int type,
    long createTime,
    String remark,
    Set<Integer> idSet,
    Set<Integer> userIdSet,
    Set<Integer> withdrawIdSet,
    double chargeStart,
    double chargeEnd,
    Set<Integer> typeSet,
    long createTimeStart,
    long createTimeEnd)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.withdrawId = withdrawId;
    setWithdrawIdIsSet(true);
    this.charge = charge;
    setChargeIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.remark = remark;
    this.idSet = idSet;
    this.userIdSet = userIdSet;
    this.withdrawIdSet = withdrawIdSet;
    this.chargeStart = chargeStart;
    setChargeStartIsSet(true);
    this.chargeEnd = chargeEnd;
    setChargeEndIsSet(true);
    this.typeSet = typeSet;
    this.createTimeStart = createTimeStart;
    setCreateTimeStartIsSet(true);
    this.createTimeEnd = createTimeEnd;
    setCreateTimeEndIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AccountHistoryBo(AccountHistoryBo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.userId = other.userId;
    this.withdrawId = other.withdrawId;
    this.charge = other.charge;
    this.type = other.type;
    this.createTime = other.createTime;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetIdSet()) {
      Set<Integer> __this__idSet = new HashSet<Integer>(other.idSet);
      this.idSet = __this__idSet;
    }
    if (other.isSetUserIdSet()) {
      Set<Integer> __this__userIdSet = new HashSet<Integer>(other.userIdSet);
      this.userIdSet = __this__userIdSet;
    }
    if (other.isSetWithdrawIdSet()) {
      Set<Integer> __this__withdrawIdSet = new HashSet<Integer>(other.withdrawIdSet);
      this.withdrawIdSet = __this__withdrawIdSet;
    }
    this.chargeStart = other.chargeStart;
    this.chargeEnd = other.chargeEnd;
    if (other.isSetTypeSet()) {
      Set<Integer> __this__typeSet = new HashSet<Integer>(other.typeSet);
      this.typeSet = __this__typeSet;
    }
    this.createTimeStart = other.createTimeStart;
    this.createTimeEnd = other.createTimeEnd;
  }

  public AccountHistoryBo deepCopy() {
    return new AccountHistoryBo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setWithdrawIdIsSet(false);
    this.withdrawId = 0;
    setChargeIsSet(false);
    this.charge = 0.0;
    setTypeIsSet(false);
    this.type = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    this.remark = null;
    this.idSet = null;
    this.userIdSet = null;
    this.withdrawIdSet = null;
    setChargeStartIsSet(false);
    this.chargeStart = 0.0;
    setChargeEndIsSet(false);
    this.chargeEnd = 0.0;
    this.typeSet = null;
    setCreateTimeStartIsSet(false);
    this.createTimeStart = 0;
    setCreateTimeEndIsSet(false);
    this.createTimeEnd = 0;
  }

  public int getId() {
    return this.id;
  }

  public AccountHistoryBo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public AccountHistoryBo setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getWithdrawId() {
    return this.withdrawId;
  }

  public AccountHistoryBo setWithdrawId(int withdrawId) {
    this.withdrawId = withdrawId;
    setWithdrawIdIsSet(true);
    return this;
  }

  public void unsetWithdrawId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WITHDRAWID_ISSET_ID);
  }

  /** Returns true if field withdrawId is set (has been assigned a value) and false otherwise */
  public boolean isSetWithdrawId() {
    return EncodingUtils.testBit(__isset_bitfield, __WITHDRAWID_ISSET_ID);
  }

  public void setWithdrawIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WITHDRAWID_ISSET_ID, value);
  }

  public double getCharge() {
    return this.charge;
  }

  public AccountHistoryBo setCharge(double charge) {
    this.charge = charge;
    setChargeIsSet(true);
    return this;
  }

  public void unsetCharge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGE_ISSET_ID);
  }

  /** Returns true if field charge is set (has been assigned a value) and false otherwise */
  public boolean isSetCharge() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGE_ISSET_ID);
  }

  public void setChargeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGE_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public AccountHistoryBo setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public AccountHistoryBo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public AccountHistoryBo setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getIdSetSize() {
    return (this.idSet == null) ? 0 : this.idSet.size();
  }

  public java.util.Iterator<Integer> getIdSetIterator() {
    return (this.idSet == null) ? null : this.idSet.iterator();
  }

  public void addToIdSet(int elem) {
    if (this.idSet == null) {
      this.idSet = new HashSet<Integer>();
    }
    this.idSet.add(elem);
  }

  public Set<Integer> getIdSet() {
    return this.idSet;
  }

  public AccountHistoryBo setIdSet(Set<Integer> idSet) {
    this.idSet = idSet;
    return this;
  }

  public void unsetIdSet() {
    this.idSet = null;
  }

  /** Returns true if field idSet is set (has been assigned a value) and false otherwise */
  public boolean isSetIdSet() {
    return this.idSet != null;
  }

  public void setIdSetIsSet(boolean value) {
    if (!value) {
      this.idSet = null;
    }
  }

  public int getUserIdSetSize() {
    return (this.userIdSet == null) ? 0 : this.userIdSet.size();
  }

  public java.util.Iterator<Integer> getUserIdSetIterator() {
    return (this.userIdSet == null) ? null : this.userIdSet.iterator();
  }

  public void addToUserIdSet(int elem) {
    if (this.userIdSet == null) {
      this.userIdSet = new HashSet<Integer>();
    }
    this.userIdSet.add(elem);
  }

  public Set<Integer> getUserIdSet() {
    return this.userIdSet;
  }

  public AccountHistoryBo setUserIdSet(Set<Integer> userIdSet) {
    this.userIdSet = userIdSet;
    return this;
  }

  public void unsetUserIdSet() {
    this.userIdSet = null;
  }

  /** Returns true if field userIdSet is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIdSet() {
    return this.userIdSet != null;
  }

  public void setUserIdSetIsSet(boolean value) {
    if (!value) {
      this.userIdSet = null;
    }
  }

  public int getWithdrawIdSetSize() {
    return (this.withdrawIdSet == null) ? 0 : this.withdrawIdSet.size();
  }

  public java.util.Iterator<Integer> getWithdrawIdSetIterator() {
    return (this.withdrawIdSet == null) ? null : this.withdrawIdSet.iterator();
  }

  public void addToWithdrawIdSet(int elem) {
    if (this.withdrawIdSet == null) {
      this.withdrawIdSet = new HashSet<Integer>();
    }
    this.withdrawIdSet.add(elem);
  }

  public Set<Integer> getWithdrawIdSet() {
    return this.withdrawIdSet;
  }

  public AccountHistoryBo setWithdrawIdSet(Set<Integer> withdrawIdSet) {
    this.withdrawIdSet = withdrawIdSet;
    return this;
  }

  public void unsetWithdrawIdSet() {
    this.withdrawIdSet = null;
  }

  /** Returns true if field withdrawIdSet is set (has been assigned a value) and false otherwise */
  public boolean isSetWithdrawIdSet() {
    return this.withdrawIdSet != null;
  }

  public void setWithdrawIdSetIsSet(boolean value) {
    if (!value) {
      this.withdrawIdSet = null;
    }
  }

  public double getChargeStart() {
    return this.chargeStart;
  }

  public AccountHistoryBo setChargeStart(double chargeStart) {
    this.chargeStart = chargeStart;
    setChargeStartIsSet(true);
    return this;
  }

  public void unsetChargeStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGESTART_ISSET_ID);
  }

  /** Returns true if field chargeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeStart() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGESTART_ISSET_ID);
  }

  public void setChargeStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGESTART_ISSET_ID, value);
  }

  public double getChargeEnd() {
    return this.chargeEnd;
  }

  public AccountHistoryBo setChargeEnd(double chargeEnd) {
    this.chargeEnd = chargeEnd;
    setChargeEndIsSet(true);
    return this;
  }

  public void unsetChargeEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGEEND_ISSET_ID);
  }

  /** Returns true if field chargeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGEEND_ISSET_ID);
  }

  public void setChargeEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGEEND_ISSET_ID, value);
  }

  public int getTypeSetSize() {
    return (this.typeSet == null) ? 0 : this.typeSet.size();
  }

  public java.util.Iterator<Integer> getTypeSetIterator() {
    return (this.typeSet == null) ? null : this.typeSet.iterator();
  }

  public void addToTypeSet(int elem) {
    if (this.typeSet == null) {
      this.typeSet = new HashSet<Integer>();
    }
    this.typeSet.add(elem);
  }

  public Set<Integer> getTypeSet() {
    return this.typeSet;
  }

  public AccountHistoryBo setTypeSet(Set<Integer> typeSet) {
    this.typeSet = typeSet;
    return this;
  }

  public void unsetTypeSet() {
    this.typeSet = null;
  }

  /** Returns true if field typeSet is set (has been assigned a value) and false otherwise */
  public boolean isSetTypeSet() {
    return this.typeSet != null;
  }

  public void setTypeSetIsSet(boolean value) {
    if (!value) {
      this.typeSet = null;
    }
  }

  public long getCreateTimeStart() {
    return this.createTimeStart;
  }

  public AccountHistoryBo setCreateTimeStart(long createTimeStart) {
    this.createTimeStart = createTimeStart;
    setCreateTimeStartIsSet(true);
    return this;
  }

  public void unsetCreateTimeStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTART_ISSET_ID);
  }

  /** Returns true if field createTimeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimeStart() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTART_ISSET_ID);
  }

  public void setCreateTimeStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTART_ISSET_ID, value);
  }

  public long getCreateTimeEnd() {
    return this.createTimeEnd;
  }

  public AccountHistoryBo setCreateTimeEnd(long createTimeEnd) {
    this.createTimeEnd = createTimeEnd;
    setCreateTimeEndIsSet(true);
    return this;
  }

  public void unsetCreateTimeEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMEEND_ISSET_ID);
  }

  /** Returns true if field createTimeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimeEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMEEND_ISSET_ID);
  }

  public void setCreateTimeEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMEEND_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case WITHDRAW_ID:
      if (value == null) {
        unsetWithdrawId();
      } else {
        setWithdrawId((Integer)value);
      }
      break;

    case CHARGE:
      if (value == null) {
        unsetCharge();
      } else {
        setCharge((Double)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case ID_SET:
      if (value == null) {
        unsetIdSet();
      } else {
        setIdSet((Set<Integer>)value);
      }
      break;

    case USER_ID_SET:
      if (value == null) {
        unsetUserIdSet();
      } else {
        setUserIdSet((Set<Integer>)value);
      }
      break;

    case WITHDRAW_ID_SET:
      if (value == null) {
        unsetWithdrawIdSet();
      } else {
        setWithdrawIdSet((Set<Integer>)value);
      }
      break;

    case CHARGE_START:
      if (value == null) {
        unsetChargeStart();
      } else {
        setChargeStart((Double)value);
      }
      break;

    case CHARGE_END:
      if (value == null) {
        unsetChargeEnd();
      } else {
        setChargeEnd((Double)value);
      }
      break;

    case TYPE_SET:
      if (value == null) {
        unsetTypeSet();
      } else {
        setTypeSet((Set<Integer>)value);
      }
      break;

    case CREATE_TIME_START:
      if (value == null) {
        unsetCreateTimeStart();
      } else {
        setCreateTimeStart((Long)value);
      }
      break;

    case CREATE_TIME_END:
      if (value == null) {
        unsetCreateTimeEnd();
      } else {
        setCreateTimeEnd((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case WITHDRAW_ID:
      return Integer.valueOf(getWithdrawId());

    case CHARGE:
      return Double.valueOf(getCharge());

    case TYPE:
      return Integer.valueOf(getType());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case REMARK:
      return getRemark();

    case ID_SET:
      return getIdSet();

    case USER_ID_SET:
      return getUserIdSet();

    case WITHDRAW_ID_SET:
      return getWithdrawIdSet();

    case CHARGE_START:
      return Double.valueOf(getChargeStart());

    case CHARGE_END:
      return Double.valueOf(getChargeEnd());

    case TYPE_SET:
      return getTypeSet();

    case CREATE_TIME_START:
      return Long.valueOf(getCreateTimeStart());

    case CREATE_TIME_END:
      return Long.valueOf(getCreateTimeEnd());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USER_ID:
      return isSetUserId();
    case WITHDRAW_ID:
      return isSetWithdrawId();
    case CHARGE:
      return isSetCharge();
    case TYPE:
      return isSetType();
    case CREATE_TIME:
      return isSetCreateTime();
    case REMARK:
      return isSetRemark();
    case ID_SET:
      return isSetIdSet();
    case USER_ID_SET:
      return isSetUserIdSet();
    case WITHDRAW_ID_SET:
      return isSetWithdrawIdSet();
    case CHARGE_START:
      return isSetChargeStart();
    case CHARGE_END:
      return isSetChargeEnd();
    case TYPE_SET:
      return isSetTypeSet();
    case CREATE_TIME_START:
      return isSetCreateTimeStart();
    case CREATE_TIME_END:
      return isSetCreateTimeEnd();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AccountHistoryBo)
      return this.equals((AccountHistoryBo)that);
    return false;
  }

  public boolean equals(AccountHistoryBo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_withdrawId = true;
    boolean that_present_withdrawId = true;
    if (this_present_withdrawId || that_present_withdrawId) {
      if (!(this_present_withdrawId && that_present_withdrawId))
        return false;
      if (this.withdrawId != that.withdrawId)
        return false;
    }

    boolean this_present_charge = true;
    boolean that_present_charge = true;
    if (this_present_charge || that_present_charge) {
      if (!(this_present_charge && that_present_charge))
        return false;
      if (this.charge != that.charge)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_idSet = true && this.isSetIdSet();
    boolean that_present_idSet = true && that.isSetIdSet();
    if (this_present_idSet || that_present_idSet) {
      if (!(this_present_idSet && that_present_idSet))
        return false;
      if (!this.idSet.equals(that.idSet))
        return false;
    }

    boolean this_present_userIdSet = true && this.isSetUserIdSet();
    boolean that_present_userIdSet = true && that.isSetUserIdSet();
    if (this_present_userIdSet || that_present_userIdSet) {
      if (!(this_present_userIdSet && that_present_userIdSet))
        return false;
      if (!this.userIdSet.equals(that.userIdSet))
        return false;
    }

    boolean this_present_withdrawIdSet = true && this.isSetWithdrawIdSet();
    boolean that_present_withdrawIdSet = true && that.isSetWithdrawIdSet();
    if (this_present_withdrawIdSet || that_present_withdrawIdSet) {
      if (!(this_present_withdrawIdSet && that_present_withdrawIdSet))
        return false;
      if (!this.withdrawIdSet.equals(that.withdrawIdSet))
        return false;
    }

    boolean this_present_chargeStart = true;
    boolean that_present_chargeStart = true;
    if (this_present_chargeStart || that_present_chargeStart) {
      if (!(this_present_chargeStart && that_present_chargeStart))
        return false;
      if (this.chargeStart != that.chargeStart)
        return false;
    }

    boolean this_present_chargeEnd = true;
    boolean that_present_chargeEnd = true;
    if (this_present_chargeEnd || that_present_chargeEnd) {
      if (!(this_present_chargeEnd && that_present_chargeEnd))
        return false;
      if (this.chargeEnd != that.chargeEnd)
        return false;
    }

    boolean this_present_typeSet = true && this.isSetTypeSet();
    boolean that_present_typeSet = true && that.isSetTypeSet();
    if (this_present_typeSet || that_present_typeSet) {
      if (!(this_present_typeSet && that_present_typeSet))
        return false;
      if (!this.typeSet.equals(that.typeSet))
        return false;
    }

    boolean this_present_createTimeStart = true;
    boolean that_present_createTimeStart = true;
    if (this_present_createTimeStart || that_present_createTimeStart) {
      if (!(this_present_createTimeStart && that_present_createTimeStart))
        return false;
      if (this.createTimeStart != that.createTimeStart)
        return false;
    }

    boolean this_present_createTimeEnd = true;
    boolean that_present_createTimeEnd = true;
    if (this_present_createTimeEnd || that_present_createTimeEnd) {
      if (!(this_present_createTimeEnd && that_present_createTimeEnd))
        return false;
      if (this.createTimeEnd != that.createTimeEnd)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_userId = true;
    builder.append(present_userId);
    if (present_userId)
      builder.append(userId);

    boolean present_withdrawId = true;
    builder.append(present_withdrawId);
    if (present_withdrawId)
      builder.append(withdrawId);

    boolean present_charge = true;
    builder.append(present_charge);
    if (present_charge)
      builder.append(charge);

    boolean present_type = true;
    builder.append(present_type);
    if (present_type)
      builder.append(type);

    boolean present_createTime = true;
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);

    boolean present_remark = true && (isSetRemark());
    builder.append(present_remark);
    if (present_remark)
      builder.append(remark);

    boolean present_idSet = true && (isSetIdSet());
    builder.append(present_idSet);
    if (present_idSet)
      builder.append(idSet);

    boolean present_userIdSet = true && (isSetUserIdSet());
    builder.append(present_userIdSet);
    if (present_userIdSet)
      builder.append(userIdSet);

    boolean present_withdrawIdSet = true && (isSetWithdrawIdSet());
    builder.append(present_withdrawIdSet);
    if (present_withdrawIdSet)
      builder.append(withdrawIdSet);

    boolean present_chargeStart = true;
    builder.append(present_chargeStart);
    if (present_chargeStart)
      builder.append(chargeStart);

    boolean present_chargeEnd = true;
    builder.append(present_chargeEnd);
    if (present_chargeEnd)
      builder.append(chargeEnd);

    boolean present_typeSet = true && (isSetTypeSet());
    builder.append(present_typeSet);
    if (present_typeSet)
      builder.append(typeSet);

    boolean present_createTimeStart = true;
    builder.append(present_createTimeStart);
    if (present_createTimeStart)
      builder.append(createTimeStart);

    boolean present_createTimeEnd = true;
    builder.append(present_createTimeEnd);
    if (present_createTimeEnd)
      builder.append(createTimeEnd);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(AccountHistoryBo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithdrawId()).compareTo(other.isSetWithdrawId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithdrawId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdrawId, other.withdrawId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharge()).compareTo(other.isSetCharge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charge, other.charge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdSet()).compareTo(other.isSetIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idSet, other.idSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIdSet()).compareTo(other.isSetUserIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdSet, other.userIdSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithdrawIdSet()).compareTo(other.isSetWithdrawIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithdrawIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdrawIdSet, other.withdrawIdSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeStart()).compareTo(other.isSetChargeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeStart, other.chargeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeEnd()).compareTo(other.isSetChargeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeEnd, other.chargeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTypeSet()).compareTo(other.isSetTypeSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypeSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeSet, other.typeSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimeStart()).compareTo(other.isSetCreateTimeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimeStart, other.createTimeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimeEnd()).compareTo(other.isSetCreateTimeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimeEnd, other.createTimeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AccountHistoryBo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("withdrawId:");
    sb.append(this.withdrawId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("charge:");
    sb.append(this.charge);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idSet:");
    if (this.idSet == null) {
      sb.append("null");
    } else {
      sb.append(this.idSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIdSet:");
    if (this.userIdSet == null) {
      sb.append("null");
    } else {
      sb.append(this.userIdSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("withdrawIdSet:");
    if (this.withdrawIdSet == null) {
      sb.append("null");
    } else {
      sb.append(this.withdrawIdSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chargeStart:");
    sb.append(this.chargeStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chargeEnd:");
    sb.append(this.chargeEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("typeSet:");
    if (this.typeSet == null) {
      sb.append("null");
    } else {
      sb.append(this.typeSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTimeStart:");
    sb.append(this.createTimeStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTimeEnd:");
    sb.append(this.createTimeEnd);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AccountHistoryBoStandardSchemeFactory implements SchemeFactory {
    public AccountHistoryBoStandardScheme getScheme() {
      return new AccountHistoryBoStandardScheme();
    }
  }

  private static class AccountHistoryBoStandardScheme extends StandardScheme<AccountHistoryBo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AccountHistoryBo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WITHDRAW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.withdrawId = iprot.readI32();
              struct.setWithdrawIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHARGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.charge = iprot.readDouble();
              struct.setChargeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.idSet = new HashSet<Integer>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  int _elem2;
                  _elem2 = iprot.readI32();
                  struct.idSet.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USER_ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.userIdSet = new HashSet<Integer>(2*_set3.size);
                for (int _i4 = 0; _i4 < _set3.size; ++_i4)
                {
                  int _elem5;
                  _elem5 = iprot.readI32();
                  struct.userIdSet.add(_elem5);
                }
                iprot.readSetEnd();
              }
              struct.setUserIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // WITHDRAW_ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set6 = iprot.readSetBegin();
                struct.withdrawIdSet = new HashSet<Integer>(2*_set6.size);
                for (int _i7 = 0; _i7 < _set6.size; ++_i7)
                {
                  int _elem8;
                  _elem8 = iprot.readI32();
                  struct.withdrawIdSet.add(_elem8);
                }
                iprot.readSetEnd();
              }
              struct.setWithdrawIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CHARGE_START
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.chargeStart = iprot.readDouble();
              struct.setChargeStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CHARGE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.chargeEnd = iprot.readDouble();
              struct.setChargeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TYPE_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set9 = iprot.readSetBegin();
                struct.typeSet = new HashSet<Integer>(2*_set9.size);
                for (int _i10 = 0; _i10 < _set9.size; ++_i10)
                {
                  int _elem11;
                  _elem11 = iprot.readI32();
                  struct.typeSet.add(_elem11);
                }
                iprot.readSetEnd();
              }
              struct.setTypeSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREATE_TIME_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimeStart = iprot.readI64();
              struct.setCreateTimeStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREATE_TIME_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimeEnd = iprot.readI64();
              struct.setCreateTimeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AccountHistoryBo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITHDRAW_ID_FIELD_DESC);
      oprot.writeI32(struct.withdrawId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHARGE_FIELD_DESC);
      oprot.writeDouble(struct.charge);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.idSet != null) {
        oprot.writeFieldBegin(ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.idSet.size()));
          for (int _iter12 : struct.idSet)
          {
            oprot.writeI32(_iter12);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.userIdSet != null) {
        oprot.writeFieldBegin(USER_ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.userIdSet.size()));
          for (int _iter13 : struct.userIdSet)
          {
            oprot.writeI32(_iter13);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.withdrawIdSet != null) {
        oprot.writeFieldBegin(WITHDRAW_ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.withdrawIdSet.size()));
          for (int _iter14 : struct.withdrawIdSet)
          {
            oprot.writeI32(_iter14);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHARGE_START_FIELD_DESC);
      oprot.writeDouble(struct.chargeStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHARGE_END_FIELD_DESC);
      oprot.writeDouble(struct.chargeEnd);
      oprot.writeFieldEnd();
      if (struct.typeSet != null) {
        oprot.writeFieldBegin(TYPE_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.typeSet.size()));
          for (int _iter15 : struct.typeSet)
          {
            oprot.writeI32(_iter15);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_START_FIELD_DESC);
      oprot.writeI64(struct.createTimeStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_END_FIELD_DESC);
      oprot.writeI64(struct.createTimeEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AccountHistoryBoTupleSchemeFactory implements SchemeFactory {
    public AccountHistoryBoTupleScheme getScheme() {
      return new AccountHistoryBoTupleScheme();
    }
  }

  private static class AccountHistoryBoTupleScheme extends TupleScheme<AccountHistoryBo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AccountHistoryBo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetWithdrawId()) {
        optionals.set(2);
      }
      if (struct.isSetCharge()) {
        optionals.set(3);
      }
      if (struct.isSetType()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(5);
      }
      if (struct.isSetRemark()) {
        optionals.set(6);
      }
      if (struct.isSetIdSet()) {
        optionals.set(7);
      }
      if (struct.isSetUserIdSet()) {
        optionals.set(8);
      }
      if (struct.isSetWithdrawIdSet()) {
        optionals.set(9);
      }
      if (struct.isSetChargeStart()) {
        optionals.set(10);
      }
      if (struct.isSetChargeEnd()) {
        optionals.set(11);
      }
      if (struct.isSetTypeSet()) {
        optionals.set(12);
      }
      if (struct.isSetCreateTimeStart()) {
        optionals.set(13);
      }
      if (struct.isSetCreateTimeEnd()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetWithdrawId()) {
        oprot.writeI32(struct.withdrawId);
      }
      if (struct.isSetCharge()) {
        oprot.writeDouble(struct.charge);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetIdSet()) {
        {
          oprot.writeI32(struct.idSet.size());
          for (int _iter16 : struct.idSet)
          {
            oprot.writeI32(_iter16);
          }
        }
      }
      if (struct.isSetUserIdSet()) {
        {
          oprot.writeI32(struct.userIdSet.size());
          for (int _iter17 : struct.userIdSet)
          {
            oprot.writeI32(_iter17);
          }
        }
      }
      if (struct.isSetWithdrawIdSet()) {
        {
          oprot.writeI32(struct.withdrawIdSet.size());
          for (int _iter18 : struct.withdrawIdSet)
          {
            oprot.writeI32(_iter18);
          }
        }
      }
      if (struct.isSetChargeStart()) {
        oprot.writeDouble(struct.chargeStart);
      }
      if (struct.isSetChargeEnd()) {
        oprot.writeDouble(struct.chargeEnd);
      }
      if (struct.isSetTypeSet()) {
        {
          oprot.writeI32(struct.typeSet.size());
          for (int _iter19 : struct.typeSet)
          {
            oprot.writeI32(_iter19);
          }
        }
      }
      if (struct.isSetCreateTimeStart()) {
        oprot.writeI64(struct.createTimeStart);
      }
      if (struct.isSetCreateTimeEnd()) {
        oprot.writeI64(struct.createTimeEnd);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AccountHistoryBo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.withdrawId = iprot.readI32();
        struct.setWithdrawIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.charge = iprot.readDouble();
        struct.setChargeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TSet _set20 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.idSet = new HashSet<Integer>(2*_set20.size);
          for (int _i21 = 0; _i21 < _set20.size; ++_i21)
          {
            int _elem22;
            _elem22 = iprot.readI32();
            struct.idSet.add(_elem22);
          }
        }
        struct.setIdSetIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TSet _set23 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIdSet = new HashSet<Integer>(2*_set23.size);
          for (int _i24 = 0; _i24 < _set23.size; ++_i24)
          {
            int _elem25;
            _elem25 = iprot.readI32();
            struct.userIdSet.add(_elem25);
          }
        }
        struct.setUserIdSetIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TSet _set26 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.withdrawIdSet = new HashSet<Integer>(2*_set26.size);
          for (int _i27 = 0; _i27 < _set26.size; ++_i27)
          {
            int _elem28;
            _elem28 = iprot.readI32();
            struct.withdrawIdSet.add(_elem28);
          }
        }
        struct.setWithdrawIdSetIsSet(true);
      }
      if (incoming.get(10)) {
        struct.chargeStart = iprot.readDouble();
        struct.setChargeStartIsSet(true);
      }
      if (incoming.get(11)) {
        struct.chargeEnd = iprot.readDouble();
        struct.setChargeEndIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TSet _set29 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.typeSet = new HashSet<Integer>(2*_set29.size);
          for (int _i30 = 0; _i30 < _set29.size; ++_i30)
          {
            int _elem31;
            _elem31 = iprot.readI32();
            struct.typeSet.add(_elem31);
          }
        }
        struct.setTypeSetIsSet(true);
      }
      if (incoming.get(13)) {
        struct.createTimeStart = iprot.readI64();
        struct.setCreateTimeStartIsSet(true);
      }
      if (incoming.get(14)) {
        struct.createTimeEnd = iprot.readI64();
        struct.setCreateTimeEndIsSet(true);
      }
    }
  }

}

