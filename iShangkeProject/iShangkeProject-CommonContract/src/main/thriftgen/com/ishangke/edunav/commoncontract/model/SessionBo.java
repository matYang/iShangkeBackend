/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ishangke.edunav.commoncontract.model;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * SessionBo
 *  note different users have diferent account identifiers, eg, user logs in with phone, admin may login with reference
 */
public class SessionBo implements org.apache.thrift.TBase<SessionBo, SessionBo._Fields>, java.io.Serializable, Cloneable, Comparable<SessionBo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SessionBo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACCOUNT_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("accountIdentifier", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AUTH_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("authCode", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SessionBoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SessionBoTupleSchemeFactory());
  }

  public int id; // required
  public String accountIdentifier; // required
  public String authCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ACCOUNT_IDENTIFIER((short)2, "accountIdentifier"),
    AUTH_CODE((short)3, "authCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ACCOUNT_IDENTIFIER
          return ACCOUNT_IDENTIFIER;
        case 3: // AUTH_CODE
          return AUTH_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCOUNT_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("accountIdentifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTH_CODE, new org.apache.thrift.meta_data.FieldMetaData("authCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SessionBo.class, metaDataMap);
  }

  public SessionBo() {
  }

  public SessionBo(
    int id,
    String accountIdentifier,
    String authCode)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.accountIdentifier = accountIdentifier;
    this.authCode = authCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SessionBo(SessionBo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetAccountIdentifier()) {
      this.accountIdentifier = other.accountIdentifier;
    }
    if (other.isSetAuthCode()) {
      this.authCode = other.authCode;
    }
  }

  public SessionBo deepCopy() {
    return new SessionBo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.accountIdentifier = null;
    this.authCode = null;
  }

  public int getId() {
    return this.id;
  }

  public SessionBo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getAccountIdentifier() {
    return this.accountIdentifier;
  }

  public SessionBo setAccountIdentifier(String accountIdentifier) {
    this.accountIdentifier = accountIdentifier;
    return this;
  }

  public void unsetAccountIdentifier() {
    this.accountIdentifier = null;
  }

  /** Returns true if field accountIdentifier is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountIdentifier() {
    return this.accountIdentifier != null;
  }

  public void setAccountIdentifierIsSet(boolean value) {
    if (!value) {
      this.accountIdentifier = null;
    }
  }

  public String getAuthCode() {
    return this.authCode;
  }

  public SessionBo setAuthCode(String authCode) {
    this.authCode = authCode;
    return this;
  }

  public void unsetAuthCode() {
    this.authCode = null;
  }

  /** Returns true if field authCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthCode() {
    return this.authCode != null;
  }

  public void setAuthCodeIsSet(boolean value) {
    if (!value) {
      this.authCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case ACCOUNT_IDENTIFIER:
      if (value == null) {
        unsetAccountIdentifier();
      } else {
        setAccountIdentifier((String)value);
      }
      break;

    case AUTH_CODE:
      if (value == null) {
        unsetAuthCode();
      } else {
        setAuthCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case ACCOUNT_IDENTIFIER:
      return getAccountIdentifier();

    case AUTH_CODE:
      return getAuthCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ACCOUNT_IDENTIFIER:
      return isSetAccountIdentifier();
    case AUTH_CODE:
      return isSetAuthCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SessionBo)
      return this.equals((SessionBo)that);
    return false;
  }

  public boolean equals(SessionBo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_accountIdentifier = true && this.isSetAccountIdentifier();
    boolean that_present_accountIdentifier = true && that.isSetAccountIdentifier();
    if (this_present_accountIdentifier || that_present_accountIdentifier) {
      if (!(this_present_accountIdentifier && that_present_accountIdentifier))
        return false;
      if (!this.accountIdentifier.equals(that.accountIdentifier))
        return false;
    }

    boolean this_present_authCode = true && this.isSetAuthCode();
    boolean that_present_authCode = true && that.isSetAuthCode();
    if (this_present_authCode || that_present_authCode) {
      if (!(this_present_authCode && that_present_authCode))
        return false;
      if (!this.authCode.equals(that.authCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_accountIdentifier = true && (isSetAccountIdentifier());
    builder.append(present_accountIdentifier);
    if (present_accountIdentifier)
      builder.append(accountIdentifier);

    boolean present_authCode = true && (isSetAuthCode());
    builder.append(present_authCode);
    if (present_authCode)
      builder.append(authCode);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(SessionBo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountIdentifier()).compareTo(other.isSetAccountIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountIdentifier, other.accountIdentifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthCode()).compareTo(other.isSetAuthCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authCode, other.authCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SessionBo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountIdentifier:");
    if (this.accountIdentifier == null) {
      sb.append("null");
    } else {
      sb.append(this.accountIdentifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authCode:");
    if (this.authCode == null) {
      sb.append("null");
    } else {
      sb.append(this.authCode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SessionBoStandardSchemeFactory implements SchemeFactory {
    public SessionBoStandardScheme getScheme() {
      return new SessionBoStandardScheme();
    }
  }

  private static class SessionBoStandardScheme extends StandardScheme<SessionBo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SessionBo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCOUNT_IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountIdentifier = iprot.readString();
              struct.setAccountIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUTH_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authCode = iprot.readString();
              struct.setAuthCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SessionBo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.accountIdentifier != null) {
        oprot.writeFieldBegin(ACCOUNT_IDENTIFIER_FIELD_DESC);
        oprot.writeString(struct.accountIdentifier);
        oprot.writeFieldEnd();
      }
      if (struct.authCode != null) {
        oprot.writeFieldBegin(AUTH_CODE_FIELD_DESC);
        oprot.writeString(struct.authCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SessionBoTupleSchemeFactory implements SchemeFactory {
    public SessionBoTupleScheme getScheme() {
      return new SessionBoTupleScheme();
    }
  }

  private static class SessionBoTupleScheme extends TupleScheme<SessionBo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SessionBo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetAccountIdentifier()) {
        optionals.set(1);
      }
      if (struct.isSetAuthCode()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetAccountIdentifier()) {
        oprot.writeString(struct.accountIdentifier);
      }
      if (struct.isSetAuthCode()) {
        oprot.writeString(struct.authCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SessionBo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.accountIdentifier = iprot.readString();
        struct.setAccountIdentifierIsSet(true);
      }
      if (incoming.get(2)) {
        struct.authCode = iprot.readString();
        struct.setAuthCodeIsSet(true);
      }
    }
  }

}

