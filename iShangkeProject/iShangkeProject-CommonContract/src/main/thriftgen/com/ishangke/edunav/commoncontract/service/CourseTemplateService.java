/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ishangke.edunav.commoncontract.service;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CourseTemplateService {

  public interface Iface {

    /**
     * 本方法为创建新课程模版<br>
     * 合作商管理员可以通过此方法创建新课程模版
     * 
     * @param  courseTemplateBo    需要被创建的课程模版信息
     * @param  partnerBo           合作商信息
     * @param  UserBo              调用方法的用户的信息
     * 
     * @return 课程模版实体 CourseTemplateBo
     * 
     * 
     * @param courseTemplateBo
     * @param partnerBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo createCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为提交课程模版<br>
     * 合作商管理员可以通过此方法提交课程模版
     * 
     * @param  courseTemplateBo    需要被创建的课程模版信息
     * @param  partnerBo           合作商信息
     * @param  UserBo              调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param courseTemplateBo
     * @param partnerBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo submitCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为审核通过课程模版<br>
     * ishangke管理员可以通过此方法审核通过课程模版
     * 
     * @param  courseTemplateBo          需要被审核的课程模版信息
     * @param  partnerBo                 合作商信息
     * @param  commentTemplateApproveBo  审核通过课程模版评论信息
     * @param  userBo                    调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param courseTemplateBo
     * @param partnerBo
     * @param commentCourseTemplateApproveBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo approveCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CommentCourseTemplateApproveBo commentCourseTemplateApproveBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为审核不通过课程模版<br>
     * ishangke管理员可以通过此方法审核不通过课程模版
     * 
     * @param  courseTemplateBo          需要被审核的课程模版信息
     * @param  partnerBo                 合作商信息
     * @param  commentTemplateApproveBo  审核不通过课程模版评论信息
     * @param  userBo                    调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param courseTemplateBo
     * @param commentCourseTemplateRejectBo
     * @param partnerBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo rejectCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.CommentCourseTemplateRejectBo commentCourseTemplateRejectBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为下架课程模版<br>
     * 合作商管理员可以通过此方法下架课程模版
     * 
     * @param  courseTemplateBo    需要被下架的课程模版信息
     * @param  partnerBo           合作商信息
     * @param  userBo              调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param courseTemplateBo
     * @param partnerBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo cancelCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为重新上架课程模版<br>
     * 合作商管理员可以通过此方法重新上架课程模版
     * 
     * @param  courseTemplateBo    需要被重新上架的课程模版信息
     * @param  partnerBo           合作商信息
     * @param  userBo              调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param courseTemplateBo
     * @param partnerBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo resubmitCourserTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为删除课程模版<br>
     * 合作商管理员可以通过此方法删除已经下架的课程模版
     * 
     * @param  courseTemplateBo    需要被删除的课程模版信息
     * @param  partnerBo           合作商信息
     * @param  userBo              调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param courseTemplateBo
     * @param partnerBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo deleteCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为修改课程模版<br>
     * 合作商管理员可以通过此方法修改课程模版
     * 
     * @param  courseTemplateBo    需要被修改的课程模版信息
     * @param  partnerBo           合作商信息
     * @param  userBo              调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param courseTemplateBo
     * @param partnerBo
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo updateCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为搜索课程模版<br>
     * 合作商管理员可以通过此方法查询课程模版
     * 
     * @param  courseTemplateBo    需要检索和过滤的课程模版信息
     * @param  partnerBo           合作商信息
     * @param  UserBo              调用方法的用户的信息
     * @param  paginationBo        分页信息
     * 
     * @return
     * 
     * 
     * @param courseTemplateBo
     * @param userBo
     * @param partnerBo
     * @param paginationBo
     */
    public List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> queryCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法返回课程模版详情<br>
     * 合作商/管理员可以通过此方法调取
     * 
     * @param  courseTemplateBo            课程模板id
     * @param  userBo                      调用方法的用户的信息
     * 
     * @return
     * 
     * 
     * @param courseTemplateBo
     * @param userBo
     */
    public List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> queryCourseTemplateById(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void submitCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void approveCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CommentCourseTemplateApproveBo commentCourseTemplateApproveBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rejectCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.CommentCourseTemplateRejectBo commentCourseTemplateRejectBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void resubmitCourserTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCourseTemplateById(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo createCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_createCourseTemplate(courseTemplateBo, partnerBo, userBo);
      return recv_createCourseTemplate();
    }

    public void send_createCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      createCourseTemplate_args args = new createCourseTemplate_args();
      args.setCourseTemplateBo(courseTemplateBo);
      args.setPartnerBo(partnerBo);
      args.setUserBo(userBo);
      sendBase("createCourseTemplate", args);
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo recv_createCourseTemplate() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      createCourseTemplate_result result = new createCourseTemplate_result();
      receiveBase(result, "createCourseTemplate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createCourseTemplate failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo submitCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_submitCourseTemplate(courseTemplateBo, partnerBo, userBo);
      return recv_submitCourseTemplate();
    }

    public void send_submitCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      submitCourseTemplate_args args = new submitCourseTemplate_args();
      args.setCourseTemplateBo(courseTemplateBo);
      args.setPartnerBo(partnerBo);
      args.setUserBo(userBo);
      sendBase("submitCourseTemplate", args);
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo recv_submitCourseTemplate() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      submitCourseTemplate_result result = new submitCourseTemplate_result();
      receiveBase(result, "submitCourseTemplate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "submitCourseTemplate failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo approveCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CommentCourseTemplateApproveBo commentCourseTemplateApproveBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_approveCourseTemplate(courseTemplateBo, partnerBo, commentCourseTemplateApproveBo, userBo);
      return recv_approveCourseTemplate();
    }

    public void send_approveCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CommentCourseTemplateApproveBo commentCourseTemplateApproveBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      approveCourseTemplate_args args = new approveCourseTemplate_args();
      args.setCourseTemplateBo(courseTemplateBo);
      args.setPartnerBo(partnerBo);
      args.setCommentCourseTemplateApproveBo(commentCourseTemplateApproveBo);
      args.setUserBo(userBo);
      sendBase("approveCourseTemplate", args);
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo recv_approveCourseTemplate() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      approveCourseTemplate_result result = new approveCourseTemplate_result();
      receiveBase(result, "approveCourseTemplate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "approveCourseTemplate failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo rejectCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.CommentCourseTemplateRejectBo commentCourseTemplateRejectBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_rejectCourseTemplate(courseTemplateBo, commentCourseTemplateRejectBo, partnerBo, userBo);
      return recv_rejectCourseTemplate();
    }

    public void send_rejectCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.CommentCourseTemplateRejectBo commentCourseTemplateRejectBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      rejectCourseTemplate_args args = new rejectCourseTemplate_args();
      args.setCourseTemplateBo(courseTemplateBo);
      args.setCommentCourseTemplateRejectBo(commentCourseTemplateRejectBo);
      args.setPartnerBo(partnerBo);
      args.setUserBo(userBo);
      sendBase("rejectCourseTemplate", args);
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo recv_rejectCourseTemplate() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      rejectCourseTemplate_result result = new rejectCourseTemplate_result();
      receiveBase(result, "rejectCourseTemplate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rejectCourseTemplate failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo cancelCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_cancelCourseTemplate(courseTemplateBo, partnerBo, userBo);
      return recv_cancelCourseTemplate();
    }

    public void send_cancelCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      cancelCourseTemplate_args args = new cancelCourseTemplate_args();
      args.setCourseTemplateBo(courseTemplateBo);
      args.setPartnerBo(partnerBo);
      args.setUserBo(userBo);
      sendBase("cancelCourseTemplate", args);
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo recv_cancelCourseTemplate() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      cancelCourseTemplate_result result = new cancelCourseTemplate_result();
      receiveBase(result, "cancelCourseTemplate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelCourseTemplate failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo resubmitCourserTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_resubmitCourserTemplate(courseTemplateBo, partnerBo, userBo);
      return recv_resubmitCourserTemplate();
    }

    public void send_resubmitCourserTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      resubmitCourserTemplate_args args = new resubmitCourserTemplate_args();
      args.setCourseTemplateBo(courseTemplateBo);
      args.setPartnerBo(partnerBo);
      args.setUserBo(userBo);
      sendBase("resubmitCourserTemplate", args);
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo recv_resubmitCourserTemplate() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      resubmitCourserTemplate_result result = new resubmitCourserTemplate_result();
      receiveBase(result, "resubmitCourserTemplate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resubmitCourserTemplate failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo deleteCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_deleteCourseTemplate(courseTemplateBo, partnerBo, userBo);
      return recv_deleteCourseTemplate();
    }

    public void send_deleteCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      deleteCourseTemplate_args args = new deleteCourseTemplate_args();
      args.setCourseTemplateBo(courseTemplateBo);
      args.setPartnerBo(partnerBo);
      args.setUserBo(userBo);
      sendBase("deleteCourseTemplate", args);
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo recv_deleteCourseTemplate() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      deleteCourseTemplate_result result = new deleteCourseTemplate_result();
      receiveBase(result, "deleteCourseTemplate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteCourseTemplate failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo updateCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_updateCourseTemplate(courseTemplateBo, partnerBo, userBo);
      return recv_updateCourseTemplate();
    }

    public void send_updateCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      updateCourseTemplate_args args = new updateCourseTemplate_args();
      args.setCourseTemplateBo(courseTemplateBo);
      args.setPartnerBo(partnerBo);
      args.setUserBo(userBo);
      sendBase("updateCourseTemplate", args);
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo recv_updateCourseTemplate() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      updateCourseTemplate_result result = new updateCourseTemplate_result();
      receiveBase(result, "updateCourseTemplate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCourseTemplate failed: unknown result");
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> queryCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_queryCourseTemplate(courseTemplateBo, userBo, partnerBo, paginationBo);
      return recv_queryCourseTemplate();
    }

    public void send_queryCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) throws org.apache.thrift.TException
    {
      queryCourseTemplate_args args = new queryCourseTemplate_args();
      args.setCourseTemplateBo(courseTemplateBo);
      args.setUserBo(userBo);
      args.setPartnerBo(partnerBo);
      args.setPaginationBo(paginationBo);
      sendBase("queryCourseTemplate", args);
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> recv_queryCourseTemplate() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      queryCourseTemplate_result result = new queryCourseTemplate_result();
      receiveBase(result, "queryCourseTemplate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCourseTemplate failed: unknown result");
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> queryCourseTemplateById(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_queryCourseTemplateById(courseTemplateBo, userBo);
      return recv_queryCourseTemplateById();
    }

    public void send_queryCourseTemplateById(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      queryCourseTemplateById_args args = new queryCourseTemplateById_args();
      args.setCourseTemplateBo(courseTemplateBo);
      args.setUserBo(userBo);
      sendBase("queryCourseTemplateById", args);
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> recv_queryCourseTemplateById() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      queryCourseTemplateById_result result = new queryCourseTemplateById_result();
      receiveBase(result, "queryCourseTemplateById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCourseTemplateById failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createCourseTemplate_call method_call = new createCourseTemplate_call(courseTemplateBo, partnerBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createCourseTemplate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public createCourseTemplate_call(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseTemplateBo = courseTemplateBo;
        this.partnerBo = partnerBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createCourseTemplate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createCourseTemplate_args args = new createCourseTemplate_args();
        args.setCourseTemplateBo(courseTemplateBo);
        args.setPartnerBo(partnerBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createCourseTemplate();
      }
    }

    public void submitCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submitCourseTemplate_call method_call = new submitCourseTemplate_call(courseTemplateBo, partnerBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submitCourseTemplate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public submitCourseTemplate_call(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseTemplateBo = courseTemplateBo;
        this.partnerBo = partnerBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submitCourseTemplate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submitCourseTemplate_args args = new submitCourseTemplate_args();
        args.setCourseTemplateBo(courseTemplateBo);
        args.setPartnerBo(partnerBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_submitCourseTemplate();
      }
    }

    public void approveCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CommentCourseTemplateApproveBo commentCourseTemplateApproveBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      approveCourseTemplate_call method_call = new approveCourseTemplate_call(courseTemplateBo, partnerBo, commentCourseTemplateApproveBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class approveCourseTemplate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.CommentCourseTemplateApproveBo commentCourseTemplateApproveBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public approveCourseTemplate_call(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.CommentCourseTemplateApproveBo commentCourseTemplateApproveBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseTemplateBo = courseTemplateBo;
        this.partnerBo = partnerBo;
        this.commentCourseTemplateApproveBo = commentCourseTemplateApproveBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("approveCourseTemplate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        approveCourseTemplate_args args = new approveCourseTemplate_args();
        args.setCourseTemplateBo(courseTemplateBo);
        args.setPartnerBo(partnerBo);
        args.setCommentCourseTemplateApproveBo(commentCourseTemplateApproveBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_approveCourseTemplate();
      }
    }

    public void rejectCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.CommentCourseTemplateRejectBo commentCourseTemplateRejectBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rejectCourseTemplate_call method_call = new rejectCourseTemplate_call(courseTemplateBo, commentCourseTemplateRejectBo, partnerBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rejectCourseTemplate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo;
      private com.ishangke.edunav.commoncontract.model.CommentCourseTemplateRejectBo commentCourseTemplateRejectBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public rejectCourseTemplate_call(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.CommentCourseTemplateRejectBo commentCourseTemplateRejectBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseTemplateBo = courseTemplateBo;
        this.commentCourseTemplateRejectBo = commentCourseTemplateRejectBo;
        this.partnerBo = partnerBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rejectCourseTemplate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rejectCourseTemplate_args args = new rejectCourseTemplate_args();
        args.setCourseTemplateBo(courseTemplateBo);
        args.setCommentCourseTemplateRejectBo(commentCourseTemplateRejectBo);
        args.setPartnerBo(partnerBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rejectCourseTemplate();
      }
    }

    public void cancelCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelCourseTemplate_call method_call = new cancelCourseTemplate_call(courseTemplateBo, partnerBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelCourseTemplate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public cancelCourseTemplate_call(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseTemplateBo = courseTemplateBo;
        this.partnerBo = partnerBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelCourseTemplate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelCourseTemplate_args args = new cancelCourseTemplate_args();
        args.setCourseTemplateBo(courseTemplateBo);
        args.setPartnerBo(partnerBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelCourseTemplate();
      }
    }

    public void resubmitCourserTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resubmitCourserTemplate_call method_call = new resubmitCourserTemplate_call(courseTemplateBo, partnerBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resubmitCourserTemplate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public resubmitCourserTemplate_call(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseTemplateBo = courseTemplateBo;
        this.partnerBo = partnerBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resubmitCourserTemplate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resubmitCourserTemplate_args args = new resubmitCourserTemplate_args();
        args.setCourseTemplateBo(courseTemplateBo);
        args.setPartnerBo(partnerBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resubmitCourserTemplate();
      }
    }

    public void deleteCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteCourseTemplate_call method_call = new deleteCourseTemplate_call(courseTemplateBo, partnerBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteCourseTemplate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public deleteCourseTemplate_call(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseTemplateBo = courseTemplateBo;
        this.partnerBo = partnerBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteCourseTemplate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteCourseTemplate_args args = new deleteCourseTemplate_args();
        args.setCourseTemplateBo(courseTemplateBo);
        args.setPartnerBo(partnerBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteCourseTemplate();
      }
    }

    public void updateCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCourseTemplate_call method_call = new updateCourseTemplate_call(courseTemplateBo, partnerBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCourseTemplate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public updateCourseTemplate_call(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseTemplateBo = courseTemplateBo;
        this.partnerBo = partnerBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCourseTemplate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCourseTemplate_args args = new updateCourseTemplate_args();
        args.setCourseTemplateBo(courseTemplateBo);
        args.setPartnerBo(partnerBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCourseTemplate();
      }
    }

    public void queryCourseTemplate(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCourseTemplate_call method_call = new queryCourseTemplate_call(courseTemplateBo, userBo, partnerBo, paginationBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCourseTemplate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo;
      public queryCourseTemplate_call(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseTemplateBo = courseTemplateBo;
        this.userBo = userBo;
        this.partnerBo = partnerBo;
        this.paginationBo = paginationBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCourseTemplate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCourseTemplate_args args = new queryCourseTemplate_args();
        args.setCourseTemplateBo(courseTemplateBo);
        args.setUserBo(userBo);
        args.setPartnerBo(partnerBo);
        args.setPaginationBo(paginationBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCourseTemplate();
      }
    }

    public void queryCourseTemplateById(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCourseTemplateById_call method_call = new queryCourseTemplateById_call(courseTemplateBo, userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCourseTemplateById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo;
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public queryCourseTemplateById_call(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo, com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseTemplateBo = courseTemplateBo;
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCourseTemplateById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCourseTemplateById_args args = new queryCourseTemplateById_args();
        args.setCourseTemplateBo(courseTemplateBo);
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCourseTemplateById();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createCourseTemplate", new createCourseTemplate());
      processMap.put("submitCourseTemplate", new submitCourseTemplate());
      processMap.put("approveCourseTemplate", new approveCourseTemplate());
      processMap.put("rejectCourseTemplate", new rejectCourseTemplate());
      processMap.put("cancelCourseTemplate", new cancelCourseTemplate());
      processMap.put("resubmitCourserTemplate", new resubmitCourserTemplate());
      processMap.put("deleteCourseTemplate", new deleteCourseTemplate());
      processMap.put("updateCourseTemplate", new updateCourseTemplate());
      processMap.put("queryCourseTemplate", new queryCourseTemplate());
      processMap.put("queryCourseTemplateById", new queryCourseTemplateById());
      return processMap;
    }

    public static class createCourseTemplate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createCourseTemplate_args> {
      public createCourseTemplate() {
        super("createCourseTemplate");
      }

      public createCourseTemplate_args getEmptyArgsInstance() {
        return new createCourseTemplate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createCourseTemplate_result getResult(I iface, createCourseTemplate_args args) throws org.apache.thrift.TException {
        createCourseTemplate_result result = new createCourseTemplate_result();
        try {
          result.success = iface.createCourseTemplate(args.courseTemplateBo, args.partnerBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class submitCourseTemplate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submitCourseTemplate_args> {
      public submitCourseTemplate() {
        super("submitCourseTemplate");
      }

      public submitCourseTemplate_args getEmptyArgsInstance() {
        return new submitCourseTemplate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public submitCourseTemplate_result getResult(I iface, submitCourseTemplate_args args) throws org.apache.thrift.TException {
        submitCourseTemplate_result result = new submitCourseTemplate_result();
        try {
          result.success = iface.submitCourseTemplate(args.courseTemplateBo, args.partnerBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class approveCourseTemplate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, approveCourseTemplate_args> {
      public approveCourseTemplate() {
        super("approveCourseTemplate");
      }

      public approveCourseTemplate_args getEmptyArgsInstance() {
        return new approveCourseTemplate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public approveCourseTemplate_result getResult(I iface, approveCourseTemplate_args args) throws org.apache.thrift.TException {
        approveCourseTemplate_result result = new approveCourseTemplate_result();
        try {
          result.success = iface.approveCourseTemplate(args.courseTemplateBo, args.partnerBo, args.commentCourseTemplateApproveBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class rejectCourseTemplate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rejectCourseTemplate_args> {
      public rejectCourseTemplate() {
        super("rejectCourseTemplate");
      }

      public rejectCourseTemplate_args getEmptyArgsInstance() {
        return new rejectCourseTemplate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rejectCourseTemplate_result getResult(I iface, rejectCourseTemplate_args args) throws org.apache.thrift.TException {
        rejectCourseTemplate_result result = new rejectCourseTemplate_result();
        try {
          result.success = iface.rejectCourseTemplate(args.courseTemplateBo, args.commentCourseTemplateRejectBo, args.partnerBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class cancelCourseTemplate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelCourseTemplate_args> {
      public cancelCourseTemplate() {
        super("cancelCourseTemplate");
      }

      public cancelCourseTemplate_args getEmptyArgsInstance() {
        return new cancelCourseTemplate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelCourseTemplate_result getResult(I iface, cancelCourseTemplate_args args) throws org.apache.thrift.TException {
        cancelCourseTemplate_result result = new cancelCourseTemplate_result();
        try {
          result.success = iface.cancelCourseTemplate(args.courseTemplateBo, args.partnerBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class resubmitCourserTemplate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resubmitCourserTemplate_args> {
      public resubmitCourserTemplate() {
        super("resubmitCourserTemplate");
      }

      public resubmitCourserTemplate_args getEmptyArgsInstance() {
        return new resubmitCourserTemplate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resubmitCourserTemplate_result getResult(I iface, resubmitCourserTemplate_args args) throws org.apache.thrift.TException {
        resubmitCourserTemplate_result result = new resubmitCourserTemplate_result();
        try {
          result.success = iface.resubmitCourserTemplate(args.courseTemplateBo, args.partnerBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class deleteCourseTemplate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteCourseTemplate_args> {
      public deleteCourseTemplate() {
        super("deleteCourseTemplate");
      }

      public deleteCourseTemplate_args getEmptyArgsInstance() {
        return new deleteCourseTemplate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteCourseTemplate_result getResult(I iface, deleteCourseTemplate_args args) throws org.apache.thrift.TException {
        deleteCourseTemplate_result result = new deleteCourseTemplate_result();
        try {
          result.success = iface.deleteCourseTemplate(args.courseTemplateBo, args.partnerBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class updateCourseTemplate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCourseTemplate_args> {
      public updateCourseTemplate() {
        super("updateCourseTemplate");
      }

      public updateCourseTemplate_args getEmptyArgsInstance() {
        return new updateCourseTemplate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCourseTemplate_result getResult(I iface, updateCourseTemplate_args args) throws org.apache.thrift.TException {
        updateCourseTemplate_result result = new updateCourseTemplate_result();
        try {
          result.success = iface.updateCourseTemplate(args.courseTemplateBo, args.partnerBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class queryCourseTemplate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCourseTemplate_args> {
      public queryCourseTemplate() {
        super("queryCourseTemplate");
      }

      public queryCourseTemplate_args getEmptyArgsInstance() {
        return new queryCourseTemplate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCourseTemplate_result getResult(I iface, queryCourseTemplate_args args) throws org.apache.thrift.TException {
        queryCourseTemplate_result result = new queryCourseTemplate_result();
        try {
          result.success = iface.queryCourseTemplate(args.courseTemplateBo, args.userBo, args.partnerBo, args.paginationBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class queryCourseTemplateById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCourseTemplateById_args> {
      public queryCourseTemplateById() {
        super("queryCourseTemplateById");
      }

      public queryCourseTemplateById_args getEmptyArgsInstance() {
        return new queryCourseTemplateById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCourseTemplateById_result getResult(I iface, queryCourseTemplateById_args args) throws org.apache.thrift.TException {
        queryCourseTemplateById_result result = new queryCourseTemplateById_result();
        try {
          result.success = iface.queryCourseTemplateById(args.courseTemplateBo, args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createCourseTemplate", new createCourseTemplate());
      processMap.put("submitCourseTemplate", new submitCourseTemplate());
      processMap.put("approveCourseTemplate", new approveCourseTemplate());
      processMap.put("rejectCourseTemplate", new rejectCourseTemplate());
      processMap.put("cancelCourseTemplate", new cancelCourseTemplate());
      processMap.put("resubmitCourserTemplate", new resubmitCourserTemplate());
      processMap.put("deleteCourseTemplate", new deleteCourseTemplate());
      processMap.put("updateCourseTemplate", new updateCourseTemplate());
      processMap.put("queryCourseTemplate", new queryCourseTemplate());
      processMap.put("queryCourseTemplateById", new queryCourseTemplateById());
      return processMap;
    }

    public static class createCourseTemplate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createCourseTemplate_args, com.ishangke.edunav.commoncontract.model.CourseTemplateBo> {
      public createCourseTemplate() {
        super("createCourseTemplate");
      }

      public createCourseTemplate_args getEmptyArgsInstance() {
        return new createCourseTemplate_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.CourseTemplateBo o) {
            createCourseTemplate_result result = new createCourseTemplate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createCourseTemplate_result result = new createCourseTemplate_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createCourseTemplate_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> resultHandler) throws TException {
        iface.createCourseTemplate(args.courseTemplateBo, args.partnerBo, args.userBo,resultHandler);
      }
    }

    public static class submitCourseTemplate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, submitCourseTemplate_args, com.ishangke.edunav.commoncontract.model.CourseTemplateBo> {
      public submitCourseTemplate() {
        super("submitCourseTemplate");
      }

      public submitCourseTemplate_args getEmptyArgsInstance() {
        return new submitCourseTemplate_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.CourseTemplateBo o) {
            submitCourseTemplate_result result = new submitCourseTemplate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            submitCourseTemplate_result result = new submitCourseTemplate_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, submitCourseTemplate_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> resultHandler) throws TException {
        iface.submitCourseTemplate(args.courseTemplateBo, args.partnerBo, args.userBo,resultHandler);
      }
    }

    public static class approveCourseTemplate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, approveCourseTemplate_args, com.ishangke.edunav.commoncontract.model.CourseTemplateBo> {
      public approveCourseTemplate() {
        super("approveCourseTemplate");
      }

      public approveCourseTemplate_args getEmptyArgsInstance() {
        return new approveCourseTemplate_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.CourseTemplateBo o) {
            approveCourseTemplate_result result = new approveCourseTemplate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            approveCourseTemplate_result result = new approveCourseTemplate_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, approveCourseTemplate_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> resultHandler) throws TException {
        iface.approveCourseTemplate(args.courseTemplateBo, args.partnerBo, args.commentCourseTemplateApproveBo, args.userBo,resultHandler);
      }
    }

    public static class rejectCourseTemplate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rejectCourseTemplate_args, com.ishangke.edunav.commoncontract.model.CourseTemplateBo> {
      public rejectCourseTemplate() {
        super("rejectCourseTemplate");
      }

      public rejectCourseTemplate_args getEmptyArgsInstance() {
        return new rejectCourseTemplate_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.CourseTemplateBo o) {
            rejectCourseTemplate_result result = new rejectCourseTemplate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rejectCourseTemplate_result result = new rejectCourseTemplate_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rejectCourseTemplate_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> resultHandler) throws TException {
        iface.rejectCourseTemplate(args.courseTemplateBo, args.commentCourseTemplateRejectBo, args.partnerBo, args.userBo,resultHandler);
      }
    }

    public static class cancelCourseTemplate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelCourseTemplate_args, com.ishangke.edunav.commoncontract.model.CourseTemplateBo> {
      public cancelCourseTemplate() {
        super("cancelCourseTemplate");
      }

      public cancelCourseTemplate_args getEmptyArgsInstance() {
        return new cancelCourseTemplate_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.CourseTemplateBo o) {
            cancelCourseTemplate_result result = new cancelCourseTemplate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelCourseTemplate_result result = new cancelCourseTemplate_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelCourseTemplate_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> resultHandler) throws TException {
        iface.cancelCourseTemplate(args.courseTemplateBo, args.partnerBo, args.userBo,resultHandler);
      }
    }

    public static class resubmitCourserTemplate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resubmitCourserTemplate_args, com.ishangke.edunav.commoncontract.model.CourseTemplateBo> {
      public resubmitCourserTemplate() {
        super("resubmitCourserTemplate");
      }

      public resubmitCourserTemplate_args getEmptyArgsInstance() {
        return new resubmitCourserTemplate_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.CourseTemplateBo o) {
            resubmitCourserTemplate_result result = new resubmitCourserTemplate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            resubmitCourserTemplate_result result = new resubmitCourserTemplate_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resubmitCourserTemplate_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> resultHandler) throws TException {
        iface.resubmitCourserTemplate(args.courseTemplateBo, args.partnerBo, args.userBo,resultHandler);
      }
    }

    public static class deleteCourseTemplate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteCourseTemplate_args, com.ishangke.edunav.commoncontract.model.CourseTemplateBo> {
      public deleteCourseTemplate() {
        super("deleteCourseTemplate");
      }

      public deleteCourseTemplate_args getEmptyArgsInstance() {
        return new deleteCourseTemplate_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.CourseTemplateBo o) {
            deleteCourseTemplate_result result = new deleteCourseTemplate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteCourseTemplate_result result = new deleteCourseTemplate_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteCourseTemplate_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> resultHandler) throws TException {
        iface.deleteCourseTemplate(args.courseTemplateBo, args.partnerBo, args.userBo,resultHandler);
      }
    }

    public static class updateCourseTemplate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCourseTemplate_args, com.ishangke.edunav.commoncontract.model.CourseTemplateBo> {
      public updateCourseTemplate() {
        super("updateCourseTemplate");
      }

      public updateCourseTemplate_args getEmptyArgsInstance() {
        return new updateCourseTemplate_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.CourseTemplateBo o) {
            updateCourseTemplate_result result = new updateCourseTemplate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateCourseTemplate_result result = new updateCourseTemplate_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCourseTemplate_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> resultHandler) throws TException {
        iface.updateCourseTemplate(args.courseTemplateBo, args.partnerBo, args.userBo,resultHandler);
      }
    }

    public static class queryCourseTemplate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCourseTemplate_args, List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>> {
      public queryCourseTemplate() {
        super("queryCourseTemplate");
      }

      public queryCourseTemplate_args getEmptyArgsInstance() {
        return new queryCourseTemplate_args();
      }

      public AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>>() { 
          public void onComplete(List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> o) {
            queryCourseTemplate_result result = new queryCourseTemplate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCourseTemplate_result result = new queryCourseTemplate_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCourseTemplate_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>> resultHandler) throws TException {
        iface.queryCourseTemplate(args.courseTemplateBo, args.userBo, args.partnerBo, args.paginationBo,resultHandler);
      }
    }

    public static class queryCourseTemplateById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCourseTemplateById_args, List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>> {
      public queryCourseTemplateById() {
        super("queryCourseTemplateById");
      }

      public queryCourseTemplateById_args getEmptyArgsInstance() {
        return new queryCourseTemplateById_args();
      }

      public AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>>() { 
          public void onComplete(List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> o) {
            queryCourseTemplateById_result result = new queryCourseTemplateById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCourseTemplateById_result result = new queryCourseTemplateById_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCourseTemplateById_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>> resultHandler) throws TException {
        iface.queryCourseTemplateById(args.courseTemplateBo, args.userBo,resultHandler);
      }
    }

  }

  public static class createCourseTemplate_args implements org.apache.thrift.TBase<createCourseTemplate_args, createCourseTemplate_args._Fields>, java.io.Serializable, Cloneable, Comparable<createCourseTemplate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCourseTemplate_args");

    private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createCourseTemplate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createCourseTemplate_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_TEMPLATE_BO((short)1, "courseTemplateBo"),
      PARTNER_BO((short)2, "partnerBo"),
      USER_BO((short)3, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_TEMPLATE_BO
            return COURSE_TEMPLATE_BO;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_TEMPLATE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCourseTemplate_args.class, metaDataMap);
    }

    public createCourseTemplate_args() {
    }

    public createCourseTemplate_args(
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseTemplateBo = courseTemplateBo;
      this.partnerBo = partnerBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCourseTemplate_args(createCourseTemplate_args other) {
      if (other.isSetCourseTemplateBo()) {
        this.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.courseTemplateBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public createCourseTemplate_args deepCopy() {
      return new createCourseTemplate_args(this);
    }

    @Override
    public void clear() {
      this.courseTemplateBo = null;
      this.partnerBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getCourseTemplateBo() {
      return this.courseTemplateBo;
    }

    public createCourseTemplate_args setCourseTemplateBo(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo) {
      this.courseTemplateBo = courseTemplateBo;
      return this;
    }

    public void unsetCourseTemplateBo() {
      this.courseTemplateBo = null;
    }

    /** Returns true if field courseTemplateBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseTemplateBo() {
      return this.courseTemplateBo != null;
    }

    public void setCourseTemplateBoIsSet(boolean value) {
      if (!value) {
        this.courseTemplateBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public createCourseTemplate_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public createCourseTemplate_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        if (value == null) {
          unsetCourseTemplateBo();
        } else {
          setCourseTemplateBo((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        return getCourseTemplateBo();

      case PARTNER_BO:
        return getPartnerBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_TEMPLATE_BO:
        return isSetCourseTemplateBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createCourseTemplate_args)
        return this.equals((createCourseTemplate_args)that);
      return false;
    }

    public boolean equals(createCourseTemplate_args that) {
      if (that == null)
        return false;

      boolean this_present_courseTemplateBo = true && this.isSetCourseTemplateBo();
      boolean that_present_courseTemplateBo = true && that.isSetCourseTemplateBo();
      if (this_present_courseTemplateBo || that_present_courseTemplateBo) {
        if (!(this_present_courseTemplateBo && that_present_courseTemplateBo))
          return false;
        if (!this.courseTemplateBo.equals(that.courseTemplateBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseTemplateBo = true && (isSetCourseTemplateBo());
      builder.append(present_courseTemplateBo);
      if (present_courseTemplateBo)
        builder.append(courseTemplateBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createCourseTemplate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseTemplateBo()).compareTo(other.isSetCourseTemplateBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseTemplateBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateBo, other.courseTemplateBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createCourseTemplate_args(");
      boolean first = true;

      sb.append("courseTemplateBo:");
      if (this.courseTemplateBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseTemplateBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseTemplateBo != null) {
        courseTemplateBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCourseTemplate_argsStandardSchemeFactory implements SchemeFactory {
      public createCourseTemplate_argsStandardScheme getScheme() {
        return new createCourseTemplate_argsStandardScheme();
      }
    }

    private static class createCourseTemplate_argsStandardScheme extends StandardScheme<createCourseTemplate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCourseTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_TEMPLATE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.courseTemplateBo.read(iprot);
                struct.setCourseTemplateBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCourseTemplate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseTemplateBo != null) {
          oprot.writeFieldBegin(COURSE_TEMPLATE_BO_FIELD_DESC);
          struct.courseTemplateBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCourseTemplate_argsTupleSchemeFactory implements SchemeFactory {
      public createCourseTemplate_argsTupleScheme getScheme() {
        return new createCourseTemplate_argsTupleScheme();
      }
    }

    private static class createCourseTemplate_argsTupleScheme extends TupleScheme<createCourseTemplate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCourseTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseTemplateBo()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCourseTemplateBo()) {
          struct.courseTemplateBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCourseTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.courseTemplateBo.read(iprot);
          struct.setCourseTemplateBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class createCourseTemplate_result implements org.apache.thrift.TBase<createCourseTemplate_result, createCourseTemplate_result._Fields>, java.io.Serializable, Cloneable, Comparable<createCourseTemplate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCourseTemplate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createCourseTemplate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createCourseTemplate_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCourseTemplate_result.class, metaDataMap);
    }

    public createCourseTemplate_result() {
    }

    public createCourseTemplate_result(
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCourseTemplate_result(createCourseTemplate_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public createCourseTemplate_result deepCopy() {
      return new createCourseTemplate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getSuccess() {
      return this.success;
    }

    public createCourseTemplate_result setSuccess(com.ishangke.edunav.commoncontract.model.CourseTemplateBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public createCourseTemplate_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createCourseTemplate_result)
        return this.equals((createCourseTemplate_result)that);
      return false;
    }

    public boolean equals(createCourseTemplate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createCourseTemplate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createCourseTemplate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCourseTemplate_resultStandardSchemeFactory implements SchemeFactory {
      public createCourseTemplate_resultStandardScheme getScheme() {
        return new createCourseTemplate_resultStandardScheme();
      }
    }

    private static class createCourseTemplate_resultStandardScheme extends StandardScheme<createCourseTemplate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCourseTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCourseTemplate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCourseTemplate_resultTupleSchemeFactory implements SchemeFactory {
      public createCourseTemplate_resultTupleScheme getScheme() {
        return new createCourseTemplate_resultTupleScheme();
      }
    }

    private static class createCourseTemplate_resultTupleScheme extends TupleScheme<createCourseTemplate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCourseTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCourseTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class submitCourseTemplate_args implements org.apache.thrift.TBase<submitCourseTemplate_args, submitCourseTemplate_args._Fields>, java.io.Serializable, Cloneable, Comparable<submitCourseTemplate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitCourseTemplate_args");

    private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitCourseTemplate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitCourseTemplate_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_TEMPLATE_BO((short)1, "courseTemplateBo"),
      PARTNER_BO((short)2, "partnerBo"),
      USER_BO((short)3, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_TEMPLATE_BO
            return COURSE_TEMPLATE_BO;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_TEMPLATE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitCourseTemplate_args.class, metaDataMap);
    }

    public submitCourseTemplate_args() {
    }

    public submitCourseTemplate_args(
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseTemplateBo = courseTemplateBo;
      this.partnerBo = partnerBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitCourseTemplate_args(submitCourseTemplate_args other) {
      if (other.isSetCourseTemplateBo()) {
        this.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.courseTemplateBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public submitCourseTemplate_args deepCopy() {
      return new submitCourseTemplate_args(this);
    }

    @Override
    public void clear() {
      this.courseTemplateBo = null;
      this.partnerBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getCourseTemplateBo() {
      return this.courseTemplateBo;
    }

    public submitCourseTemplate_args setCourseTemplateBo(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo) {
      this.courseTemplateBo = courseTemplateBo;
      return this;
    }

    public void unsetCourseTemplateBo() {
      this.courseTemplateBo = null;
    }

    /** Returns true if field courseTemplateBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseTemplateBo() {
      return this.courseTemplateBo != null;
    }

    public void setCourseTemplateBoIsSet(boolean value) {
      if (!value) {
        this.courseTemplateBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public submitCourseTemplate_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public submitCourseTemplate_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        if (value == null) {
          unsetCourseTemplateBo();
        } else {
          setCourseTemplateBo((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        return getCourseTemplateBo();

      case PARTNER_BO:
        return getPartnerBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_TEMPLATE_BO:
        return isSetCourseTemplateBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitCourseTemplate_args)
        return this.equals((submitCourseTemplate_args)that);
      return false;
    }

    public boolean equals(submitCourseTemplate_args that) {
      if (that == null)
        return false;

      boolean this_present_courseTemplateBo = true && this.isSetCourseTemplateBo();
      boolean that_present_courseTemplateBo = true && that.isSetCourseTemplateBo();
      if (this_present_courseTemplateBo || that_present_courseTemplateBo) {
        if (!(this_present_courseTemplateBo && that_present_courseTemplateBo))
          return false;
        if (!this.courseTemplateBo.equals(that.courseTemplateBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseTemplateBo = true && (isSetCourseTemplateBo());
      builder.append(present_courseTemplateBo);
      if (present_courseTemplateBo)
        builder.append(courseTemplateBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(submitCourseTemplate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseTemplateBo()).compareTo(other.isSetCourseTemplateBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseTemplateBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateBo, other.courseTemplateBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitCourseTemplate_args(");
      boolean first = true;

      sb.append("courseTemplateBo:");
      if (this.courseTemplateBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseTemplateBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseTemplateBo != null) {
        courseTemplateBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitCourseTemplate_argsStandardSchemeFactory implements SchemeFactory {
      public submitCourseTemplate_argsStandardScheme getScheme() {
        return new submitCourseTemplate_argsStandardScheme();
      }
    }

    private static class submitCourseTemplate_argsStandardScheme extends StandardScheme<submitCourseTemplate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitCourseTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_TEMPLATE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.courseTemplateBo.read(iprot);
                struct.setCourseTemplateBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitCourseTemplate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseTemplateBo != null) {
          oprot.writeFieldBegin(COURSE_TEMPLATE_BO_FIELD_DESC);
          struct.courseTemplateBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitCourseTemplate_argsTupleSchemeFactory implements SchemeFactory {
      public submitCourseTemplate_argsTupleScheme getScheme() {
        return new submitCourseTemplate_argsTupleScheme();
      }
    }

    private static class submitCourseTemplate_argsTupleScheme extends TupleScheme<submitCourseTemplate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitCourseTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseTemplateBo()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCourseTemplateBo()) {
          struct.courseTemplateBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitCourseTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.courseTemplateBo.read(iprot);
          struct.setCourseTemplateBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class submitCourseTemplate_result implements org.apache.thrift.TBase<submitCourseTemplate_result, submitCourseTemplate_result._Fields>, java.io.Serializable, Cloneable, Comparable<submitCourseTemplate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitCourseTemplate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitCourseTemplate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitCourseTemplate_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitCourseTemplate_result.class, metaDataMap);
    }

    public submitCourseTemplate_result() {
    }

    public submitCourseTemplate_result(
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitCourseTemplate_result(submitCourseTemplate_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public submitCourseTemplate_result deepCopy() {
      return new submitCourseTemplate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getSuccess() {
      return this.success;
    }

    public submitCourseTemplate_result setSuccess(com.ishangke.edunav.commoncontract.model.CourseTemplateBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public submitCourseTemplate_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitCourseTemplate_result)
        return this.equals((submitCourseTemplate_result)that);
      return false;
    }

    public boolean equals(submitCourseTemplate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(submitCourseTemplate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitCourseTemplate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitCourseTemplate_resultStandardSchemeFactory implements SchemeFactory {
      public submitCourseTemplate_resultStandardScheme getScheme() {
        return new submitCourseTemplate_resultStandardScheme();
      }
    }

    private static class submitCourseTemplate_resultStandardScheme extends StandardScheme<submitCourseTemplate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitCourseTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitCourseTemplate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitCourseTemplate_resultTupleSchemeFactory implements SchemeFactory {
      public submitCourseTemplate_resultTupleScheme getScheme() {
        return new submitCourseTemplate_resultTupleScheme();
      }
    }

    private static class submitCourseTemplate_resultTupleScheme extends TupleScheme<submitCourseTemplate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitCourseTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitCourseTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class approveCourseTemplate_args implements org.apache.thrift.TBase<approveCourseTemplate_args, approveCourseTemplate_args._Fields>, java.io.Serializable, Cloneable, Comparable<approveCourseTemplate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("approveCourseTemplate_args");

    private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField COMMENT_COURSE_TEMPLATE_APPROVE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("commentCourseTemplateApproveBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new approveCourseTemplate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new approveCourseTemplate_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.CommentCourseTemplateApproveBo commentCourseTemplateApproveBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_TEMPLATE_BO((short)1, "courseTemplateBo"),
      PARTNER_BO((short)2, "partnerBo"),
      COMMENT_COURSE_TEMPLATE_APPROVE_BO((short)3, "commentCourseTemplateApproveBo"),
      USER_BO((short)4, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_TEMPLATE_BO
            return COURSE_TEMPLATE_BO;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // COMMENT_COURSE_TEMPLATE_APPROVE_BO
            return COMMENT_COURSE_TEMPLATE_APPROVE_BO;
          case 4: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_TEMPLATE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.COMMENT_COURSE_TEMPLATE_APPROVE_BO, new org.apache.thrift.meta_data.FieldMetaData("commentCourseTemplateApproveBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CommentCourseTemplateApproveBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(approveCourseTemplate_args.class, metaDataMap);
    }

    public approveCourseTemplate_args() {
    }

    public approveCourseTemplate_args(
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.CommentCourseTemplateApproveBo commentCourseTemplateApproveBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseTemplateBo = courseTemplateBo;
      this.partnerBo = partnerBo;
      this.commentCourseTemplateApproveBo = commentCourseTemplateApproveBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public approveCourseTemplate_args(approveCourseTemplate_args other) {
      if (other.isSetCourseTemplateBo()) {
        this.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.courseTemplateBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetCommentCourseTemplateApproveBo()) {
        this.commentCourseTemplateApproveBo = new com.ishangke.edunav.commoncontract.model.CommentCourseTemplateApproveBo(other.commentCourseTemplateApproveBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public approveCourseTemplate_args deepCopy() {
      return new approveCourseTemplate_args(this);
    }

    @Override
    public void clear() {
      this.courseTemplateBo = null;
      this.partnerBo = null;
      this.commentCourseTemplateApproveBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getCourseTemplateBo() {
      return this.courseTemplateBo;
    }

    public approveCourseTemplate_args setCourseTemplateBo(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo) {
      this.courseTemplateBo = courseTemplateBo;
      return this;
    }

    public void unsetCourseTemplateBo() {
      this.courseTemplateBo = null;
    }

    /** Returns true if field courseTemplateBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseTemplateBo() {
      return this.courseTemplateBo != null;
    }

    public void setCourseTemplateBoIsSet(boolean value) {
      if (!value) {
        this.courseTemplateBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public approveCourseTemplate_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CommentCourseTemplateApproveBo getCommentCourseTemplateApproveBo() {
      return this.commentCourseTemplateApproveBo;
    }

    public approveCourseTemplate_args setCommentCourseTemplateApproveBo(com.ishangke.edunav.commoncontract.model.CommentCourseTemplateApproveBo commentCourseTemplateApproveBo) {
      this.commentCourseTemplateApproveBo = commentCourseTemplateApproveBo;
      return this;
    }

    public void unsetCommentCourseTemplateApproveBo() {
      this.commentCourseTemplateApproveBo = null;
    }

    /** Returns true if field commentCourseTemplateApproveBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommentCourseTemplateApproveBo() {
      return this.commentCourseTemplateApproveBo != null;
    }

    public void setCommentCourseTemplateApproveBoIsSet(boolean value) {
      if (!value) {
        this.commentCourseTemplateApproveBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public approveCourseTemplate_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        if (value == null) {
          unsetCourseTemplateBo();
        } else {
          setCourseTemplateBo((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case COMMENT_COURSE_TEMPLATE_APPROVE_BO:
        if (value == null) {
          unsetCommentCourseTemplateApproveBo();
        } else {
          setCommentCourseTemplateApproveBo((com.ishangke.edunav.commoncontract.model.CommentCourseTemplateApproveBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        return getCourseTemplateBo();

      case PARTNER_BO:
        return getPartnerBo();

      case COMMENT_COURSE_TEMPLATE_APPROVE_BO:
        return getCommentCourseTemplateApproveBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_TEMPLATE_BO:
        return isSetCourseTemplateBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case COMMENT_COURSE_TEMPLATE_APPROVE_BO:
        return isSetCommentCourseTemplateApproveBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof approveCourseTemplate_args)
        return this.equals((approveCourseTemplate_args)that);
      return false;
    }

    public boolean equals(approveCourseTemplate_args that) {
      if (that == null)
        return false;

      boolean this_present_courseTemplateBo = true && this.isSetCourseTemplateBo();
      boolean that_present_courseTemplateBo = true && that.isSetCourseTemplateBo();
      if (this_present_courseTemplateBo || that_present_courseTemplateBo) {
        if (!(this_present_courseTemplateBo && that_present_courseTemplateBo))
          return false;
        if (!this.courseTemplateBo.equals(that.courseTemplateBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_commentCourseTemplateApproveBo = true && this.isSetCommentCourseTemplateApproveBo();
      boolean that_present_commentCourseTemplateApproveBo = true && that.isSetCommentCourseTemplateApproveBo();
      if (this_present_commentCourseTemplateApproveBo || that_present_commentCourseTemplateApproveBo) {
        if (!(this_present_commentCourseTemplateApproveBo && that_present_commentCourseTemplateApproveBo))
          return false;
        if (!this.commentCourseTemplateApproveBo.equals(that.commentCourseTemplateApproveBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseTemplateBo = true && (isSetCourseTemplateBo());
      builder.append(present_courseTemplateBo);
      if (present_courseTemplateBo)
        builder.append(courseTemplateBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_commentCourseTemplateApproveBo = true && (isSetCommentCourseTemplateApproveBo());
      builder.append(present_commentCourseTemplateApproveBo);
      if (present_commentCourseTemplateApproveBo)
        builder.append(commentCourseTemplateApproveBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(approveCourseTemplate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseTemplateBo()).compareTo(other.isSetCourseTemplateBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseTemplateBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateBo, other.courseTemplateBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommentCourseTemplateApproveBo()).compareTo(other.isSetCommentCourseTemplateApproveBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommentCourseTemplateApproveBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentCourseTemplateApproveBo, other.commentCourseTemplateApproveBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("approveCourseTemplate_args(");
      boolean first = true;

      sb.append("courseTemplateBo:");
      if (this.courseTemplateBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseTemplateBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commentCourseTemplateApproveBo:");
      if (this.commentCourseTemplateApproveBo == null) {
        sb.append("null");
      } else {
        sb.append(this.commentCourseTemplateApproveBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseTemplateBo != null) {
        courseTemplateBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (commentCourseTemplateApproveBo != null) {
        commentCourseTemplateApproveBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class approveCourseTemplate_argsStandardSchemeFactory implements SchemeFactory {
      public approveCourseTemplate_argsStandardScheme getScheme() {
        return new approveCourseTemplate_argsStandardScheme();
      }
    }

    private static class approveCourseTemplate_argsStandardScheme extends StandardScheme<approveCourseTemplate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, approveCourseTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_TEMPLATE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.courseTemplateBo.read(iprot);
                struct.setCourseTemplateBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMMENT_COURSE_TEMPLATE_APPROVE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commentCourseTemplateApproveBo = new com.ishangke.edunav.commoncontract.model.CommentCourseTemplateApproveBo();
                struct.commentCourseTemplateApproveBo.read(iprot);
                struct.setCommentCourseTemplateApproveBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, approveCourseTemplate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseTemplateBo != null) {
          oprot.writeFieldBegin(COURSE_TEMPLATE_BO_FIELD_DESC);
          struct.courseTemplateBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.commentCourseTemplateApproveBo != null) {
          oprot.writeFieldBegin(COMMENT_COURSE_TEMPLATE_APPROVE_BO_FIELD_DESC);
          struct.commentCourseTemplateApproveBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class approveCourseTemplate_argsTupleSchemeFactory implements SchemeFactory {
      public approveCourseTemplate_argsTupleScheme getScheme() {
        return new approveCourseTemplate_argsTupleScheme();
      }
    }

    private static class approveCourseTemplate_argsTupleScheme extends TupleScheme<approveCourseTemplate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, approveCourseTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseTemplateBo()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetCommentCourseTemplateApproveBo()) {
          optionals.set(2);
        }
        if (struct.isSetUserBo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCourseTemplateBo()) {
          struct.courseTemplateBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetCommentCourseTemplateApproveBo()) {
          struct.commentCourseTemplateApproveBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, approveCourseTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.courseTemplateBo.read(iprot);
          struct.setCourseTemplateBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.commentCourseTemplateApproveBo = new com.ishangke.edunav.commoncontract.model.CommentCourseTemplateApproveBo();
          struct.commentCourseTemplateApproveBo.read(iprot);
          struct.setCommentCourseTemplateApproveBoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class approveCourseTemplate_result implements org.apache.thrift.TBase<approveCourseTemplate_result, approveCourseTemplate_result._Fields>, java.io.Serializable, Cloneable, Comparable<approveCourseTemplate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("approveCourseTemplate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new approveCourseTemplate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new approveCourseTemplate_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(approveCourseTemplate_result.class, metaDataMap);
    }

    public approveCourseTemplate_result() {
    }

    public approveCourseTemplate_result(
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public approveCourseTemplate_result(approveCourseTemplate_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public approveCourseTemplate_result deepCopy() {
      return new approveCourseTemplate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getSuccess() {
      return this.success;
    }

    public approveCourseTemplate_result setSuccess(com.ishangke.edunav.commoncontract.model.CourseTemplateBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public approveCourseTemplate_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof approveCourseTemplate_result)
        return this.equals((approveCourseTemplate_result)that);
      return false;
    }

    public boolean equals(approveCourseTemplate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(approveCourseTemplate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("approveCourseTemplate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class approveCourseTemplate_resultStandardSchemeFactory implements SchemeFactory {
      public approveCourseTemplate_resultStandardScheme getScheme() {
        return new approveCourseTemplate_resultStandardScheme();
      }
    }

    private static class approveCourseTemplate_resultStandardScheme extends StandardScheme<approveCourseTemplate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, approveCourseTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, approveCourseTemplate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class approveCourseTemplate_resultTupleSchemeFactory implements SchemeFactory {
      public approveCourseTemplate_resultTupleScheme getScheme() {
        return new approveCourseTemplate_resultTupleScheme();
      }
    }

    private static class approveCourseTemplate_resultTupleScheme extends TupleScheme<approveCourseTemplate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, approveCourseTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, approveCourseTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class rejectCourseTemplate_args implements org.apache.thrift.TBase<rejectCourseTemplate_args, rejectCourseTemplate_args._Fields>, java.io.Serializable, Cloneable, Comparable<rejectCourseTemplate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rejectCourseTemplate_args");

    private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COMMENT_COURSE_TEMPLATE_REJECT_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("commentCourseTemplateRejectBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rejectCourseTemplate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rejectCourseTemplate_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo; // required
    public com.ishangke.edunav.commoncontract.model.CommentCourseTemplateRejectBo commentCourseTemplateRejectBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_TEMPLATE_BO((short)1, "courseTemplateBo"),
      COMMENT_COURSE_TEMPLATE_REJECT_BO((short)2, "commentCourseTemplateRejectBo"),
      PARTNER_BO((short)3, "partnerBo"),
      USER_BO((short)4, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_TEMPLATE_BO
            return COURSE_TEMPLATE_BO;
          case 2: // COMMENT_COURSE_TEMPLATE_REJECT_BO
            return COMMENT_COURSE_TEMPLATE_REJECT_BO;
          case 3: // PARTNER_BO
            return PARTNER_BO;
          case 4: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_TEMPLATE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.COMMENT_COURSE_TEMPLATE_REJECT_BO, new org.apache.thrift.meta_data.FieldMetaData("commentCourseTemplateRejectBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CommentCourseTemplateRejectBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rejectCourseTemplate_args.class, metaDataMap);
    }

    public rejectCourseTemplate_args() {
    }

    public rejectCourseTemplate_args(
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo,
      com.ishangke.edunav.commoncontract.model.CommentCourseTemplateRejectBo commentCourseTemplateRejectBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseTemplateBo = courseTemplateBo;
      this.commentCourseTemplateRejectBo = commentCourseTemplateRejectBo;
      this.partnerBo = partnerBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rejectCourseTemplate_args(rejectCourseTemplate_args other) {
      if (other.isSetCourseTemplateBo()) {
        this.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.courseTemplateBo);
      }
      if (other.isSetCommentCourseTemplateRejectBo()) {
        this.commentCourseTemplateRejectBo = new com.ishangke.edunav.commoncontract.model.CommentCourseTemplateRejectBo(other.commentCourseTemplateRejectBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public rejectCourseTemplate_args deepCopy() {
      return new rejectCourseTemplate_args(this);
    }

    @Override
    public void clear() {
      this.courseTemplateBo = null;
      this.commentCourseTemplateRejectBo = null;
      this.partnerBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getCourseTemplateBo() {
      return this.courseTemplateBo;
    }

    public rejectCourseTemplate_args setCourseTemplateBo(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo) {
      this.courseTemplateBo = courseTemplateBo;
      return this;
    }

    public void unsetCourseTemplateBo() {
      this.courseTemplateBo = null;
    }

    /** Returns true if field courseTemplateBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseTemplateBo() {
      return this.courseTemplateBo != null;
    }

    public void setCourseTemplateBoIsSet(boolean value) {
      if (!value) {
        this.courseTemplateBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.CommentCourseTemplateRejectBo getCommentCourseTemplateRejectBo() {
      return this.commentCourseTemplateRejectBo;
    }

    public rejectCourseTemplate_args setCommentCourseTemplateRejectBo(com.ishangke.edunav.commoncontract.model.CommentCourseTemplateRejectBo commentCourseTemplateRejectBo) {
      this.commentCourseTemplateRejectBo = commentCourseTemplateRejectBo;
      return this;
    }

    public void unsetCommentCourseTemplateRejectBo() {
      this.commentCourseTemplateRejectBo = null;
    }

    /** Returns true if field commentCourseTemplateRejectBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommentCourseTemplateRejectBo() {
      return this.commentCourseTemplateRejectBo != null;
    }

    public void setCommentCourseTemplateRejectBoIsSet(boolean value) {
      if (!value) {
        this.commentCourseTemplateRejectBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public rejectCourseTemplate_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public rejectCourseTemplate_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        if (value == null) {
          unsetCourseTemplateBo();
        } else {
          setCourseTemplateBo((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case COMMENT_COURSE_TEMPLATE_REJECT_BO:
        if (value == null) {
          unsetCommentCourseTemplateRejectBo();
        } else {
          setCommentCourseTemplateRejectBo((com.ishangke.edunav.commoncontract.model.CommentCourseTemplateRejectBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        return getCourseTemplateBo();

      case COMMENT_COURSE_TEMPLATE_REJECT_BO:
        return getCommentCourseTemplateRejectBo();

      case PARTNER_BO:
        return getPartnerBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_TEMPLATE_BO:
        return isSetCourseTemplateBo();
      case COMMENT_COURSE_TEMPLATE_REJECT_BO:
        return isSetCommentCourseTemplateRejectBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rejectCourseTemplate_args)
        return this.equals((rejectCourseTemplate_args)that);
      return false;
    }

    public boolean equals(rejectCourseTemplate_args that) {
      if (that == null)
        return false;

      boolean this_present_courseTemplateBo = true && this.isSetCourseTemplateBo();
      boolean that_present_courseTemplateBo = true && that.isSetCourseTemplateBo();
      if (this_present_courseTemplateBo || that_present_courseTemplateBo) {
        if (!(this_present_courseTemplateBo && that_present_courseTemplateBo))
          return false;
        if (!this.courseTemplateBo.equals(that.courseTemplateBo))
          return false;
      }

      boolean this_present_commentCourseTemplateRejectBo = true && this.isSetCommentCourseTemplateRejectBo();
      boolean that_present_commentCourseTemplateRejectBo = true && that.isSetCommentCourseTemplateRejectBo();
      if (this_present_commentCourseTemplateRejectBo || that_present_commentCourseTemplateRejectBo) {
        if (!(this_present_commentCourseTemplateRejectBo && that_present_commentCourseTemplateRejectBo))
          return false;
        if (!this.commentCourseTemplateRejectBo.equals(that.commentCourseTemplateRejectBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseTemplateBo = true && (isSetCourseTemplateBo());
      builder.append(present_courseTemplateBo);
      if (present_courseTemplateBo)
        builder.append(courseTemplateBo);

      boolean present_commentCourseTemplateRejectBo = true && (isSetCommentCourseTemplateRejectBo());
      builder.append(present_commentCourseTemplateRejectBo);
      if (present_commentCourseTemplateRejectBo)
        builder.append(commentCourseTemplateRejectBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(rejectCourseTemplate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseTemplateBo()).compareTo(other.isSetCourseTemplateBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseTemplateBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateBo, other.courseTemplateBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommentCourseTemplateRejectBo()).compareTo(other.isSetCommentCourseTemplateRejectBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommentCourseTemplateRejectBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentCourseTemplateRejectBo, other.commentCourseTemplateRejectBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rejectCourseTemplate_args(");
      boolean first = true;

      sb.append("courseTemplateBo:");
      if (this.courseTemplateBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseTemplateBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commentCourseTemplateRejectBo:");
      if (this.commentCourseTemplateRejectBo == null) {
        sb.append("null");
      } else {
        sb.append(this.commentCourseTemplateRejectBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseTemplateBo != null) {
        courseTemplateBo.validate();
      }
      if (commentCourseTemplateRejectBo != null) {
        commentCourseTemplateRejectBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rejectCourseTemplate_argsStandardSchemeFactory implements SchemeFactory {
      public rejectCourseTemplate_argsStandardScheme getScheme() {
        return new rejectCourseTemplate_argsStandardScheme();
      }
    }

    private static class rejectCourseTemplate_argsStandardScheme extends StandardScheme<rejectCourseTemplate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rejectCourseTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_TEMPLATE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.courseTemplateBo.read(iprot);
                struct.setCourseTemplateBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMENT_COURSE_TEMPLATE_REJECT_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commentCourseTemplateRejectBo = new com.ishangke.edunav.commoncontract.model.CommentCourseTemplateRejectBo();
                struct.commentCourseTemplateRejectBo.read(iprot);
                struct.setCommentCourseTemplateRejectBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rejectCourseTemplate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseTemplateBo != null) {
          oprot.writeFieldBegin(COURSE_TEMPLATE_BO_FIELD_DESC);
          struct.courseTemplateBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.commentCourseTemplateRejectBo != null) {
          oprot.writeFieldBegin(COMMENT_COURSE_TEMPLATE_REJECT_BO_FIELD_DESC);
          struct.commentCourseTemplateRejectBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rejectCourseTemplate_argsTupleSchemeFactory implements SchemeFactory {
      public rejectCourseTemplate_argsTupleScheme getScheme() {
        return new rejectCourseTemplate_argsTupleScheme();
      }
    }

    private static class rejectCourseTemplate_argsTupleScheme extends TupleScheme<rejectCourseTemplate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rejectCourseTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseTemplateBo()) {
          optionals.set(0);
        }
        if (struct.isSetCommentCourseTemplateRejectBo()) {
          optionals.set(1);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(2);
        }
        if (struct.isSetUserBo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCourseTemplateBo()) {
          struct.courseTemplateBo.write(oprot);
        }
        if (struct.isSetCommentCourseTemplateRejectBo()) {
          struct.commentCourseTemplateRejectBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rejectCourseTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.courseTemplateBo.read(iprot);
          struct.setCourseTemplateBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.commentCourseTemplateRejectBo = new com.ishangke.edunav.commoncontract.model.CommentCourseTemplateRejectBo();
          struct.commentCourseTemplateRejectBo.read(iprot);
          struct.setCommentCourseTemplateRejectBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class rejectCourseTemplate_result implements org.apache.thrift.TBase<rejectCourseTemplate_result, rejectCourseTemplate_result._Fields>, java.io.Serializable, Cloneable, Comparable<rejectCourseTemplate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rejectCourseTemplate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rejectCourseTemplate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rejectCourseTemplate_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rejectCourseTemplate_result.class, metaDataMap);
    }

    public rejectCourseTemplate_result() {
    }

    public rejectCourseTemplate_result(
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rejectCourseTemplate_result(rejectCourseTemplate_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public rejectCourseTemplate_result deepCopy() {
      return new rejectCourseTemplate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getSuccess() {
      return this.success;
    }

    public rejectCourseTemplate_result setSuccess(com.ishangke.edunav.commoncontract.model.CourseTemplateBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public rejectCourseTemplate_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rejectCourseTemplate_result)
        return this.equals((rejectCourseTemplate_result)that);
      return false;
    }

    public boolean equals(rejectCourseTemplate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(rejectCourseTemplate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rejectCourseTemplate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rejectCourseTemplate_resultStandardSchemeFactory implements SchemeFactory {
      public rejectCourseTemplate_resultStandardScheme getScheme() {
        return new rejectCourseTemplate_resultStandardScheme();
      }
    }

    private static class rejectCourseTemplate_resultStandardScheme extends StandardScheme<rejectCourseTemplate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rejectCourseTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rejectCourseTemplate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rejectCourseTemplate_resultTupleSchemeFactory implements SchemeFactory {
      public rejectCourseTemplate_resultTupleScheme getScheme() {
        return new rejectCourseTemplate_resultTupleScheme();
      }
    }

    private static class rejectCourseTemplate_resultTupleScheme extends TupleScheme<rejectCourseTemplate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rejectCourseTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rejectCourseTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class cancelCourseTemplate_args implements org.apache.thrift.TBase<cancelCourseTemplate_args, cancelCourseTemplate_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelCourseTemplate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelCourseTemplate_args");

    private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelCourseTemplate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelCourseTemplate_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_TEMPLATE_BO((short)1, "courseTemplateBo"),
      PARTNER_BO((short)2, "partnerBo"),
      USER_BO((short)3, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_TEMPLATE_BO
            return COURSE_TEMPLATE_BO;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_TEMPLATE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelCourseTemplate_args.class, metaDataMap);
    }

    public cancelCourseTemplate_args() {
    }

    public cancelCourseTemplate_args(
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseTemplateBo = courseTemplateBo;
      this.partnerBo = partnerBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelCourseTemplate_args(cancelCourseTemplate_args other) {
      if (other.isSetCourseTemplateBo()) {
        this.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.courseTemplateBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public cancelCourseTemplate_args deepCopy() {
      return new cancelCourseTemplate_args(this);
    }

    @Override
    public void clear() {
      this.courseTemplateBo = null;
      this.partnerBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getCourseTemplateBo() {
      return this.courseTemplateBo;
    }

    public cancelCourseTemplate_args setCourseTemplateBo(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo) {
      this.courseTemplateBo = courseTemplateBo;
      return this;
    }

    public void unsetCourseTemplateBo() {
      this.courseTemplateBo = null;
    }

    /** Returns true if field courseTemplateBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseTemplateBo() {
      return this.courseTemplateBo != null;
    }

    public void setCourseTemplateBoIsSet(boolean value) {
      if (!value) {
        this.courseTemplateBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public cancelCourseTemplate_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public cancelCourseTemplate_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        if (value == null) {
          unsetCourseTemplateBo();
        } else {
          setCourseTemplateBo((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        return getCourseTemplateBo();

      case PARTNER_BO:
        return getPartnerBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_TEMPLATE_BO:
        return isSetCourseTemplateBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelCourseTemplate_args)
        return this.equals((cancelCourseTemplate_args)that);
      return false;
    }

    public boolean equals(cancelCourseTemplate_args that) {
      if (that == null)
        return false;

      boolean this_present_courseTemplateBo = true && this.isSetCourseTemplateBo();
      boolean that_present_courseTemplateBo = true && that.isSetCourseTemplateBo();
      if (this_present_courseTemplateBo || that_present_courseTemplateBo) {
        if (!(this_present_courseTemplateBo && that_present_courseTemplateBo))
          return false;
        if (!this.courseTemplateBo.equals(that.courseTemplateBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseTemplateBo = true && (isSetCourseTemplateBo());
      builder.append(present_courseTemplateBo);
      if (present_courseTemplateBo)
        builder.append(courseTemplateBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(cancelCourseTemplate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseTemplateBo()).compareTo(other.isSetCourseTemplateBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseTemplateBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateBo, other.courseTemplateBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelCourseTemplate_args(");
      boolean first = true;

      sb.append("courseTemplateBo:");
      if (this.courseTemplateBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseTemplateBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseTemplateBo != null) {
        courseTemplateBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelCourseTemplate_argsStandardSchemeFactory implements SchemeFactory {
      public cancelCourseTemplate_argsStandardScheme getScheme() {
        return new cancelCourseTemplate_argsStandardScheme();
      }
    }

    private static class cancelCourseTemplate_argsStandardScheme extends StandardScheme<cancelCourseTemplate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelCourseTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_TEMPLATE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.courseTemplateBo.read(iprot);
                struct.setCourseTemplateBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelCourseTemplate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseTemplateBo != null) {
          oprot.writeFieldBegin(COURSE_TEMPLATE_BO_FIELD_DESC);
          struct.courseTemplateBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelCourseTemplate_argsTupleSchemeFactory implements SchemeFactory {
      public cancelCourseTemplate_argsTupleScheme getScheme() {
        return new cancelCourseTemplate_argsTupleScheme();
      }
    }

    private static class cancelCourseTemplate_argsTupleScheme extends TupleScheme<cancelCourseTemplate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelCourseTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseTemplateBo()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCourseTemplateBo()) {
          struct.courseTemplateBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelCourseTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.courseTemplateBo.read(iprot);
          struct.setCourseTemplateBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class cancelCourseTemplate_result implements org.apache.thrift.TBase<cancelCourseTemplate_result, cancelCourseTemplate_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelCourseTemplate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelCourseTemplate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelCourseTemplate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelCourseTemplate_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelCourseTemplate_result.class, metaDataMap);
    }

    public cancelCourseTemplate_result() {
    }

    public cancelCourseTemplate_result(
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelCourseTemplate_result(cancelCourseTemplate_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public cancelCourseTemplate_result deepCopy() {
      return new cancelCourseTemplate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getSuccess() {
      return this.success;
    }

    public cancelCourseTemplate_result setSuccess(com.ishangke.edunav.commoncontract.model.CourseTemplateBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public cancelCourseTemplate_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelCourseTemplate_result)
        return this.equals((cancelCourseTemplate_result)that);
      return false;
    }

    public boolean equals(cancelCourseTemplate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(cancelCourseTemplate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelCourseTemplate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelCourseTemplate_resultStandardSchemeFactory implements SchemeFactory {
      public cancelCourseTemplate_resultStandardScheme getScheme() {
        return new cancelCourseTemplate_resultStandardScheme();
      }
    }

    private static class cancelCourseTemplate_resultStandardScheme extends StandardScheme<cancelCourseTemplate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelCourseTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelCourseTemplate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelCourseTemplate_resultTupleSchemeFactory implements SchemeFactory {
      public cancelCourseTemplate_resultTupleScheme getScheme() {
        return new cancelCourseTemplate_resultTupleScheme();
      }
    }

    private static class cancelCourseTemplate_resultTupleScheme extends TupleScheme<cancelCourseTemplate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelCourseTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelCourseTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class resubmitCourserTemplate_args implements org.apache.thrift.TBase<resubmitCourserTemplate_args, resubmitCourserTemplate_args._Fields>, java.io.Serializable, Cloneable, Comparable<resubmitCourserTemplate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resubmitCourserTemplate_args");

    private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resubmitCourserTemplate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resubmitCourserTemplate_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_TEMPLATE_BO((short)1, "courseTemplateBo"),
      PARTNER_BO((short)2, "partnerBo"),
      USER_BO((short)3, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_TEMPLATE_BO
            return COURSE_TEMPLATE_BO;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_TEMPLATE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resubmitCourserTemplate_args.class, metaDataMap);
    }

    public resubmitCourserTemplate_args() {
    }

    public resubmitCourserTemplate_args(
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseTemplateBo = courseTemplateBo;
      this.partnerBo = partnerBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resubmitCourserTemplate_args(resubmitCourserTemplate_args other) {
      if (other.isSetCourseTemplateBo()) {
        this.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.courseTemplateBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public resubmitCourserTemplate_args deepCopy() {
      return new resubmitCourserTemplate_args(this);
    }

    @Override
    public void clear() {
      this.courseTemplateBo = null;
      this.partnerBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getCourseTemplateBo() {
      return this.courseTemplateBo;
    }

    public resubmitCourserTemplate_args setCourseTemplateBo(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo) {
      this.courseTemplateBo = courseTemplateBo;
      return this;
    }

    public void unsetCourseTemplateBo() {
      this.courseTemplateBo = null;
    }

    /** Returns true if field courseTemplateBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseTemplateBo() {
      return this.courseTemplateBo != null;
    }

    public void setCourseTemplateBoIsSet(boolean value) {
      if (!value) {
        this.courseTemplateBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public resubmitCourserTemplate_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public resubmitCourserTemplate_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        if (value == null) {
          unsetCourseTemplateBo();
        } else {
          setCourseTemplateBo((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        return getCourseTemplateBo();

      case PARTNER_BO:
        return getPartnerBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_TEMPLATE_BO:
        return isSetCourseTemplateBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resubmitCourserTemplate_args)
        return this.equals((resubmitCourserTemplate_args)that);
      return false;
    }

    public boolean equals(resubmitCourserTemplate_args that) {
      if (that == null)
        return false;

      boolean this_present_courseTemplateBo = true && this.isSetCourseTemplateBo();
      boolean that_present_courseTemplateBo = true && that.isSetCourseTemplateBo();
      if (this_present_courseTemplateBo || that_present_courseTemplateBo) {
        if (!(this_present_courseTemplateBo && that_present_courseTemplateBo))
          return false;
        if (!this.courseTemplateBo.equals(that.courseTemplateBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseTemplateBo = true && (isSetCourseTemplateBo());
      builder.append(present_courseTemplateBo);
      if (present_courseTemplateBo)
        builder.append(courseTemplateBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(resubmitCourserTemplate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseTemplateBo()).compareTo(other.isSetCourseTemplateBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseTemplateBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateBo, other.courseTemplateBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resubmitCourserTemplate_args(");
      boolean first = true;

      sb.append("courseTemplateBo:");
      if (this.courseTemplateBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseTemplateBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseTemplateBo != null) {
        courseTemplateBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resubmitCourserTemplate_argsStandardSchemeFactory implements SchemeFactory {
      public resubmitCourserTemplate_argsStandardScheme getScheme() {
        return new resubmitCourserTemplate_argsStandardScheme();
      }
    }

    private static class resubmitCourserTemplate_argsStandardScheme extends StandardScheme<resubmitCourserTemplate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resubmitCourserTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_TEMPLATE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.courseTemplateBo.read(iprot);
                struct.setCourseTemplateBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resubmitCourserTemplate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseTemplateBo != null) {
          oprot.writeFieldBegin(COURSE_TEMPLATE_BO_FIELD_DESC);
          struct.courseTemplateBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resubmitCourserTemplate_argsTupleSchemeFactory implements SchemeFactory {
      public resubmitCourserTemplate_argsTupleScheme getScheme() {
        return new resubmitCourserTemplate_argsTupleScheme();
      }
    }

    private static class resubmitCourserTemplate_argsTupleScheme extends TupleScheme<resubmitCourserTemplate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resubmitCourserTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseTemplateBo()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCourseTemplateBo()) {
          struct.courseTemplateBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resubmitCourserTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.courseTemplateBo.read(iprot);
          struct.setCourseTemplateBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class resubmitCourserTemplate_result implements org.apache.thrift.TBase<resubmitCourserTemplate_result, resubmitCourserTemplate_result._Fields>, java.io.Serializable, Cloneable, Comparable<resubmitCourserTemplate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resubmitCourserTemplate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resubmitCourserTemplate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resubmitCourserTemplate_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resubmitCourserTemplate_result.class, metaDataMap);
    }

    public resubmitCourserTemplate_result() {
    }

    public resubmitCourserTemplate_result(
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resubmitCourserTemplate_result(resubmitCourserTemplate_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public resubmitCourserTemplate_result deepCopy() {
      return new resubmitCourserTemplate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getSuccess() {
      return this.success;
    }

    public resubmitCourserTemplate_result setSuccess(com.ishangke.edunav.commoncontract.model.CourseTemplateBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public resubmitCourserTemplate_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resubmitCourserTemplate_result)
        return this.equals((resubmitCourserTemplate_result)that);
      return false;
    }

    public boolean equals(resubmitCourserTemplate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(resubmitCourserTemplate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resubmitCourserTemplate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resubmitCourserTemplate_resultStandardSchemeFactory implements SchemeFactory {
      public resubmitCourserTemplate_resultStandardScheme getScheme() {
        return new resubmitCourserTemplate_resultStandardScheme();
      }
    }

    private static class resubmitCourserTemplate_resultStandardScheme extends StandardScheme<resubmitCourserTemplate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resubmitCourserTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resubmitCourserTemplate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resubmitCourserTemplate_resultTupleSchemeFactory implements SchemeFactory {
      public resubmitCourserTemplate_resultTupleScheme getScheme() {
        return new resubmitCourserTemplate_resultTupleScheme();
      }
    }

    private static class resubmitCourserTemplate_resultTupleScheme extends TupleScheme<resubmitCourserTemplate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resubmitCourserTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resubmitCourserTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class deleteCourseTemplate_args implements org.apache.thrift.TBase<deleteCourseTemplate_args, deleteCourseTemplate_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCourseTemplate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCourseTemplate_args");

    private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteCourseTemplate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteCourseTemplate_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_TEMPLATE_BO((short)1, "courseTemplateBo"),
      PARTNER_BO((short)2, "partnerBo"),
      USER_BO((short)3, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_TEMPLATE_BO
            return COURSE_TEMPLATE_BO;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_TEMPLATE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCourseTemplate_args.class, metaDataMap);
    }

    public deleteCourseTemplate_args() {
    }

    public deleteCourseTemplate_args(
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseTemplateBo = courseTemplateBo;
      this.partnerBo = partnerBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCourseTemplate_args(deleteCourseTemplate_args other) {
      if (other.isSetCourseTemplateBo()) {
        this.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.courseTemplateBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public deleteCourseTemplate_args deepCopy() {
      return new deleteCourseTemplate_args(this);
    }

    @Override
    public void clear() {
      this.courseTemplateBo = null;
      this.partnerBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getCourseTemplateBo() {
      return this.courseTemplateBo;
    }

    public deleteCourseTemplate_args setCourseTemplateBo(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo) {
      this.courseTemplateBo = courseTemplateBo;
      return this;
    }

    public void unsetCourseTemplateBo() {
      this.courseTemplateBo = null;
    }

    /** Returns true if field courseTemplateBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseTemplateBo() {
      return this.courseTemplateBo != null;
    }

    public void setCourseTemplateBoIsSet(boolean value) {
      if (!value) {
        this.courseTemplateBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public deleteCourseTemplate_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public deleteCourseTemplate_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        if (value == null) {
          unsetCourseTemplateBo();
        } else {
          setCourseTemplateBo((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        return getCourseTemplateBo();

      case PARTNER_BO:
        return getPartnerBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_TEMPLATE_BO:
        return isSetCourseTemplateBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCourseTemplate_args)
        return this.equals((deleteCourseTemplate_args)that);
      return false;
    }

    public boolean equals(deleteCourseTemplate_args that) {
      if (that == null)
        return false;

      boolean this_present_courseTemplateBo = true && this.isSetCourseTemplateBo();
      boolean that_present_courseTemplateBo = true && that.isSetCourseTemplateBo();
      if (this_present_courseTemplateBo || that_present_courseTemplateBo) {
        if (!(this_present_courseTemplateBo && that_present_courseTemplateBo))
          return false;
        if (!this.courseTemplateBo.equals(that.courseTemplateBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseTemplateBo = true && (isSetCourseTemplateBo());
      builder.append(present_courseTemplateBo);
      if (present_courseTemplateBo)
        builder.append(courseTemplateBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteCourseTemplate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseTemplateBo()).compareTo(other.isSetCourseTemplateBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseTemplateBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateBo, other.courseTemplateBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteCourseTemplate_args(");
      boolean first = true;

      sb.append("courseTemplateBo:");
      if (this.courseTemplateBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseTemplateBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseTemplateBo != null) {
        courseTemplateBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCourseTemplate_argsStandardSchemeFactory implements SchemeFactory {
      public deleteCourseTemplate_argsStandardScheme getScheme() {
        return new deleteCourseTemplate_argsStandardScheme();
      }
    }

    private static class deleteCourseTemplate_argsStandardScheme extends StandardScheme<deleteCourseTemplate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCourseTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_TEMPLATE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.courseTemplateBo.read(iprot);
                struct.setCourseTemplateBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCourseTemplate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseTemplateBo != null) {
          oprot.writeFieldBegin(COURSE_TEMPLATE_BO_FIELD_DESC);
          struct.courseTemplateBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCourseTemplate_argsTupleSchemeFactory implements SchemeFactory {
      public deleteCourseTemplate_argsTupleScheme getScheme() {
        return new deleteCourseTemplate_argsTupleScheme();
      }
    }

    private static class deleteCourseTemplate_argsTupleScheme extends TupleScheme<deleteCourseTemplate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCourseTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseTemplateBo()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCourseTemplateBo()) {
          struct.courseTemplateBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCourseTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.courseTemplateBo.read(iprot);
          struct.setCourseTemplateBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class deleteCourseTemplate_result implements org.apache.thrift.TBase<deleteCourseTemplate_result, deleteCourseTemplate_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCourseTemplate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCourseTemplate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteCourseTemplate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteCourseTemplate_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCourseTemplate_result.class, metaDataMap);
    }

    public deleteCourseTemplate_result() {
    }

    public deleteCourseTemplate_result(
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCourseTemplate_result(deleteCourseTemplate_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public deleteCourseTemplate_result deepCopy() {
      return new deleteCourseTemplate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getSuccess() {
      return this.success;
    }

    public deleteCourseTemplate_result setSuccess(com.ishangke.edunav.commoncontract.model.CourseTemplateBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public deleteCourseTemplate_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCourseTemplate_result)
        return this.equals((deleteCourseTemplate_result)that);
      return false;
    }

    public boolean equals(deleteCourseTemplate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteCourseTemplate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteCourseTemplate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCourseTemplate_resultStandardSchemeFactory implements SchemeFactory {
      public deleteCourseTemplate_resultStandardScheme getScheme() {
        return new deleteCourseTemplate_resultStandardScheme();
      }
    }

    private static class deleteCourseTemplate_resultStandardScheme extends StandardScheme<deleteCourseTemplate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCourseTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCourseTemplate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCourseTemplate_resultTupleSchemeFactory implements SchemeFactory {
      public deleteCourseTemplate_resultTupleScheme getScheme() {
        return new deleteCourseTemplate_resultTupleScheme();
      }
    }

    private static class deleteCourseTemplate_resultTupleScheme extends TupleScheme<deleteCourseTemplate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCourseTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCourseTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class updateCourseTemplate_args implements org.apache.thrift.TBase<updateCourseTemplate_args, updateCourseTemplate_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCourseTemplate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCourseTemplate_args");

    private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCourseTemplate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCourseTemplate_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_TEMPLATE_BO((short)1, "courseTemplateBo"),
      PARTNER_BO((short)2, "partnerBo"),
      USER_BO((short)3, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_TEMPLATE_BO
            return COURSE_TEMPLATE_BO;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_TEMPLATE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCourseTemplate_args.class, metaDataMap);
    }

    public updateCourseTemplate_args() {
    }

    public updateCourseTemplate_args(
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseTemplateBo = courseTemplateBo;
      this.partnerBo = partnerBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCourseTemplate_args(updateCourseTemplate_args other) {
      if (other.isSetCourseTemplateBo()) {
        this.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.courseTemplateBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public updateCourseTemplate_args deepCopy() {
      return new updateCourseTemplate_args(this);
    }

    @Override
    public void clear() {
      this.courseTemplateBo = null;
      this.partnerBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getCourseTemplateBo() {
      return this.courseTemplateBo;
    }

    public updateCourseTemplate_args setCourseTemplateBo(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo) {
      this.courseTemplateBo = courseTemplateBo;
      return this;
    }

    public void unsetCourseTemplateBo() {
      this.courseTemplateBo = null;
    }

    /** Returns true if field courseTemplateBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseTemplateBo() {
      return this.courseTemplateBo != null;
    }

    public void setCourseTemplateBoIsSet(boolean value) {
      if (!value) {
        this.courseTemplateBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public updateCourseTemplate_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public updateCourseTemplate_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        if (value == null) {
          unsetCourseTemplateBo();
        } else {
          setCourseTemplateBo((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        return getCourseTemplateBo();

      case PARTNER_BO:
        return getPartnerBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_TEMPLATE_BO:
        return isSetCourseTemplateBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCourseTemplate_args)
        return this.equals((updateCourseTemplate_args)that);
      return false;
    }

    public boolean equals(updateCourseTemplate_args that) {
      if (that == null)
        return false;

      boolean this_present_courseTemplateBo = true && this.isSetCourseTemplateBo();
      boolean that_present_courseTemplateBo = true && that.isSetCourseTemplateBo();
      if (this_present_courseTemplateBo || that_present_courseTemplateBo) {
        if (!(this_present_courseTemplateBo && that_present_courseTemplateBo))
          return false;
        if (!this.courseTemplateBo.equals(that.courseTemplateBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseTemplateBo = true && (isSetCourseTemplateBo());
      builder.append(present_courseTemplateBo);
      if (present_courseTemplateBo)
        builder.append(courseTemplateBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(updateCourseTemplate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseTemplateBo()).compareTo(other.isSetCourseTemplateBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseTemplateBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateBo, other.courseTemplateBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCourseTemplate_args(");
      boolean first = true;

      sb.append("courseTemplateBo:");
      if (this.courseTemplateBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseTemplateBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseTemplateBo != null) {
        courseTemplateBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCourseTemplate_argsStandardSchemeFactory implements SchemeFactory {
      public updateCourseTemplate_argsStandardScheme getScheme() {
        return new updateCourseTemplate_argsStandardScheme();
      }
    }

    private static class updateCourseTemplate_argsStandardScheme extends StandardScheme<updateCourseTemplate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCourseTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_TEMPLATE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.courseTemplateBo.read(iprot);
                struct.setCourseTemplateBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCourseTemplate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseTemplateBo != null) {
          oprot.writeFieldBegin(COURSE_TEMPLATE_BO_FIELD_DESC);
          struct.courseTemplateBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCourseTemplate_argsTupleSchemeFactory implements SchemeFactory {
      public updateCourseTemplate_argsTupleScheme getScheme() {
        return new updateCourseTemplate_argsTupleScheme();
      }
    }

    private static class updateCourseTemplate_argsTupleScheme extends TupleScheme<updateCourseTemplate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCourseTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseTemplateBo()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetUserBo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCourseTemplateBo()) {
          struct.courseTemplateBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCourseTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.courseTemplateBo.read(iprot);
          struct.setCourseTemplateBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class updateCourseTemplate_result implements org.apache.thrift.TBase<updateCourseTemplate_result, updateCourseTemplate_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCourseTemplate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCourseTemplate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCourseTemplate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCourseTemplate_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCourseTemplate_result.class, metaDataMap);
    }

    public updateCourseTemplate_result() {
    }

    public updateCourseTemplate_result(
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCourseTemplate_result(updateCourseTemplate_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public updateCourseTemplate_result deepCopy() {
      return new updateCourseTemplate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getSuccess() {
      return this.success;
    }

    public updateCourseTemplate_result setSuccess(com.ishangke.edunav.commoncontract.model.CourseTemplateBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public updateCourseTemplate_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCourseTemplate_result)
        return this.equals((updateCourseTemplate_result)that);
      return false;
    }

    public boolean equals(updateCourseTemplate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(updateCourseTemplate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCourseTemplate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCourseTemplate_resultStandardSchemeFactory implements SchemeFactory {
      public updateCourseTemplate_resultStandardScheme getScheme() {
        return new updateCourseTemplate_resultStandardScheme();
      }
    }

    private static class updateCourseTemplate_resultStandardScheme extends StandardScheme<updateCourseTemplate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCourseTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCourseTemplate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCourseTemplate_resultTupleSchemeFactory implements SchemeFactory {
      public updateCourseTemplate_resultTupleScheme getScheme() {
        return new updateCourseTemplate_resultTupleScheme();
      }
    }

    private static class updateCourseTemplate_resultTupleScheme extends TupleScheme<updateCourseTemplate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCourseTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCourseTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class queryCourseTemplate_args implements org.apache.thrift.TBase<queryCourseTemplate_args, queryCourseTemplate_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCourseTemplate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCourseTemplate_args");

    private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField PAGINATION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("paginationBo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCourseTemplate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCourseTemplate_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_TEMPLATE_BO((short)1, "courseTemplateBo"),
      USER_BO((short)2, "userBo"),
      PARTNER_BO((short)3, "partnerBo"),
      PAGINATION_BO((short)4, "paginationBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_TEMPLATE_BO
            return COURSE_TEMPLATE_BO;
          case 2: // USER_BO
            return USER_BO;
          case 3: // PARTNER_BO
            return PARTNER_BO;
          case 4: // PAGINATION_BO
            return PAGINATION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_TEMPLATE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.PAGINATION_BO, new org.apache.thrift.meta_data.FieldMetaData("paginationBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PaginationBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCourseTemplate_args.class, metaDataMap);
    }

    public queryCourseTemplate_args() {
    }

    public queryCourseTemplate_args(
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo)
    {
      this();
      this.courseTemplateBo = courseTemplateBo;
      this.userBo = userBo;
      this.partnerBo = partnerBo;
      this.paginationBo = paginationBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCourseTemplate_args(queryCourseTemplate_args other) {
      if (other.isSetCourseTemplateBo()) {
        this.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.courseTemplateBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetPaginationBo()) {
        this.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo(other.paginationBo);
      }
    }

    public queryCourseTemplate_args deepCopy() {
      return new queryCourseTemplate_args(this);
    }

    @Override
    public void clear() {
      this.courseTemplateBo = null;
      this.userBo = null;
      this.partnerBo = null;
      this.paginationBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getCourseTemplateBo() {
      return this.courseTemplateBo;
    }

    public queryCourseTemplate_args setCourseTemplateBo(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo) {
      this.courseTemplateBo = courseTemplateBo;
      return this;
    }

    public void unsetCourseTemplateBo() {
      this.courseTemplateBo = null;
    }

    /** Returns true if field courseTemplateBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseTemplateBo() {
      return this.courseTemplateBo != null;
    }

    public void setCourseTemplateBoIsSet(boolean value) {
      if (!value) {
        this.courseTemplateBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public queryCourseTemplate_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public queryCourseTemplate_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PaginationBo getPaginationBo() {
      return this.paginationBo;
    }

    public queryCourseTemplate_args setPaginationBo(com.ishangke.edunav.commoncontract.model.PaginationBo paginationBo) {
      this.paginationBo = paginationBo;
      return this;
    }

    public void unsetPaginationBo() {
      this.paginationBo = null;
    }

    /** Returns true if field paginationBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPaginationBo() {
      return this.paginationBo != null;
    }

    public void setPaginationBoIsSet(boolean value) {
      if (!value) {
        this.paginationBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        if (value == null) {
          unsetCourseTemplateBo();
        } else {
          setCourseTemplateBo((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case PAGINATION_BO:
        if (value == null) {
          unsetPaginationBo();
        } else {
          setPaginationBo((com.ishangke.edunav.commoncontract.model.PaginationBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        return getCourseTemplateBo();

      case USER_BO:
        return getUserBo();

      case PARTNER_BO:
        return getPartnerBo();

      case PAGINATION_BO:
        return getPaginationBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_TEMPLATE_BO:
        return isSetCourseTemplateBo();
      case USER_BO:
        return isSetUserBo();
      case PARTNER_BO:
        return isSetPartnerBo();
      case PAGINATION_BO:
        return isSetPaginationBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCourseTemplate_args)
        return this.equals((queryCourseTemplate_args)that);
      return false;
    }

    public boolean equals(queryCourseTemplate_args that) {
      if (that == null)
        return false;

      boolean this_present_courseTemplateBo = true && this.isSetCourseTemplateBo();
      boolean that_present_courseTemplateBo = true && that.isSetCourseTemplateBo();
      if (this_present_courseTemplateBo || that_present_courseTemplateBo) {
        if (!(this_present_courseTemplateBo && that_present_courseTemplateBo))
          return false;
        if (!this.courseTemplateBo.equals(that.courseTemplateBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_paginationBo = true && this.isSetPaginationBo();
      boolean that_present_paginationBo = true && that.isSetPaginationBo();
      if (this_present_paginationBo || that_present_paginationBo) {
        if (!(this_present_paginationBo && that_present_paginationBo))
          return false;
        if (!this.paginationBo.equals(that.paginationBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseTemplateBo = true && (isSetCourseTemplateBo());
      builder.append(present_courseTemplateBo);
      if (present_courseTemplateBo)
        builder.append(courseTemplateBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_paginationBo = true && (isSetPaginationBo());
      builder.append(present_paginationBo);
      if (present_paginationBo)
        builder.append(paginationBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(queryCourseTemplate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseTemplateBo()).compareTo(other.isSetCourseTemplateBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseTemplateBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateBo, other.courseTemplateBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPaginationBo()).compareTo(other.isSetPaginationBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaginationBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paginationBo, other.paginationBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCourseTemplate_args(");
      boolean first = true;

      sb.append("courseTemplateBo:");
      if (this.courseTemplateBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseTemplateBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paginationBo:");
      if (this.paginationBo == null) {
        sb.append("null");
      } else {
        sb.append(this.paginationBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseTemplateBo != null) {
        courseTemplateBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (paginationBo != null) {
        paginationBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCourseTemplate_argsStandardSchemeFactory implements SchemeFactory {
      public queryCourseTemplate_argsStandardScheme getScheme() {
        return new queryCourseTemplate_argsStandardScheme();
      }
    }

    private static class queryCourseTemplate_argsStandardScheme extends StandardScheme<queryCourseTemplate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCourseTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_TEMPLATE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.courseTemplateBo.read(iprot);
                struct.setCourseTemplateBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGINATION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo();
                struct.paginationBo.read(iprot);
                struct.setPaginationBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCourseTemplate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseTemplateBo != null) {
          oprot.writeFieldBegin(COURSE_TEMPLATE_BO_FIELD_DESC);
          struct.courseTemplateBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.paginationBo != null) {
          oprot.writeFieldBegin(PAGINATION_BO_FIELD_DESC);
          struct.paginationBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCourseTemplate_argsTupleSchemeFactory implements SchemeFactory {
      public queryCourseTemplate_argsTupleScheme getScheme() {
        return new queryCourseTemplate_argsTupleScheme();
      }
    }

    private static class queryCourseTemplate_argsTupleScheme extends TupleScheme<queryCourseTemplate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCourseTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseTemplateBo()) {
          optionals.set(0);
        }
        if (struct.isSetUserBo()) {
          optionals.set(1);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(2);
        }
        if (struct.isSetPaginationBo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCourseTemplateBo()) {
          struct.courseTemplateBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetPaginationBo()) {
          struct.paginationBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCourseTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.courseTemplateBo.read(iprot);
          struct.setCourseTemplateBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.paginationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo();
          struct.paginationBo.read(iprot);
          struct.setPaginationBoIsSet(true);
        }
      }
    }

  }

  public static class queryCourseTemplate_result implements org.apache.thrift.TBase<queryCourseTemplate_result, queryCourseTemplate_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCourseTemplate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCourseTemplate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCourseTemplate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCourseTemplate_resultTupleSchemeFactory());
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class))));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCourseTemplate_result.class, metaDataMap);
    }

    public queryCourseTemplate_result() {
    }

    public queryCourseTemplate_result(
      List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCourseTemplate_result(queryCourseTemplate_result other) {
      if (other.isSetSuccess()) {
        List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> __this__success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>(other.success.size());
        for (com.ishangke.edunav.commoncontract.model.CourseTemplateBo other_element : other.success) {
          __this__success.add(new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public queryCourseTemplate_result deepCopy() {
      return new queryCourseTemplate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.ishangke.edunav.commoncontract.model.CourseTemplateBo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>();
      }
      this.success.add(elem);
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> getSuccess() {
      return this.success;
    }

    public queryCourseTemplate_result setSuccess(List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public queryCourseTemplate_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCourseTemplate_result)
        return this.equals((queryCourseTemplate_result)that);
      return false;
    }

    public boolean equals(queryCourseTemplate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(queryCourseTemplate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCourseTemplate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCourseTemplate_resultStandardSchemeFactory implements SchemeFactory {
      public queryCourseTemplate_resultStandardScheme getScheme() {
        return new queryCourseTemplate_resultStandardScheme();
      }
    }

    private static class queryCourseTemplate_resultStandardScheme extends StandardScheme<queryCourseTemplate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCourseTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    com.ishangke.edunav.commoncontract.model.CourseTemplateBo _elem2;
                    _elem2 = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCourseTemplate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.ishangke.edunav.commoncontract.model.CourseTemplateBo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCourseTemplate_resultTupleSchemeFactory implements SchemeFactory {
      public queryCourseTemplate_resultTupleScheme getScheme() {
        return new queryCourseTemplate_resultTupleScheme();
      }
    }

    private static class queryCourseTemplate_resultTupleScheme extends TupleScheme<queryCourseTemplate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCourseTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.ishangke.edunav.commoncontract.model.CourseTemplateBo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCourseTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              com.ishangke.edunav.commoncontract.model.CourseTemplateBo _elem7;
              _elem7 = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class queryCourseTemplateById_args implements org.apache.thrift.TBase<queryCourseTemplateById_args, queryCourseTemplateById_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCourseTemplateById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCourseTemplateById_args");

    private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCourseTemplateById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCourseTemplateById_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_TEMPLATE_BO((short)1, "courseTemplateBo"),
      USER_BO((short)2, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_TEMPLATE_BO
            return COURSE_TEMPLATE_BO;
          case 2: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_TEMPLATE_BO, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class)));
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCourseTemplateById_args.class, metaDataMap);
    }

    public queryCourseTemplateById_args() {
    }

    public queryCourseTemplateById_args(
      com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo,
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.courseTemplateBo = courseTemplateBo;
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCourseTemplateById_args(queryCourseTemplateById_args other) {
      if (other.isSetCourseTemplateBo()) {
        this.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other.courseTemplateBo);
      }
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public queryCourseTemplateById_args deepCopy() {
      return new queryCourseTemplateById_args(this);
    }

    @Override
    public void clear() {
      this.courseTemplateBo = null;
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.CourseTemplateBo getCourseTemplateBo() {
      return this.courseTemplateBo;
    }

    public queryCourseTemplateById_args setCourseTemplateBo(com.ishangke.edunav.commoncontract.model.CourseTemplateBo courseTemplateBo) {
      this.courseTemplateBo = courseTemplateBo;
      return this;
    }

    public void unsetCourseTemplateBo() {
      this.courseTemplateBo = null;
    }

    /** Returns true if field courseTemplateBo is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseTemplateBo() {
      return this.courseTemplateBo != null;
    }

    public void setCourseTemplateBoIsSet(boolean value) {
      if (!value) {
        this.courseTemplateBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public queryCourseTemplateById_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        if (value == null) {
          unsetCourseTemplateBo();
        } else {
          setCourseTemplateBo((com.ishangke.edunav.commoncontract.model.CourseTemplateBo)value);
        }
        break;

      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_TEMPLATE_BO:
        return getCourseTemplateBo();

      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_TEMPLATE_BO:
        return isSetCourseTemplateBo();
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCourseTemplateById_args)
        return this.equals((queryCourseTemplateById_args)that);
      return false;
    }

    public boolean equals(queryCourseTemplateById_args that) {
      if (that == null)
        return false;

      boolean this_present_courseTemplateBo = true && this.isSetCourseTemplateBo();
      boolean that_present_courseTemplateBo = true && that.isSetCourseTemplateBo();
      if (this_present_courseTemplateBo || that_present_courseTemplateBo) {
        if (!(this_present_courseTemplateBo && that_present_courseTemplateBo))
          return false;
        if (!this.courseTemplateBo.equals(that.courseTemplateBo))
          return false;
      }

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_courseTemplateBo = true && (isSetCourseTemplateBo());
      builder.append(present_courseTemplateBo);
      if (present_courseTemplateBo)
        builder.append(courseTemplateBo);

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(queryCourseTemplateById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseTemplateBo()).compareTo(other.isSetCourseTemplateBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseTemplateBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateBo, other.courseTemplateBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCourseTemplateById_args(");
      boolean first = true;

      sb.append("courseTemplateBo:");
      if (this.courseTemplateBo == null) {
        sb.append("null");
      } else {
        sb.append(this.courseTemplateBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (courseTemplateBo != null) {
        courseTemplateBo.validate();
      }
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCourseTemplateById_argsStandardSchemeFactory implements SchemeFactory {
      public queryCourseTemplateById_argsStandardScheme getScheme() {
        return new queryCourseTemplateById_argsStandardScheme();
      }
    }

    private static class queryCourseTemplateById_argsStandardScheme extends StandardScheme<queryCourseTemplateById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCourseTemplateById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_TEMPLATE_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                struct.courseTemplateBo.read(iprot);
                struct.setCourseTemplateBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCourseTemplateById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseTemplateBo != null) {
          oprot.writeFieldBegin(COURSE_TEMPLATE_BO_FIELD_DESC);
          struct.courseTemplateBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCourseTemplateById_argsTupleSchemeFactory implements SchemeFactory {
      public queryCourseTemplateById_argsTupleScheme getScheme() {
        return new queryCourseTemplateById_argsTupleScheme();
      }
    }

    private static class queryCourseTemplateById_argsTupleScheme extends TupleScheme<queryCourseTemplateById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCourseTemplateById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseTemplateBo()) {
          optionals.set(0);
        }
        if (struct.isSetUserBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCourseTemplateBo()) {
          struct.courseTemplateBo.write(oprot);
        }
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCourseTemplateById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.courseTemplateBo = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
          struct.courseTemplateBo.read(iprot);
          struct.setCourseTemplateBoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class queryCourseTemplateById_result implements org.apache.thrift.TBase<queryCourseTemplateById_result, queryCourseTemplateById_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCourseTemplateById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCourseTemplateById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCourseTemplateById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCourseTemplateById_resultTupleSchemeFactory());
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.CourseTemplateBo.class))));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCourseTemplateById_result.class, metaDataMap);
    }

    public queryCourseTemplateById_result() {
    }

    public queryCourseTemplateById_result(
      List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCourseTemplateById_result(queryCourseTemplateById_result other) {
      if (other.isSetSuccess()) {
        List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> __this__success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>(other.success.size());
        for (com.ishangke.edunav.commoncontract.model.CourseTemplateBo other_element : other.success) {
          __this__success.add(new com.ishangke.edunav.commoncontract.model.CourseTemplateBo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public queryCourseTemplateById_result deepCopy() {
      return new queryCourseTemplateById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.ishangke.edunav.commoncontract.model.CourseTemplateBo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>();
      }
      this.success.add(elem);
    }

    public List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> getSuccess() {
      return this.success;
    }

    public queryCourseTemplateById_result setSuccess(List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public queryCourseTemplateById_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCourseTemplateById_result)
        return this.equals((queryCourseTemplateById_result)that);
      return false;
    }

    public boolean equals(queryCourseTemplateById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(queryCourseTemplateById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCourseTemplateById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCourseTemplateById_resultStandardSchemeFactory implements SchemeFactory {
      public queryCourseTemplateById_resultStandardScheme getScheme() {
        return new queryCourseTemplateById_resultStandardScheme();
      }
    }

    private static class queryCourseTemplateById_resultStandardScheme extends StandardScheme<queryCourseTemplateById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCourseTemplateById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    com.ishangke.edunav.commoncontract.model.CourseTemplateBo _elem10;
                    _elem10 = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCourseTemplateById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.ishangke.edunav.commoncontract.model.CourseTemplateBo _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCourseTemplateById_resultTupleSchemeFactory implements SchemeFactory {
      public queryCourseTemplateById_resultTupleScheme getScheme() {
        return new queryCourseTemplateById_resultTupleScheme();
      }
    }

    private static class queryCourseTemplateById_resultTupleScheme extends TupleScheme<queryCourseTemplateById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCourseTemplateById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.ishangke.edunav.commoncontract.model.CourseTemplateBo _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCourseTemplateById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.CourseTemplateBo>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              com.ishangke.edunav.commoncontract.model.CourseTemplateBo _elem15;
              _elem15 = new com.ishangke.edunav.commoncontract.model.CourseTemplateBo();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

}
