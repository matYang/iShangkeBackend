/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ishangke.edunav.commoncontract.model;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ApproveHistoryBo implements org.apache.thrift.TBase<ApproveHistoryBo, ApproveHistoryBo._Fields>, java.io.Serializable, Cloneable, Comparable<ApproveHistoryBo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApproveHistoryBo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ATTACHED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("attachedId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SUBMIT_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("submitUserId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField APPROVE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("approveUserId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PRE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("preStatus", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField POST_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("postStatus", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("idSet", org.apache.thrift.protocol.TType.SET, (short)10);
  private static final org.apache.thrift.protocol.TField TYPE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("typeSet", org.apache.thrift.protocol.TType.SET, (short)11);
  private static final org.apache.thrift.protocol.TField ATTACHED_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("attachedIdSet", org.apache.thrift.protocol.TType.SET, (short)12);
  private static final org.apache.thrift.protocol.TField SUBMIT_USER_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("submitUserIdSet", org.apache.thrift.protocol.TType.SET, (short)13);
  private static final org.apache.thrift.protocol.TField APPROVE_USER_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("approveUserIdSet", org.apache.thrift.protocol.TType.SET, (short)14);
  private static final org.apache.thrift.protocol.TField PRE_STATUS_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("preStatusSet", org.apache.thrift.protocol.TType.SET, (short)15);
  private static final org.apache.thrift.protocol.TField POST_STATUS_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("postStatusSet", org.apache.thrift.protocol.TType.SET, (short)16);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_START_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimeStart", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_END_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimeEnd", org.apache.thrift.protocol.TType.I64, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ApproveHistoryBoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ApproveHistoryBoTupleSchemeFactory());
  }

  public int id; // required
  public int type; // required
  public int attachedId; // required
  public int submitUserId; // required
  public int approveUserId; // required
  public int preStatus; // required
  public int postStatus; // required
  public String comment; // required
  public long createTime; // required
  public Set<Integer> idSet; // required
  public Set<Integer> typeSet; // required
  public Set<Integer> attachedIdSet; // required
  public Set<Integer> submitUserIdSet; // required
  public Set<Integer> approveUserIdSet; // required
  public Set<Integer> preStatusSet; // required
  public Set<Integer> postStatusSet; // required
  public long createTimeStart; // required
  public long createTimeEnd; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TYPE((short)2, "type"),
    ATTACHED_ID((short)3, "attachedId"),
    SUBMIT_USER_ID((short)4, "submitUserId"),
    APPROVE_USER_ID((short)5, "approveUserId"),
    PRE_STATUS((short)6, "preStatus"),
    POST_STATUS((short)7, "postStatus"),
    COMMENT((short)8, "comment"),
    CREATE_TIME((short)9, "createTime"),
    ID_SET((short)10, "idSet"),
    TYPE_SET((short)11, "typeSet"),
    ATTACHED_ID_SET((short)12, "attachedIdSet"),
    SUBMIT_USER_ID_SET((short)13, "submitUserIdSet"),
    APPROVE_USER_ID_SET((short)14, "approveUserIdSet"),
    PRE_STATUS_SET((short)15, "preStatusSet"),
    POST_STATUS_SET((short)16, "postStatusSet"),
    CREATE_TIME_START((short)17, "createTimeStart"),
    CREATE_TIME_END((short)18, "createTimeEnd");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TYPE
          return TYPE;
        case 3: // ATTACHED_ID
          return ATTACHED_ID;
        case 4: // SUBMIT_USER_ID
          return SUBMIT_USER_ID;
        case 5: // APPROVE_USER_ID
          return APPROVE_USER_ID;
        case 6: // PRE_STATUS
          return PRE_STATUS;
        case 7: // POST_STATUS
          return POST_STATUS;
        case 8: // COMMENT
          return COMMENT;
        case 9: // CREATE_TIME
          return CREATE_TIME;
        case 10: // ID_SET
          return ID_SET;
        case 11: // TYPE_SET
          return TYPE_SET;
        case 12: // ATTACHED_ID_SET
          return ATTACHED_ID_SET;
        case 13: // SUBMIT_USER_ID_SET
          return SUBMIT_USER_ID_SET;
        case 14: // APPROVE_USER_ID_SET
          return APPROVE_USER_ID_SET;
        case 15: // PRE_STATUS_SET
          return PRE_STATUS_SET;
        case 16: // POST_STATUS_SET
          return POST_STATUS_SET;
        case 17: // CREATE_TIME_START
          return CREATE_TIME_START;
        case 18: // CREATE_TIME_END
          return CREATE_TIME_END;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __ATTACHEDID_ISSET_ID = 2;
  private static final int __SUBMITUSERID_ISSET_ID = 3;
  private static final int __APPROVEUSERID_ISSET_ID = 4;
  private static final int __PRESTATUS_ISSET_ID = 5;
  private static final int __POSTSTATUS_ISSET_ID = 6;
  private static final int __CREATETIME_ISSET_ID = 7;
  private static final int __CREATETIMESTART_ISSET_ID = 8;
  private static final int __CREATETIMEEND_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ATTACHED_ID, new org.apache.thrift.meta_data.FieldMetaData("attachedId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUBMIT_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("submitUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPROVE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("approveUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("preStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POST_STATUS, new org.apache.thrift.meta_data.FieldMetaData("postStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ID_SET, new org.apache.thrift.meta_data.FieldMetaData("idSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.TYPE_SET, new org.apache.thrift.meta_data.FieldMetaData("typeSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ATTACHED_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("attachedIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SUBMIT_USER_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("submitUserIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.APPROVE_USER_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("approveUserIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PRE_STATUS_SET, new org.apache.thrift.meta_data.FieldMetaData("preStatusSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.POST_STATUS_SET, new org.apache.thrift.meta_data.FieldMetaData("postStatusSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CREATE_TIME_START, new org.apache.thrift.meta_data.FieldMetaData("createTimeStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME_END, new org.apache.thrift.meta_data.FieldMetaData("createTimeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApproveHistoryBo.class, metaDataMap);
  }

  public ApproveHistoryBo() {
  }

  public ApproveHistoryBo(
    int id,
    int type,
    int attachedId,
    int submitUserId,
    int approveUserId,
    int preStatus,
    int postStatus,
    String comment,
    long createTime,
    Set<Integer> idSet,
    Set<Integer> typeSet,
    Set<Integer> attachedIdSet,
    Set<Integer> submitUserIdSet,
    Set<Integer> approveUserIdSet,
    Set<Integer> preStatusSet,
    Set<Integer> postStatusSet,
    long createTimeStart,
    long createTimeEnd)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.attachedId = attachedId;
    setAttachedIdIsSet(true);
    this.submitUserId = submitUserId;
    setSubmitUserIdIsSet(true);
    this.approveUserId = approveUserId;
    setApproveUserIdIsSet(true);
    this.preStatus = preStatus;
    setPreStatusIsSet(true);
    this.postStatus = postStatus;
    setPostStatusIsSet(true);
    this.comment = comment;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.idSet = idSet;
    this.typeSet = typeSet;
    this.attachedIdSet = attachedIdSet;
    this.submitUserIdSet = submitUserIdSet;
    this.approveUserIdSet = approveUserIdSet;
    this.preStatusSet = preStatusSet;
    this.postStatusSet = postStatusSet;
    this.createTimeStart = createTimeStart;
    setCreateTimeStartIsSet(true);
    this.createTimeEnd = createTimeEnd;
    setCreateTimeEndIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApproveHistoryBo(ApproveHistoryBo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.type = other.type;
    this.attachedId = other.attachedId;
    this.submitUserId = other.submitUserId;
    this.approveUserId = other.approveUserId;
    this.preStatus = other.preStatus;
    this.postStatus = other.postStatus;
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
    this.createTime = other.createTime;
    if (other.isSetIdSet()) {
      Set<Integer> __this__idSet = new HashSet<Integer>(other.idSet);
      this.idSet = __this__idSet;
    }
    if (other.isSetTypeSet()) {
      Set<Integer> __this__typeSet = new HashSet<Integer>(other.typeSet);
      this.typeSet = __this__typeSet;
    }
    if (other.isSetAttachedIdSet()) {
      Set<Integer> __this__attachedIdSet = new HashSet<Integer>(other.attachedIdSet);
      this.attachedIdSet = __this__attachedIdSet;
    }
    if (other.isSetSubmitUserIdSet()) {
      Set<Integer> __this__submitUserIdSet = new HashSet<Integer>(other.submitUserIdSet);
      this.submitUserIdSet = __this__submitUserIdSet;
    }
    if (other.isSetApproveUserIdSet()) {
      Set<Integer> __this__approveUserIdSet = new HashSet<Integer>(other.approveUserIdSet);
      this.approveUserIdSet = __this__approveUserIdSet;
    }
    if (other.isSetPreStatusSet()) {
      Set<Integer> __this__preStatusSet = new HashSet<Integer>(other.preStatusSet);
      this.preStatusSet = __this__preStatusSet;
    }
    if (other.isSetPostStatusSet()) {
      Set<Integer> __this__postStatusSet = new HashSet<Integer>(other.postStatusSet);
      this.postStatusSet = __this__postStatusSet;
    }
    this.createTimeStart = other.createTimeStart;
    this.createTimeEnd = other.createTimeEnd;
  }

  public ApproveHistoryBo deepCopy() {
    return new ApproveHistoryBo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setTypeIsSet(false);
    this.type = 0;
    setAttachedIdIsSet(false);
    this.attachedId = 0;
    setSubmitUserIdIsSet(false);
    this.submitUserId = 0;
    setApproveUserIdIsSet(false);
    this.approveUserId = 0;
    setPreStatusIsSet(false);
    this.preStatus = 0;
    setPostStatusIsSet(false);
    this.postStatus = 0;
    this.comment = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    this.idSet = null;
    this.typeSet = null;
    this.attachedIdSet = null;
    this.submitUserIdSet = null;
    this.approveUserIdSet = null;
    this.preStatusSet = null;
    this.postStatusSet = null;
    setCreateTimeStartIsSet(false);
    this.createTimeStart = 0;
    setCreateTimeEndIsSet(false);
    this.createTimeEnd = 0;
  }

  public int getId() {
    return this.id;
  }

  public ApproveHistoryBo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public ApproveHistoryBo setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public int getAttachedId() {
    return this.attachedId;
  }

  public ApproveHistoryBo setAttachedId(int attachedId) {
    this.attachedId = attachedId;
    setAttachedIdIsSet(true);
    return this;
  }

  public void unsetAttachedId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATTACHEDID_ISSET_ID);
  }

  /** Returns true if field attachedId is set (has been assigned a value) and false otherwise */
  public boolean isSetAttachedId() {
    return EncodingUtils.testBit(__isset_bitfield, __ATTACHEDID_ISSET_ID);
  }

  public void setAttachedIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATTACHEDID_ISSET_ID, value);
  }

  public int getSubmitUserId() {
    return this.submitUserId;
  }

  public ApproveHistoryBo setSubmitUserId(int submitUserId) {
    this.submitUserId = submitUserId;
    setSubmitUserIdIsSet(true);
    return this;
  }

  public void unsetSubmitUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBMITUSERID_ISSET_ID);
  }

  /** Returns true if field submitUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubmitUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBMITUSERID_ISSET_ID);
  }

  public void setSubmitUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBMITUSERID_ISSET_ID, value);
  }

  public int getApproveUserId() {
    return this.approveUserId;
  }

  public ApproveHistoryBo setApproveUserId(int approveUserId) {
    this.approveUserId = approveUserId;
    setApproveUserIdIsSet(true);
    return this;
  }

  public void unsetApproveUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPROVEUSERID_ISSET_ID);
  }

  /** Returns true if field approveUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetApproveUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPROVEUSERID_ISSET_ID);
  }

  public void setApproveUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPROVEUSERID_ISSET_ID, value);
  }

  public int getPreStatus() {
    return this.preStatus;
  }

  public ApproveHistoryBo setPreStatus(int preStatus) {
    this.preStatus = preStatus;
    setPreStatusIsSet(true);
    return this;
  }

  public void unsetPreStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRESTATUS_ISSET_ID);
  }

  /** Returns true if field preStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetPreStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __PRESTATUS_ISSET_ID);
  }

  public void setPreStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRESTATUS_ISSET_ID, value);
  }

  public int getPostStatus() {
    return this.postStatus;
  }

  public ApproveHistoryBo setPostStatus(int postStatus) {
    this.postStatus = postStatus;
    setPostStatusIsSet(true);
    return this;
  }

  public void unsetPostStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSTSTATUS_ISSET_ID);
  }

  /** Returns true if field postStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetPostStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __POSTSTATUS_ISSET_ID);
  }

  public void setPostStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSTSTATUS_ISSET_ID, value);
  }

  public String getComment() {
    return this.comment;
  }

  public ApproveHistoryBo setComment(String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public ApproveHistoryBo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getIdSetSize() {
    return (this.idSet == null) ? 0 : this.idSet.size();
  }

  public java.util.Iterator<Integer> getIdSetIterator() {
    return (this.idSet == null) ? null : this.idSet.iterator();
  }

  public void addToIdSet(int elem) {
    if (this.idSet == null) {
      this.idSet = new HashSet<Integer>();
    }
    this.idSet.add(elem);
  }

  public Set<Integer> getIdSet() {
    return this.idSet;
  }

  public ApproveHistoryBo setIdSet(Set<Integer> idSet) {
    this.idSet = idSet;
    return this;
  }

  public void unsetIdSet() {
    this.idSet = null;
  }

  /** Returns true if field idSet is set (has been assigned a value) and false otherwise */
  public boolean isSetIdSet() {
    return this.idSet != null;
  }

  public void setIdSetIsSet(boolean value) {
    if (!value) {
      this.idSet = null;
    }
  }

  public int getTypeSetSize() {
    return (this.typeSet == null) ? 0 : this.typeSet.size();
  }

  public java.util.Iterator<Integer> getTypeSetIterator() {
    return (this.typeSet == null) ? null : this.typeSet.iterator();
  }

  public void addToTypeSet(int elem) {
    if (this.typeSet == null) {
      this.typeSet = new HashSet<Integer>();
    }
    this.typeSet.add(elem);
  }

  public Set<Integer> getTypeSet() {
    return this.typeSet;
  }

  public ApproveHistoryBo setTypeSet(Set<Integer> typeSet) {
    this.typeSet = typeSet;
    return this;
  }

  public void unsetTypeSet() {
    this.typeSet = null;
  }

  /** Returns true if field typeSet is set (has been assigned a value) and false otherwise */
  public boolean isSetTypeSet() {
    return this.typeSet != null;
  }

  public void setTypeSetIsSet(boolean value) {
    if (!value) {
      this.typeSet = null;
    }
  }

  public int getAttachedIdSetSize() {
    return (this.attachedIdSet == null) ? 0 : this.attachedIdSet.size();
  }

  public java.util.Iterator<Integer> getAttachedIdSetIterator() {
    return (this.attachedIdSet == null) ? null : this.attachedIdSet.iterator();
  }

  public void addToAttachedIdSet(int elem) {
    if (this.attachedIdSet == null) {
      this.attachedIdSet = new HashSet<Integer>();
    }
    this.attachedIdSet.add(elem);
  }

  public Set<Integer> getAttachedIdSet() {
    return this.attachedIdSet;
  }

  public ApproveHistoryBo setAttachedIdSet(Set<Integer> attachedIdSet) {
    this.attachedIdSet = attachedIdSet;
    return this;
  }

  public void unsetAttachedIdSet() {
    this.attachedIdSet = null;
  }

  /** Returns true if field attachedIdSet is set (has been assigned a value) and false otherwise */
  public boolean isSetAttachedIdSet() {
    return this.attachedIdSet != null;
  }

  public void setAttachedIdSetIsSet(boolean value) {
    if (!value) {
      this.attachedIdSet = null;
    }
  }

  public int getSubmitUserIdSetSize() {
    return (this.submitUserIdSet == null) ? 0 : this.submitUserIdSet.size();
  }

  public java.util.Iterator<Integer> getSubmitUserIdSetIterator() {
    return (this.submitUserIdSet == null) ? null : this.submitUserIdSet.iterator();
  }

  public void addToSubmitUserIdSet(int elem) {
    if (this.submitUserIdSet == null) {
      this.submitUserIdSet = new HashSet<Integer>();
    }
    this.submitUserIdSet.add(elem);
  }

  public Set<Integer> getSubmitUserIdSet() {
    return this.submitUserIdSet;
  }

  public ApproveHistoryBo setSubmitUserIdSet(Set<Integer> submitUserIdSet) {
    this.submitUserIdSet = submitUserIdSet;
    return this;
  }

  public void unsetSubmitUserIdSet() {
    this.submitUserIdSet = null;
  }

  /** Returns true if field submitUserIdSet is set (has been assigned a value) and false otherwise */
  public boolean isSetSubmitUserIdSet() {
    return this.submitUserIdSet != null;
  }

  public void setSubmitUserIdSetIsSet(boolean value) {
    if (!value) {
      this.submitUserIdSet = null;
    }
  }

  public int getApproveUserIdSetSize() {
    return (this.approveUserIdSet == null) ? 0 : this.approveUserIdSet.size();
  }

  public java.util.Iterator<Integer> getApproveUserIdSetIterator() {
    return (this.approveUserIdSet == null) ? null : this.approveUserIdSet.iterator();
  }

  public void addToApproveUserIdSet(int elem) {
    if (this.approveUserIdSet == null) {
      this.approveUserIdSet = new HashSet<Integer>();
    }
    this.approveUserIdSet.add(elem);
  }

  public Set<Integer> getApproveUserIdSet() {
    return this.approveUserIdSet;
  }

  public ApproveHistoryBo setApproveUserIdSet(Set<Integer> approveUserIdSet) {
    this.approveUserIdSet = approveUserIdSet;
    return this;
  }

  public void unsetApproveUserIdSet() {
    this.approveUserIdSet = null;
  }

  /** Returns true if field approveUserIdSet is set (has been assigned a value) and false otherwise */
  public boolean isSetApproveUserIdSet() {
    return this.approveUserIdSet != null;
  }

  public void setApproveUserIdSetIsSet(boolean value) {
    if (!value) {
      this.approveUserIdSet = null;
    }
  }

  public int getPreStatusSetSize() {
    return (this.preStatusSet == null) ? 0 : this.preStatusSet.size();
  }

  public java.util.Iterator<Integer> getPreStatusSetIterator() {
    return (this.preStatusSet == null) ? null : this.preStatusSet.iterator();
  }

  public void addToPreStatusSet(int elem) {
    if (this.preStatusSet == null) {
      this.preStatusSet = new HashSet<Integer>();
    }
    this.preStatusSet.add(elem);
  }

  public Set<Integer> getPreStatusSet() {
    return this.preStatusSet;
  }

  public ApproveHistoryBo setPreStatusSet(Set<Integer> preStatusSet) {
    this.preStatusSet = preStatusSet;
    return this;
  }

  public void unsetPreStatusSet() {
    this.preStatusSet = null;
  }

  /** Returns true if field preStatusSet is set (has been assigned a value) and false otherwise */
  public boolean isSetPreStatusSet() {
    return this.preStatusSet != null;
  }

  public void setPreStatusSetIsSet(boolean value) {
    if (!value) {
      this.preStatusSet = null;
    }
  }

  public int getPostStatusSetSize() {
    return (this.postStatusSet == null) ? 0 : this.postStatusSet.size();
  }

  public java.util.Iterator<Integer> getPostStatusSetIterator() {
    return (this.postStatusSet == null) ? null : this.postStatusSet.iterator();
  }

  public void addToPostStatusSet(int elem) {
    if (this.postStatusSet == null) {
      this.postStatusSet = new HashSet<Integer>();
    }
    this.postStatusSet.add(elem);
  }

  public Set<Integer> getPostStatusSet() {
    return this.postStatusSet;
  }

  public ApproveHistoryBo setPostStatusSet(Set<Integer> postStatusSet) {
    this.postStatusSet = postStatusSet;
    return this;
  }

  public void unsetPostStatusSet() {
    this.postStatusSet = null;
  }

  /** Returns true if field postStatusSet is set (has been assigned a value) and false otherwise */
  public boolean isSetPostStatusSet() {
    return this.postStatusSet != null;
  }

  public void setPostStatusSetIsSet(boolean value) {
    if (!value) {
      this.postStatusSet = null;
    }
  }

  public long getCreateTimeStart() {
    return this.createTimeStart;
  }

  public ApproveHistoryBo setCreateTimeStart(long createTimeStart) {
    this.createTimeStart = createTimeStart;
    setCreateTimeStartIsSet(true);
    return this;
  }

  public void unsetCreateTimeStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTART_ISSET_ID);
  }

  /** Returns true if field createTimeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimeStart() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTART_ISSET_ID);
  }

  public void setCreateTimeStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTART_ISSET_ID, value);
  }

  public long getCreateTimeEnd() {
    return this.createTimeEnd;
  }

  public ApproveHistoryBo setCreateTimeEnd(long createTimeEnd) {
    this.createTimeEnd = createTimeEnd;
    setCreateTimeEndIsSet(true);
    return this;
  }

  public void unsetCreateTimeEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMEEND_ISSET_ID);
  }

  /** Returns true if field createTimeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimeEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMEEND_ISSET_ID);
  }

  public void setCreateTimeEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMEEND_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case ATTACHED_ID:
      if (value == null) {
        unsetAttachedId();
      } else {
        setAttachedId((Integer)value);
      }
      break;

    case SUBMIT_USER_ID:
      if (value == null) {
        unsetSubmitUserId();
      } else {
        setSubmitUserId((Integer)value);
      }
      break;

    case APPROVE_USER_ID:
      if (value == null) {
        unsetApproveUserId();
      } else {
        setApproveUserId((Integer)value);
      }
      break;

    case PRE_STATUS:
      if (value == null) {
        unsetPreStatus();
      } else {
        setPreStatus((Integer)value);
      }
      break;

    case POST_STATUS:
      if (value == null) {
        unsetPostStatus();
      } else {
        setPostStatus((Integer)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case ID_SET:
      if (value == null) {
        unsetIdSet();
      } else {
        setIdSet((Set<Integer>)value);
      }
      break;

    case TYPE_SET:
      if (value == null) {
        unsetTypeSet();
      } else {
        setTypeSet((Set<Integer>)value);
      }
      break;

    case ATTACHED_ID_SET:
      if (value == null) {
        unsetAttachedIdSet();
      } else {
        setAttachedIdSet((Set<Integer>)value);
      }
      break;

    case SUBMIT_USER_ID_SET:
      if (value == null) {
        unsetSubmitUserIdSet();
      } else {
        setSubmitUserIdSet((Set<Integer>)value);
      }
      break;

    case APPROVE_USER_ID_SET:
      if (value == null) {
        unsetApproveUserIdSet();
      } else {
        setApproveUserIdSet((Set<Integer>)value);
      }
      break;

    case PRE_STATUS_SET:
      if (value == null) {
        unsetPreStatusSet();
      } else {
        setPreStatusSet((Set<Integer>)value);
      }
      break;

    case POST_STATUS_SET:
      if (value == null) {
        unsetPostStatusSet();
      } else {
        setPostStatusSet((Set<Integer>)value);
      }
      break;

    case CREATE_TIME_START:
      if (value == null) {
        unsetCreateTimeStart();
      } else {
        setCreateTimeStart((Long)value);
      }
      break;

    case CREATE_TIME_END:
      if (value == null) {
        unsetCreateTimeEnd();
      } else {
        setCreateTimeEnd((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case TYPE:
      return Integer.valueOf(getType());

    case ATTACHED_ID:
      return Integer.valueOf(getAttachedId());

    case SUBMIT_USER_ID:
      return Integer.valueOf(getSubmitUserId());

    case APPROVE_USER_ID:
      return Integer.valueOf(getApproveUserId());

    case PRE_STATUS:
      return Integer.valueOf(getPreStatus());

    case POST_STATUS:
      return Integer.valueOf(getPostStatus());

    case COMMENT:
      return getComment();

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case ID_SET:
      return getIdSet();

    case TYPE_SET:
      return getTypeSet();

    case ATTACHED_ID_SET:
      return getAttachedIdSet();

    case SUBMIT_USER_ID_SET:
      return getSubmitUserIdSet();

    case APPROVE_USER_ID_SET:
      return getApproveUserIdSet();

    case PRE_STATUS_SET:
      return getPreStatusSet();

    case POST_STATUS_SET:
      return getPostStatusSet();

    case CREATE_TIME_START:
      return Long.valueOf(getCreateTimeStart());

    case CREATE_TIME_END:
      return Long.valueOf(getCreateTimeEnd());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TYPE:
      return isSetType();
    case ATTACHED_ID:
      return isSetAttachedId();
    case SUBMIT_USER_ID:
      return isSetSubmitUserId();
    case APPROVE_USER_ID:
      return isSetApproveUserId();
    case PRE_STATUS:
      return isSetPreStatus();
    case POST_STATUS:
      return isSetPostStatus();
    case COMMENT:
      return isSetComment();
    case CREATE_TIME:
      return isSetCreateTime();
    case ID_SET:
      return isSetIdSet();
    case TYPE_SET:
      return isSetTypeSet();
    case ATTACHED_ID_SET:
      return isSetAttachedIdSet();
    case SUBMIT_USER_ID_SET:
      return isSetSubmitUserIdSet();
    case APPROVE_USER_ID_SET:
      return isSetApproveUserIdSet();
    case PRE_STATUS_SET:
      return isSetPreStatusSet();
    case POST_STATUS_SET:
      return isSetPostStatusSet();
    case CREATE_TIME_START:
      return isSetCreateTimeStart();
    case CREATE_TIME_END:
      return isSetCreateTimeEnd();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ApproveHistoryBo)
      return this.equals((ApproveHistoryBo)that);
    return false;
  }

  public boolean equals(ApproveHistoryBo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_attachedId = true;
    boolean that_present_attachedId = true;
    if (this_present_attachedId || that_present_attachedId) {
      if (!(this_present_attachedId && that_present_attachedId))
        return false;
      if (this.attachedId != that.attachedId)
        return false;
    }

    boolean this_present_submitUserId = true;
    boolean that_present_submitUserId = true;
    if (this_present_submitUserId || that_present_submitUserId) {
      if (!(this_present_submitUserId && that_present_submitUserId))
        return false;
      if (this.submitUserId != that.submitUserId)
        return false;
    }

    boolean this_present_approveUserId = true;
    boolean that_present_approveUserId = true;
    if (this_present_approveUserId || that_present_approveUserId) {
      if (!(this_present_approveUserId && that_present_approveUserId))
        return false;
      if (this.approveUserId != that.approveUserId)
        return false;
    }

    boolean this_present_preStatus = true;
    boolean that_present_preStatus = true;
    if (this_present_preStatus || that_present_preStatus) {
      if (!(this_present_preStatus && that_present_preStatus))
        return false;
      if (this.preStatus != that.preStatus)
        return false;
    }

    boolean this_present_postStatus = true;
    boolean that_present_postStatus = true;
    if (this_present_postStatus || that_present_postStatus) {
      if (!(this_present_postStatus && that_present_postStatus))
        return false;
      if (this.postStatus != that.postStatus)
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_idSet = true && this.isSetIdSet();
    boolean that_present_idSet = true && that.isSetIdSet();
    if (this_present_idSet || that_present_idSet) {
      if (!(this_present_idSet && that_present_idSet))
        return false;
      if (!this.idSet.equals(that.idSet))
        return false;
    }

    boolean this_present_typeSet = true && this.isSetTypeSet();
    boolean that_present_typeSet = true && that.isSetTypeSet();
    if (this_present_typeSet || that_present_typeSet) {
      if (!(this_present_typeSet && that_present_typeSet))
        return false;
      if (!this.typeSet.equals(that.typeSet))
        return false;
    }

    boolean this_present_attachedIdSet = true && this.isSetAttachedIdSet();
    boolean that_present_attachedIdSet = true && that.isSetAttachedIdSet();
    if (this_present_attachedIdSet || that_present_attachedIdSet) {
      if (!(this_present_attachedIdSet && that_present_attachedIdSet))
        return false;
      if (!this.attachedIdSet.equals(that.attachedIdSet))
        return false;
    }

    boolean this_present_submitUserIdSet = true && this.isSetSubmitUserIdSet();
    boolean that_present_submitUserIdSet = true && that.isSetSubmitUserIdSet();
    if (this_present_submitUserIdSet || that_present_submitUserIdSet) {
      if (!(this_present_submitUserIdSet && that_present_submitUserIdSet))
        return false;
      if (!this.submitUserIdSet.equals(that.submitUserIdSet))
        return false;
    }

    boolean this_present_approveUserIdSet = true && this.isSetApproveUserIdSet();
    boolean that_present_approveUserIdSet = true && that.isSetApproveUserIdSet();
    if (this_present_approveUserIdSet || that_present_approveUserIdSet) {
      if (!(this_present_approveUserIdSet && that_present_approveUserIdSet))
        return false;
      if (!this.approveUserIdSet.equals(that.approveUserIdSet))
        return false;
    }

    boolean this_present_preStatusSet = true && this.isSetPreStatusSet();
    boolean that_present_preStatusSet = true && that.isSetPreStatusSet();
    if (this_present_preStatusSet || that_present_preStatusSet) {
      if (!(this_present_preStatusSet && that_present_preStatusSet))
        return false;
      if (!this.preStatusSet.equals(that.preStatusSet))
        return false;
    }

    boolean this_present_postStatusSet = true && this.isSetPostStatusSet();
    boolean that_present_postStatusSet = true && that.isSetPostStatusSet();
    if (this_present_postStatusSet || that_present_postStatusSet) {
      if (!(this_present_postStatusSet && that_present_postStatusSet))
        return false;
      if (!this.postStatusSet.equals(that.postStatusSet))
        return false;
    }

    boolean this_present_createTimeStart = true;
    boolean that_present_createTimeStart = true;
    if (this_present_createTimeStart || that_present_createTimeStart) {
      if (!(this_present_createTimeStart && that_present_createTimeStart))
        return false;
      if (this.createTimeStart != that.createTimeStart)
        return false;
    }

    boolean this_present_createTimeEnd = true;
    boolean that_present_createTimeEnd = true;
    if (this_present_createTimeEnd || that_present_createTimeEnd) {
      if (!(this_present_createTimeEnd && that_present_createTimeEnd))
        return false;
      if (this.createTimeEnd != that.createTimeEnd)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_type = true;
    builder.append(present_type);
    if (present_type)
      builder.append(type);

    boolean present_attachedId = true;
    builder.append(present_attachedId);
    if (present_attachedId)
      builder.append(attachedId);

    boolean present_submitUserId = true;
    builder.append(present_submitUserId);
    if (present_submitUserId)
      builder.append(submitUserId);

    boolean present_approveUserId = true;
    builder.append(present_approveUserId);
    if (present_approveUserId)
      builder.append(approveUserId);

    boolean present_preStatus = true;
    builder.append(present_preStatus);
    if (present_preStatus)
      builder.append(preStatus);

    boolean present_postStatus = true;
    builder.append(present_postStatus);
    if (present_postStatus)
      builder.append(postStatus);

    boolean present_comment = true && (isSetComment());
    builder.append(present_comment);
    if (present_comment)
      builder.append(comment);

    boolean present_createTime = true;
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);

    boolean present_idSet = true && (isSetIdSet());
    builder.append(present_idSet);
    if (present_idSet)
      builder.append(idSet);

    boolean present_typeSet = true && (isSetTypeSet());
    builder.append(present_typeSet);
    if (present_typeSet)
      builder.append(typeSet);

    boolean present_attachedIdSet = true && (isSetAttachedIdSet());
    builder.append(present_attachedIdSet);
    if (present_attachedIdSet)
      builder.append(attachedIdSet);

    boolean present_submitUserIdSet = true && (isSetSubmitUserIdSet());
    builder.append(present_submitUserIdSet);
    if (present_submitUserIdSet)
      builder.append(submitUserIdSet);

    boolean present_approveUserIdSet = true && (isSetApproveUserIdSet());
    builder.append(present_approveUserIdSet);
    if (present_approveUserIdSet)
      builder.append(approveUserIdSet);

    boolean present_preStatusSet = true && (isSetPreStatusSet());
    builder.append(present_preStatusSet);
    if (present_preStatusSet)
      builder.append(preStatusSet);

    boolean present_postStatusSet = true && (isSetPostStatusSet());
    builder.append(present_postStatusSet);
    if (present_postStatusSet)
      builder.append(postStatusSet);

    boolean present_createTimeStart = true;
    builder.append(present_createTimeStart);
    if (present_createTimeStart)
      builder.append(createTimeStart);

    boolean present_createTimeEnd = true;
    builder.append(present_createTimeEnd);
    if (present_createTimeEnd)
      builder.append(createTimeEnd);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(ApproveHistoryBo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttachedId()).compareTo(other.isSetAttachedId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttachedId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attachedId, other.attachedId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubmitUserId()).compareTo(other.isSetSubmitUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubmitUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submitUserId, other.submitUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApproveUserId()).compareTo(other.isSetApproveUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApproveUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approveUserId, other.approveUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreStatus()).compareTo(other.isSetPreStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preStatus, other.preStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostStatus()).compareTo(other.isSetPostStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postStatus, other.postStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdSet()).compareTo(other.isSetIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idSet, other.idSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTypeSet()).compareTo(other.isSetTypeSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypeSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeSet, other.typeSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttachedIdSet()).compareTo(other.isSetAttachedIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttachedIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attachedIdSet, other.attachedIdSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubmitUserIdSet()).compareTo(other.isSetSubmitUserIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubmitUserIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submitUserIdSet, other.submitUserIdSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApproveUserIdSet()).compareTo(other.isSetApproveUserIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApproveUserIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approveUserIdSet, other.approveUserIdSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreStatusSet()).compareTo(other.isSetPreStatusSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreStatusSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preStatusSet, other.preStatusSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostStatusSet()).compareTo(other.isSetPostStatusSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostStatusSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postStatusSet, other.postStatusSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimeStart()).compareTo(other.isSetCreateTimeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimeStart, other.createTimeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimeEnd()).compareTo(other.isSetCreateTimeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimeEnd, other.createTimeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ApproveHistoryBo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("attachedId:");
    sb.append(this.attachedId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("submitUserId:");
    sb.append(this.submitUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("approveUserId:");
    sb.append(this.approveUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("preStatus:");
    sb.append(this.preStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("postStatus:");
    sb.append(this.postStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comment:");
    if (this.comment == null) {
      sb.append("null");
    } else {
      sb.append(this.comment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("idSet:");
    if (this.idSet == null) {
      sb.append("null");
    } else {
      sb.append(this.idSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("typeSet:");
    if (this.typeSet == null) {
      sb.append("null");
    } else {
      sb.append(this.typeSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attachedIdSet:");
    if (this.attachedIdSet == null) {
      sb.append("null");
    } else {
      sb.append(this.attachedIdSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("submitUserIdSet:");
    if (this.submitUserIdSet == null) {
      sb.append("null");
    } else {
      sb.append(this.submitUserIdSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("approveUserIdSet:");
    if (this.approveUserIdSet == null) {
      sb.append("null");
    } else {
      sb.append(this.approveUserIdSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("preStatusSet:");
    if (this.preStatusSet == null) {
      sb.append("null");
    } else {
      sb.append(this.preStatusSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("postStatusSet:");
    if (this.postStatusSet == null) {
      sb.append("null");
    } else {
      sb.append(this.postStatusSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTimeStart:");
    sb.append(this.createTimeStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTimeEnd:");
    sb.append(this.createTimeEnd);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApproveHistoryBoStandardSchemeFactory implements SchemeFactory {
    public ApproveHistoryBoStandardScheme getScheme() {
      return new ApproveHistoryBoStandardScheme();
    }
  }

  private static class ApproveHistoryBoStandardScheme extends StandardScheme<ApproveHistoryBo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApproveHistoryBo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ATTACHED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.attachedId = iprot.readI32();
              struct.setAttachedIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUBMIT_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.submitUserId = iprot.readI32();
              struct.setSubmitUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // APPROVE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.approveUserId = iprot.readI32();
              struct.setApproveUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.preStatus = iprot.readI32();
              struct.setPreStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // POST_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.postStatus = iprot.readI32();
              struct.setPostStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.idSet = new HashSet<Integer>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  int _elem2;
                  _elem2 = iprot.readI32();
                  struct.idSet.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TYPE_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.typeSet = new HashSet<Integer>(2*_set3.size);
                for (int _i4 = 0; _i4 < _set3.size; ++_i4)
                {
                  int _elem5;
                  _elem5 = iprot.readI32();
                  struct.typeSet.add(_elem5);
                }
                iprot.readSetEnd();
              }
              struct.setTypeSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ATTACHED_ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set6 = iprot.readSetBegin();
                struct.attachedIdSet = new HashSet<Integer>(2*_set6.size);
                for (int _i7 = 0; _i7 < _set6.size; ++_i7)
                {
                  int _elem8;
                  _elem8 = iprot.readI32();
                  struct.attachedIdSet.add(_elem8);
                }
                iprot.readSetEnd();
              }
              struct.setAttachedIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SUBMIT_USER_ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set9 = iprot.readSetBegin();
                struct.submitUserIdSet = new HashSet<Integer>(2*_set9.size);
                for (int _i10 = 0; _i10 < _set9.size; ++_i10)
                {
                  int _elem11;
                  _elem11 = iprot.readI32();
                  struct.submitUserIdSet.add(_elem11);
                }
                iprot.readSetEnd();
              }
              struct.setSubmitUserIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // APPROVE_USER_ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set12 = iprot.readSetBegin();
                struct.approveUserIdSet = new HashSet<Integer>(2*_set12.size);
                for (int _i13 = 0; _i13 < _set12.size; ++_i13)
                {
                  int _elem14;
                  _elem14 = iprot.readI32();
                  struct.approveUserIdSet.add(_elem14);
                }
                iprot.readSetEnd();
              }
              struct.setApproveUserIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PRE_STATUS_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set15 = iprot.readSetBegin();
                struct.preStatusSet = new HashSet<Integer>(2*_set15.size);
                for (int _i16 = 0; _i16 < _set15.size; ++_i16)
                {
                  int _elem17;
                  _elem17 = iprot.readI32();
                  struct.preStatusSet.add(_elem17);
                }
                iprot.readSetEnd();
              }
              struct.setPreStatusSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // POST_STATUS_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set18 = iprot.readSetBegin();
                struct.postStatusSet = new HashSet<Integer>(2*_set18.size);
                for (int _i19 = 0; _i19 < _set18.size; ++_i19)
                {
                  int _elem20;
                  _elem20 = iprot.readI32();
                  struct.postStatusSet.add(_elem20);
                }
                iprot.readSetEnd();
              }
              struct.setPostStatusSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATE_TIME_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimeStart = iprot.readI64();
              struct.setCreateTimeStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CREATE_TIME_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimeEnd = iprot.readI64();
              struct.setCreateTimeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApproveHistoryBo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ATTACHED_ID_FIELD_DESC);
      oprot.writeI32(struct.attachedId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUBMIT_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.submitUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPROVE_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.approveUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.preStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POST_STATUS_FIELD_DESC);
      oprot.writeI32(struct.postStatus);
      oprot.writeFieldEnd();
      if (struct.comment != null) {
        oprot.writeFieldBegin(COMMENT_FIELD_DESC);
        oprot.writeString(struct.comment);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      if (struct.idSet != null) {
        oprot.writeFieldBegin(ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.idSet.size()));
          for (int _iter21 : struct.idSet)
          {
            oprot.writeI32(_iter21);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.typeSet != null) {
        oprot.writeFieldBegin(TYPE_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.typeSet.size()));
          for (int _iter22 : struct.typeSet)
          {
            oprot.writeI32(_iter22);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.attachedIdSet != null) {
        oprot.writeFieldBegin(ATTACHED_ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.attachedIdSet.size()));
          for (int _iter23 : struct.attachedIdSet)
          {
            oprot.writeI32(_iter23);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.submitUserIdSet != null) {
        oprot.writeFieldBegin(SUBMIT_USER_ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.submitUserIdSet.size()));
          for (int _iter24 : struct.submitUserIdSet)
          {
            oprot.writeI32(_iter24);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.approveUserIdSet != null) {
        oprot.writeFieldBegin(APPROVE_USER_ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.approveUserIdSet.size()));
          for (int _iter25 : struct.approveUserIdSet)
          {
            oprot.writeI32(_iter25);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.preStatusSet != null) {
        oprot.writeFieldBegin(PRE_STATUS_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.preStatusSet.size()));
          for (int _iter26 : struct.preStatusSet)
          {
            oprot.writeI32(_iter26);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.postStatusSet != null) {
        oprot.writeFieldBegin(POST_STATUS_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.postStatusSet.size()));
          for (int _iter27 : struct.postStatusSet)
          {
            oprot.writeI32(_iter27);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_START_FIELD_DESC);
      oprot.writeI64(struct.createTimeStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_END_FIELD_DESC);
      oprot.writeI64(struct.createTimeEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApproveHistoryBoTupleSchemeFactory implements SchemeFactory {
    public ApproveHistoryBoTupleScheme getScheme() {
      return new ApproveHistoryBoTupleScheme();
    }
  }

  private static class ApproveHistoryBoTupleScheme extends TupleScheme<ApproveHistoryBo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApproveHistoryBo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetAttachedId()) {
        optionals.set(2);
      }
      if (struct.isSetSubmitUserId()) {
        optionals.set(3);
      }
      if (struct.isSetApproveUserId()) {
        optionals.set(4);
      }
      if (struct.isSetPreStatus()) {
        optionals.set(5);
      }
      if (struct.isSetPostStatus()) {
        optionals.set(6);
      }
      if (struct.isSetComment()) {
        optionals.set(7);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(8);
      }
      if (struct.isSetIdSet()) {
        optionals.set(9);
      }
      if (struct.isSetTypeSet()) {
        optionals.set(10);
      }
      if (struct.isSetAttachedIdSet()) {
        optionals.set(11);
      }
      if (struct.isSetSubmitUserIdSet()) {
        optionals.set(12);
      }
      if (struct.isSetApproveUserIdSet()) {
        optionals.set(13);
      }
      if (struct.isSetPreStatusSet()) {
        optionals.set(14);
      }
      if (struct.isSetPostStatusSet()) {
        optionals.set(15);
      }
      if (struct.isSetCreateTimeStart()) {
        optionals.set(16);
      }
      if (struct.isSetCreateTimeEnd()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetAttachedId()) {
        oprot.writeI32(struct.attachedId);
      }
      if (struct.isSetSubmitUserId()) {
        oprot.writeI32(struct.submitUserId);
      }
      if (struct.isSetApproveUserId()) {
        oprot.writeI32(struct.approveUserId);
      }
      if (struct.isSetPreStatus()) {
        oprot.writeI32(struct.preStatus);
      }
      if (struct.isSetPostStatus()) {
        oprot.writeI32(struct.postStatus);
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetIdSet()) {
        {
          oprot.writeI32(struct.idSet.size());
          for (int _iter28 : struct.idSet)
          {
            oprot.writeI32(_iter28);
          }
        }
      }
      if (struct.isSetTypeSet()) {
        {
          oprot.writeI32(struct.typeSet.size());
          for (int _iter29 : struct.typeSet)
          {
            oprot.writeI32(_iter29);
          }
        }
      }
      if (struct.isSetAttachedIdSet()) {
        {
          oprot.writeI32(struct.attachedIdSet.size());
          for (int _iter30 : struct.attachedIdSet)
          {
            oprot.writeI32(_iter30);
          }
        }
      }
      if (struct.isSetSubmitUserIdSet()) {
        {
          oprot.writeI32(struct.submitUserIdSet.size());
          for (int _iter31 : struct.submitUserIdSet)
          {
            oprot.writeI32(_iter31);
          }
        }
      }
      if (struct.isSetApproveUserIdSet()) {
        {
          oprot.writeI32(struct.approveUserIdSet.size());
          for (int _iter32 : struct.approveUserIdSet)
          {
            oprot.writeI32(_iter32);
          }
        }
      }
      if (struct.isSetPreStatusSet()) {
        {
          oprot.writeI32(struct.preStatusSet.size());
          for (int _iter33 : struct.preStatusSet)
          {
            oprot.writeI32(_iter33);
          }
        }
      }
      if (struct.isSetPostStatusSet()) {
        {
          oprot.writeI32(struct.postStatusSet.size());
          for (int _iter34 : struct.postStatusSet)
          {
            oprot.writeI32(_iter34);
          }
        }
      }
      if (struct.isSetCreateTimeStart()) {
        oprot.writeI64(struct.createTimeStart);
      }
      if (struct.isSetCreateTimeEnd()) {
        oprot.writeI64(struct.createTimeEnd);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApproveHistoryBo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.attachedId = iprot.readI32();
        struct.setAttachedIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.submitUserId = iprot.readI32();
        struct.setSubmitUserIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.approveUserId = iprot.readI32();
        struct.setApproveUserIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.preStatus = iprot.readI32();
        struct.setPreStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.postStatus = iprot.readI32();
        struct.setPostStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TSet _set35 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.idSet = new HashSet<Integer>(2*_set35.size);
          for (int _i36 = 0; _i36 < _set35.size; ++_i36)
          {
            int _elem37;
            _elem37 = iprot.readI32();
            struct.idSet.add(_elem37);
          }
        }
        struct.setIdSetIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TSet _set38 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.typeSet = new HashSet<Integer>(2*_set38.size);
          for (int _i39 = 0; _i39 < _set38.size; ++_i39)
          {
            int _elem40;
            _elem40 = iprot.readI32();
            struct.typeSet.add(_elem40);
          }
        }
        struct.setTypeSetIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TSet _set41 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.attachedIdSet = new HashSet<Integer>(2*_set41.size);
          for (int _i42 = 0; _i42 < _set41.size; ++_i42)
          {
            int _elem43;
            _elem43 = iprot.readI32();
            struct.attachedIdSet.add(_elem43);
          }
        }
        struct.setAttachedIdSetIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TSet _set44 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.submitUserIdSet = new HashSet<Integer>(2*_set44.size);
          for (int _i45 = 0; _i45 < _set44.size; ++_i45)
          {
            int _elem46;
            _elem46 = iprot.readI32();
            struct.submitUserIdSet.add(_elem46);
          }
        }
        struct.setSubmitUserIdSetIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TSet _set47 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.approveUserIdSet = new HashSet<Integer>(2*_set47.size);
          for (int _i48 = 0; _i48 < _set47.size; ++_i48)
          {
            int _elem49;
            _elem49 = iprot.readI32();
            struct.approveUserIdSet.add(_elem49);
          }
        }
        struct.setApproveUserIdSetIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TSet _set50 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.preStatusSet = new HashSet<Integer>(2*_set50.size);
          for (int _i51 = 0; _i51 < _set50.size; ++_i51)
          {
            int _elem52;
            _elem52 = iprot.readI32();
            struct.preStatusSet.add(_elem52);
          }
        }
        struct.setPreStatusSetIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TSet _set53 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.postStatusSet = new HashSet<Integer>(2*_set53.size);
          for (int _i54 = 0; _i54 < _set53.size; ++_i54)
          {
            int _elem55;
            _elem55 = iprot.readI32();
            struct.postStatusSet.add(_elem55);
          }
        }
        struct.setPostStatusSetIsSet(true);
      }
      if (incoming.get(16)) {
        struct.createTimeStart = iprot.readI64();
        struct.setCreateTimeStartIsSet(true);
      }
      if (incoming.get(17)) {
        struct.createTimeEnd = iprot.readI64();
        struct.setCreateTimeEndIsSet(true);
      }
    }
  }

}

