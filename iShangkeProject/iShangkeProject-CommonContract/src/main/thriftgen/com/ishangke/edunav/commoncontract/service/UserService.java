/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ishangke.edunav.commoncontract.service;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserService {

  public interface Iface {

    /**
     * 本方法为普通用户提供自动识别的功能。<br>
     * API端读取用户前端存储的session string，调用该方法自动获得当前用户信息
     * @param  sessionString
     * @return 用户实体 UserBo
     * 
     * @param sessionString
     */
    public com.ishangke.edunav.commoncontract.model.UserBo authenticate(String sessionString) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为普通用户提供注册的功能。<br>
     * 用户可以通过此方法进行注册。
     * @param  userBo    用户注册信息
     * @return 用户实体 UserBo
     * 
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.UserBo registerUser(com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为普通用户提供手机验证。<br>
     * 用户可以通过此方法向用户发送验证短信。
     * @param  sessionBo          用户信息
     * @return 用户实体          UserBo
     * 
     * @param sessionBo
     */
    public com.ishangke.edunav.commoncontract.model.UserBo openCellSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法验证用户手机验证码。<br>
     * 用户可以通过此方法验证手机,如果通过则关闭session
     * @param  sessionBo        用户信息
     * @return 用户实体          UserBo
     * 
     * @param sessionBo
     */
    public com.ishangke.edunav.commoncontract.model.UserBo verifyCellSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为普通用户提供忘记密码时手机验证。<br>
     * 用户可以通过此方法向用户发送验证短信。
     * @param  sessionBo        用户信息
     * @return 用户实体          UserBo
     * 
     * @param sessionBo
     */
    public com.ishangke.edunav.commoncontract.model.UserBo openForgetPasswordSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法验证用户手机验证忘记密码的验证码。<br>
     * 用户可以通过此方法验证忘记密码,如果通过则关闭session
     * @param  sessionBo        用户信息
     * @return 用户实体          UserBo
     * 
     * @param sessionBo
     */
    public com.ishangke.edunav.commoncontract.model.UserBo verifyForgetPasswordSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为普通用户提供修改密码时手机验证。<br>
     * 用户可以通过此方法向用户发送验证短信。
     * @param  sessionBo        用户信息
     * @return 用户实体          UserBo
     * 
     * @param sessionBo
     */
    public com.ishangke.edunav.commoncontract.model.UserBo openChangePasswordSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法验证用户手机验证修改密码的验证码。<br>
     * 用户可以通过此方法验证修改密码,如果通过则关闭session
     * @param  sessionBo        用户信息
     * @return 用户实体          UserBo
     * 
     * @param sessionBo
     */
    public com.ishangke.edunav.commoncontract.model.UserBo verifyChangePasswordSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为所有用户提供使用手机号码是登录的功能。<br>
     * 所有有记录的用户都可以包括普通用户，合作商管理员，ishangke管理员。
     * 
     * @param  loginBo       用户登录信息
     * 
     * @return 用户实体 UserBo
     * 
     * 
     * @param loginBo
     */
    public com.ishangke.edunav.commoncontract.model.UserBo loginByPhone(com.ishangke.edunav.commoncontract.model.LoginBo loginBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为所有用户提供使用识别号登录的功能。<br>
     * 所有有记录的用户都可以包括普通用户，合作商管理员，ishangke管理员。
     * 
     * @param  loginBo       用户登录信息
     * 
     * @return 用户实体 UserBo
     * 
     * 
     * @param loginBo
     */
    public com.ishangke.edunav.commoncontract.model.UserBo loginByReference(com.ishangke.edunav.commoncontract.model.LoginBo loginBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为ishangke管理员创建新用户<br>
     * ishangke管理员可以创建合作商管理员，普通用户
     * 
     * @param  targetUser    需要被创建的用户信息
     * @param  partnerBo     合作商信息
     * @param  currentUser   调用方法的用户的信息
     * 
     * @return 用户实体 UserBo
     * 
     * 
     * @param targetUser
     * @param partnerBo
     * @param currentUser
     */
    public com.ishangke.edunav.commoncontract.model.UserBo createUser(com.ishangke.edunav.commoncontract.model.UserBo targetUser, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo currentUser) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为ishangke管理员删除用户<br>
     * ishangke管理员可以删除合作商管理员，普通用户
     * 
     * @param  targetUser    需要被删除的用户信息
     * @param  currentUser   调用方法的用户的信息
     * 
     * @return 删除结果
     * 
     * 
     * @param targetUser
     * @param currentUser
     */
    public com.ishangke.edunav.commoncontract.model.UserBo deleteUser(com.ishangke.edunav.commoncontract.model.UserBo targetUser, com.ishangke.edunav.commoncontract.model.UserBo currentUser) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为修改用户信息的功能<br>
     * ishangke管理员可以修改合作商管理员，普通用户的信息。任意用户可以修改自身的用户信息
     * 
     * @param  targetUser    需要被修改的用户信息
     * @param  currentUser   调用方法的用户的信息
     * 
     * @return 用户实体 UserBo
     * 
     * 
     * @param targetUser
     * @param currentUser
     */
    public com.ishangke.edunav.commoncontract.model.UserBo updateUser(com.ishangke.edunav.commoncontract.model.UserBo targetUser, com.ishangke.edunav.commoncontract.model.UserBo currentUser) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为查看用户信息的功能<br>
     * ishangke管理员可以查看合作商管理员，普通用户的信息。任意用户可以查看自身的用户信息
     * 
     * @param  queryUser     需要被查询的用户信息
     * @param  currentUser   调用方法的用户的信息
     * 
     * @return 用户实体 UserBo
     * 
     * 
     * @param queryUser
     * @param currentUser
     */
    public List<com.ishangke.edunav.commoncontract.model.UserBo> queryUserInfo(com.ishangke.edunav.commoncontract.model.UserBo queryUser, com.ishangke.edunav.commoncontract.model.UserBo currentUser) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为查询用户信息的功能<br>
     * ishangke管理员可以按条件搜索合作商管理员、普通用户的信息。
     * 
     * @param  queryUser     需要检索和过滤的用户信息
     * @param  partnerBo     合作商的用户的信息
     * @param  currentUser   调用方法的用户的信息
     * @param  paginationBo  分页信息
     * 
     * @return 用户实体 UserBo 列表
     * 
     * 
     * @param queryUser
     * @param partnerBo
     * @param currentUser
     * @param pagnationBo
     */
    public List<com.ishangke.edunav.commoncontract.model.UserBo> queryUser(com.ishangke.edunav.commoncontract.model.UserBo queryUser, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo currentUser, com.ishangke.edunav.commoncontract.model.PaginationBo pagnationBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为查询用户session信息的功能<br>
     * 
     * @param  userBo        需要被查询session的用户信息
     * 
     * @return 用户session相关信息
     * 
     * 
     * @param userBo
     */
    public List<com.ishangke.edunav.commoncontract.model.UserBo> querySession(com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

    /**
     * 本方法为销毁用户session信息的功能<br>
     * 
     * @param  userBo        需要被销毁session的用户信息
     * 
     * @return
     * 
     * 
     * @param userBo
     */
    public com.ishangke.edunav.commoncontract.model.UserBo disposeSession(com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void authenticate(String sessionString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void registerUser(com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void openCellSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void verifyCellSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void openForgetPasswordSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void verifyForgetPasswordSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void openChangePasswordSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void verifyChangePasswordSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loginByPhone(com.ishangke.edunav.commoncontract.model.LoginBo loginBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loginByReference(com.ishangke.edunav.commoncontract.model.LoginBo loginBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createUser(com.ishangke.edunav.commoncontract.model.UserBo targetUser, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo currentUser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteUser(com.ishangke.edunav.commoncontract.model.UserBo targetUser, com.ishangke.edunav.commoncontract.model.UserBo currentUser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateUser(com.ishangke.edunav.commoncontract.model.UserBo targetUser, com.ishangke.edunav.commoncontract.model.UserBo currentUser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryUserInfo(com.ishangke.edunav.commoncontract.model.UserBo queryUser, com.ishangke.edunav.commoncontract.model.UserBo currentUser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryUser(com.ishangke.edunav.commoncontract.model.UserBo queryUser, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo currentUser, com.ishangke.edunav.commoncontract.model.PaginationBo pagnationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySession(com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void disposeSession(com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.ishangke.edunav.commoncontract.model.UserBo authenticate(String sessionString) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_authenticate(sessionString);
      return recv_authenticate();
    }

    public void send_authenticate(String sessionString) throws org.apache.thrift.TException
    {
      authenticate_args args = new authenticate_args();
      args.setSessionString(sessionString);
      sendBase("authenticate", args);
    }

    public com.ishangke.edunav.commoncontract.model.UserBo recv_authenticate() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      authenticate_result result = new authenticate_result();
      receiveBase(result, "authenticate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "authenticate failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.UserBo registerUser(com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_registerUser(userBo);
      return recv_registerUser();
    }

    public void send_registerUser(com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      registerUser_args args = new registerUser_args();
      args.setUserBo(userBo);
      sendBase("registerUser", args);
    }

    public com.ishangke.edunav.commoncontract.model.UserBo recv_registerUser() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      registerUser_result result = new registerUser_result();
      receiveBase(result, "registerUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerUser failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.UserBo openCellSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_openCellSession(sessionBo);
      return recv_openCellSession();
    }

    public void send_openCellSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) throws org.apache.thrift.TException
    {
      openCellSession_args args = new openCellSession_args();
      args.setSessionBo(sessionBo);
      sendBase("openCellSession", args);
    }

    public com.ishangke.edunav.commoncontract.model.UserBo recv_openCellSession() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      openCellSession_result result = new openCellSession_result();
      receiveBase(result, "openCellSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "openCellSession failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.UserBo verifyCellSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_verifyCellSession(sessionBo);
      return recv_verifyCellSession();
    }

    public void send_verifyCellSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) throws org.apache.thrift.TException
    {
      verifyCellSession_args args = new verifyCellSession_args();
      args.setSessionBo(sessionBo);
      sendBase("verifyCellSession", args);
    }

    public com.ishangke.edunav.commoncontract.model.UserBo recv_verifyCellSession() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      verifyCellSession_result result = new verifyCellSession_result();
      receiveBase(result, "verifyCellSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyCellSession failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.UserBo openForgetPasswordSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_openForgetPasswordSession(sessionBo);
      return recv_openForgetPasswordSession();
    }

    public void send_openForgetPasswordSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) throws org.apache.thrift.TException
    {
      openForgetPasswordSession_args args = new openForgetPasswordSession_args();
      args.setSessionBo(sessionBo);
      sendBase("openForgetPasswordSession", args);
    }

    public com.ishangke.edunav.commoncontract.model.UserBo recv_openForgetPasswordSession() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      openForgetPasswordSession_result result = new openForgetPasswordSession_result();
      receiveBase(result, "openForgetPasswordSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "openForgetPasswordSession failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.UserBo verifyForgetPasswordSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_verifyForgetPasswordSession(sessionBo);
      return recv_verifyForgetPasswordSession();
    }

    public void send_verifyForgetPasswordSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) throws org.apache.thrift.TException
    {
      verifyForgetPasswordSession_args args = new verifyForgetPasswordSession_args();
      args.setSessionBo(sessionBo);
      sendBase("verifyForgetPasswordSession", args);
    }

    public com.ishangke.edunav.commoncontract.model.UserBo recv_verifyForgetPasswordSession() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      verifyForgetPasswordSession_result result = new verifyForgetPasswordSession_result();
      receiveBase(result, "verifyForgetPasswordSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyForgetPasswordSession failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.UserBo openChangePasswordSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_openChangePasswordSession(sessionBo);
      return recv_openChangePasswordSession();
    }

    public void send_openChangePasswordSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) throws org.apache.thrift.TException
    {
      openChangePasswordSession_args args = new openChangePasswordSession_args();
      args.setSessionBo(sessionBo);
      sendBase("openChangePasswordSession", args);
    }

    public com.ishangke.edunav.commoncontract.model.UserBo recv_openChangePasswordSession() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      openChangePasswordSession_result result = new openChangePasswordSession_result();
      receiveBase(result, "openChangePasswordSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "openChangePasswordSession failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.UserBo verifyChangePasswordSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_verifyChangePasswordSession(sessionBo);
      return recv_verifyChangePasswordSession();
    }

    public void send_verifyChangePasswordSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) throws org.apache.thrift.TException
    {
      verifyChangePasswordSession_args args = new verifyChangePasswordSession_args();
      args.setSessionBo(sessionBo);
      sendBase("verifyChangePasswordSession", args);
    }

    public com.ishangke.edunav.commoncontract.model.UserBo recv_verifyChangePasswordSession() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      verifyChangePasswordSession_result result = new verifyChangePasswordSession_result();
      receiveBase(result, "verifyChangePasswordSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyChangePasswordSession failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.UserBo loginByPhone(com.ishangke.edunav.commoncontract.model.LoginBo loginBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_loginByPhone(loginBo);
      return recv_loginByPhone();
    }

    public void send_loginByPhone(com.ishangke.edunav.commoncontract.model.LoginBo loginBo) throws org.apache.thrift.TException
    {
      loginByPhone_args args = new loginByPhone_args();
      args.setLoginBo(loginBo);
      sendBase("loginByPhone", args);
    }

    public com.ishangke.edunav.commoncontract.model.UserBo recv_loginByPhone() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      loginByPhone_result result = new loginByPhone_result();
      receiveBase(result, "loginByPhone");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loginByPhone failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.UserBo loginByReference(com.ishangke.edunav.commoncontract.model.LoginBo loginBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_loginByReference(loginBo);
      return recv_loginByReference();
    }

    public void send_loginByReference(com.ishangke.edunav.commoncontract.model.LoginBo loginBo) throws org.apache.thrift.TException
    {
      loginByReference_args args = new loginByReference_args();
      args.setLoginBo(loginBo);
      sendBase("loginByReference", args);
    }

    public com.ishangke.edunav.commoncontract.model.UserBo recv_loginByReference() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      loginByReference_result result = new loginByReference_result();
      receiveBase(result, "loginByReference");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loginByReference failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.UserBo createUser(com.ishangke.edunav.commoncontract.model.UserBo targetUser, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo currentUser) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_createUser(targetUser, partnerBo, currentUser);
      return recv_createUser();
    }

    public void send_createUser(com.ishangke.edunav.commoncontract.model.UserBo targetUser, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo currentUser) throws org.apache.thrift.TException
    {
      createUser_args args = new createUser_args();
      args.setTargetUser(targetUser);
      args.setPartnerBo(partnerBo);
      args.setCurrentUser(currentUser);
      sendBase("createUser", args);
    }

    public com.ishangke.edunav.commoncontract.model.UserBo recv_createUser() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      createUser_result result = new createUser_result();
      receiveBase(result, "createUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createUser failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.UserBo deleteUser(com.ishangke.edunav.commoncontract.model.UserBo targetUser, com.ishangke.edunav.commoncontract.model.UserBo currentUser) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_deleteUser(targetUser, currentUser);
      return recv_deleteUser();
    }

    public void send_deleteUser(com.ishangke.edunav.commoncontract.model.UserBo targetUser, com.ishangke.edunav.commoncontract.model.UserBo currentUser) throws org.apache.thrift.TException
    {
      deleteUser_args args = new deleteUser_args();
      args.setTargetUser(targetUser);
      args.setCurrentUser(currentUser);
      sendBase("deleteUser", args);
    }

    public com.ishangke.edunav.commoncontract.model.UserBo recv_deleteUser() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      deleteUser_result result = new deleteUser_result();
      receiveBase(result, "deleteUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteUser failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.UserBo updateUser(com.ishangke.edunav.commoncontract.model.UserBo targetUser, com.ishangke.edunav.commoncontract.model.UserBo currentUser) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_updateUser(targetUser, currentUser);
      return recv_updateUser();
    }

    public void send_updateUser(com.ishangke.edunav.commoncontract.model.UserBo targetUser, com.ishangke.edunav.commoncontract.model.UserBo currentUser) throws org.apache.thrift.TException
    {
      updateUser_args args = new updateUser_args();
      args.setTargetUser(targetUser);
      args.setCurrentUser(currentUser);
      sendBase("updateUser", args);
    }

    public com.ishangke.edunav.commoncontract.model.UserBo recv_updateUser() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      updateUser_result result = new updateUser_result();
      receiveBase(result, "updateUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateUser failed: unknown result");
    }

    public List<com.ishangke.edunav.commoncontract.model.UserBo> queryUserInfo(com.ishangke.edunav.commoncontract.model.UserBo queryUser, com.ishangke.edunav.commoncontract.model.UserBo currentUser) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_queryUserInfo(queryUser, currentUser);
      return recv_queryUserInfo();
    }

    public void send_queryUserInfo(com.ishangke.edunav.commoncontract.model.UserBo queryUser, com.ishangke.edunav.commoncontract.model.UserBo currentUser) throws org.apache.thrift.TException
    {
      queryUserInfo_args args = new queryUserInfo_args();
      args.setQueryUser(queryUser);
      args.setCurrentUser(currentUser);
      sendBase("queryUserInfo", args);
    }

    public List<com.ishangke.edunav.commoncontract.model.UserBo> recv_queryUserInfo() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      queryUserInfo_result result = new queryUserInfo_result();
      receiveBase(result, "queryUserInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryUserInfo failed: unknown result");
    }

    public List<com.ishangke.edunav.commoncontract.model.UserBo> queryUser(com.ishangke.edunav.commoncontract.model.UserBo queryUser, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo currentUser, com.ishangke.edunav.commoncontract.model.PaginationBo pagnationBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_queryUser(queryUser, partnerBo, currentUser, pagnationBo);
      return recv_queryUser();
    }

    public void send_queryUser(com.ishangke.edunav.commoncontract.model.UserBo queryUser, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo currentUser, com.ishangke.edunav.commoncontract.model.PaginationBo pagnationBo) throws org.apache.thrift.TException
    {
      queryUser_args args = new queryUser_args();
      args.setQueryUser(queryUser);
      args.setPartnerBo(partnerBo);
      args.setCurrentUser(currentUser);
      args.setPagnationBo(pagnationBo);
      sendBase("queryUser", args);
    }

    public List<com.ishangke.edunav.commoncontract.model.UserBo> recv_queryUser() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      queryUser_result result = new queryUser_result();
      receiveBase(result, "queryUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryUser failed: unknown result");
    }

    public List<com.ishangke.edunav.commoncontract.model.UserBo> querySession(com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_querySession(userBo);
      return recv_querySession();
    }

    public void send_querySession(com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      querySession_args args = new querySession_args();
      args.setUserBo(userBo);
      sendBase("querySession", args);
    }

    public List<com.ishangke.edunav.commoncontract.model.UserBo> recv_querySession() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      querySession_result result = new querySession_result();
      receiveBase(result, "querySession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySession failed: unknown result");
    }

    public com.ishangke.edunav.commoncontract.model.UserBo disposeSession(com.ishangke.edunav.commoncontract.model.UserBo userBo) throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      send_disposeSession(userBo);
      return recv_disposeSession();
    }

    public void send_disposeSession(com.ishangke.edunav.commoncontract.model.UserBo userBo) throws org.apache.thrift.TException
    {
      disposeSession_args args = new disposeSession_args();
      args.setUserBo(userBo);
      sendBase("disposeSession", args);
    }

    public com.ishangke.edunav.commoncontract.model.UserBo recv_disposeSession() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException
    {
      disposeSession_result result = new disposeSession_result();
      receiveBase(result, "disposeSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.businessExceptionBo != null) {
        throw result.businessExceptionBo;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "disposeSession failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void authenticate(String sessionString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      authenticate_call method_call = new authenticate_call(sessionString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class authenticate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionString;
      public authenticate_call(String sessionString, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionString = sessionString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("authenticate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        authenticate_args args = new authenticate_args();
        args.setSessionString(sessionString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.UserBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_authenticate();
      }
    }

    public void registerUser(com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerUser_call method_call = new registerUser_call(userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public registerUser_call(com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerUser_args args = new registerUser_args();
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.UserBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerUser();
      }
    }

    public void openCellSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      openCellSession_call method_call = new openCellSession_call(sessionBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class openCellSession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.SessionBo sessionBo;
      public openCellSession_call(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionBo = sessionBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("openCellSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        openCellSession_args args = new openCellSession_args();
        args.setSessionBo(sessionBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.UserBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_openCellSession();
      }
    }

    public void verifyCellSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifyCellSession_call method_call = new verifyCellSession_call(sessionBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyCellSession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.SessionBo sessionBo;
      public verifyCellSession_call(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionBo = sessionBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyCellSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifyCellSession_args args = new verifyCellSession_args();
        args.setSessionBo(sessionBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.UserBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifyCellSession();
      }
    }

    public void openForgetPasswordSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      openForgetPasswordSession_call method_call = new openForgetPasswordSession_call(sessionBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class openForgetPasswordSession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.SessionBo sessionBo;
      public openForgetPasswordSession_call(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionBo = sessionBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("openForgetPasswordSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        openForgetPasswordSession_args args = new openForgetPasswordSession_args();
        args.setSessionBo(sessionBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.UserBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_openForgetPasswordSession();
      }
    }

    public void verifyForgetPasswordSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifyForgetPasswordSession_call method_call = new verifyForgetPasswordSession_call(sessionBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyForgetPasswordSession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.SessionBo sessionBo;
      public verifyForgetPasswordSession_call(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionBo = sessionBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyForgetPasswordSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifyForgetPasswordSession_args args = new verifyForgetPasswordSession_args();
        args.setSessionBo(sessionBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.UserBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifyForgetPasswordSession();
      }
    }

    public void openChangePasswordSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      openChangePasswordSession_call method_call = new openChangePasswordSession_call(sessionBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class openChangePasswordSession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.SessionBo sessionBo;
      public openChangePasswordSession_call(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionBo = sessionBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("openChangePasswordSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        openChangePasswordSession_args args = new openChangePasswordSession_args();
        args.setSessionBo(sessionBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.UserBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_openChangePasswordSession();
      }
    }

    public void verifyChangePasswordSession(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifyChangePasswordSession_call method_call = new verifyChangePasswordSession_call(sessionBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyChangePasswordSession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.SessionBo sessionBo;
      public verifyChangePasswordSession_call(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionBo = sessionBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyChangePasswordSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifyChangePasswordSession_args args = new verifyChangePasswordSession_args();
        args.setSessionBo(sessionBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.UserBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifyChangePasswordSession();
      }
    }

    public void loginByPhone(com.ishangke.edunav.commoncontract.model.LoginBo loginBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loginByPhone_call method_call = new loginByPhone_call(loginBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loginByPhone_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.LoginBo loginBo;
      public loginByPhone_call(com.ishangke.edunav.commoncontract.model.LoginBo loginBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loginBo = loginBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loginByPhone", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loginByPhone_args args = new loginByPhone_args();
        args.setLoginBo(loginBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.UserBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loginByPhone();
      }
    }

    public void loginByReference(com.ishangke.edunav.commoncontract.model.LoginBo loginBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loginByReference_call method_call = new loginByReference_call(loginBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loginByReference_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.LoginBo loginBo;
      public loginByReference_call(com.ishangke.edunav.commoncontract.model.LoginBo loginBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loginBo = loginBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loginByReference", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loginByReference_args args = new loginByReference_args();
        args.setLoginBo(loginBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.UserBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loginByReference();
      }
    }

    public void createUser(com.ishangke.edunav.commoncontract.model.UserBo targetUser, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo currentUser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createUser_call method_call = new createUser_call(targetUser, partnerBo, currentUser, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.UserBo targetUser;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.UserBo currentUser;
      public createUser_call(com.ishangke.edunav.commoncontract.model.UserBo targetUser, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo currentUser, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.targetUser = targetUser;
        this.partnerBo = partnerBo;
        this.currentUser = currentUser;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createUser_args args = new createUser_args();
        args.setTargetUser(targetUser);
        args.setPartnerBo(partnerBo);
        args.setCurrentUser(currentUser);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.UserBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createUser();
      }
    }

    public void deleteUser(com.ishangke.edunav.commoncontract.model.UserBo targetUser, com.ishangke.edunav.commoncontract.model.UserBo currentUser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteUser_call method_call = new deleteUser_call(targetUser, currentUser, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.UserBo targetUser;
      private com.ishangke.edunav.commoncontract.model.UserBo currentUser;
      public deleteUser_call(com.ishangke.edunav.commoncontract.model.UserBo targetUser, com.ishangke.edunav.commoncontract.model.UserBo currentUser, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.targetUser = targetUser;
        this.currentUser = currentUser;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteUser_args args = new deleteUser_args();
        args.setTargetUser(targetUser);
        args.setCurrentUser(currentUser);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.UserBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteUser();
      }
    }

    public void updateUser(com.ishangke.edunav.commoncontract.model.UserBo targetUser, com.ishangke.edunav.commoncontract.model.UserBo currentUser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateUser_call method_call = new updateUser_call(targetUser, currentUser, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.UserBo targetUser;
      private com.ishangke.edunav.commoncontract.model.UserBo currentUser;
      public updateUser_call(com.ishangke.edunav.commoncontract.model.UserBo targetUser, com.ishangke.edunav.commoncontract.model.UserBo currentUser, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.targetUser = targetUser;
        this.currentUser = currentUser;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUser_args args = new updateUser_args();
        args.setTargetUser(targetUser);
        args.setCurrentUser(currentUser);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.UserBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateUser();
      }
    }

    public void queryUserInfo(com.ishangke.edunav.commoncontract.model.UserBo queryUser, com.ishangke.edunav.commoncontract.model.UserBo currentUser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryUserInfo_call method_call = new queryUserInfo_call(queryUser, currentUser, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryUserInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.UserBo queryUser;
      private com.ishangke.edunav.commoncontract.model.UserBo currentUser;
      public queryUserInfo_call(com.ishangke.edunav.commoncontract.model.UserBo queryUser, com.ishangke.edunav.commoncontract.model.UserBo currentUser, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queryUser = queryUser;
        this.currentUser = currentUser;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryUserInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryUserInfo_args args = new queryUserInfo_args();
        args.setQueryUser(queryUser);
        args.setCurrentUser(currentUser);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.ishangke.edunav.commoncontract.model.UserBo> getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryUserInfo();
      }
    }

    public void queryUser(com.ishangke.edunav.commoncontract.model.UserBo queryUser, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo currentUser, com.ishangke.edunav.commoncontract.model.PaginationBo pagnationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryUser_call method_call = new queryUser_call(queryUser, partnerBo, currentUser, pagnationBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.UserBo queryUser;
      private com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo;
      private com.ishangke.edunav.commoncontract.model.UserBo currentUser;
      private com.ishangke.edunav.commoncontract.model.PaginationBo pagnationBo;
      public queryUser_call(com.ishangke.edunav.commoncontract.model.UserBo queryUser, com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo, com.ishangke.edunav.commoncontract.model.UserBo currentUser, com.ishangke.edunav.commoncontract.model.PaginationBo pagnationBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queryUser = queryUser;
        this.partnerBo = partnerBo;
        this.currentUser = currentUser;
        this.pagnationBo = pagnationBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryUser_args args = new queryUser_args();
        args.setQueryUser(queryUser);
        args.setPartnerBo(partnerBo);
        args.setCurrentUser(currentUser);
        args.setPagnationBo(pagnationBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.ishangke.edunav.commoncontract.model.UserBo> getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryUser();
      }
    }

    public void querySession(com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySession_call method_call = new querySession_call(userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public querySession_call(com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySession_args args = new querySession_args();
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.ishangke.edunav.commoncontract.model.UserBo> getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySession();
      }
    }

    public void disposeSession(com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      disposeSession_call method_call = new disposeSession_call(userBo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class disposeSession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ishangke.edunav.commoncontract.model.UserBo userBo;
      public disposeSession_call(com.ishangke.edunav.commoncontract.model.UserBo userBo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userBo = userBo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("disposeSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        disposeSession_args args = new disposeSession_args();
        args.setUserBo(userBo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ishangke.edunav.commoncontract.model.UserBo getResult() throws com.ishangke.edunav.commoncontract.model.BusinessExceptionBo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_disposeSession();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("authenticate", new authenticate());
      processMap.put("registerUser", new registerUser());
      processMap.put("openCellSession", new openCellSession());
      processMap.put("verifyCellSession", new verifyCellSession());
      processMap.put("openForgetPasswordSession", new openForgetPasswordSession());
      processMap.put("verifyForgetPasswordSession", new verifyForgetPasswordSession());
      processMap.put("openChangePasswordSession", new openChangePasswordSession());
      processMap.put("verifyChangePasswordSession", new verifyChangePasswordSession());
      processMap.put("loginByPhone", new loginByPhone());
      processMap.put("loginByReference", new loginByReference());
      processMap.put("createUser", new createUser());
      processMap.put("deleteUser", new deleteUser());
      processMap.put("updateUser", new updateUser());
      processMap.put("queryUserInfo", new queryUserInfo());
      processMap.put("queryUser", new queryUser());
      processMap.put("querySession", new querySession());
      processMap.put("disposeSession", new disposeSession());
      return processMap;
    }

    public static class authenticate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, authenticate_args> {
      public authenticate() {
        super("authenticate");
      }

      public authenticate_args getEmptyArgsInstance() {
        return new authenticate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public authenticate_result getResult(I iface, authenticate_args args) throws org.apache.thrift.TException {
        authenticate_result result = new authenticate_result();
        try {
          result.success = iface.authenticate(args.sessionString);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class registerUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerUser_args> {
      public registerUser() {
        super("registerUser");
      }

      public registerUser_args getEmptyArgsInstance() {
        return new registerUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerUser_result getResult(I iface, registerUser_args args) throws org.apache.thrift.TException {
        registerUser_result result = new registerUser_result();
        try {
          result.success = iface.registerUser(args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class openCellSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, openCellSession_args> {
      public openCellSession() {
        super("openCellSession");
      }

      public openCellSession_args getEmptyArgsInstance() {
        return new openCellSession_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public openCellSession_result getResult(I iface, openCellSession_args args) throws org.apache.thrift.TException {
        openCellSession_result result = new openCellSession_result();
        try {
          result.success = iface.openCellSession(args.sessionBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class verifyCellSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyCellSession_args> {
      public verifyCellSession() {
        super("verifyCellSession");
      }

      public verifyCellSession_args getEmptyArgsInstance() {
        return new verifyCellSession_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifyCellSession_result getResult(I iface, verifyCellSession_args args) throws org.apache.thrift.TException {
        verifyCellSession_result result = new verifyCellSession_result();
        try {
          result.success = iface.verifyCellSession(args.sessionBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class openForgetPasswordSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, openForgetPasswordSession_args> {
      public openForgetPasswordSession() {
        super("openForgetPasswordSession");
      }

      public openForgetPasswordSession_args getEmptyArgsInstance() {
        return new openForgetPasswordSession_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public openForgetPasswordSession_result getResult(I iface, openForgetPasswordSession_args args) throws org.apache.thrift.TException {
        openForgetPasswordSession_result result = new openForgetPasswordSession_result();
        try {
          result.success = iface.openForgetPasswordSession(args.sessionBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class verifyForgetPasswordSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyForgetPasswordSession_args> {
      public verifyForgetPasswordSession() {
        super("verifyForgetPasswordSession");
      }

      public verifyForgetPasswordSession_args getEmptyArgsInstance() {
        return new verifyForgetPasswordSession_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifyForgetPasswordSession_result getResult(I iface, verifyForgetPasswordSession_args args) throws org.apache.thrift.TException {
        verifyForgetPasswordSession_result result = new verifyForgetPasswordSession_result();
        try {
          result.success = iface.verifyForgetPasswordSession(args.sessionBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class openChangePasswordSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, openChangePasswordSession_args> {
      public openChangePasswordSession() {
        super("openChangePasswordSession");
      }

      public openChangePasswordSession_args getEmptyArgsInstance() {
        return new openChangePasswordSession_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public openChangePasswordSession_result getResult(I iface, openChangePasswordSession_args args) throws org.apache.thrift.TException {
        openChangePasswordSession_result result = new openChangePasswordSession_result();
        try {
          result.success = iface.openChangePasswordSession(args.sessionBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class verifyChangePasswordSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyChangePasswordSession_args> {
      public verifyChangePasswordSession() {
        super("verifyChangePasswordSession");
      }

      public verifyChangePasswordSession_args getEmptyArgsInstance() {
        return new verifyChangePasswordSession_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifyChangePasswordSession_result getResult(I iface, verifyChangePasswordSession_args args) throws org.apache.thrift.TException {
        verifyChangePasswordSession_result result = new verifyChangePasswordSession_result();
        try {
          result.success = iface.verifyChangePasswordSession(args.sessionBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class loginByPhone<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loginByPhone_args> {
      public loginByPhone() {
        super("loginByPhone");
      }

      public loginByPhone_args getEmptyArgsInstance() {
        return new loginByPhone_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loginByPhone_result getResult(I iface, loginByPhone_args args) throws org.apache.thrift.TException {
        loginByPhone_result result = new loginByPhone_result();
        try {
          result.success = iface.loginByPhone(args.loginBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class loginByReference<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loginByReference_args> {
      public loginByReference() {
        super("loginByReference");
      }

      public loginByReference_args getEmptyArgsInstance() {
        return new loginByReference_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loginByReference_result getResult(I iface, loginByReference_args args) throws org.apache.thrift.TException {
        loginByReference_result result = new loginByReference_result();
        try {
          result.success = iface.loginByReference(args.loginBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class createUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createUser_args> {
      public createUser() {
        super("createUser");
      }

      public createUser_args getEmptyArgsInstance() {
        return new createUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createUser_result getResult(I iface, createUser_args args) throws org.apache.thrift.TException {
        createUser_result result = new createUser_result();
        try {
          result.success = iface.createUser(args.targetUser, args.partnerBo, args.currentUser);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class deleteUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteUser_args> {
      public deleteUser() {
        super("deleteUser");
      }

      public deleteUser_args getEmptyArgsInstance() {
        return new deleteUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteUser_result getResult(I iface, deleteUser_args args) throws org.apache.thrift.TException {
        deleteUser_result result = new deleteUser_result();
        try {
          result.success = iface.deleteUser(args.targetUser, args.currentUser);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class updateUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUser_args> {
      public updateUser() {
        super("updateUser");
      }

      public updateUser_args getEmptyArgsInstance() {
        return new updateUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateUser_result getResult(I iface, updateUser_args args) throws org.apache.thrift.TException {
        updateUser_result result = new updateUser_result();
        try {
          result.success = iface.updateUser(args.targetUser, args.currentUser);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class queryUserInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryUserInfo_args> {
      public queryUserInfo() {
        super("queryUserInfo");
      }

      public queryUserInfo_args getEmptyArgsInstance() {
        return new queryUserInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryUserInfo_result getResult(I iface, queryUserInfo_args args) throws org.apache.thrift.TException {
        queryUserInfo_result result = new queryUserInfo_result();
        try {
          result.success = iface.queryUserInfo(args.queryUser, args.currentUser);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class queryUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryUser_args> {
      public queryUser() {
        super("queryUser");
      }

      public queryUser_args getEmptyArgsInstance() {
        return new queryUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryUser_result getResult(I iface, queryUser_args args) throws org.apache.thrift.TException {
        queryUser_result result = new queryUser_result();
        try {
          result.success = iface.queryUser(args.queryUser, args.partnerBo, args.currentUser, args.pagnationBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class querySession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySession_args> {
      public querySession() {
        super("querySession");
      }

      public querySession_args getEmptyArgsInstance() {
        return new querySession_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySession_result getResult(I iface, querySession_args args) throws org.apache.thrift.TException {
        querySession_result result = new querySession_result();
        try {
          result.success = iface.querySession(args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

    public static class disposeSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, disposeSession_args> {
      public disposeSession() {
        super("disposeSession");
      }

      public disposeSession_args getEmptyArgsInstance() {
        return new disposeSession_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public disposeSession_result getResult(I iface, disposeSession_args args) throws org.apache.thrift.TException {
        disposeSession_result result = new disposeSession_result();
        try {
          result.success = iface.disposeSession(args.userBo);
        } catch (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
          result.businessExceptionBo = businessExceptionBo;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("authenticate", new authenticate());
      processMap.put("registerUser", new registerUser());
      processMap.put("openCellSession", new openCellSession());
      processMap.put("verifyCellSession", new verifyCellSession());
      processMap.put("openForgetPasswordSession", new openForgetPasswordSession());
      processMap.put("verifyForgetPasswordSession", new verifyForgetPasswordSession());
      processMap.put("openChangePasswordSession", new openChangePasswordSession());
      processMap.put("verifyChangePasswordSession", new verifyChangePasswordSession());
      processMap.put("loginByPhone", new loginByPhone());
      processMap.put("loginByReference", new loginByReference());
      processMap.put("createUser", new createUser());
      processMap.put("deleteUser", new deleteUser());
      processMap.put("updateUser", new updateUser());
      processMap.put("queryUserInfo", new queryUserInfo());
      processMap.put("queryUser", new queryUser());
      processMap.put("querySession", new querySession());
      processMap.put("disposeSession", new disposeSession());
      return processMap;
    }

    public static class authenticate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, authenticate_args, com.ishangke.edunav.commoncontract.model.UserBo> {
      public authenticate() {
        super("authenticate");
      }

      public authenticate_args getEmptyArgsInstance() {
        return new authenticate_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.UserBo o) {
            authenticate_result result = new authenticate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            authenticate_result result = new authenticate_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, authenticate_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> resultHandler) throws TException {
        iface.authenticate(args.sessionString,resultHandler);
      }
    }

    public static class registerUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerUser_args, com.ishangke.edunav.commoncontract.model.UserBo> {
      public registerUser() {
        super("registerUser");
      }

      public registerUser_args getEmptyArgsInstance() {
        return new registerUser_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.UserBo o) {
            registerUser_result result = new registerUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerUser_result result = new registerUser_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerUser_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> resultHandler) throws TException {
        iface.registerUser(args.userBo,resultHandler);
      }
    }

    public static class openCellSession<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, openCellSession_args, com.ishangke.edunav.commoncontract.model.UserBo> {
      public openCellSession() {
        super("openCellSession");
      }

      public openCellSession_args getEmptyArgsInstance() {
        return new openCellSession_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.UserBo o) {
            openCellSession_result result = new openCellSession_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            openCellSession_result result = new openCellSession_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, openCellSession_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> resultHandler) throws TException {
        iface.openCellSession(args.sessionBo,resultHandler);
      }
    }

    public static class verifyCellSession<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifyCellSession_args, com.ishangke.edunav.commoncontract.model.UserBo> {
      public verifyCellSession() {
        super("verifyCellSession");
      }

      public verifyCellSession_args getEmptyArgsInstance() {
        return new verifyCellSession_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.UserBo o) {
            verifyCellSession_result result = new verifyCellSession_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            verifyCellSession_result result = new verifyCellSession_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifyCellSession_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> resultHandler) throws TException {
        iface.verifyCellSession(args.sessionBo,resultHandler);
      }
    }

    public static class openForgetPasswordSession<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, openForgetPasswordSession_args, com.ishangke.edunav.commoncontract.model.UserBo> {
      public openForgetPasswordSession() {
        super("openForgetPasswordSession");
      }

      public openForgetPasswordSession_args getEmptyArgsInstance() {
        return new openForgetPasswordSession_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.UserBo o) {
            openForgetPasswordSession_result result = new openForgetPasswordSession_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            openForgetPasswordSession_result result = new openForgetPasswordSession_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, openForgetPasswordSession_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> resultHandler) throws TException {
        iface.openForgetPasswordSession(args.sessionBo,resultHandler);
      }
    }

    public static class verifyForgetPasswordSession<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifyForgetPasswordSession_args, com.ishangke.edunav.commoncontract.model.UserBo> {
      public verifyForgetPasswordSession() {
        super("verifyForgetPasswordSession");
      }

      public verifyForgetPasswordSession_args getEmptyArgsInstance() {
        return new verifyForgetPasswordSession_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.UserBo o) {
            verifyForgetPasswordSession_result result = new verifyForgetPasswordSession_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            verifyForgetPasswordSession_result result = new verifyForgetPasswordSession_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifyForgetPasswordSession_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> resultHandler) throws TException {
        iface.verifyForgetPasswordSession(args.sessionBo,resultHandler);
      }
    }

    public static class openChangePasswordSession<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, openChangePasswordSession_args, com.ishangke.edunav.commoncontract.model.UserBo> {
      public openChangePasswordSession() {
        super("openChangePasswordSession");
      }

      public openChangePasswordSession_args getEmptyArgsInstance() {
        return new openChangePasswordSession_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.UserBo o) {
            openChangePasswordSession_result result = new openChangePasswordSession_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            openChangePasswordSession_result result = new openChangePasswordSession_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, openChangePasswordSession_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> resultHandler) throws TException {
        iface.openChangePasswordSession(args.sessionBo,resultHandler);
      }
    }

    public static class verifyChangePasswordSession<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifyChangePasswordSession_args, com.ishangke.edunav.commoncontract.model.UserBo> {
      public verifyChangePasswordSession() {
        super("verifyChangePasswordSession");
      }

      public verifyChangePasswordSession_args getEmptyArgsInstance() {
        return new verifyChangePasswordSession_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.UserBo o) {
            verifyChangePasswordSession_result result = new verifyChangePasswordSession_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            verifyChangePasswordSession_result result = new verifyChangePasswordSession_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifyChangePasswordSession_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> resultHandler) throws TException {
        iface.verifyChangePasswordSession(args.sessionBo,resultHandler);
      }
    }

    public static class loginByPhone<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loginByPhone_args, com.ishangke.edunav.commoncontract.model.UserBo> {
      public loginByPhone() {
        super("loginByPhone");
      }

      public loginByPhone_args getEmptyArgsInstance() {
        return new loginByPhone_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.UserBo o) {
            loginByPhone_result result = new loginByPhone_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loginByPhone_result result = new loginByPhone_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loginByPhone_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> resultHandler) throws TException {
        iface.loginByPhone(args.loginBo,resultHandler);
      }
    }

    public static class loginByReference<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loginByReference_args, com.ishangke.edunav.commoncontract.model.UserBo> {
      public loginByReference() {
        super("loginByReference");
      }

      public loginByReference_args getEmptyArgsInstance() {
        return new loginByReference_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.UserBo o) {
            loginByReference_result result = new loginByReference_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loginByReference_result result = new loginByReference_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loginByReference_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> resultHandler) throws TException {
        iface.loginByReference(args.loginBo,resultHandler);
      }
    }

    public static class createUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createUser_args, com.ishangke.edunav.commoncontract.model.UserBo> {
      public createUser() {
        super("createUser");
      }

      public createUser_args getEmptyArgsInstance() {
        return new createUser_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.UserBo o) {
            createUser_result result = new createUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createUser_result result = new createUser_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createUser_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> resultHandler) throws TException {
        iface.createUser(args.targetUser, args.partnerBo, args.currentUser,resultHandler);
      }
    }

    public static class deleteUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteUser_args, com.ishangke.edunav.commoncontract.model.UserBo> {
      public deleteUser() {
        super("deleteUser");
      }

      public deleteUser_args getEmptyArgsInstance() {
        return new deleteUser_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.UserBo o) {
            deleteUser_result result = new deleteUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteUser_result result = new deleteUser_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteUser_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> resultHandler) throws TException {
        iface.deleteUser(args.targetUser, args.currentUser,resultHandler);
      }
    }

    public static class updateUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateUser_args, com.ishangke.edunav.commoncontract.model.UserBo> {
      public updateUser() {
        super("updateUser");
      }

      public updateUser_args getEmptyArgsInstance() {
        return new updateUser_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.UserBo o) {
            updateUser_result result = new updateUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateUser_result result = new updateUser_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateUser_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> resultHandler) throws TException {
        iface.updateUser(args.targetUser, args.currentUser,resultHandler);
      }
    }

    public static class queryUserInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryUserInfo_args, List<com.ishangke.edunav.commoncontract.model.UserBo>> {
      public queryUserInfo() {
        super("queryUserInfo");
      }

      public queryUserInfo_args getEmptyArgsInstance() {
        return new queryUserInfo_args();
      }

      public AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.UserBo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.UserBo>>() { 
          public void onComplete(List<com.ishangke.edunav.commoncontract.model.UserBo> o) {
            queryUserInfo_result result = new queryUserInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryUserInfo_result result = new queryUserInfo_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryUserInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.UserBo>> resultHandler) throws TException {
        iface.queryUserInfo(args.queryUser, args.currentUser,resultHandler);
      }
    }

    public static class queryUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryUser_args, List<com.ishangke.edunav.commoncontract.model.UserBo>> {
      public queryUser() {
        super("queryUser");
      }

      public queryUser_args getEmptyArgsInstance() {
        return new queryUser_args();
      }

      public AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.UserBo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.UserBo>>() { 
          public void onComplete(List<com.ishangke.edunav.commoncontract.model.UserBo> o) {
            queryUser_result result = new queryUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryUser_result result = new queryUser_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryUser_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.UserBo>> resultHandler) throws TException {
        iface.queryUser(args.queryUser, args.partnerBo, args.currentUser, args.pagnationBo,resultHandler);
      }
    }

    public static class querySession<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySession_args, List<com.ishangke.edunav.commoncontract.model.UserBo>> {
      public querySession() {
        super("querySession");
      }

      public querySession_args getEmptyArgsInstance() {
        return new querySession_args();
      }

      public AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.UserBo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.UserBo>>() { 
          public void onComplete(List<com.ishangke.edunav.commoncontract.model.UserBo> o) {
            querySession_result result = new querySession_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySession_result result = new querySession_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySession_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.ishangke.edunav.commoncontract.model.UserBo>> resultHandler) throws TException {
        iface.querySession(args.userBo,resultHandler);
      }
    }

    public static class disposeSession<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, disposeSession_args, com.ishangke.edunav.commoncontract.model.UserBo> {
      public disposeSession() {
        super("disposeSession");
      }

      public disposeSession_args getEmptyArgsInstance() {
        return new disposeSession_args();
      }

      public AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo>() { 
          public void onComplete(com.ishangke.edunav.commoncontract.model.UserBo o) {
            disposeSession_result result = new disposeSession_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            disposeSession_result result = new disposeSession_result();
            if (e instanceof com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) {
                        result.businessExceptionBo = (com.ishangke.edunav.commoncontract.model.BusinessExceptionBo) e;
                        result.setBusinessExceptionBoIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, disposeSession_args args, org.apache.thrift.async.AsyncMethodCallback<com.ishangke.edunav.commoncontract.model.UserBo> resultHandler) throws TException {
        iface.disposeSession(args.userBo,resultHandler);
      }
    }

  }

  public static class authenticate_args implements org.apache.thrift.TBase<authenticate_args, authenticate_args._Fields>, java.io.Serializable, Cloneable, Comparable<authenticate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authenticate_args");

    private static final org.apache.thrift.protocol.TField SESSION_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authenticate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authenticate_argsTupleSchemeFactory());
    }

    public String sessionString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_STRING((short)1, "sessionString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_STRING
            return SESSION_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_STRING, new org.apache.thrift.meta_data.FieldMetaData("sessionString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authenticate_args.class, metaDataMap);
    }

    public authenticate_args() {
    }

    public authenticate_args(
      String sessionString)
    {
      this();
      this.sessionString = sessionString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticate_args(authenticate_args other) {
      if (other.isSetSessionString()) {
        this.sessionString = other.sessionString;
      }
    }

    public authenticate_args deepCopy() {
      return new authenticate_args(this);
    }

    @Override
    public void clear() {
      this.sessionString = null;
    }

    public String getSessionString() {
      return this.sessionString;
    }

    public authenticate_args setSessionString(String sessionString) {
      this.sessionString = sessionString;
      return this;
    }

    public void unsetSessionString() {
      this.sessionString = null;
    }

    /** Returns true if field sessionString is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionString() {
      return this.sessionString != null;
    }

    public void setSessionStringIsSet(boolean value) {
      if (!value) {
        this.sessionString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_STRING:
        if (value == null) {
          unsetSessionString();
        } else {
          setSessionString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_STRING:
        return getSessionString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_STRING:
        return isSetSessionString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticate_args)
        return this.equals((authenticate_args)that);
      return false;
    }

    public boolean equals(authenticate_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionString = true && this.isSetSessionString();
      boolean that_present_sessionString = true && that.isSetSessionString();
      if (this_present_sessionString || that_present_sessionString) {
        if (!(this_present_sessionString && that_present_sessionString))
          return false;
        if (!this.sessionString.equals(that.sessionString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_sessionString = true && (isSetSessionString());
      builder.append(present_sessionString);
      if (present_sessionString)
        builder.append(sessionString);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(authenticate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionString()).compareTo(other.isSetSessionString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionString, other.sessionString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authenticate_args(");
      boolean first = true;

      sb.append("sessionString:");
      if (this.sessionString == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authenticate_argsStandardSchemeFactory implements SchemeFactory {
      public authenticate_argsStandardScheme getScheme() {
        return new authenticate_argsStandardScheme();
      }
    }

    private static class authenticate_argsStandardScheme extends StandardScheme<authenticate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authenticate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionString = iprot.readString();
                struct.setSessionStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authenticate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionString != null) {
          oprot.writeFieldBegin(SESSION_STRING_FIELD_DESC);
          oprot.writeString(struct.sessionString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authenticate_argsTupleSchemeFactory implements SchemeFactory {
      public authenticate_argsTupleScheme getScheme() {
        return new authenticate_argsTupleScheme();
      }
    }

    private static class authenticate_argsTupleScheme extends TupleScheme<authenticate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authenticate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionString()) {
          oprot.writeString(struct.sessionString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authenticate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionString = iprot.readString();
          struct.setSessionStringIsSet(true);
        }
      }
    }

  }

  public static class authenticate_result implements org.apache.thrift.TBase<authenticate_result, authenticate_result._Fields>, java.io.Serializable, Cloneable, Comparable<authenticate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authenticate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authenticate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authenticate_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authenticate_result.class, metaDataMap);
    }

    public authenticate_result() {
    }

    public authenticate_result(
      com.ishangke.edunav.commoncontract.model.UserBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticate_result(authenticate_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.UserBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public authenticate_result deepCopy() {
      return new authenticate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getSuccess() {
      return this.success;
    }

    public authenticate_result setSuccess(com.ishangke.edunav.commoncontract.model.UserBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public authenticate_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticate_result)
        return this.equals((authenticate_result)that);
      return false;
    }

    public boolean equals(authenticate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(authenticate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authenticate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authenticate_resultStandardSchemeFactory implements SchemeFactory {
      public authenticate_resultStandardScheme getScheme() {
        return new authenticate_resultStandardScheme();
      }
    }

    private static class authenticate_resultStandardScheme extends StandardScheme<authenticate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authenticate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authenticate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authenticate_resultTupleSchemeFactory implements SchemeFactory {
      public authenticate_resultTupleScheme getScheme() {
        return new authenticate_resultTupleScheme();
      }
    }

    private static class authenticate_resultTupleScheme extends TupleScheme<authenticate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authenticate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authenticate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class registerUser_args implements org.apache.thrift.TBase<registerUser_args, registerUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerUser_args");

    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerUser_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_BO((short)1, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerUser_args.class, metaDataMap);
    }

    public registerUser_args() {
    }

    public registerUser_args(
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerUser_args(registerUser_args other) {
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public registerUser_args deepCopy() {
      return new registerUser_args(this);
    }

    @Override
    public void clear() {
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public registerUser_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerUser_args)
        return this.equals((registerUser_args)that);
      return false;
    }

    public boolean equals(registerUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(registerUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerUser_args(");
      boolean first = true;

      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerUser_argsStandardSchemeFactory implements SchemeFactory {
      public registerUser_argsStandardScheme getScheme() {
        return new registerUser_argsStandardScheme();
      }
    }

    private static class registerUser_argsStandardScheme extends StandardScheme<registerUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerUser_argsTupleSchemeFactory implements SchemeFactory {
      public registerUser_argsTupleScheme getScheme() {
        return new registerUser_argsTupleScheme();
      }
    }

    private static class registerUser_argsTupleScheme extends TupleScheme<registerUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserBo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class registerUser_result implements org.apache.thrift.TBase<registerUser_result, registerUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerUser_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerUser_result.class, metaDataMap);
    }

    public registerUser_result() {
    }

    public registerUser_result(
      com.ishangke.edunav.commoncontract.model.UserBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerUser_result(registerUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.UserBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public registerUser_result deepCopy() {
      return new registerUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getSuccess() {
      return this.success;
    }

    public registerUser_result setSuccess(com.ishangke.edunav.commoncontract.model.UserBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public registerUser_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerUser_result)
        return this.equals((registerUser_result)that);
      return false;
    }

    public boolean equals(registerUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(registerUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerUser_resultStandardSchemeFactory implements SchemeFactory {
      public registerUser_resultStandardScheme getScheme() {
        return new registerUser_resultStandardScheme();
      }
    }

    private static class registerUser_resultStandardScheme extends StandardScheme<registerUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerUser_resultTupleSchemeFactory implements SchemeFactory {
      public registerUser_resultTupleScheme getScheme() {
        return new registerUser_resultTupleScheme();
      }
    }

    private static class registerUser_resultTupleScheme extends TupleScheme<registerUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class openCellSession_args implements org.apache.thrift.TBase<openCellSession_args, openCellSession_args._Fields>, java.io.Serializable, Cloneable, Comparable<openCellSession_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openCellSession_args");

    private static final org.apache.thrift.protocol.TField SESSION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openCellSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openCellSession_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.SessionBo sessionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_BO((short)1, "sessionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_BO
            return SESSION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_BO, new org.apache.thrift.meta_data.FieldMetaData("sessionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.SessionBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openCellSession_args.class, metaDataMap);
    }

    public openCellSession_args() {
    }

    public openCellSession_args(
      com.ishangke.edunav.commoncontract.model.SessionBo sessionBo)
    {
      this();
      this.sessionBo = sessionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openCellSession_args(openCellSession_args other) {
      if (other.isSetSessionBo()) {
        this.sessionBo = new com.ishangke.edunav.commoncontract.model.SessionBo(other.sessionBo);
      }
    }

    public openCellSession_args deepCopy() {
      return new openCellSession_args(this);
    }

    @Override
    public void clear() {
      this.sessionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.SessionBo getSessionBo() {
      return this.sessionBo;
    }

    public openCellSession_args setSessionBo(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) {
      this.sessionBo = sessionBo;
      return this;
    }

    public void unsetSessionBo() {
      this.sessionBo = null;
    }

    /** Returns true if field sessionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionBo() {
      return this.sessionBo != null;
    }

    public void setSessionBoIsSet(boolean value) {
      if (!value) {
        this.sessionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_BO:
        if (value == null) {
          unsetSessionBo();
        } else {
          setSessionBo((com.ishangke.edunav.commoncontract.model.SessionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_BO:
        return getSessionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_BO:
        return isSetSessionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openCellSession_args)
        return this.equals((openCellSession_args)that);
      return false;
    }

    public boolean equals(openCellSession_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionBo = true && this.isSetSessionBo();
      boolean that_present_sessionBo = true && that.isSetSessionBo();
      if (this_present_sessionBo || that_present_sessionBo) {
        if (!(this_present_sessionBo && that_present_sessionBo))
          return false;
        if (!this.sessionBo.equals(that.sessionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_sessionBo = true && (isSetSessionBo());
      builder.append(present_sessionBo);
      if (present_sessionBo)
        builder.append(sessionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(openCellSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionBo()).compareTo(other.isSetSessionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionBo, other.sessionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openCellSession_args(");
      boolean first = true;

      sb.append("sessionBo:");
      if (this.sessionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sessionBo != null) {
        sessionBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openCellSession_argsStandardSchemeFactory implements SchemeFactory {
      public openCellSession_argsStandardScheme getScheme() {
        return new openCellSession_argsStandardScheme();
      }
    }

    private static class openCellSession_argsStandardScheme extends StandardScheme<openCellSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openCellSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sessionBo = new com.ishangke.edunav.commoncontract.model.SessionBo();
                struct.sessionBo.read(iprot);
                struct.setSessionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openCellSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionBo != null) {
          oprot.writeFieldBegin(SESSION_BO_FIELD_DESC);
          struct.sessionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openCellSession_argsTupleSchemeFactory implements SchemeFactory {
      public openCellSession_argsTupleScheme getScheme() {
        return new openCellSession_argsTupleScheme();
      }
    }

    private static class openCellSession_argsTupleScheme extends TupleScheme<openCellSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openCellSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionBo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionBo()) {
          struct.sessionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openCellSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionBo = new com.ishangke.edunav.commoncontract.model.SessionBo();
          struct.sessionBo.read(iprot);
          struct.setSessionBoIsSet(true);
        }
      }
    }

  }

  public static class openCellSession_result implements org.apache.thrift.TBase<openCellSession_result, openCellSession_result._Fields>, java.io.Serializable, Cloneable, Comparable<openCellSession_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openCellSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openCellSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openCellSession_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openCellSession_result.class, metaDataMap);
    }

    public openCellSession_result() {
    }

    public openCellSession_result(
      com.ishangke.edunav.commoncontract.model.UserBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openCellSession_result(openCellSession_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.UserBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public openCellSession_result deepCopy() {
      return new openCellSession_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getSuccess() {
      return this.success;
    }

    public openCellSession_result setSuccess(com.ishangke.edunav.commoncontract.model.UserBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public openCellSession_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openCellSession_result)
        return this.equals((openCellSession_result)that);
      return false;
    }

    public boolean equals(openCellSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(openCellSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openCellSession_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openCellSession_resultStandardSchemeFactory implements SchemeFactory {
      public openCellSession_resultStandardScheme getScheme() {
        return new openCellSession_resultStandardScheme();
      }
    }

    private static class openCellSession_resultStandardScheme extends StandardScheme<openCellSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openCellSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openCellSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openCellSession_resultTupleSchemeFactory implements SchemeFactory {
      public openCellSession_resultTupleScheme getScheme() {
        return new openCellSession_resultTupleScheme();
      }
    }

    private static class openCellSession_resultTupleScheme extends TupleScheme<openCellSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openCellSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openCellSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class verifyCellSession_args implements org.apache.thrift.TBase<verifyCellSession_args, verifyCellSession_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifyCellSession_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyCellSession_args");

    private static final org.apache.thrift.protocol.TField SESSION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyCellSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyCellSession_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.SessionBo sessionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_BO((short)1, "sessionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_BO
            return SESSION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_BO, new org.apache.thrift.meta_data.FieldMetaData("sessionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.SessionBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyCellSession_args.class, metaDataMap);
    }

    public verifyCellSession_args() {
    }

    public verifyCellSession_args(
      com.ishangke.edunav.commoncontract.model.SessionBo sessionBo)
    {
      this();
      this.sessionBo = sessionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyCellSession_args(verifyCellSession_args other) {
      if (other.isSetSessionBo()) {
        this.sessionBo = new com.ishangke.edunav.commoncontract.model.SessionBo(other.sessionBo);
      }
    }

    public verifyCellSession_args deepCopy() {
      return new verifyCellSession_args(this);
    }

    @Override
    public void clear() {
      this.sessionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.SessionBo getSessionBo() {
      return this.sessionBo;
    }

    public verifyCellSession_args setSessionBo(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) {
      this.sessionBo = sessionBo;
      return this;
    }

    public void unsetSessionBo() {
      this.sessionBo = null;
    }

    /** Returns true if field sessionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionBo() {
      return this.sessionBo != null;
    }

    public void setSessionBoIsSet(boolean value) {
      if (!value) {
        this.sessionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_BO:
        if (value == null) {
          unsetSessionBo();
        } else {
          setSessionBo((com.ishangke.edunav.commoncontract.model.SessionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_BO:
        return getSessionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_BO:
        return isSetSessionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyCellSession_args)
        return this.equals((verifyCellSession_args)that);
      return false;
    }

    public boolean equals(verifyCellSession_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionBo = true && this.isSetSessionBo();
      boolean that_present_sessionBo = true && that.isSetSessionBo();
      if (this_present_sessionBo || that_present_sessionBo) {
        if (!(this_present_sessionBo && that_present_sessionBo))
          return false;
        if (!this.sessionBo.equals(that.sessionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_sessionBo = true && (isSetSessionBo());
      builder.append(present_sessionBo);
      if (present_sessionBo)
        builder.append(sessionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(verifyCellSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionBo()).compareTo(other.isSetSessionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionBo, other.sessionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyCellSession_args(");
      boolean first = true;

      sb.append("sessionBo:");
      if (this.sessionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sessionBo != null) {
        sessionBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyCellSession_argsStandardSchemeFactory implements SchemeFactory {
      public verifyCellSession_argsStandardScheme getScheme() {
        return new verifyCellSession_argsStandardScheme();
      }
    }

    private static class verifyCellSession_argsStandardScheme extends StandardScheme<verifyCellSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyCellSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sessionBo = new com.ishangke.edunav.commoncontract.model.SessionBo();
                struct.sessionBo.read(iprot);
                struct.setSessionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyCellSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionBo != null) {
          oprot.writeFieldBegin(SESSION_BO_FIELD_DESC);
          struct.sessionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyCellSession_argsTupleSchemeFactory implements SchemeFactory {
      public verifyCellSession_argsTupleScheme getScheme() {
        return new verifyCellSession_argsTupleScheme();
      }
    }

    private static class verifyCellSession_argsTupleScheme extends TupleScheme<verifyCellSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyCellSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionBo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionBo()) {
          struct.sessionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyCellSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionBo = new com.ishangke.edunav.commoncontract.model.SessionBo();
          struct.sessionBo.read(iprot);
          struct.setSessionBoIsSet(true);
        }
      }
    }

  }

  public static class verifyCellSession_result implements org.apache.thrift.TBase<verifyCellSession_result, verifyCellSession_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifyCellSession_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyCellSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyCellSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyCellSession_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyCellSession_result.class, metaDataMap);
    }

    public verifyCellSession_result() {
    }

    public verifyCellSession_result(
      com.ishangke.edunav.commoncontract.model.UserBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyCellSession_result(verifyCellSession_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.UserBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public verifyCellSession_result deepCopy() {
      return new verifyCellSession_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getSuccess() {
      return this.success;
    }

    public verifyCellSession_result setSuccess(com.ishangke.edunav.commoncontract.model.UserBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public verifyCellSession_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyCellSession_result)
        return this.equals((verifyCellSession_result)that);
      return false;
    }

    public boolean equals(verifyCellSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(verifyCellSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyCellSession_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyCellSession_resultStandardSchemeFactory implements SchemeFactory {
      public verifyCellSession_resultStandardScheme getScheme() {
        return new verifyCellSession_resultStandardScheme();
      }
    }

    private static class verifyCellSession_resultStandardScheme extends StandardScheme<verifyCellSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyCellSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyCellSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyCellSession_resultTupleSchemeFactory implements SchemeFactory {
      public verifyCellSession_resultTupleScheme getScheme() {
        return new verifyCellSession_resultTupleScheme();
      }
    }

    private static class verifyCellSession_resultTupleScheme extends TupleScheme<verifyCellSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyCellSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyCellSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class openForgetPasswordSession_args implements org.apache.thrift.TBase<openForgetPasswordSession_args, openForgetPasswordSession_args._Fields>, java.io.Serializable, Cloneable, Comparable<openForgetPasswordSession_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openForgetPasswordSession_args");

    private static final org.apache.thrift.protocol.TField SESSION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openForgetPasswordSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openForgetPasswordSession_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.SessionBo sessionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_BO((short)1, "sessionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_BO
            return SESSION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_BO, new org.apache.thrift.meta_data.FieldMetaData("sessionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.SessionBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openForgetPasswordSession_args.class, metaDataMap);
    }

    public openForgetPasswordSession_args() {
    }

    public openForgetPasswordSession_args(
      com.ishangke.edunav.commoncontract.model.SessionBo sessionBo)
    {
      this();
      this.sessionBo = sessionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openForgetPasswordSession_args(openForgetPasswordSession_args other) {
      if (other.isSetSessionBo()) {
        this.sessionBo = new com.ishangke.edunav.commoncontract.model.SessionBo(other.sessionBo);
      }
    }

    public openForgetPasswordSession_args deepCopy() {
      return new openForgetPasswordSession_args(this);
    }

    @Override
    public void clear() {
      this.sessionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.SessionBo getSessionBo() {
      return this.sessionBo;
    }

    public openForgetPasswordSession_args setSessionBo(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) {
      this.sessionBo = sessionBo;
      return this;
    }

    public void unsetSessionBo() {
      this.sessionBo = null;
    }

    /** Returns true if field sessionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionBo() {
      return this.sessionBo != null;
    }

    public void setSessionBoIsSet(boolean value) {
      if (!value) {
        this.sessionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_BO:
        if (value == null) {
          unsetSessionBo();
        } else {
          setSessionBo((com.ishangke.edunav.commoncontract.model.SessionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_BO:
        return getSessionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_BO:
        return isSetSessionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openForgetPasswordSession_args)
        return this.equals((openForgetPasswordSession_args)that);
      return false;
    }

    public boolean equals(openForgetPasswordSession_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionBo = true && this.isSetSessionBo();
      boolean that_present_sessionBo = true && that.isSetSessionBo();
      if (this_present_sessionBo || that_present_sessionBo) {
        if (!(this_present_sessionBo && that_present_sessionBo))
          return false;
        if (!this.sessionBo.equals(that.sessionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_sessionBo = true && (isSetSessionBo());
      builder.append(present_sessionBo);
      if (present_sessionBo)
        builder.append(sessionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(openForgetPasswordSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionBo()).compareTo(other.isSetSessionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionBo, other.sessionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openForgetPasswordSession_args(");
      boolean first = true;

      sb.append("sessionBo:");
      if (this.sessionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sessionBo != null) {
        sessionBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openForgetPasswordSession_argsStandardSchemeFactory implements SchemeFactory {
      public openForgetPasswordSession_argsStandardScheme getScheme() {
        return new openForgetPasswordSession_argsStandardScheme();
      }
    }

    private static class openForgetPasswordSession_argsStandardScheme extends StandardScheme<openForgetPasswordSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openForgetPasswordSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sessionBo = new com.ishangke.edunav.commoncontract.model.SessionBo();
                struct.sessionBo.read(iprot);
                struct.setSessionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openForgetPasswordSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionBo != null) {
          oprot.writeFieldBegin(SESSION_BO_FIELD_DESC);
          struct.sessionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openForgetPasswordSession_argsTupleSchemeFactory implements SchemeFactory {
      public openForgetPasswordSession_argsTupleScheme getScheme() {
        return new openForgetPasswordSession_argsTupleScheme();
      }
    }

    private static class openForgetPasswordSession_argsTupleScheme extends TupleScheme<openForgetPasswordSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openForgetPasswordSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionBo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionBo()) {
          struct.sessionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openForgetPasswordSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionBo = new com.ishangke.edunav.commoncontract.model.SessionBo();
          struct.sessionBo.read(iprot);
          struct.setSessionBoIsSet(true);
        }
      }
    }

  }

  public static class openForgetPasswordSession_result implements org.apache.thrift.TBase<openForgetPasswordSession_result, openForgetPasswordSession_result._Fields>, java.io.Serializable, Cloneable, Comparable<openForgetPasswordSession_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openForgetPasswordSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openForgetPasswordSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openForgetPasswordSession_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openForgetPasswordSession_result.class, metaDataMap);
    }

    public openForgetPasswordSession_result() {
    }

    public openForgetPasswordSession_result(
      com.ishangke.edunav.commoncontract.model.UserBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openForgetPasswordSession_result(openForgetPasswordSession_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.UserBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public openForgetPasswordSession_result deepCopy() {
      return new openForgetPasswordSession_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getSuccess() {
      return this.success;
    }

    public openForgetPasswordSession_result setSuccess(com.ishangke.edunav.commoncontract.model.UserBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public openForgetPasswordSession_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openForgetPasswordSession_result)
        return this.equals((openForgetPasswordSession_result)that);
      return false;
    }

    public boolean equals(openForgetPasswordSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(openForgetPasswordSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openForgetPasswordSession_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openForgetPasswordSession_resultStandardSchemeFactory implements SchemeFactory {
      public openForgetPasswordSession_resultStandardScheme getScheme() {
        return new openForgetPasswordSession_resultStandardScheme();
      }
    }

    private static class openForgetPasswordSession_resultStandardScheme extends StandardScheme<openForgetPasswordSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openForgetPasswordSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openForgetPasswordSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openForgetPasswordSession_resultTupleSchemeFactory implements SchemeFactory {
      public openForgetPasswordSession_resultTupleScheme getScheme() {
        return new openForgetPasswordSession_resultTupleScheme();
      }
    }

    private static class openForgetPasswordSession_resultTupleScheme extends TupleScheme<openForgetPasswordSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openForgetPasswordSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openForgetPasswordSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class verifyForgetPasswordSession_args implements org.apache.thrift.TBase<verifyForgetPasswordSession_args, verifyForgetPasswordSession_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifyForgetPasswordSession_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyForgetPasswordSession_args");

    private static final org.apache.thrift.protocol.TField SESSION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyForgetPasswordSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyForgetPasswordSession_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.SessionBo sessionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_BO((short)1, "sessionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_BO
            return SESSION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_BO, new org.apache.thrift.meta_data.FieldMetaData("sessionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.SessionBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyForgetPasswordSession_args.class, metaDataMap);
    }

    public verifyForgetPasswordSession_args() {
    }

    public verifyForgetPasswordSession_args(
      com.ishangke.edunav.commoncontract.model.SessionBo sessionBo)
    {
      this();
      this.sessionBo = sessionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyForgetPasswordSession_args(verifyForgetPasswordSession_args other) {
      if (other.isSetSessionBo()) {
        this.sessionBo = new com.ishangke.edunav.commoncontract.model.SessionBo(other.sessionBo);
      }
    }

    public verifyForgetPasswordSession_args deepCopy() {
      return new verifyForgetPasswordSession_args(this);
    }

    @Override
    public void clear() {
      this.sessionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.SessionBo getSessionBo() {
      return this.sessionBo;
    }

    public verifyForgetPasswordSession_args setSessionBo(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) {
      this.sessionBo = sessionBo;
      return this;
    }

    public void unsetSessionBo() {
      this.sessionBo = null;
    }

    /** Returns true if field sessionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionBo() {
      return this.sessionBo != null;
    }

    public void setSessionBoIsSet(boolean value) {
      if (!value) {
        this.sessionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_BO:
        if (value == null) {
          unsetSessionBo();
        } else {
          setSessionBo((com.ishangke.edunav.commoncontract.model.SessionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_BO:
        return getSessionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_BO:
        return isSetSessionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyForgetPasswordSession_args)
        return this.equals((verifyForgetPasswordSession_args)that);
      return false;
    }

    public boolean equals(verifyForgetPasswordSession_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionBo = true && this.isSetSessionBo();
      boolean that_present_sessionBo = true && that.isSetSessionBo();
      if (this_present_sessionBo || that_present_sessionBo) {
        if (!(this_present_sessionBo && that_present_sessionBo))
          return false;
        if (!this.sessionBo.equals(that.sessionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_sessionBo = true && (isSetSessionBo());
      builder.append(present_sessionBo);
      if (present_sessionBo)
        builder.append(sessionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(verifyForgetPasswordSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionBo()).compareTo(other.isSetSessionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionBo, other.sessionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyForgetPasswordSession_args(");
      boolean first = true;

      sb.append("sessionBo:");
      if (this.sessionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sessionBo != null) {
        sessionBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyForgetPasswordSession_argsStandardSchemeFactory implements SchemeFactory {
      public verifyForgetPasswordSession_argsStandardScheme getScheme() {
        return new verifyForgetPasswordSession_argsStandardScheme();
      }
    }

    private static class verifyForgetPasswordSession_argsStandardScheme extends StandardScheme<verifyForgetPasswordSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyForgetPasswordSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sessionBo = new com.ishangke.edunav.commoncontract.model.SessionBo();
                struct.sessionBo.read(iprot);
                struct.setSessionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyForgetPasswordSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionBo != null) {
          oprot.writeFieldBegin(SESSION_BO_FIELD_DESC);
          struct.sessionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyForgetPasswordSession_argsTupleSchemeFactory implements SchemeFactory {
      public verifyForgetPasswordSession_argsTupleScheme getScheme() {
        return new verifyForgetPasswordSession_argsTupleScheme();
      }
    }

    private static class verifyForgetPasswordSession_argsTupleScheme extends TupleScheme<verifyForgetPasswordSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyForgetPasswordSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionBo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionBo()) {
          struct.sessionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyForgetPasswordSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionBo = new com.ishangke.edunav.commoncontract.model.SessionBo();
          struct.sessionBo.read(iprot);
          struct.setSessionBoIsSet(true);
        }
      }
    }

  }

  public static class verifyForgetPasswordSession_result implements org.apache.thrift.TBase<verifyForgetPasswordSession_result, verifyForgetPasswordSession_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifyForgetPasswordSession_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyForgetPasswordSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyForgetPasswordSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyForgetPasswordSession_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyForgetPasswordSession_result.class, metaDataMap);
    }

    public verifyForgetPasswordSession_result() {
    }

    public verifyForgetPasswordSession_result(
      com.ishangke.edunav.commoncontract.model.UserBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyForgetPasswordSession_result(verifyForgetPasswordSession_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.UserBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public verifyForgetPasswordSession_result deepCopy() {
      return new verifyForgetPasswordSession_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getSuccess() {
      return this.success;
    }

    public verifyForgetPasswordSession_result setSuccess(com.ishangke.edunav.commoncontract.model.UserBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public verifyForgetPasswordSession_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyForgetPasswordSession_result)
        return this.equals((verifyForgetPasswordSession_result)that);
      return false;
    }

    public boolean equals(verifyForgetPasswordSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(verifyForgetPasswordSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyForgetPasswordSession_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyForgetPasswordSession_resultStandardSchemeFactory implements SchemeFactory {
      public verifyForgetPasswordSession_resultStandardScheme getScheme() {
        return new verifyForgetPasswordSession_resultStandardScheme();
      }
    }

    private static class verifyForgetPasswordSession_resultStandardScheme extends StandardScheme<verifyForgetPasswordSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyForgetPasswordSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyForgetPasswordSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyForgetPasswordSession_resultTupleSchemeFactory implements SchemeFactory {
      public verifyForgetPasswordSession_resultTupleScheme getScheme() {
        return new verifyForgetPasswordSession_resultTupleScheme();
      }
    }

    private static class verifyForgetPasswordSession_resultTupleScheme extends TupleScheme<verifyForgetPasswordSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyForgetPasswordSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyForgetPasswordSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class openChangePasswordSession_args implements org.apache.thrift.TBase<openChangePasswordSession_args, openChangePasswordSession_args._Fields>, java.io.Serializable, Cloneable, Comparable<openChangePasswordSession_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openChangePasswordSession_args");

    private static final org.apache.thrift.protocol.TField SESSION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openChangePasswordSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openChangePasswordSession_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.SessionBo sessionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_BO((short)1, "sessionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_BO
            return SESSION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_BO, new org.apache.thrift.meta_data.FieldMetaData("sessionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.SessionBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openChangePasswordSession_args.class, metaDataMap);
    }

    public openChangePasswordSession_args() {
    }

    public openChangePasswordSession_args(
      com.ishangke.edunav.commoncontract.model.SessionBo sessionBo)
    {
      this();
      this.sessionBo = sessionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openChangePasswordSession_args(openChangePasswordSession_args other) {
      if (other.isSetSessionBo()) {
        this.sessionBo = new com.ishangke.edunav.commoncontract.model.SessionBo(other.sessionBo);
      }
    }

    public openChangePasswordSession_args deepCopy() {
      return new openChangePasswordSession_args(this);
    }

    @Override
    public void clear() {
      this.sessionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.SessionBo getSessionBo() {
      return this.sessionBo;
    }

    public openChangePasswordSession_args setSessionBo(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) {
      this.sessionBo = sessionBo;
      return this;
    }

    public void unsetSessionBo() {
      this.sessionBo = null;
    }

    /** Returns true if field sessionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionBo() {
      return this.sessionBo != null;
    }

    public void setSessionBoIsSet(boolean value) {
      if (!value) {
        this.sessionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_BO:
        if (value == null) {
          unsetSessionBo();
        } else {
          setSessionBo((com.ishangke.edunav.commoncontract.model.SessionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_BO:
        return getSessionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_BO:
        return isSetSessionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openChangePasswordSession_args)
        return this.equals((openChangePasswordSession_args)that);
      return false;
    }

    public boolean equals(openChangePasswordSession_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionBo = true && this.isSetSessionBo();
      boolean that_present_sessionBo = true && that.isSetSessionBo();
      if (this_present_sessionBo || that_present_sessionBo) {
        if (!(this_present_sessionBo && that_present_sessionBo))
          return false;
        if (!this.sessionBo.equals(that.sessionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_sessionBo = true && (isSetSessionBo());
      builder.append(present_sessionBo);
      if (present_sessionBo)
        builder.append(sessionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(openChangePasswordSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionBo()).compareTo(other.isSetSessionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionBo, other.sessionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openChangePasswordSession_args(");
      boolean first = true;

      sb.append("sessionBo:");
      if (this.sessionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sessionBo != null) {
        sessionBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openChangePasswordSession_argsStandardSchemeFactory implements SchemeFactory {
      public openChangePasswordSession_argsStandardScheme getScheme() {
        return new openChangePasswordSession_argsStandardScheme();
      }
    }

    private static class openChangePasswordSession_argsStandardScheme extends StandardScheme<openChangePasswordSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openChangePasswordSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sessionBo = new com.ishangke.edunav.commoncontract.model.SessionBo();
                struct.sessionBo.read(iprot);
                struct.setSessionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openChangePasswordSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionBo != null) {
          oprot.writeFieldBegin(SESSION_BO_FIELD_DESC);
          struct.sessionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openChangePasswordSession_argsTupleSchemeFactory implements SchemeFactory {
      public openChangePasswordSession_argsTupleScheme getScheme() {
        return new openChangePasswordSession_argsTupleScheme();
      }
    }

    private static class openChangePasswordSession_argsTupleScheme extends TupleScheme<openChangePasswordSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openChangePasswordSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionBo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionBo()) {
          struct.sessionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openChangePasswordSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionBo = new com.ishangke.edunav.commoncontract.model.SessionBo();
          struct.sessionBo.read(iprot);
          struct.setSessionBoIsSet(true);
        }
      }
    }

  }

  public static class openChangePasswordSession_result implements org.apache.thrift.TBase<openChangePasswordSession_result, openChangePasswordSession_result._Fields>, java.io.Serializable, Cloneable, Comparable<openChangePasswordSession_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openChangePasswordSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openChangePasswordSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openChangePasswordSession_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openChangePasswordSession_result.class, metaDataMap);
    }

    public openChangePasswordSession_result() {
    }

    public openChangePasswordSession_result(
      com.ishangke.edunav.commoncontract.model.UserBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openChangePasswordSession_result(openChangePasswordSession_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.UserBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public openChangePasswordSession_result deepCopy() {
      return new openChangePasswordSession_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getSuccess() {
      return this.success;
    }

    public openChangePasswordSession_result setSuccess(com.ishangke.edunav.commoncontract.model.UserBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public openChangePasswordSession_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openChangePasswordSession_result)
        return this.equals((openChangePasswordSession_result)that);
      return false;
    }

    public boolean equals(openChangePasswordSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(openChangePasswordSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openChangePasswordSession_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openChangePasswordSession_resultStandardSchemeFactory implements SchemeFactory {
      public openChangePasswordSession_resultStandardScheme getScheme() {
        return new openChangePasswordSession_resultStandardScheme();
      }
    }

    private static class openChangePasswordSession_resultStandardScheme extends StandardScheme<openChangePasswordSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openChangePasswordSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openChangePasswordSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openChangePasswordSession_resultTupleSchemeFactory implements SchemeFactory {
      public openChangePasswordSession_resultTupleScheme getScheme() {
        return new openChangePasswordSession_resultTupleScheme();
      }
    }

    private static class openChangePasswordSession_resultTupleScheme extends TupleScheme<openChangePasswordSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openChangePasswordSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openChangePasswordSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class verifyChangePasswordSession_args implements org.apache.thrift.TBase<verifyChangePasswordSession_args, verifyChangePasswordSession_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifyChangePasswordSession_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyChangePasswordSession_args");

    private static final org.apache.thrift.protocol.TField SESSION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyChangePasswordSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyChangePasswordSession_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.SessionBo sessionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_BO((short)1, "sessionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_BO
            return SESSION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_BO, new org.apache.thrift.meta_data.FieldMetaData("sessionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.SessionBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyChangePasswordSession_args.class, metaDataMap);
    }

    public verifyChangePasswordSession_args() {
    }

    public verifyChangePasswordSession_args(
      com.ishangke.edunav.commoncontract.model.SessionBo sessionBo)
    {
      this();
      this.sessionBo = sessionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyChangePasswordSession_args(verifyChangePasswordSession_args other) {
      if (other.isSetSessionBo()) {
        this.sessionBo = new com.ishangke.edunav.commoncontract.model.SessionBo(other.sessionBo);
      }
    }

    public verifyChangePasswordSession_args deepCopy() {
      return new verifyChangePasswordSession_args(this);
    }

    @Override
    public void clear() {
      this.sessionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.SessionBo getSessionBo() {
      return this.sessionBo;
    }

    public verifyChangePasswordSession_args setSessionBo(com.ishangke.edunav.commoncontract.model.SessionBo sessionBo) {
      this.sessionBo = sessionBo;
      return this;
    }

    public void unsetSessionBo() {
      this.sessionBo = null;
    }

    /** Returns true if field sessionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionBo() {
      return this.sessionBo != null;
    }

    public void setSessionBoIsSet(boolean value) {
      if (!value) {
        this.sessionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_BO:
        if (value == null) {
          unsetSessionBo();
        } else {
          setSessionBo((com.ishangke.edunav.commoncontract.model.SessionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_BO:
        return getSessionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_BO:
        return isSetSessionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyChangePasswordSession_args)
        return this.equals((verifyChangePasswordSession_args)that);
      return false;
    }

    public boolean equals(verifyChangePasswordSession_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionBo = true && this.isSetSessionBo();
      boolean that_present_sessionBo = true && that.isSetSessionBo();
      if (this_present_sessionBo || that_present_sessionBo) {
        if (!(this_present_sessionBo && that_present_sessionBo))
          return false;
        if (!this.sessionBo.equals(that.sessionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_sessionBo = true && (isSetSessionBo());
      builder.append(present_sessionBo);
      if (present_sessionBo)
        builder.append(sessionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(verifyChangePasswordSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionBo()).compareTo(other.isSetSessionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionBo, other.sessionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyChangePasswordSession_args(");
      boolean first = true;

      sb.append("sessionBo:");
      if (this.sessionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sessionBo != null) {
        sessionBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyChangePasswordSession_argsStandardSchemeFactory implements SchemeFactory {
      public verifyChangePasswordSession_argsStandardScheme getScheme() {
        return new verifyChangePasswordSession_argsStandardScheme();
      }
    }

    private static class verifyChangePasswordSession_argsStandardScheme extends StandardScheme<verifyChangePasswordSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyChangePasswordSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sessionBo = new com.ishangke.edunav.commoncontract.model.SessionBo();
                struct.sessionBo.read(iprot);
                struct.setSessionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyChangePasswordSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionBo != null) {
          oprot.writeFieldBegin(SESSION_BO_FIELD_DESC);
          struct.sessionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyChangePasswordSession_argsTupleSchemeFactory implements SchemeFactory {
      public verifyChangePasswordSession_argsTupleScheme getScheme() {
        return new verifyChangePasswordSession_argsTupleScheme();
      }
    }

    private static class verifyChangePasswordSession_argsTupleScheme extends TupleScheme<verifyChangePasswordSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyChangePasswordSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionBo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionBo()) {
          struct.sessionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyChangePasswordSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionBo = new com.ishangke.edunav.commoncontract.model.SessionBo();
          struct.sessionBo.read(iprot);
          struct.setSessionBoIsSet(true);
        }
      }
    }

  }

  public static class verifyChangePasswordSession_result implements org.apache.thrift.TBase<verifyChangePasswordSession_result, verifyChangePasswordSession_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifyChangePasswordSession_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyChangePasswordSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyChangePasswordSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyChangePasswordSession_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyChangePasswordSession_result.class, metaDataMap);
    }

    public verifyChangePasswordSession_result() {
    }

    public verifyChangePasswordSession_result(
      com.ishangke.edunav.commoncontract.model.UserBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyChangePasswordSession_result(verifyChangePasswordSession_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.UserBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public verifyChangePasswordSession_result deepCopy() {
      return new verifyChangePasswordSession_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getSuccess() {
      return this.success;
    }

    public verifyChangePasswordSession_result setSuccess(com.ishangke.edunav.commoncontract.model.UserBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public verifyChangePasswordSession_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyChangePasswordSession_result)
        return this.equals((verifyChangePasswordSession_result)that);
      return false;
    }

    public boolean equals(verifyChangePasswordSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(verifyChangePasswordSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyChangePasswordSession_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyChangePasswordSession_resultStandardSchemeFactory implements SchemeFactory {
      public verifyChangePasswordSession_resultStandardScheme getScheme() {
        return new verifyChangePasswordSession_resultStandardScheme();
      }
    }

    private static class verifyChangePasswordSession_resultStandardScheme extends StandardScheme<verifyChangePasswordSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyChangePasswordSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyChangePasswordSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyChangePasswordSession_resultTupleSchemeFactory implements SchemeFactory {
      public verifyChangePasswordSession_resultTupleScheme getScheme() {
        return new verifyChangePasswordSession_resultTupleScheme();
      }
    }

    private static class verifyChangePasswordSession_resultTupleScheme extends TupleScheme<verifyChangePasswordSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyChangePasswordSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyChangePasswordSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class loginByPhone_args implements org.apache.thrift.TBase<loginByPhone_args, loginByPhone_args._Fields>, java.io.Serializable, Cloneable, Comparable<loginByPhone_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginByPhone_args");

    private static final org.apache.thrift.protocol.TField LOGIN_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("loginBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loginByPhone_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loginByPhone_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.LoginBo loginBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOGIN_BO((short)1, "loginBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOGIN_BO
            return LOGIN_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOGIN_BO, new org.apache.thrift.meta_data.FieldMetaData("loginBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.LoginBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginByPhone_args.class, metaDataMap);
    }

    public loginByPhone_args() {
    }

    public loginByPhone_args(
      com.ishangke.edunav.commoncontract.model.LoginBo loginBo)
    {
      this();
      this.loginBo = loginBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginByPhone_args(loginByPhone_args other) {
      if (other.isSetLoginBo()) {
        this.loginBo = new com.ishangke.edunav.commoncontract.model.LoginBo(other.loginBo);
      }
    }

    public loginByPhone_args deepCopy() {
      return new loginByPhone_args(this);
    }

    @Override
    public void clear() {
      this.loginBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.LoginBo getLoginBo() {
      return this.loginBo;
    }

    public loginByPhone_args setLoginBo(com.ishangke.edunav.commoncontract.model.LoginBo loginBo) {
      this.loginBo = loginBo;
      return this;
    }

    public void unsetLoginBo() {
      this.loginBo = null;
    }

    /** Returns true if field loginBo is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginBo() {
      return this.loginBo != null;
    }

    public void setLoginBoIsSet(boolean value) {
      if (!value) {
        this.loginBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOGIN_BO:
        if (value == null) {
          unsetLoginBo();
        } else {
          setLoginBo((com.ishangke.edunav.commoncontract.model.LoginBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOGIN_BO:
        return getLoginBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOGIN_BO:
        return isSetLoginBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginByPhone_args)
        return this.equals((loginByPhone_args)that);
      return false;
    }

    public boolean equals(loginByPhone_args that) {
      if (that == null)
        return false;

      boolean this_present_loginBo = true && this.isSetLoginBo();
      boolean that_present_loginBo = true && that.isSetLoginBo();
      if (this_present_loginBo || that_present_loginBo) {
        if (!(this_present_loginBo && that_present_loginBo))
          return false;
        if (!this.loginBo.equals(that.loginBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_loginBo = true && (isSetLoginBo());
      builder.append(present_loginBo);
      if (present_loginBo)
        builder.append(loginBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(loginByPhone_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoginBo()).compareTo(other.isSetLoginBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginBo, other.loginBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loginByPhone_args(");
      boolean first = true;

      sb.append("loginBo:");
      if (this.loginBo == null) {
        sb.append("null");
      } else {
        sb.append(this.loginBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (loginBo != null) {
        loginBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginByPhone_argsStandardSchemeFactory implements SchemeFactory {
      public loginByPhone_argsStandardScheme getScheme() {
        return new loginByPhone_argsStandardScheme();
      }
    }

    private static class loginByPhone_argsStandardScheme extends StandardScheme<loginByPhone_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginByPhone_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOGIN_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.loginBo = new com.ishangke.edunav.commoncontract.model.LoginBo();
                struct.loginBo.read(iprot);
                struct.setLoginBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginByPhone_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.loginBo != null) {
          oprot.writeFieldBegin(LOGIN_BO_FIELD_DESC);
          struct.loginBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginByPhone_argsTupleSchemeFactory implements SchemeFactory {
      public loginByPhone_argsTupleScheme getScheme() {
        return new loginByPhone_argsTupleScheme();
      }
    }

    private static class loginByPhone_argsTupleScheme extends TupleScheme<loginByPhone_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginByPhone_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoginBo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLoginBo()) {
          struct.loginBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginByPhone_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.loginBo = new com.ishangke.edunav.commoncontract.model.LoginBo();
          struct.loginBo.read(iprot);
          struct.setLoginBoIsSet(true);
        }
      }
    }

  }

  public static class loginByPhone_result implements org.apache.thrift.TBase<loginByPhone_result, loginByPhone_result._Fields>, java.io.Serializable, Cloneable, Comparable<loginByPhone_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginByPhone_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loginByPhone_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loginByPhone_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginByPhone_result.class, metaDataMap);
    }

    public loginByPhone_result() {
    }

    public loginByPhone_result(
      com.ishangke.edunav.commoncontract.model.UserBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginByPhone_result(loginByPhone_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.UserBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public loginByPhone_result deepCopy() {
      return new loginByPhone_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getSuccess() {
      return this.success;
    }

    public loginByPhone_result setSuccess(com.ishangke.edunav.commoncontract.model.UserBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public loginByPhone_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginByPhone_result)
        return this.equals((loginByPhone_result)that);
      return false;
    }

    public boolean equals(loginByPhone_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(loginByPhone_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loginByPhone_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginByPhone_resultStandardSchemeFactory implements SchemeFactory {
      public loginByPhone_resultStandardScheme getScheme() {
        return new loginByPhone_resultStandardScheme();
      }
    }

    private static class loginByPhone_resultStandardScheme extends StandardScheme<loginByPhone_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginByPhone_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginByPhone_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginByPhone_resultTupleSchemeFactory implements SchemeFactory {
      public loginByPhone_resultTupleScheme getScheme() {
        return new loginByPhone_resultTupleScheme();
      }
    }

    private static class loginByPhone_resultTupleScheme extends TupleScheme<loginByPhone_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginByPhone_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginByPhone_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class loginByReference_args implements org.apache.thrift.TBase<loginByReference_args, loginByReference_args._Fields>, java.io.Serializable, Cloneable, Comparable<loginByReference_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginByReference_args");

    private static final org.apache.thrift.protocol.TField LOGIN_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("loginBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loginByReference_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loginByReference_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.LoginBo loginBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOGIN_BO((short)1, "loginBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOGIN_BO
            return LOGIN_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOGIN_BO, new org.apache.thrift.meta_data.FieldMetaData("loginBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.LoginBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginByReference_args.class, metaDataMap);
    }

    public loginByReference_args() {
    }

    public loginByReference_args(
      com.ishangke.edunav.commoncontract.model.LoginBo loginBo)
    {
      this();
      this.loginBo = loginBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginByReference_args(loginByReference_args other) {
      if (other.isSetLoginBo()) {
        this.loginBo = new com.ishangke.edunav.commoncontract.model.LoginBo(other.loginBo);
      }
    }

    public loginByReference_args deepCopy() {
      return new loginByReference_args(this);
    }

    @Override
    public void clear() {
      this.loginBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.LoginBo getLoginBo() {
      return this.loginBo;
    }

    public loginByReference_args setLoginBo(com.ishangke.edunav.commoncontract.model.LoginBo loginBo) {
      this.loginBo = loginBo;
      return this;
    }

    public void unsetLoginBo() {
      this.loginBo = null;
    }

    /** Returns true if field loginBo is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginBo() {
      return this.loginBo != null;
    }

    public void setLoginBoIsSet(boolean value) {
      if (!value) {
        this.loginBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOGIN_BO:
        if (value == null) {
          unsetLoginBo();
        } else {
          setLoginBo((com.ishangke.edunav.commoncontract.model.LoginBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOGIN_BO:
        return getLoginBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOGIN_BO:
        return isSetLoginBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginByReference_args)
        return this.equals((loginByReference_args)that);
      return false;
    }

    public boolean equals(loginByReference_args that) {
      if (that == null)
        return false;

      boolean this_present_loginBo = true && this.isSetLoginBo();
      boolean that_present_loginBo = true && that.isSetLoginBo();
      if (this_present_loginBo || that_present_loginBo) {
        if (!(this_present_loginBo && that_present_loginBo))
          return false;
        if (!this.loginBo.equals(that.loginBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_loginBo = true && (isSetLoginBo());
      builder.append(present_loginBo);
      if (present_loginBo)
        builder.append(loginBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(loginByReference_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoginBo()).compareTo(other.isSetLoginBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginBo, other.loginBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loginByReference_args(");
      boolean first = true;

      sb.append("loginBo:");
      if (this.loginBo == null) {
        sb.append("null");
      } else {
        sb.append(this.loginBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (loginBo != null) {
        loginBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginByReference_argsStandardSchemeFactory implements SchemeFactory {
      public loginByReference_argsStandardScheme getScheme() {
        return new loginByReference_argsStandardScheme();
      }
    }

    private static class loginByReference_argsStandardScheme extends StandardScheme<loginByReference_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginByReference_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOGIN_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.loginBo = new com.ishangke.edunav.commoncontract.model.LoginBo();
                struct.loginBo.read(iprot);
                struct.setLoginBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginByReference_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.loginBo != null) {
          oprot.writeFieldBegin(LOGIN_BO_FIELD_DESC);
          struct.loginBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginByReference_argsTupleSchemeFactory implements SchemeFactory {
      public loginByReference_argsTupleScheme getScheme() {
        return new loginByReference_argsTupleScheme();
      }
    }

    private static class loginByReference_argsTupleScheme extends TupleScheme<loginByReference_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginByReference_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoginBo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLoginBo()) {
          struct.loginBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginByReference_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.loginBo = new com.ishangke.edunav.commoncontract.model.LoginBo();
          struct.loginBo.read(iprot);
          struct.setLoginBoIsSet(true);
        }
      }
    }

  }

  public static class loginByReference_result implements org.apache.thrift.TBase<loginByReference_result, loginByReference_result._Fields>, java.io.Serializable, Cloneable, Comparable<loginByReference_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginByReference_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loginByReference_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loginByReference_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginByReference_result.class, metaDataMap);
    }

    public loginByReference_result() {
    }

    public loginByReference_result(
      com.ishangke.edunav.commoncontract.model.UserBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginByReference_result(loginByReference_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.UserBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public loginByReference_result deepCopy() {
      return new loginByReference_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getSuccess() {
      return this.success;
    }

    public loginByReference_result setSuccess(com.ishangke.edunav.commoncontract.model.UserBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public loginByReference_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginByReference_result)
        return this.equals((loginByReference_result)that);
      return false;
    }

    public boolean equals(loginByReference_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(loginByReference_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loginByReference_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginByReference_resultStandardSchemeFactory implements SchemeFactory {
      public loginByReference_resultStandardScheme getScheme() {
        return new loginByReference_resultStandardScheme();
      }
    }

    private static class loginByReference_resultStandardScheme extends StandardScheme<loginByReference_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginByReference_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginByReference_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginByReference_resultTupleSchemeFactory implements SchemeFactory {
      public loginByReference_resultTupleScheme getScheme() {
        return new loginByReference_resultTupleScheme();
      }
    }

    private static class loginByReference_resultTupleScheme extends TupleScheme<loginByReference_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginByReference_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginByReference_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class createUser_args implements org.apache.thrift.TBase<createUser_args, createUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<createUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createUser_args");

    private static final org.apache.thrift.protocol.TField TARGET_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("targetUser", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CURRENT_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("currentUser", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createUser_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo targetUser; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo currentUser; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TARGET_USER((short)1, "targetUser"),
      PARTNER_BO((short)2, "partnerBo"),
      CURRENT_USER((short)3, "currentUser");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TARGET_USER
            return TARGET_USER;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // CURRENT_USER
            return CURRENT_USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TARGET_USER, new org.apache.thrift.meta_data.FieldMetaData("targetUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.CURRENT_USER, new org.apache.thrift.meta_data.FieldMetaData("currentUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createUser_args.class, metaDataMap);
    }

    public createUser_args() {
    }

    public createUser_args(
      com.ishangke.edunav.commoncontract.model.UserBo targetUser,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.UserBo currentUser)
    {
      this();
      this.targetUser = targetUser;
      this.partnerBo = partnerBo;
      this.currentUser = currentUser;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createUser_args(createUser_args other) {
      if (other.isSetTargetUser()) {
        this.targetUser = new com.ishangke.edunav.commoncontract.model.UserBo(other.targetUser);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetCurrentUser()) {
        this.currentUser = new com.ishangke.edunav.commoncontract.model.UserBo(other.currentUser);
      }
    }

    public createUser_args deepCopy() {
      return new createUser_args(this);
    }

    @Override
    public void clear() {
      this.targetUser = null;
      this.partnerBo = null;
      this.currentUser = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getTargetUser() {
      return this.targetUser;
    }

    public createUser_args setTargetUser(com.ishangke.edunav.commoncontract.model.UserBo targetUser) {
      this.targetUser = targetUser;
      return this;
    }

    public void unsetTargetUser() {
      this.targetUser = null;
    }

    /** Returns true if field targetUser is set (has been assigned a value) and false otherwise */
    public boolean isSetTargetUser() {
      return this.targetUser != null;
    }

    public void setTargetUserIsSet(boolean value) {
      if (!value) {
        this.targetUser = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public createUser_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getCurrentUser() {
      return this.currentUser;
    }

    public createUser_args setCurrentUser(com.ishangke.edunav.commoncontract.model.UserBo currentUser) {
      this.currentUser = currentUser;
      return this;
    }

    public void unsetCurrentUser() {
      this.currentUser = null;
    }

    /** Returns true if field currentUser is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentUser() {
      return this.currentUser != null;
    }

    public void setCurrentUserIsSet(boolean value) {
      if (!value) {
        this.currentUser = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TARGET_USER:
        if (value == null) {
          unsetTargetUser();
        } else {
          setTargetUser((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case CURRENT_USER:
        if (value == null) {
          unsetCurrentUser();
        } else {
          setCurrentUser((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TARGET_USER:
        return getTargetUser();

      case PARTNER_BO:
        return getPartnerBo();

      case CURRENT_USER:
        return getCurrentUser();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TARGET_USER:
        return isSetTargetUser();
      case PARTNER_BO:
        return isSetPartnerBo();
      case CURRENT_USER:
        return isSetCurrentUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createUser_args)
        return this.equals((createUser_args)that);
      return false;
    }

    public boolean equals(createUser_args that) {
      if (that == null)
        return false;

      boolean this_present_targetUser = true && this.isSetTargetUser();
      boolean that_present_targetUser = true && that.isSetTargetUser();
      if (this_present_targetUser || that_present_targetUser) {
        if (!(this_present_targetUser && that_present_targetUser))
          return false;
        if (!this.targetUser.equals(that.targetUser))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_currentUser = true && this.isSetCurrentUser();
      boolean that_present_currentUser = true && that.isSetCurrentUser();
      if (this_present_currentUser || that_present_currentUser) {
        if (!(this_present_currentUser && that_present_currentUser))
          return false;
        if (!this.currentUser.equals(that.currentUser))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_targetUser = true && (isSetTargetUser());
      builder.append(present_targetUser);
      if (present_targetUser)
        builder.append(targetUser);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_currentUser = true && (isSetCurrentUser());
      builder.append(present_currentUser);
      if (present_currentUser)
        builder.append(currentUser);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTargetUser()).compareTo(other.isSetTargetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTargetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetUser, other.targetUser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentUser()).compareTo(other.isSetCurrentUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentUser, other.currentUser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createUser_args(");
      boolean first = true;

      sb.append("targetUser:");
      if (this.targetUser == null) {
        sb.append("null");
      } else {
        sb.append(this.targetUser);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentUser:");
      if (this.currentUser == null) {
        sb.append("null");
      } else {
        sb.append(this.currentUser);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (targetUser != null) {
        targetUser.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (currentUser != null) {
        currentUser.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createUser_argsStandardSchemeFactory implements SchemeFactory {
      public createUser_argsStandardScheme getScheme() {
        return new createUser_argsStandardScheme();
      }
    }

    private static class createUser_argsStandardScheme extends StandardScheme<createUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TARGET_USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.targetUser = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.targetUser.read(iprot);
                struct.setTargetUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CURRENT_USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.currentUser = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.currentUser.read(iprot);
                struct.setCurrentUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.targetUser != null) {
          oprot.writeFieldBegin(TARGET_USER_FIELD_DESC);
          struct.targetUser.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.currentUser != null) {
          oprot.writeFieldBegin(CURRENT_USER_FIELD_DESC);
          struct.currentUser.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createUser_argsTupleSchemeFactory implements SchemeFactory {
      public createUser_argsTupleScheme getScheme() {
        return new createUser_argsTupleScheme();
      }
    }

    private static class createUser_argsTupleScheme extends TupleScheme<createUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTargetUser()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetCurrentUser()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTargetUser()) {
          struct.targetUser.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetCurrentUser()) {
          struct.currentUser.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.targetUser = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.targetUser.read(iprot);
          struct.setTargetUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.currentUser = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.currentUser.read(iprot);
          struct.setCurrentUserIsSet(true);
        }
      }
    }

  }

  public static class createUser_result implements org.apache.thrift.TBase<createUser_result, createUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<createUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createUser_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createUser_result.class, metaDataMap);
    }

    public createUser_result() {
    }

    public createUser_result(
      com.ishangke.edunav.commoncontract.model.UserBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createUser_result(createUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.UserBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public createUser_result deepCopy() {
      return new createUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getSuccess() {
      return this.success;
    }

    public createUser_result setSuccess(com.ishangke.edunav.commoncontract.model.UserBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public createUser_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createUser_result)
        return this.equals((createUser_result)that);
      return false;
    }

    public boolean equals(createUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createUser_resultStandardSchemeFactory implements SchemeFactory {
      public createUser_resultStandardScheme getScheme() {
        return new createUser_resultStandardScheme();
      }
    }

    private static class createUser_resultStandardScheme extends StandardScheme<createUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createUser_resultTupleSchemeFactory implements SchemeFactory {
      public createUser_resultTupleScheme getScheme() {
        return new createUser_resultTupleScheme();
      }
    }

    private static class createUser_resultTupleScheme extends TupleScheme<createUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class deleteUser_args implements org.apache.thrift.TBase<deleteUser_args, deleteUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUser_args");

    private static final org.apache.thrift.protocol.TField TARGET_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("targetUser", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("currentUser", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUser_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo targetUser; // required
    public com.ishangke.edunav.commoncontract.model.UserBo currentUser; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TARGET_USER((short)1, "targetUser"),
      CURRENT_USER((short)2, "currentUser");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TARGET_USER
            return TARGET_USER;
          case 2: // CURRENT_USER
            return CURRENT_USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TARGET_USER, new org.apache.thrift.meta_data.FieldMetaData("targetUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.CURRENT_USER, new org.apache.thrift.meta_data.FieldMetaData("currentUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUser_args.class, metaDataMap);
    }

    public deleteUser_args() {
    }

    public deleteUser_args(
      com.ishangke.edunav.commoncontract.model.UserBo targetUser,
      com.ishangke.edunav.commoncontract.model.UserBo currentUser)
    {
      this();
      this.targetUser = targetUser;
      this.currentUser = currentUser;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUser_args(deleteUser_args other) {
      if (other.isSetTargetUser()) {
        this.targetUser = new com.ishangke.edunav.commoncontract.model.UserBo(other.targetUser);
      }
      if (other.isSetCurrentUser()) {
        this.currentUser = new com.ishangke.edunav.commoncontract.model.UserBo(other.currentUser);
      }
    }

    public deleteUser_args deepCopy() {
      return new deleteUser_args(this);
    }

    @Override
    public void clear() {
      this.targetUser = null;
      this.currentUser = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getTargetUser() {
      return this.targetUser;
    }

    public deleteUser_args setTargetUser(com.ishangke.edunav.commoncontract.model.UserBo targetUser) {
      this.targetUser = targetUser;
      return this;
    }

    public void unsetTargetUser() {
      this.targetUser = null;
    }

    /** Returns true if field targetUser is set (has been assigned a value) and false otherwise */
    public boolean isSetTargetUser() {
      return this.targetUser != null;
    }

    public void setTargetUserIsSet(boolean value) {
      if (!value) {
        this.targetUser = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getCurrentUser() {
      return this.currentUser;
    }

    public deleteUser_args setCurrentUser(com.ishangke.edunav.commoncontract.model.UserBo currentUser) {
      this.currentUser = currentUser;
      return this;
    }

    public void unsetCurrentUser() {
      this.currentUser = null;
    }

    /** Returns true if field currentUser is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentUser() {
      return this.currentUser != null;
    }

    public void setCurrentUserIsSet(boolean value) {
      if (!value) {
        this.currentUser = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TARGET_USER:
        if (value == null) {
          unsetTargetUser();
        } else {
          setTargetUser((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case CURRENT_USER:
        if (value == null) {
          unsetCurrentUser();
        } else {
          setCurrentUser((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TARGET_USER:
        return getTargetUser();

      case CURRENT_USER:
        return getCurrentUser();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TARGET_USER:
        return isSetTargetUser();
      case CURRENT_USER:
        return isSetCurrentUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUser_args)
        return this.equals((deleteUser_args)that);
      return false;
    }

    public boolean equals(deleteUser_args that) {
      if (that == null)
        return false;

      boolean this_present_targetUser = true && this.isSetTargetUser();
      boolean that_present_targetUser = true && that.isSetTargetUser();
      if (this_present_targetUser || that_present_targetUser) {
        if (!(this_present_targetUser && that_present_targetUser))
          return false;
        if (!this.targetUser.equals(that.targetUser))
          return false;
      }

      boolean this_present_currentUser = true && this.isSetCurrentUser();
      boolean that_present_currentUser = true && that.isSetCurrentUser();
      if (this_present_currentUser || that_present_currentUser) {
        if (!(this_present_currentUser && that_present_currentUser))
          return false;
        if (!this.currentUser.equals(that.currentUser))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_targetUser = true && (isSetTargetUser());
      builder.append(present_targetUser);
      if (present_targetUser)
        builder.append(targetUser);

      boolean present_currentUser = true && (isSetCurrentUser());
      builder.append(present_currentUser);
      if (present_currentUser)
        builder.append(currentUser);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTargetUser()).compareTo(other.isSetTargetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTargetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetUser, other.targetUser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentUser()).compareTo(other.isSetCurrentUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentUser, other.currentUser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUser_args(");
      boolean first = true;

      sb.append("targetUser:");
      if (this.targetUser == null) {
        sb.append("null");
      } else {
        sb.append(this.targetUser);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentUser:");
      if (this.currentUser == null) {
        sb.append("null");
      } else {
        sb.append(this.currentUser);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (targetUser != null) {
        targetUser.validate();
      }
      if (currentUser != null) {
        currentUser.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUser_argsStandardSchemeFactory implements SchemeFactory {
      public deleteUser_argsStandardScheme getScheme() {
        return new deleteUser_argsStandardScheme();
      }
    }

    private static class deleteUser_argsStandardScheme extends StandardScheme<deleteUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TARGET_USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.targetUser = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.targetUser.read(iprot);
                struct.setTargetUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.currentUser = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.currentUser.read(iprot);
                struct.setCurrentUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.targetUser != null) {
          oprot.writeFieldBegin(TARGET_USER_FIELD_DESC);
          struct.targetUser.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.currentUser != null) {
          oprot.writeFieldBegin(CURRENT_USER_FIELD_DESC);
          struct.currentUser.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUser_argsTupleSchemeFactory implements SchemeFactory {
      public deleteUser_argsTupleScheme getScheme() {
        return new deleteUser_argsTupleScheme();
      }
    }

    private static class deleteUser_argsTupleScheme extends TupleScheme<deleteUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTargetUser()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentUser()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTargetUser()) {
          struct.targetUser.write(oprot);
        }
        if (struct.isSetCurrentUser()) {
          struct.currentUser.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.targetUser = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.targetUser.read(iprot);
          struct.setTargetUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentUser = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.currentUser.read(iprot);
          struct.setCurrentUserIsSet(true);
        }
      }
    }

  }

  public static class deleteUser_result implements org.apache.thrift.TBase<deleteUser_result, deleteUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUser_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUser_result.class, metaDataMap);
    }

    public deleteUser_result() {
    }

    public deleteUser_result(
      com.ishangke.edunav.commoncontract.model.UserBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUser_result(deleteUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.UserBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public deleteUser_result deepCopy() {
      return new deleteUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getSuccess() {
      return this.success;
    }

    public deleteUser_result setSuccess(com.ishangke.edunav.commoncontract.model.UserBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public deleteUser_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUser_result)
        return this.equals((deleteUser_result)that);
      return false;
    }

    public boolean equals(deleteUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUser_resultStandardSchemeFactory implements SchemeFactory {
      public deleteUser_resultStandardScheme getScheme() {
        return new deleteUser_resultStandardScheme();
      }
    }

    private static class deleteUser_resultStandardScheme extends StandardScheme<deleteUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUser_resultTupleSchemeFactory implements SchemeFactory {
      public deleteUser_resultTupleScheme getScheme() {
        return new deleteUser_resultTupleScheme();
      }
    }

    private static class deleteUser_resultTupleScheme extends TupleScheme<deleteUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class updateUser_args implements org.apache.thrift.TBase<updateUser_args, updateUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUser_args");

    private static final org.apache.thrift.protocol.TField TARGET_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("targetUser", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("currentUser", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUser_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo targetUser; // required
    public com.ishangke.edunav.commoncontract.model.UserBo currentUser; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TARGET_USER((short)1, "targetUser"),
      CURRENT_USER((short)2, "currentUser");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TARGET_USER
            return TARGET_USER;
          case 2: // CURRENT_USER
            return CURRENT_USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TARGET_USER, new org.apache.thrift.meta_data.FieldMetaData("targetUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.CURRENT_USER, new org.apache.thrift.meta_data.FieldMetaData("currentUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUser_args.class, metaDataMap);
    }

    public updateUser_args() {
    }

    public updateUser_args(
      com.ishangke.edunav.commoncontract.model.UserBo targetUser,
      com.ishangke.edunav.commoncontract.model.UserBo currentUser)
    {
      this();
      this.targetUser = targetUser;
      this.currentUser = currentUser;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUser_args(updateUser_args other) {
      if (other.isSetTargetUser()) {
        this.targetUser = new com.ishangke.edunav.commoncontract.model.UserBo(other.targetUser);
      }
      if (other.isSetCurrentUser()) {
        this.currentUser = new com.ishangke.edunav.commoncontract.model.UserBo(other.currentUser);
      }
    }

    public updateUser_args deepCopy() {
      return new updateUser_args(this);
    }

    @Override
    public void clear() {
      this.targetUser = null;
      this.currentUser = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getTargetUser() {
      return this.targetUser;
    }

    public updateUser_args setTargetUser(com.ishangke.edunav.commoncontract.model.UserBo targetUser) {
      this.targetUser = targetUser;
      return this;
    }

    public void unsetTargetUser() {
      this.targetUser = null;
    }

    /** Returns true if field targetUser is set (has been assigned a value) and false otherwise */
    public boolean isSetTargetUser() {
      return this.targetUser != null;
    }

    public void setTargetUserIsSet(boolean value) {
      if (!value) {
        this.targetUser = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getCurrentUser() {
      return this.currentUser;
    }

    public updateUser_args setCurrentUser(com.ishangke.edunav.commoncontract.model.UserBo currentUser) {
      this.currentUser = currentUser;
      return this;
    }

    public void unsetCurrentUser() {
      this.currentUser = null;
    }

    /** Returns true if field currentUser is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentUser() {
      return this.currentUser != null;
    }

    public void setCurrentUserIsSet(boolean value) {
      if (!value) {
        this.currentUser = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TARGET_USER:
        if (value == null) {
          unsetTargetUser();
        } else {
          setTargetUser((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case CURRENT_USER:
        if (value == null) {
          unsetCurrentUser();
        } else {
          setCurrentUser((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TARGET_USER:
        return getTargetUser();

      case CURRENT_USER:
        return getCurrentUser();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TARGET_USER:
        return isSetTargetUser();
      case CURRENT_USER:
        return isSetCurrentUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUser_args)
        return this.equals((updateUser_args)that);
      return false;
    }

    public boolean equals(updateUser_args that) {
      if (that == null)
        return false;

      boolean this_present_targetUser = true && this.isSetTargetUser();
      boolean that_present_targetUser = true && that.isSetTargetUser();
      if (this_present_targetUser || that_present_targetUser) {
        if (!(this_present_targetUser && that_present_targetUser))
          return false;
        if (!this.targetUser.equals(that.targetUser))
          return false;
      }

      boolean this_present_currentUser = true && this.isSetCurrentUser();
      boolean that_present_currentUser = true && that.isSetCurrentUser();
      if (this_present_currentUser || that_present_currentUser) {
        if (!(this_present_currentUser && that_present_currentUser))
          return false;
        if (!this.currentUser.equals(that.currentUser))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_targetUser = true && (isSetTargetUser());
      builder.append(present_targetUser);
      if (present_targetUser)
        builder.append(targetUser);

      boolean present_currentUser = true && (isSetCurrentUser());
      builder.append(present_currentUser);
      if (present_currentUser)
        builder.append(currentUser);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(updateUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTargetUser()).compareTo(other.isSetTargetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTargetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetUser, other.targetUser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentUser()).compareTo(other.isSetCurrentUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentUser, other.currentUser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUser_args(");
      boolean first = true;

      sb.append("targetUser:");
      if (this.targetUser == null) {
        sb.append("null");
      } else {
        sb.append(this.targetUser);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentUser:");
      if (this.currentUser == null) {
        sb.append("null");
      } else {
        sb.append(this.currentUser);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (targetUser != null) {
        targetUser.validate();
      }
      if (currentUser != null) {
        currentUser.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUser_argsStandardSchemeFactory implements SchemeFactory {
      public updateUser_argsStandardScheme getScheme() {
        return new updateUser_argsStandardScheme();
      }
    }

    private static class updateUser_argsStandardScheme extends StandardScheme<updateUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TARGET_USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.targetUser = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.targetUser.read(iprot);
                struct.setTargetUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.currentUser = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.currentUser.read(iprot);
                struct.setCurrentUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.targetUser != null) {
          oprot.writeFieldBegin(TARGET_USER_FIELD_DESC);
          struct.targetUser.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.currentUser != null) {
          oprot.writeFieldBegin(CURRENT_USER_FIELD_DESC);
          struct.currentUser.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUser_argsTupleSchemeFactory implements SchemeFactory {
      public updateUser_argsTupleScheme getScheme() {
        return new updateUser_argsTupleScheme();
      }
    }

    private static class updateUser_argsTupleScheme extends TupleScheme<updateUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTargetUser()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentUser()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTargetUser()) {
          struct.targetUser.write(oprot);
        }
        if (struct.isSetCurrentUser()) {
          struct.currentUser.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.targetUser = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.targetUser.read(iprot);
          struct.setTargetUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentUser = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.currentUser.read(iprot);
          struct.setCurrentUserIsSet(true);
        }
      }
    }

  }

  public static class updateUser_result implements org.apache.thrift.TBase<updateUser_result, updateUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUser_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUser_result.class, metaDataMap);
    }

    public updateUser_result() {
    }

    public updateUser_result(
      com.ishangke.edunav.commoncontract.model.UserBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUser_result(updateUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.UserBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public updateUser_result deepCopy() {
      return new updateUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getSuccess() {
      return this.success;
    }

    public updateUser_result setSuccess(com.ishangke.edunav.commoncontract.model.UserBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public updateUser_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUser_result)
        return this.equals((updateUser_result)that);
      return false;
    }

    public boolean equals(updateUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(updateUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUser_resultStandardSchemeFactory implements SchemeFactory {
      public updateUser_resultStandardScheme getScheme() {
        return new updateUser_resultStandardScheme();
      }
    }

    private static class updateUser_resultStandardScheme extends StandardScheme<updateUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUser_resultTupleSchemeFactory implements SchemeFactory {
      public updateUser_resultTupleScheme getScheme() {
        return new updateUser_resultTupleScheme();
      }
    }

    private static class updateUser_resultTupleScheme extends TupleScheme<updateUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class queryUserInfo_args implements org.apache.thrift.TBase<queryUserInfo_args, queryUserInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserInfo_args");

    private static final org.apache.thrift.protocol.TField QUERY_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("queryUser", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("currentUser", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryUserInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryUserInfo_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo queryUser; // required
    public com.ishangke.edunav.commoncontract.model.UserBo currentUser; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY_USER((short)1, "queryUser"),
      CURRENT_USER((short)2, "currentUser");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY_USER
            return QUERY_USER;
          case 2: // CURRENT_USER
            return CURRENT_USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY_USER, new org.apache.thrift.meta_data.FieldMetaData("queryUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.CURRENT_USER, new org.apache.thrift.meta_data.FieldMetaData("currentUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserInfo_args.class, metaDataMap);
    }

    public queryUserInfo_args() {
    }

    public queryUserInfo_args(
      com.ishangke.edunav.commoncontract.model.UserBo queryUser,
      com.ishangke.edunav.commoncontract.model.UserBo currentUser)
    {
      this();
      this.queryUser = queryUser;
      this.currentUser = currentUser;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryUserInfo_args(queryUserInfo_args other) {
      if (other.isSetQueryUser()) {
        this.queryUser = new com.ishangke.edunav.commoncontract.model.UserBo(other.queryUser);
      }
      if (other.isSetCurrentUser()) {
        this.currentUser = new com.ishangke.edunav.commoncontract.model.UserBo(other.currentUser);
      }
    }

    public queryUserInfo_args deepCopy() {
      return new queryUserInfo_args(this);
    }

    @Override
    public void clear() {
      this.queryUser = null;
      this.currentUser = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getQueryUser() {
      return this.queryUser;
    }

    public queryUserInfo_args setQueryUser(com.ishangke.edunav.commoncontract.model.UserBo queryUser) {
      this.queryUser = queryUser;
      return this;
    }

    public void unsetQueryUser() {
      this.queryUser = null;
    }

    /** Returns true if field queryUser is set (has been assigned a value) and false otherwise */
    public boolean isSetQueryUser() {
      return this.queryUser != null;
    }

    public void setQueryUserIsSet(boolean value) {
      if (!value) {
        this.queryUser = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getCurrentUser() {
      return this.currentUser;
    }

    public queryUserInfo_args setCurrentUser(com.ishangke.edunav.commoncontract.model.UserBo currentUser) {
      this.currentUser = currentUser;
      return this;
    }

    public void unsetCurrentUser() {
      this.currentUser = null;
    }

    /** Returns true if field currentUser is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentUser() {
      return this.currentUser != null;
    }

    public void setCurrentUserIsSet(boolean value) {
      if (!value) {
        this.currentUser = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY_USER:
        if (value == null) {
          unsetQueryUser();
        } else {
          setQueryUser((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case CURRENT_USER:
        if (value == null) {
          unsetCurrentUser();
        } else {
          setCurrentUser((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY_USER:
        return getQueryUser();

      case CURRENT_USER:
        return getCurrentUser();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY_USER:
        return isSetQueryUser();
      case CURRENT_USER:
        return isSetCurrentUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryUserInfo_args)
        return this.equals((queryUserInfo_args)that);
      return false;
    }

    public boolean equals(queryUserInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_queryUser = true && this.isSetQueryUser();
      boolean that_present_queryUser = true && that.isSetQueryUser();
      if (this_present_queryUser || that_present_queryUser) {
        if (!(this_present_queryUser && that_present_queryUser))
          return false;
        if (!this.queryUser.equals(that.queryUser))
          return false;
      }

      boolean this_present_currentUser = true && this.isSetCurrentUser();
      boolean that_present_currentUser = true && that.isSetCurrentUser();
      if (this_present_currentUser || that_present_currentUser) {
        if (!(this_present_currentUser && that_present_currentUser))
          return false;
        if (!this.currentUser.equals(that.currentUser))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_queryUser = true && (isSetQueryUser());
      builder.append(present_queryUser);
      if (present_queryUser)
        builder.append(queryUser);

      boolean present_currentUser = true && (isSetCurrentUser());
      builder.append(present_currentUser);
      if (present_currentUser)
        builder.append(currentUser);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(queryUserInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQueryUser()).compareTo(other.isSetQueryUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueryUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryUser, other.queryUser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentUser()).compareTo(other.isSetCurrentUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentUser, other.currentUser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryUserInfo_args(");
      boolean first = true;

      sb.append("queryUser:");
      if (this.queryUser == null) {
        sb.append("null");
      } else {
        sb.append(this.queryUser);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentUser:");
      if (this.currentUser == null) {
        sb.append("null");
      } else {
        sb.append(this.currentUser);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (queryUser != null) {
        queryUser.validate();
      }
      if (currentUser != null) {
        currentUser.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryUserInfo_argsStandardSchemeFactory implements SchemeFactory {
      public queryUserInfo_argsStandardScheme getScheme() {
        return new queryUserInfo_argsStandardScheme();
      }
    }

    private static class queryUserInfo_argsStandardScheme extends StandardScheme<queryUserInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY_USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.queryUser = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.queryUser.read(iprot);
                struct.setQueryUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.currentUser = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.currentUser.read(iprot);
                struct.setCurrentUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.queryUser != null) {
          oprot.writeFieldBegin(QUERY_USER_FIELD_DESC);
          struct.queryUser.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.currentUser != null) {
          oprot.writeFieldBegin(CURRENT_USER_FIELD_DESC);
          struct.currentUser.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryUserInfo_argsTupleSchemeFactory implements SchemeFactory {
      public queryUserInfo_argsTupleScheme getScheme() {
        return new queryUserInfo_argsTupleScheme();
      }
    }

    private static class queryUserInfo_argsTupleScheme extends TupleScheme<queryUserInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryUserInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQueryUser()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentUser()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQueryUser()) {
          struct.queryUser.write(oprot);
        }
        if (struct.isSetCurrentUser()) {
          struct.currentUser.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryUserInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.queryUser = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.queryUser.read(iprot);
          struct.setQueryUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentUser = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.currentUser.read(iprot);
          struct.setCurrentUserIsSet(true);
        }
      }
    }

  }

  public static class queryUserInfo_result implements org.apache.thrift.TBase<queryUserInfo_result, queryUserInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryUserInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryUserInfo_resultTupleSchemeFactory());
    }

    public List<com.ishangke.edunav.commoncontract.model.UserBo> success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class))));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserInfo_result.class, metaDataMap);
    }

    public queryUserInfo_result() {
    }

    public queryUserInfo_result(
      List<com.ishangke.edunav.commoncontract.model.UserBo> success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryUserInfo_result(queryUserInfo_result other) {
      if (other.isSetSuccess()) {
        List<com.ishangke.edunav.commoncontract.model.UserBo> __this__success = new ArrayList<com.ishangke.edunav.commoncontract.model.UserBo>(other.success.size());
        for (com.ishangke.edunav.commoncontract.model.UserBo other_element : other.success) {
          __this__success.add(new com.ishangke.edunav.commoncontract.model.UserBo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public queryUserInfo_result deepCopy() {
      return new queryUserInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.ishangke.edunav.commoncontract.model.UserBo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.ishangke.edunav.commoncontract.model.UserBo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.ishangke.edunav.commoncontract.model.UserBo>();
      }
      this.success.add(elem);
    }

    public List<com.ishangke.edunav.commoncontract.model.UserBo> getSuccess() {
      return this.success;
    }

    public queryUserInfo_result setSuccess(List<com.ishangke.edunav.commoncontract.model.UserBo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public queryUserInfo_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.ishangke.edunav.commoncontract.model.UserBo>)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryUserInfo_result)
        return this.equals((queryUserInfo_result)that);
      return false;
    }

    public boolean equals(queryUserInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(queryUserInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryUserInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryUserInfo_resultStandardSchemeFactory implements SchemeFactory {
      public queryUserInfo_resultStandardScheme getScheme() {
        return new queryUserInfo_resultStandardScheme();
      }
    }

    private static class queryUserInfo_resultStandardScheme extends StandardScheme<queryUserInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.UserBo>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    com.ishangke.edunav.commoncontract.model.UserBo _elem2;
                    _elem2 = new com.ishangke.edunav.commoncontract.model.UserBo();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.ishangke.edunav.commoncontract.model.UserBo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryUserInfo_resultTupleSchemeFactory implements SchemeFactory {
      public queryUserInfo_resultTupleScheme getScheme() {
        return new queryUserInfo_resultTupleScheme();
      }
    }

    private static class queryUserInfo_resultTupleScheme extends TupleScheme<queryUserInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryUserInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.ishangke.edunav.commoncontract.model.UserBo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryUserInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.UserBo>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              com.ishangke.edunav.commoncontract.model.UserBo _elem7;
              _elem7 = new com.ishangke.edunav.commoncontract.model.UserBo();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class queryUser_args implements org.apache.thrift.TBase<queryUser_args, queryUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUser_args");

    private static final org.apache.thrift.protocol.TField QUERY_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("queryUser", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerBo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CURRENT_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("currentUser", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField PAGNATION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("pagnationBo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryUser_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo queryUser; // required
    public com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo; // required
    public com.ishangke.edunav.commoncontract.model.UserBo currentUser; // required
    public com.ishangke.edunav.commoncontract.model.PaginationBo pagnationBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY_USER((short)1, "queryUser"),
      PARTNER_BO((short)2, "partnerBo"),
      CURRENT_USER((short)3, "currentUser"),
      PAGNATION_BO((short)4, "pagnationBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY_USER
            return QUERY_USER;
          case 2: // PARTNER_BO
            return PARTNER_BO;
          case 3: // CURRENT_USER
            return CURRENT_USER;
          case 4: // PAGNATION_BO
            return PAGNATION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY_USER, new org.apache.thrift.meta_data.FieldMetaData("queryUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.PARTNER_BO, new org.apache.thrift.meta_data.FieldMetaData("partnerBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PartnerBo.class)));
      tmpMap.put(_Fields.CURRENT_USER, new org.apache.thrift.meta_data.FieldMetaData("currentUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.PAGNATION_BO, new org.apache.thrift.meta_data.FieldMetaData("pagnationBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.PaginationBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUser_args.class, metaDataMap);
    }

    public queryUser_args() {
    }

    public queryUser_args(
      com.ishangke.edunav.commoncontract.model.UserBo queryUser,
      com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo,
      com.ishangke.edunav.commoncontract.model.UserBo currentUser,
      com.ishangke.edunav.commoncontract.model.PaginationBo pagnationBo)
    {
      this();
      this.queryUser = queryUser;
      this.partnerBo = partnerBo;
      this.currentUser = currentUser;
      this.pagnationBo = pagnationBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryUser_args(queryUser_args other) {
      if (other.isSetQueryUser()) {
        this.queryUser = new com.ishangke.edunav.commoncontract.model.UserBo(other.queryUser);
      }
      if (other.isSetPartnerBo()) {
        this.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo(other.partnerBo);
      }
      if (other.isSetCurrentUser()) {
        this.currentUser = new com.ishangke.edunav.commoncontract.model.UserBo(other.currentUser);
      }
      if (other.isSetPagnationBo()) {
        this.pagnationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo(other.pagnationBo);
      }
    }

    public queryUser_args deepCopy() {
      return new queryUser_args(this);
    }

    @Override
    public void clear() {
      this.queryUser = null;
      this.partnerBo = null;
      this.currentUser = null;
      this.pagnationBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getQueryUser() {
      return this.queryUser;
    }

    public queryUser_args setQueryUser(com.ishangke.edunav.commoncontract.model.UserBo queryUser) {
      this.queryUser = queryUser;
      return this;
    }

    public void unsetQueryUser() {
      this.queryUser = null;
    }

    /** Returns true if field queryUser is set (has been assigned a value) and false otherwise */
    public boolean isSetQueryUser() {
      return this.queryUser != null;
    }

    public void setQueryUserIsSet(boolean value) {
      if (!value) {
        this.queryUser = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PartnerBo getPartnerBo() {
      return this.partnerBo;
    }

    public queryUser_args setPartnerBo(com.ishangke.edunav.commoncontract.model.PartnerBo partnerBo) {
      this.partnerBo = partnerBo;
      return this;
    }

    public void unsetPartnerBo() {
      this.partnerBo = null;
    }

    /** Returns true if field partnerBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerBo() {
      return this.partnerBo != null;
    }

    public void setPartnerBoIsSet(boolean value) {
      if (!value) {
        this.partnerBo = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getCurrentUser() {
      return this.currentUser;
    }

    public queryUser_args setCurrentUser(com.ishangke.edunav.commoncontract.model.UserBo currentUser) {
      this.currentUser = currentUser;
      return this;
    }

    public void unsetCurrentUser() {
      this.currentUser = null;
    }

    /** Returns true if field currentUser is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentUser() {
      return this.currentUser != null;
    }

    public void setCurrentUserIsSet(boolean value) {
      if (!value) {
        this.currentUser = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.PaginationBo getPagnationBo() {
      return this.pagnationBo;
    }

    public queryUser_args setPagnationBo(com.ishangke.edunav.commoncontract.model.PaginationBo pagnationBo) {
      this.pagnationBo = pagnationBo;
      return this;
    }

    public void unsetPagnationBo() {
      this.pagnationBo = null;
    }

    /** Returns true if field pagnationBo is set (has been assigned a value) and false otherwise */
    public boolean isSetPagnationBo() {
      return this.pagnationBo != null;
    }

    public void setPagnationBoIsSet(boolean value) {
      if (!value) {
        this.pagnationBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY_USER:
        if (value == null) {
          unsetQueryUser();
        } else {
          setQueryUser((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case PARTNER_BO:
        if (value == null) {
          unsetPartnerBo();
        } else {
          setPartnerBo((com.ishangke.edunav.commoncontract.model.PartnerBo)value);
        }
        break;

      case CURRENT_USER:
        if (value == null) {
          unsetCurrentUser();
        } else {
          setCurrentUser((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case PAGNATION_BO:
        if (value == null) {
          unsetPagnationBo();
        } else {
          setPagnationBo((com.ishangke.edunav.commoncontract.model.PaginationBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY_USER:
        return getQueryUser();

      case PARTNER_BO:
        return getPartnerBo();

      case CURRENT_USER:
        return getCurrentUser();

      case PAGNATION_BO:
        return getPagnationBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY_USER:
        return isSetQueryUser();
      case PARTNER_BO:
        return isSetPartnerBo();
      case CURRENT_USER:
        return isSetCurrentUser();
      case PAGNATION_BO:
        return isSetPagnationBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryUser_args)
        return this.equals((queryUser_args)that);
      return false;
    }

    public boolean equals(queryUser_args that) {
      if (that == null)
        return false;

      boolean this_present_queryUser = true && this.isSetQueryUser();
      boolean that_present_queryUser = true && that.isSetQueryUser();
      if (this_present_queryUser || that_present_queryUser) {
        if (!(this_present_queryUser && that_present_queryUser))
          return false;
        if (!this.queryUser.equals(that.queryUser))
          return false;
      }

      boolean this_present_partnerBo = true && this.isSetPartnerBo();
      boolean that_present_partnerBo = true && that.isSetPartnerBo();
      if (this_present_partnerBo || that_present_partnerBo) {
        if (!(this_present_partnerBo && that_present_partnerBo))
          return false;
        if (!this.partnerBo.equals(that.partnerBo))
          return false;
      }

      boolean this_present_currentUser = true && this.isSetCurrentUser();
      boolean that_present_currentUser = true && that.isSetCurrentUser();
      if (this_present_currentUser || that_present_currentUser) {
        if (!(this_present_currentUser && that_present_currentUser))
          return false;
        if (!this.currentUser.equals(that.currentUser))
          return false;
      }

      boolean this_present_pagnationBo = true && this.isSetPagnationBo();
      boolean that_present_pagnationBo = true && that.isSetPagnationBo();
      if (this_present_pagnationBo || that_present_pagnationBo) {
        if (!(this_present_pagnationBo && that_present_pagnationBo))
          return false;
        if (!this.pagnationBo.equals(that.pagnationBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_queryUser = true && (isSetQueryUser());
      builder.append(present_queryUser);
      if (present_queryUser)
        builder.append(queryUser);

      boolean present_partnerBo = true && (isSetPartnerBo());
      builder.append(present_partnerBo);
      if (present_partnerBo)
        builder.append(partnerBo);

      boolean present_currentUser = true && (isSetCurrentUser());
      builder.append(present_currentUser);
      if (present_currentUser)
        builder.append(currentUser);

      boolean present_pagnationBo = true && (isSetPagnationBo());
      builder.append(present_pagnationBo);
      if (present_pagnationBo)
        builder.append(pagnationBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(queryUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQueryUser()).compareTo(other.isSetQueryUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueryUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryUser, other.queryUser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerBo()).compareTo(other.isSetPartnerBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerBo, other.partnerBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentUser()).compareTo(other.isSetCurrentUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentUser, other.currentUser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPagnationBo()).compareTo(other.isSetPagnationBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPagnationBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagnationBo, other.pagnationBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryUser_args(");
      boolean first = true;

      sb.append("queryUser:");
      if (this.queryUser == null) {
        sb.append("null");
      } else {
        sb.append(this.queryUser);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerBo:");
      if (this.partnerBo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerBo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentUser:");
      if (this.currentUser == null) {
        sb.append("null");
      } else {
        sb.append(this.currentUser);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pagnationBo:");
      if (this.pagnationBo == null) {
        sb.append("null");
      } else {
        sb.append(this.pagnationBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (queryUser != null) {
        queryUser.validate();
      }
      if (partnerBo != null) {
        partnerBo.validate();
      }
      if (currentUser != null) {
        currentUser.validate();
      }
      if (pagnationBo != null) {
        pagnationBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryUser_argsStandardSchemeFactory implements SchemeFactory {
      public queryUser_argsStandardScheme getScheme() {
        return new queryUser_argsStandardScheme();
      }
    }

    private static class queryUser_argsStandardScheme extends StandardScheme<queryUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY_USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.queryUser = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.queryUser.read(iprot);
                struct.setQueryUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
                struct.partnerBo.read(iprot);
                struct.setPartnerBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CURRENT_USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.currentUser = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.currentUser.read(iprot);
                struct.setCurrentUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGNATION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pagnationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo();
                struct.pagnationBo.read(iprot);
                struct.setPagnationBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.queryUser != null) {
          oprot.writeFieldBegin(QUERY_USER_FIELD_DESC);
          struct.queryUser.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.partnerBo != null) {
          oprot.writeFieldBegin(PARTNER_BO_FIELD_DESC);
          struct.partnerBo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.currentUser != null) {
          oprot.writeFieldBegin(CURRENT_USER_FIELD_DESC);
          struct.currentUser.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pagnationBo != null) {
          oprot.writeFieldBegin(PAGNATION_BO_FIELD_DESC);
          struct.pagnationBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryUser_argsTupleSchemeFactory implements SchemeFactory {
      public queryUser_argsTupleScheme getScheme() {
        return new queryUser_argsTupleScheme();
      }
    }

    private static class queryUser_argsTupleScheme extends TupleScheme<queryUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQueryUser()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerBo()) {
          optionals.set(1);
        }
        if (struct.isSetCurrentUser()) {
          optionals.set(2);
        }
        if (struct.isSetPagnationBo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetQueryUser()) {
          struct.queryUser.write(oprot);
        }
        if (struct.isSetPartnerBo()) {
          struct.partnerBo.write(oprot);
        }
        if (struct.isSetCurrentUser()) {
          struct.currentUser.write(oprot);
        }
        if (struct.isSetPagnationBo()) {
          struct.pagnationBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.queryUser = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.queryUser.read(iprot);
          struct.setQueryUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerBo = new com.ishangke.edunav.commoncontract.model.PartnerBo();
          struct.partnerBo.read(iprot);
          struct.setPartnerBoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.currentUser = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.currentUser.read(iprot);
          struct.setCurrentUserIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pagnationBo = new com.ishangke.edunav.commoncontract.model.PaginationBo();
          struct.pagnationBo.read(iprot);
          struct.setPagnationBoIsSet(true);
        }
      }
    }

  }

  public static class queryUser_result implements org.apache.thrift.TBase<queryUser_result, queryUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryUser_resultTupleSchemeFactory());
    }

    public List<com.ishangke.edunav.commoncontract.model.UserBo> success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class))));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUser_result.class, metaDataMap);
    }

    public queryUser_result() {
    }

    public queryUser_result(
      List<com.ishangke.edunav.commoncontract.model.UserBo> success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryUser_result(queryUser_result other) {
      if (other.isSetSuccess()) {
        List<com.ishangke.edunav.commoncontract.model.UserBo> __this__success = new ArrayList<com.ishangke.edunav.commoncontract.model.UserBo>(other.success.size());
        for (com.ishangke.edunav.commoncontract.model.UserBo other_element : other.success) {
          __this__success.add(new com.ishangke.edunav.commoncontract.model.UserBo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public queryUser_result deepCopy() {
      return new queryUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.ishangke.edunav.commoncontract.model.UserBo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.ishangke.edunav.commoncontract.model.UserBo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.ishangke.edunav.commoncontract.model.UserBo>();
      }
      this.success.add(elem);
    }

    public List<com.ishangke.edunav.commoncontract.model.UserBo> getSuccess() {
      return this.success;
    }

    public queryUser_result setSuccess(List<com.ishangke.edunav.commoncontract.model.UserBo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public queryUser_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.ishangke.edunav.commoncontract.model.UserBo>)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryUser_result)
        return this.equals((queryUser_result)that);
      return false;
    }

    public boolean equals(queryUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(queryUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryUser_resultStandardSchemeFactory implements SchemeFactory {
      public queryUser_resultStandardScheme getScheme() {
        return new queryUser_resultStandardScheme();
      }
    }

    private static class queryUser_resultStandardScheme extends StandardScheme<queryUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.UserBo>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    com.ishangke.edunav.commoncontract.model.UserBo _elem10;
                    _elem10 = new com.ishangke.edunav.commoncontract.model.UserBo();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.ishangke.edunav.commoncontract.model.UserBo _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryUser_resultTupleSchemeFactory implements SchemeFactory {
      public queryUser_resultTupleScheme getScheme() {
        return new queryUser_resultTupleScheme();
      }
    }

    private static class queryUser_resultTupleScheme extends TupleScheme<queryUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.ishangke.edunav.commoncontract.model.UserBo _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.UserBo>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              com.ishangke.edunav.commoncontract.model.UserBo _elem15;
              _elem15 = new com.ishangke.edunav.commoncontract.model.UserBo();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class querySession_args implements org.apache.thrift.TBase<querySession_args, querySession_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySession_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySession_args");

    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySession_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_BO((short)1, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySession_args.class, metaDataMap);
    }

    public querySession_args() {
    }

    public querySession_args(
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySession_args(querySession_args other) {
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public querySession_args deepCopy() {
      return new querySession_args(this);
    }

    @Override
    public void clear() {
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public querySession_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySession_args)
        return this.equals((querySession_args)that);
      return false;
    }

    public boolean equals(querySession_args that) {
      if (that == null)
        return false;

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(querySession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySession_args(");
      boolean first = true;

      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySession_argsStandardSchemeFactory implements SchemeFactory {
      public querySession_argsStandardScheme getScheme() {
        return new querySession_argsStandardScheme();
      }
    }

    private static class querySession_argsStandardScheme extends StandardScheme<querySession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySession_argsTupleSchemeFactory implements SchemeFactory {
      public querySession_argsTupleScheme getScheme() {
        return new querySession_argsTupleScheme();
      }
    }

    private static class querySession_argsTupleScheme extends TupleScheme<querySession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserBo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class querySession_result implements org.apache.thrift.TBase<querySession_result, querySession_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySession_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySession_resultTupleSchemeFactory());
    }

    public List<com.ishangke.edunav.commoncontract.model.UserBo> success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class))));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySession_result.class, metaDataMap);
    }

    public querySession_result() {
    }

    public querySession_result(
      List<com.ishangke.edunav.commoncontract.model.UserBo> success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySession_result(querySession_result other) {
      if (other.isSetSuccess()) {
        List<com.ishangke.edunav.commoncontract.model.UserBo> __this__success = new ArrayList<com.ishangke.edunav.commoncontract.model.UserBo>(other.success.size());
        for (com.ishangke.edunav.commoncontract.model.UserBo other_element : other.success) {
          __this__success.add(new com.ishangke.edunav.commoncontract.model.UserBo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public querySession_result deepCopy() {
      return new querySession_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.ishangke.edunav.commoncontract.model.UserBo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.ishangke.edunav.commoncontract.model.UserBo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.ishangke.edunav.commoncontract.model.UserBo>();
      }
      this.success.add(elem);
    }

    public List<com.ishangke.edunav.commoncontract.model.UserBo> getSuccess() {
      return this.success;
    }

    public querySession_result setSuccess(List<com.ishangke.edunav.commoncontract.model.UserBo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public querySession_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.ishangke.edunav.commoncontract.model.UserBo>)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySession_result)
        return this.equals((querySession_result)that);
      return false;
    }

    public boolean equals(querySession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(querySession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySession_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySession_resultStandardSchemeFactory implements SchemeFactory {
      public querySession_resultStandardScheme getScheme() {
        return new querySession_resultStandardScheme();
      }
    }

    private static class querySession_resultStandardScheme extends StandardScheme<querySession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.UserBo>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    com.ishangke.edunav.commoncontract.model.UserBo _elem18;
                    _elem18 = new com.ishangke.edunav.commoncontract.model.UserBo();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.ishangke.edunav.commoncontract.model.UserBo _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySession_resultTupleSchemeFactory implements SchemeFactory {
      public querySession_resultTupleScheme getScheme() {
        return new querySession_resultTupleScheme();
      }
    }

    private static class querySession_resultTupleScheme extends TupleScheme<querySession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.ishangke.edunav.commoncontract.model.UserBo _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.ishangke.edunav.commoncontract.model.UserBo>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              com.ishangke.edunav.commoncontract.model.UserBo _elem23;
              _elem23 = new com.ishangke.edunav.commoncontract.model.UserBo();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

  public static class disposeSession_args implements org.apache.thrift.TBase<disposeSession_args, disposeSession_args._Fields>, java.io.Serializable, Cloneable, Comparable<disposeSession_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disposeSession_args");

    private static final org.apache.thrift.protocol.TField USER_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("userBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disposeSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disposeSession_argsTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo userBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_BO((short)1, "userBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_BO
            return USER_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_BO, new org.apache.thrift.meta_data.FieldMetaData("userBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disposeSession_args.class, metaDataMap);
    }

    public disposeSession_args() {
    }

    public disposeSession_args(
      com.ishangke.edunav.commoncontract.model.UserBo userBo)
    {
      this();
      this.userBo = userBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disposeSession_args(disposeSession_args other) {
      if (other.isSetUserBo()) {
        this.userBo = new com.ishangke.edunav.commoncontract.model.UserBo(other.userBo);
      }
    }

    public disposeSession_args deepCopy() {
      return new disposeSession_args(this);
    }

    @Override
    public void clear() {
      this.userBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getUserBo() {
      return this.userBo;
    }

    public disposeSession_args setUserBo(com.ishangke.edunav.commoncontract.model.UserBo userBo) {
      this.userBo = userBo;
      return this;
    }

    public void unsetUserBo() {
      this.userBo = null;
    }

    /** Returns true if field userBo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBo() {
      return this.userBo != null;
    }

    public void setUserBoIsSet(boolean value) {
      if (!value) {
        this.userBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_BO:
        if (value == null) {
          unsetUserBo();
        } else {
          setUserBo((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_BO:
        return getUserBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_BO:
        return isSetUserBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disposeSession_args)
        return this.equals((disposeSession_args)that);
      return false;
    }

    public boolean equals(disposeSession_args that) {
      if (that == null)
        return false;

      boolean this_present_userBo = true && this.isSetUserBo();
      boolean that_present_userBo = true && that.isSetUserBo();
      if (this_present_userBo || that_present_userBo) {
        if (!(this_present_userBo && that_present_userBo))
          return false;
        if (!this.userBo.equals(that.userBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_userBo = true && (isSetUserBo());
      builder.append(present_userBo);
      if (present_userBo)
        builder.append(userBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(disposeSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserBo()).compareTo(other.isSetUserBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBo, other.userBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disposeSession_args(");
      boolean first = true;

      sb.append("userBo:");
      if (this.userBo == null) {
        sb.append("null");
      } else {
        sb.append(this.userBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userBo != null) {
        userBo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disposeSession_argsStandardSchemeFactory implements SchemeFactory {
      public disposeSession_argsStandardScheme getScheme() {
        return new disposeSession_argsStandardScheme();
      }
    }

    private static class disposeSession_argsStandardScheme extends StandardScheme<disposeSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disposeSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.userBo.read(iprot);
                struct.setUserBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disposeSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userBo != null) {
          oprot.writeFieldBegin(USER_BO_FIELD_DESC);
          struct.userBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disposeSession_argsTupleSchemeFactory implements SchemeFactory {
      public disposeSession_argsTupleScheme getScheme() {
        return new disposeSession_argsTupleScheme();
      }
    }

    private static class disposeSession_argsTupleScheme extends TupleScheme<disposeSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disposeSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserBo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserBo()) {
          struct.userBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disposeSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userBo = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.userBo.read(iprot);
          struct.setUserBoIsSet(true);
        }
      }
    }

  }

  public static class disposeSession_result implements org.apache.thrift.TBase<disposeSession_result, disposeSession_result._Fields>, java.io.Serializable, Cloneable, Comparable<disposeSession_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disposeSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSINESS_EXCEPTION_BO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessExceptionBo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disposeSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disposeSession_resultTupleSchemeFactory());
    }

    public com.ishangke.edunav.commoncontract.model.UserBo success; // required
    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSINESS_EXCEPTION_BO((short)1, "businessExceptionBo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSINESS_EXCEPTION_BO
            return BUSINESS_EXCEPTION_BO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ishangke.edunav.commoncontract.model.UserBo.class)));
      tmpMap.put(_Fields.BUSINESS_EXCEPTION_BO, new org.apache.thrift.meta_data.FieldMetaData("businessExceptionBo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disposeSession_result.class, metaDataMap);
    }

    public disposeSession_result() {
    }

    public disposeSession_result(
      com.ishangke.edunav.commoncontract.model.UserBo success,
      com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo)
    {
      this();
      this.success = success;
      this.businessExceptionBo = businessExceptionBo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disposeSession_result(disposeSession_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ishangke.edunav.commoncontract.model.UserBo(other.success);
      }
      if (other.isSetBusinessExceptionBo()) {
        this.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo(other.businessExceptionBo);
      }
    }

    public disposeSession_result deepCopy() {
      return new disposeSession_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.businessExceptionBo = null;
    }

    public com.ishangke.edunav.commoncontract.model.UserBo getSuccess() {
      return this.success;
    }

    public disposeSession_result setSuccess(com.ishangke.edunav.commoncontract.model.UserBo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ishangke.edunav.commoncontract.model.BusinessExceptionBo getBusinessExceptionBo() {
      return this.businessExceptionBo;
    }

    public disposeSession_result setBusinessExceptionBo(com.ishangke.edunav.commoncontract.model.BusinessExceptionBo businessExceptionBo) {
      this.businessExceptionBo = businessExceptionBo;
      return this;
    }

    public void unsetBusinessExceptionBo() {
      this.businessExceptionBo = null;
    }

    /** Returns true if field businessExceptionBo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessExceptionBo() {
      return this.businessExceptionBo != null;
    }

    public void setBusinessExceptionBoIsSet(boolean value) {
      if (!value) {
        this.businessExceptionBo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ishangke.edunav.commoncontract.model.UserBo)value);
        }
        break;

      case BUSINESS_EXCEPTION_BO:
        if (value == null) {
          unsetBusinessExceptionBo();
        } else {
          setBusinessExceptionBo((com.ishangke.edunav.commoncontract.model.BusinessExceptionBo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSINESS_EXCEPTION_BO:
        return getBusinessExceptionBo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSINESS_EXCEPTION_BO:
        return isSetBusinessExceptionBo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disposeSession_result)
        return this.equals((disposeSession_result)that);
      return false;
    }

    public boolean equals(disposeSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_businessExceptionBo = true && this.isSetBusinessExceptionBo();
      boolean that_present_businessExceptionBo = true && that.isSetBusinessExceptionBo();
      if (this_present_businessExceptionBo || that_present_businessExceptionBo) {
        if (!(this_present_businessExceptionBo && that_present_businessExceptionBo))
          return false;
        if (!this.businessExceptionBo.equals(that.businessExceptionBo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_businessExceptionBo = true && (isSetBusinessExceptionBo());
      builder.append(present_businessExceptionBo);
      if (present_businessExceptionBo)
        builder.append(businessExceptionBo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(disposeSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessExceptionBo()).compareTo(other.isSetBusinessExceptionBo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessExceptionBo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessExceptionBo, other.businessExceptionBo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disposeSession_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessExceptionBo:");
      if (this.businessExceptionBo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessExceptionBo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disposeSession_resultStandardSchemeFactory implements SchemeFactory {
      public disposeSession_resultStandardScheme getScheme() {
        return new disposeSession_resultStandardScheme();
      }
    }

    private static class disposeSession_resultStandardScheme extends StandardScheme<disposeSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disposeSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSINESS_EXCEPTION_BO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
                struct.businessExceptionBo.read(iprot);
                struct.setBusinessExceptionBoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disposeSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.businessExceptionBo != null) {
          oprot.writeFieldBegin(BUSINESS_EXCEPTION_BO_FIELD_DESC);
          struct.businessExceptionBo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disposeSession_resultTupleSchemeFactory implements SchemeFactory {
      public disposeSession_resultTupleScheme getScheme() {
        return new disposeSession_resultTupleScheme();
      }
    }

    private static class disposeSession_resultTupleScheme extends TupleScheme<disposeSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disposeSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBusinessExceptionBo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBusinessExceptionBo()) {
          struct.businessExceptionBo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disposeSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ishangke.edunav.commoncontract.model.UserBo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.businessExceptionBo = new com.ishangke.edunav.commoncontract.model.BusinessExceptionBo();
          struct.businessExceptionBo.read(iprot);
          struct.setBusinessExceptionBoIsSet(true);
        }
      }
    }

  }

}
