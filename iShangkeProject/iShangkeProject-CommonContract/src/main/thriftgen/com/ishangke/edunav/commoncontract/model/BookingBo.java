/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ishangke.edunav.commoncontract.model;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * BookingBo
 */
public class BookingBo implements org.apache.thrift.TBase<BookingBo, BookingBo._Fields>, java.io.Serializable, Cloneable, Comparable<BookingBo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BookingBo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COURSE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("courseId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField REFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("reference", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField SCHEDULED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduledTime", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField NO_REFUND_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("noRefundDate", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField CASHBACK_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cashbackDate", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("note", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CASHBACK_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("cashbackAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTime", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("enabled", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("idSet", org.apache.thrift.protocol.TType.SET, (short)19);
  private static final org.apache.thrift.protocol.TField COURSE_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("courseIdSet", org.apache.thrift.protocol.TType.SET, (short)20);
  private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateIdSet", org.apache.thrift.protocol.TType.SET, (short)21);
  private static final org.apache.thrift.protocol.TField USER_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdSet", org.apache.thrift.protocol.TType.SET, (short)22);
  private static final org.apache.thrift.protocol.TField STATUS_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("statusSet", org.apache.thrift.protocol.TType.SET, (short)23);
  private static final org.apache.thrift.protocol.TField SCHEDULED_TIME_START_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduledTimeStart", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField SCHEDULED_TIME_END_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduledTimeEnd", org.apache.thrift.protocol.TType.I64, (short)25);
  private static final org.apache.thrift.protocol.TField NO_REFUND_DATE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("noRefundDateStart", org.apache.thrift.protocol.TType.I64, (short)26);
  private static final org.apache.thrift.protocol.TField NO_REFUND_DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("noRefundDateEnd", org.apache.thrift.protocol.TType.I64, (short)27);
  private static final org.apache.thrift.protocol.TField CASHBACK_DATE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("cashbackDateStart", org.apache.thrift.protocol.TType.I64, (short)28);
  private static final org.apache.thrift.protocol.TField CASHBACK_DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("cashbackDateEnd", org.apache.thrift.protocol.TType.I64, (short)29);
  private static final org.apache.thrift.protocol.TField TYPE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("typeSet", org.apache.thrift.protocol.TType.SET, (short)30);
  private static final org.apache.thrift.protocol.TField CASHBACK_AMOUNT_START_FIELD_DESC = new org.apache.thrift.protocol.TField("cashbackAmountStart", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField CASHBACK_AMOUNT_END_FIELD_DESC = new org.apache.thrift.protocol.TField("cashbackAmountEnd", org.apache.thrift.protocol.TType.DOUBLE, (short)32);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIME_START_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimeStart", org.apache.thrift.protocol.TType.I64, (short)33);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIME_END_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimeEnd", org.apache.thrift.protocol.TType.I64, (short)34);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_START_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimeStart", org.apache.thrift.protocol.TType.I64, (short)35);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_END_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimeEnd", org.apache.thrift.protocol.TType.I64, (short)36);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BookingBoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BookingBoTupleSchemeFactory());
  }

  public int id; // required
  public int userId; // required
  public int courseId; // required
  public int courseTemplateId; // required
  public String reference; // required
  public String name; // required
  public String phone; // required
  public String email; // required
  public int status; // required
  public long scheduledTime; // required
  public long noRefundDate; // required
  public long cashbackDate; // required
  public int type; // required
  public String note; // required
  public double cashbackAmount; // required
  public long lastModifyTime; // required
  public long createTime; // required
  public int enabled; // required
  public Set<Integer> idSet; // required
  public Set<Integer> courseIdSet; // required
  public Set<Integer> courseTemplateIdSet; // required
  public Set<Integer> userIdSet; // required
  public Set<Integer> statusSet; // required
  public long scheduledTimeStart; // required
  public long scheduledTimeEnd; // required
  public long noRefundDateStart; // required
  public long noRefundDateEnd; // required
  public long cashbackDateStart; // required
  public long cashbackDateEnd; // required
  public Set<Integer> typeSet; // required
  public double cashbackAmountStart; // required
  public double cashbackAmountEnd; // required
  public long lastModifyTimeStart; // required
  public long lastModifyTimeEnd; // required
  public long createTimeStart; // required
  public long createTimeEnd; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    USER_ID((short)2, "userId"),
    COURSE_ID((short)3, "courseId"),
    COURSE_TEMPLATE_ID((short)4, "courseTemplateId"),
    REFERENCE((short)5, "reference"),
    NAME((short)6, "name"),
    PHONE((short)7, "phone"),
    EMAIL((short)8, "email"),
    STATUS((short)9, "status"),
    SCHEDULED_TIME((short)10, "scheduledTime"),
    NO_REFUND_DATE((short)11, "noRefundDate"),
    CASHBACK_DATE((short)12, "cashbackDate"),
    TYPE((short)13, "type"),
    NOTE((short)14, "note"),
    CASHBACK_AMOUNT((short)15, "cashbackAmount"),
    LAST_MODIFY_TIME((short)16, "lastModifyTime"),
    CREATE_TIME((short)17, "createTime"),
    ENABLED((short)18, "enabled"),
    ID_SET((short)19, "idSet"),
    COURSE_ID_SET((short)20, "courseIdSet"),
    COURSE_TEMPLATE_ID_SET((short)21, "courseTemplateIdSet"),
    USER_ID_SET((short)22, "userIdSet"),
    STATUS_SET((short)23, "statusSet"),
    SCHEDULED_TIME_START((short)24, "scheduledTimeStart"),
    SCHEDULED_TIME_END((short)25, "scheduledTimeEnd"),
    NO_REFUND_DATE_START((short)26, "noRefundDateStart"),
    NO_REFUND_DATE_END((short)27, "noRefundDateEnd"),
    CASHBACK_DATE_START((short)28, "cashbackDateStart"),
    CASHBACK_DATE_END((short)29, "cashbackDateEnd"),
    TYPE_SET((short)30, "typeSet"),
    CASHBACK_AMOUNT_START((short)31, "cashbackAmountStart"),
    CASHBACK_AMOUNT_END((short)32, "cashbackAmountEnd"),
    LAST_MODIFY_TIME_START((short)33, "lastModifyTimeStart"),
    LAST_MODIFY_TIME_END((short)34, "lastModifyTimeEnd"),
    CREATE_TIME_START((short)35, "createTimeStart"),
    CREATE_TIME_END((short)36, "createTimeEnd");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // COURSE_ID
          return COURSE_ID;
        case 4: // COURSE_TEMPLATE_ID
          return COURSE_TEMPLATE_ID;
        case 5: // REFERENCE
          return REFERENCE;
        case 6: // NAME
          return NAME;
        case 7: // PHONE
          return PHONE;
        case 8: // EMAIL
          return EMAIL;
        case 9: // STATUS
          return STATUS;
        case 10: // SCHEDULED_TIME
          return SCHEDULED_TIME;
        case 11: // NO_REFUND_DATE
          return NO_REFUND_DATE;
        case 12: // CASHBACK_DATE
          return CASHBACK_DATE;
        case 13: // TYPE
          return TYPE;
        case 14: // NOTE
          return NOTE;
        case 15: // CASHBACK_AMOUNT
          return CASHBACK_AMOUNT;
        case 16: // LAST_MODIFY_TIME
          return LAST_MODIFY_TIME;
        case 17: // CREATE_TIME
          return CREATE_TIME;
        case 18: // ENABLED
          return ENABLED;
        case 19: // ID_SET
          return ID_SET;
        case 20: // COURSE_ID_SET
          return COURSE_ID_SET;
        case 21: // COURSE_TEMPLATE_ID_SET
          return COURSE_TEMPLATE_ID_SET;
        case 22: // USER_ID_SET
          return USER_ID_SET;
        case 23: // STATUS_SET
          return STATUS_SET;
        case 24: // SCHEDULED_TIME_START
          return SCHEDULED_TIME_START;
        case 25: // SCHEDULED_TIME_END
          return SCHEDULED_TIME_END;
        case 26: // NO_REFUND_DATE_START
          return NO_REFUND_DATE_START;
        case 27: // NO_REFUND_DATE_END
          return NO_REFUND_DATE_END;
        case 28: // CASHBACK_DATE_START
          return CASHBACK_DATE_START;
        case 29: // CASHBACK_DATE_END
          return CASHBACK_DATE_END;
        case 30: // TYPE_SET
          return TYPE_SET;
        case 31: // CASHBACK_AMOUNT_START
          return CASHBACK_AMOUNT_START;
        case 32: // CASHBACK_AMOUNT_END
          return CASHBACK_AMOUNT_END;
        case 33: // LAST_MODIFY_TIME_START
          return LAST_MODIFY_TIME_START;
        case 34: // LAST_MODIFY_TIME_END
          return LAST_MODIFY_TIME_END;
        case 35: // CREATE_TIME_START
          return CREATE_TIME_START;
        case 36: // CREATE_TIME_END
          return CREATE_TIME_END;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __COURSEID_ISSET_ID = 2;
  private static final int __COURSETEMPLATEID_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __SCHEDULEDTIME_ISSET_ID = 5;
  private static final int __NOREFUNDDATE_ISSET_ID = 6;
  private static final int __CASHBACKDATE_ISSET_ID = 7;
  private static final int __TYPE_ISSET_ID = 8;
  private static final int __CASHBACKAMOUNT_ISSET_ID = 9;
  private static final int __LASTMODIFYTIME_ISSET_ID = 10;
  private static final int __CREATETIME_ISSET_ID = 11;
  private static final int __ENABLED_ISSET_ID = 12;
  private static final int __SCHEDULEDTIMESTART_ISSET_ID = 13;
  private static final int __SCHEDULEDTIMEEND_ISSET_ID = 14;
  private static final int __NOREFUNDDATESTART_ISSET_ID = 15;
  private static final int __NOREFUNDDATEEND_ISSET_ID = 16;
  private static final int __CASHBACKDATESTART_ISSET_ID = 17;
  private static final int __CASHBACKDATEEND_ISSET_ID = 18;
  private static final int __CASHBACKAMOUNTSTART_ISSET_ID = 19;
  private static final int __CASHBACKAMOUNTEND_ISSET_ID = 20;
  private static final int __LASTMODIFYTIMESTART_ISSET_ID = 21;
  private static final int __LASTMODIFYTIMEEND_ISSET_ID = 22;
  private static final int __CREATETIMESTART_ISSET_ID = 23;
  private static final int __CREATETIMEEND_ISSET_ID = 24;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COURSE_ID, new org.apache.thrift.meta_data.FieldMetaData("courseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COURSE_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REFERENCE, new org.apache.thrift.meta_data.FieldMetaData("reference", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCHEDULED_TIME, new org.apache.thrift.meta_data.FieldMetaData("scheduledTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NO_REFUND_DATE, new org.apache.thrift.meta_data.FieldMetaData("noRefundDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CASHBACK_DATE, new org.apache.thrift.meta_data.FieldMetaData("cashbackDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOTE, new org.apache.thrift.meta_data.FieldMetaData("note", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CASHBACK_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("cashbackAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LAST_MODIFY_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENABLED, new org.apache.thrift.meta_data.FieldMetaData("enabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID_SET, new org.apache.thrift.meta_data.FieldMetaData("idSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.COURSE_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("courseIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.COURSE_TEMPLATE_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.USER_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("userIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.STATUS_SET, new org.apache.thrift.meta_data.FieldMetaData("statusSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SCHEDULED_TIME_START, new org.apache.thrift.meta_data.FieldMetaData("scheduledTimeStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SCHEDULED_TIME_END, new org.apache.thrift.meta_data.FieldMetaData("scheduledTimeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NO_REFUND_DATE_START, new org.apache.thrift.meta_data.FieldMetaData("noRefundDateStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NO_REFUND_DATE_END, new org.apache.thrift.meta_data.FieldMetaData("noRefundDateEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CASHBACK_DATE_START, new org.apache.thrift.meta_data.FieldMetaData("cashbackDateStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CASHBACK_DATE_END, new org.apache.thrift.meta_data.FieldMetaData("cashbackDateEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE_SET, new org.apache.thrift.meta_data.FieldMetaData("typeSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CASHBACK_AMOUNT_START, new org.apache.thrift.meta_data.FieldMetaData("cashbackAmountStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CASHBACK_AMOUNT_END, new org.apache.thrift.meta_data.FieldMetaData("cashbackAmountEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LAST_MODIFY_TIME_START, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimeStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFY_TIME_END, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME_START, new org.apache.thrift.meta_data.FieldMetaData("createTimeStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME_END, new org.apache.thrift.meta_data.FieldMetaData("createTimeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BookingBo.class, metaDataMap);
  }

  public BookingBo() {
  }

  public BookingBo(
    int id,
    int userId,
    int courseId,
    int courseTemplateId,
    String reference,
    String name,
    String phone,
    String email,
    int status,
    long scheduledTime,
    long noRefundDate,
    long cashbackDate,
    int type,
    String note,
    double cashbackAmount,
    long lastModifyTime,
    long createTime,
    int enabled,
    Set<Integer> idSet,
    Set<Integer> courseIdSet,
    Set<Integer> courseTemplateIdSet,
    Set<Integer> userIdSet,
    Set<Integer> statusSet,
    long scheduledTimeStart,
    long scheduledTimeEnd,
    long noRefundDateStart,
    long noRefundDateEnd,
    long cashbackDateStart,
    long cashbackDateEnd,
    Set<Integer> typeSet,
    double cashbackAmountStart,
    double cashbackAmountEnd,
    long lastModifyTimeStart,
    long lastModifyTimeEnd,
    long createTimeStart,
    long createTimeEnd)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.courseId = courseId;
    setCourseIdIsSet(true);
    this.courseTemplateId = courseTemplateId;
    setCourseTemplateIdIsSet(true);
    this.reference = reference;
    this.name = name;
    this.phone = phone;
    this.email = email;
    this.status = status;
    setStatusIsSet(true);
    this.scheduledTime = scheduledTime;
    setScheduledTimeIsSet(true);
    this.noRefundDate = noRefundDate;
    setNoRefundDateIsSet(true);
    this.cashbackDate = cashbackDate;
    setCashbackDateIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.note = note;
    this.cashbackAmount = cashbackAmount;
    setCashbackAmountIsSet(true);
    this.lastModifyTime = lastModifyTime;
    setLastModifyTimeIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.enabled = enabled;
    setEnabledIsSet(true);
    this.idSet = idSet;
    this.courseIdSet = courseIdSet;
    this.courseTemplateIdSet = courseTemplateIdSet;
    this.userIdSet = userIdSet;
    this.statusSet = statusSet;
    this.scheduledTimeStart = scheduledTimeStart;
    setScheduledTimeStartIsSet(true);
    this.scheduledTimeEnd = scheduledTimeEnd;
    setScheduledTimeEndIsSet(true);
    this.noRefundDateStart = noRefundDateStart;
    setNoRefundDateStartIsSet(true);
    this.noRefundDateEnd = noRefundDateEnd;
    setNoRefundDateEndIsSet(true);
    this.cashbackDateStart = cashbackDateStart;
    setCashbackDateStartIsSet(true);
    this.cashbackDateEnd = cashbackDateEnd;
    setCashbackDateEndIsSet(true);
    this.typeSet = typeSet;
    this.cashbackAmountStart = cashbackAmountStart;
    setCashbackAmountStartIsSet(true);
    this.cashbackAmountEnd = cashbackAmountEnd;
    setCashbackAmountEndIsSet(true);
    this.lastModifyTimeStart = lastModifyTimeStart;
    setLastModifyTimeStartIsSet(true);
    this.lastModifyTimeEnd = lastModifyTimeEnd;
    setLastModifyTimeEndIsSet(true);
    this.createTimeStart = createTimeStart;
    setCreateTimeStartIsSet(true);
    this.createTimeEnd = createTimeEnd;
    setCreateTimeEndIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BookingBo(BookingBo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.userId = other.userId;
    this.courseId = other.courseId;
    this.courseTemplateId = other.courseTemplateId;
    if (other.isSetReference()) {
      this.reference = other.reference;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    this.status = other.status;
    this.scheduledTime = other.scheduledTime;
    this.noRefundDate = other.noRefundDate;
    this.cashbackDate = other.cashbackDate;
    this.type = other.type;
    if (other.isSetNote()) {
      this.note = other.note;
    }
    this.cashbackAmount = other.cashbackAmount;
    this.lastModifyTime = other.lastModifyTime;
    this.createTime = other.createTime;
    this.enabled = other.enabled;
    if (other.isSetIdSet()) {
      Set<Integer> __this__idSet = new HashSet<Integer>(other.idSet);
      this.idSet = __this__idSet;
    }
    if (other.isSetCourseIdSet()) {
      Set<Integer> __this__courseIdSet = new HashSet<Integer>(other.courseIdSet);
      this.courseIdSet = __this__courseIdSet;
    }
    if (other.isSetCourseTemplateIdSet()) {
      Set<Integer> __this__courseTemplateIdSet = new HashSet<Integer>(other.courseTemplateIdSet);
      this.courseTemplateIdSet = __this__courseTemplateIdSet;
    }
    if (other.isSetUserIdSet()) {
      Set<Integer> __this__userIdSet = new HashSet<Integer>(other.userIdSet);
      this.userIdSet = __this__userIdSet;
    }
    if (other.isSetStatusSet()) {
      Set<Integer> __this__statusSet = new HashSet<Integer>(other.statusSet);
      this.statusSet = __this__statusSet;
    }
    this.scheduledTimeStart = other.scheduledTimeStart;
    this.scheduledTimeEnd = other.scheduledTimeEnd;
    this.noRefundDateStart = other.noRefundDateStart;
    this.noRefundDateEnd = other.noRefundDateEnd;
    this.cashbackDateStart = other.cashbackDateStart;
    this.cashbackDateEnd = other.cashbackDateEnd;
    if (other.isSetTypeSet()) {
      Set<Integer> __this__typeSet = new HashSet<Integer>(other.typeSet);
      this.typeSet = __this__typeSet;
    }
    this.cashbackAmountStart = other.cashbackAmountStart;
    this.cashbackAmountEnd = other.cashbackAmountEnd;
    this.lastModifyTimeStart = other.lastModifyTimeStart;
    this.lastModifyTimeEnd = other.lastModifyTimeEnd;
    this.createTimeStart = other.createTimeStart;
    this.createTimeEnd = other.createTimeEnd;
  }

  public BookingBo deepCopy() {
    return new BookingBo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setCourseIdIsSet(false);
    this.courseId = 0;
    setCourseTemplateIdIsSet(false);
    this.courseTemplateId = 0;
    this.reference = null;
    this.name = null;
    this.phone = null;
    this.email = null;
    setStatusIsSet(false);
    this.status = 0;
    setScheduledTimeIsSet(false);
    this.scheduledTime = 0;
    setNoRefundDateIsSet(false);
    this.noRefundDate = 0;
    setCashbackDateIsSet(false);
    this.cashbackDate = 0;
    setTypeIsSet(false);
    this.type = 0;
    this.note = null;
    setCashbackAmountIsSet(false);
    this.cashbackAmount = 0.0;
    setLastModifyTimeIsSet(false);
    this.lastModifyTime = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setEnabledIsSet(false);
    this.enabled = 0;
    this.idSet = null;
    this.courseIdSet = null;
    this.courseTemplateIdSet = null;
    this.userIdSet = null;
    this.statusSet = null;
    setScheduledTimeStartIsSet(false);
    this.scheduledTimeStart = 0;
    setScheduledTimeEndIsSet(false);
    this.scheduledTimeEnd = 0;
    setNoRefundDateStartIsSet(false);
    this.noRefundDateStart = 0;
    setNoRefundDateEndIsSet(false);
    this.noRefundDateEnd = 0;
    setCashbackDateStartIsSet(false);
    this.cashbackDateStart = 0;
    setCashbackDateEndIsSet(false);
    this.cashbackDateEnd = 0;
    this.typeSet = null;
    setCashbackAmountStartIsSet(false);
    this.cashbackAmountStart = 0.0;
    setCashbackAmountEndIsSet(false);
    this.cashbackAmountEnd = 0.0;
    setLastModifyTimeStartIsSet(false);
    this.lastModifyTimeStart = 0;
    setLastModifyTimeEndIsSet(false);
    this.lastModifyTimeEnd = 0;
    setCreateTimeStartIsSet(false);
    this.createTimeStart = 0;
    setCreateTimeEndIsSet(false);
    this.createTimeEnd = 0;
  }

  public int getId() {
    return this.id;
  }

  public BookingBo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public BookingBo setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getCourseId() {
    return this.courseId;
  }

  public BookingBo setCourseId(int courseId) {
    this.courseId = courseId;
    setCourseIdIsSet(true);
    return this;
  }

  public void unsetCourseId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COURSEID_ISSET_ID);
  }

  /** Returns true if field courseId is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseId() {
    return EncodingUtils.testBit(__isset_bitfield, __COURSEID_ISSET_ID);
  }

  public void setCourseIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COURSEID_ISSET_ID, value);
  }

  public int getCourseTemplateId() {
    return this.courseTemplateId;
  }

  public BookingBo setCourseTemplateId(int courseTemplateId) {
    this.courseTemplateId = courseTemplateId;
    setCourseTemplateIdIsSet(true);
    return this;
  }

  public void unsetCourseTemplateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COURSETEMPLATEID_ISSET_ID);
  }

  /** Returns true if field courseTemplateId is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseTemplateId() {
    return EncodingUtils.testBit(__isset_bitfield, __COURSETEMPLATEID_ISSET_ID);
  }

  public void setCourseTemplateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COURSETEMPLATEID_ISSET_ID, value);
  }

  public String getReference() {
    return this.reference;
  }

  public BookingBo setReference(String reference) {
    this.reference = reference;
    return this;
  }

  public void unsetReference() {
    this.reference = null;
  }

  /** Returns true if field reference is set (has been assigned a value) and false otherwise */
  public boolean isSetReference() {
    return this.reference != null;
  }

  public void setReferenceIsSet(boolean value) {
    if (!value) {
      this.reference = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public BookingBo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public BookingBo setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public BookingBo setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public BookingBo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public long getScheduledTime() {
    return this.scheduledTime;
  }

  public BookingBo setScheduledTime(long scheduledTime) {
    this.scheduledTime = scheduledTime;
    setScheduledTimeIsSet(true);
    return this;
  }

  public void unsetScheduledTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEDULEDTIME_ISSET_ID);
  }

  /** Returns true if field scheduledTime is set (has been assigned a value) and false otherwise */
  public boolean isSetScheduledTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SCHEDULEDTIME_ISSET_ID);
  }

  public void setScheduledTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEDULEDTIME_ISSET_ID, value);
  }

  public long getNoRefundDate() {
    return this.noRefundDate;
  }

  public BookingBo setNoRefundDate(long noRefundDate) {
    this.noRefundDate = noRefundDate;
    setNoRefundDateIsSet(true);
    return this;
  }

  public void unsetNoRefundDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOREFUNDDATE_ISSET_ID);
  }

  /** Returns true if field noRefundDate is set (has been assigned a value) and false otherwise */
  public boolean isSetNoRefundDate() {
    return EncodingUtils.testBit(__isset_bitfield, __NOREFUNDDATE_ISSET_ID);
  }

  public void setNoRefundDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOREFUNDDATE_ISSET_ID, value);
  }

  public long getCashbackDate() {
    return this.cashbackDate;
  }

  public BookingBo setCashbackDate(long cashbackDate) {
    this.cashbackDate = cashbackDate;
    setCashbackDateIsSet(true);
    return this;
  }

  public void unsetCashbackDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHBACKDATE_ISSET_ID);
  }

  /** Returns true if field cashbackDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCashbackDate() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHBACKDATE_ISSET_ID);
  }

  public void setCashbackDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHBACKDATE_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public BookingBo setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public String getNote() {
    return this.note;
  }

  public BookingBo setNote(String note) {
    this.note = note;
    return this;
  }

  public void unsetNote() {
    this.note = null;
  }

  /** Returns true if field note is set (has been assigned a value) and false otherwise */
  public boolean isSetNote() {
    return this.note != null;
  }

  public void setNoteIsSet(boolean value) {
    if (!value) {
      this.note = null;
    }
  }

  public double getCashbackAmount() {
    return this.cashbackAmount;
  }

  public BookingBo setCashbackAmount(double cashbackAmount) {
    this.cashbackAmount = cashbackAmount;
    setCashbackAmountIsSet(true);
    return this;
  }

  public void unsetCashbackAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHBACKAMOUNT_ISSET_ID);
  }

  /** Returns true if field cashbackAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetCashbackAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHBACKAMOUNT_ISSET_ID);
  }

  public void setCashbackAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHBACKAMOUNT_ISSET_ID, value);
  }

  public long getLastModifyTime() {
    return this.lastModifyTime;
  }

  public BookingBo setLastModifyTime(long lastModifyTime) {
    this.lastModifyTime = lastModifyTime;
    setLastModifyTimeIsSet(true);
    return this;
  }

  public void unsetLastModifyTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIME_ISSET_ID);
  }

  /** Returns true if field lastModifyTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIME_ISSET_ID);
  }

  public void setLastModifyTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIME_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public BookingBo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getEnabled() {
    return this.enabled;
  }

  public BookingBo setEnabled(int enabled) {
    this.enabled = enabled;
    setEnabledIsSet(true);
    return this;
  }

  public void unsetEnabled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENABLED_ISSET_ID);
  }

  /** Returns true if field enabled is set (has been assigned a value) and false otherwise */
  public boolean isSetEnabled() {
    return EncodingUtils.testBit(__isset_bitfield, __ENABLED_ISSET_ID);
  }

  public void setEnabledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENABLED_ISSET_ID, value);
  }

  public int getIdSetSize() {
    return (this.idSet == null) ? 0 : this.idSet.size();
  }

  public java.util.Iterator<Integer> getIdSetIterator() {
    return (this.idSet == null) ? null : this.idSet.iterator();
  }

  public void addToIdSet(int elem) {
    if (this.idSet == null) {
      this.idSet = new HashSet<Integer>();
    }
    this.idSet.add(elem);
  }

  public Set<Integer> getIdSet() {
    return this.idSet;
  }

  public BookingBo setIdSet(Set<Integer> idSet) {
    this.idSet = idSet;
    return this;
  }

  public void unsetIdSet() {
    this.idSet = null;
  }

  /** Returns true if field idSet is set (has been assigned a value) and false otherwise */
  public boolean isSetIdSet() {
    return this.idSet != null;
  }

  public void setIdSetIsSet(boolean value) {
    if (!value) {
      this.idSet = null;
    }
  }

  public int getCourseIdSetSize() {
    return (this.courseIdSet == null) ? 0 : this.courseIdSet.size();
  }

  public java.util.Iterator<Integer> getCourseIdSetIterator() {
    return (this.courseIdSet == null) ? null : this.courseIdSet.iterator();
  }

  public void addToCourseIdSet(int elem) {
    if (this.courseIdSet == null) {
      this.courseIdSet = new HashSet<Integer>();
    }
    this.courseIdSet.add(elem);
  }

  public Set<Integer> getCourseIdSet() {
    return this.courseIdSet;
  }

  public BookingBo setCourseIdSet(Set<Integer> courseIdSet) {
    this.courseIdSet = courseIdSet;
    return this;
  }

  public void unsetCourseIdSet() {
    this.courseIdSet = null;
  }

  /** Returns true if field courseIdSet is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseIdSet() {
    return this.courseIdSet != null;
  }

  public void setCourseIdSetIsSet(boolean value) {
    if (!value) {
      this.courseIdSet = null;
    }
  }

  public int getCourseTemplateIdSetSize() {
    return (this.courseTemplateIdSet == null) ? 0 : this.courseTemplateIdSet.size();
  }

  public java.util.Iterator<Integer> getCourseTemplateIdSetIterator() {
    return (this.courseTemplateIdSet == null) ? null : this.courseTemplateIdSet.iterator();
  }

  public void addToCourseTemplateIdSet(int elem) {
    if (this.courseTemplateIdSet == null) {
      this.courseTemplateIdSet = new HashSet<Integer>();
    }
    this.courseTemplateIdSet.add(elem);
  }

  public Set<Integer> getCourseTemplateIdSet() {
    return this.courseTemplateIdSet;
  }

  public BookingBo setCourseTemplateIdSet(Set<Integer> courseTemplateIdSet) {
    this.courseTemplateIdSet = courseTemplateIdSet;
    return this;
  }

  public void unsetCourseTemplateIdSet() {
    this.courseTemplateIdSet = null;
  }

  /** Returns true if field courseTemplateIdSet is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseTemplateIdSet() {
    return this.courseTemplateIdSet != null;
  }

  public void setCourseTemplateIdSetIsSet(boolean value) {
    if (!value) {
      this.courseTemplateIdSet = null;
    }
  }

  public int getUserIdSetSize() {
    return (this.userIdSet == null) ? 0 : this.userIdSet.size();
  }

  public java.util.Iterator<Integer> getUserIdSetIterator() {
    return (this.userIdSet == null) ? null : this.userIdSet.iterator();
  }

  public void addToUserIdSet(int elem) {
    if (this.userIdSet == null) {
      this.userIdSet = new HashSet<Integer>();
    }
    this.userIdSet.add(elem);
  }

  public Set<Integer> getUserIdSet() {
    return this.userIdSet;
  }

  public BookingBo setUserIdSet(Set<Integer> userIdSet) {
    this.userIdSet = userIdSet;
    return this;
  }

  public void unsetUserIdSet() {
    this.userIdSet = null;
  }

  /** Returns true if field userIdSet is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIdSet() {
    return this.userIdSet != null;
  }

  public void setUserIdSetIsSet(boolean value) {
    if (!value) {
      this.userIdSet = null;
    }
  }

  public int getStatusSetSize() {
    return (this.statusSet == null) ? 0 : this.statusSet.size();
  }

  public java.util.Iterator<Integer> getStatusSetIterator() {
    return (this.statusSet == null) ? null : this.statusSet.iterator();
  }

  public void addToStatusSet(int elem) {
    if (this.statusSet == null) {
      this.statusSet = new HashSet<Integer>();
    }
    this.statusSet.add(elem);
  }

  public Set<Integer> getStatusSet() {
    return this.statusSet;
  }

  public BookingBo setStatusSet(Set<Integer> statusSet) {
    this.statusSet = statusSet;
    return this;
  }

  public void unsetStatusSet() {
    this.statusSet = null;
  }

  /** Returns true if field statusSet is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusSet() {
    return this.statusSet != null;
  }

  public void setStatusSetIsSet(boolean value) {
    if (!value) {
      this.statusSet = null;
    }
  }

  public long getScheduledTimeStart() {
    return this.scheduledTimeStart;
  }

  public BookingBo setScheduledTimeStart(long scheduledTimeStart) {
    this.scheduledTimeStart = scheduledTimeStart;
    setScheduledTimeStartIsSet(true);
    return this;
  }

  public void unsetScheduledTimeStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEDULEDTIMESTART_ISSET_ID);
  }

  /** Returns true if field scheduledTimeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetScheduledTimeStart() {
    return EncodingUtils.testBit(__isset_bitfield, __SCHEDULEDTIMESTART_ISSET_ID);
  }

  public void setScheduledTimeStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEDULEDTIMESTART_ISSET_ID, value);
  }

  public long getScheduledTimeEnd() {
    return this.scheduledTimeEnd;
  }

  public BookingBo setScheduledTimeEnd(long scheduledTimeEnd) {
    this.scheduledTimeEnd = scheduledTimeEnd;
    setScheduledTimeEndIsSet(true);
    return this;
  }

  public void unsetScheduledTimeEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEDULEDTIMEEND_ISSET_ID);
  }

  /** Returns true if field scheduledTimeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetScheduledTimeEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __SCHEDULEDTIMEEND_ISSET_ID);
  }

  public void setScheduledTimeEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEDULEDTIMEEND_ISSET_ID, value);
  }

  public long getNoRefundDateStart() {
    return this.noRefundDateStart;
  }

  public BookingBo setNoRefundDateStart(long noRefundDateStart) {
    this.noRefundDateStart = noRefundDateStart;
    setNoRefundDateStartIsSet(true);
    return this;
  }

  public void unsetNoRefundDateStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOREFUNDDATESTART_ISSET_ID);
  }

  /** Returns true if field noRefundDateStart is set (has been assigned a value) and false otherwise */
  public boolean isSetNoRefundDateStart() {
    return EncodingUtils.testBit(__isset_bitfield, __NOREFUNDDATESTART_ISSET_ID);
  }

  public void setNoRefundDateStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOREFUNDDATESTART_ISSET_ID, value);
  }

  public long getNoRefundDateEnd() {
    return this.noRefundDateEnd;
  }

  public BookingBo setNoRefundDateEnd(long noRefundDateEnd) {
    this.noRefundDateEnd = noRefundDateEnd;
    setNoRefundDateEndIsSet(true);
    return this;
  }

  public void unsetNoRefundDateEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOREFUNDDATEEND_ISSET_ID);
  }

  /** Returns true if field noRefundDateEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetNoRefundDateEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __NOREFUNDDATEEND_ISSET_ID);
  }

  public void setNoRefundDateEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOREFUNDDATEEND_ISSET_ID, value);
  }

  public long getCashbackDateStart() {
    return this.cashbackDateStart;
  }

  public BookingBo setCashbackDateStart(long cashbackDateStart) {
    this.cashbackDateStart = cashbackDateStart;
    setCashbackDateStartIsSet(true);
    return this;
  }

  public void unsetCashbackDateStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHBACKDATESTART_ISSET_ID);
  }

  /** Returns true if field cashbackDateStart is set (has been assigned a value) and false otherwise */
  public boolean isSetCashbackDateStart() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHBACKDATESTART_ISSET_ID);
  }

  public void setCashbackDateStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHBACKDATESTART_ISSET_ID, value);
  }

  public long getCashbackDateEnd() {
    return this.cashbackDateEnd;
  }

  public BookingBo setCashbackDateEnd(long cashbackDateEnd) {
    this.cashbackDateEnd = cashbackDateEnd;
    setCashbackDateEndIsSet(true);
    return this;
  }

  public void unsetCashbackDateEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHBACKDATEEND_ISSET_ID);
  }

  /** Returns true if field cashbackDateEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetCashbackDateEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHBACKDATEEND_ISSET_ID);
  }

  public void setCashbackDateEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHBACKDATEEND_ISSET_ID, value);
  }

  public int getTypeSetSize() {
    return (this.typeSet == null) ? 0 : this.typeSet.size();
  }

  public java.util.Iterator<Integer> getTypeSetIterator() {
    return (this.typeSet == null) ? null : this.typeSet.iterator();
  }

  public void addToTypeSet(int elem) {
    if (this.typeSet == null) {
      this.typeSet = new HashSet<Integer>();
    }
    this.typeSet.add(elem);
  }

  public Set<Integer> getTypeSet() {
    return this.typeSet;
  }

  public BookingBo setTypeSet(Set<Integer> typeSet) {
    this.typeSet = typeSet;
    return this;
  }

  public void unsetTypeSet() {
    this.typeSet = null;
  }

  /** Returns true if field typeSet is set (has been assigned a value) and false otherwise */
  public boolean isSetTypeSet() {
    return this.typeSet != null;
  }

  public void setTypeSetIsSet(boolean value) {
    if (!value) {
      this.typeSet = null;
    }
  }

  public double getCashbackAmountStart() {
    return this.cashbackAmountStart;
  }

  public BookingBo setCashbackAmountStart(double cashbackAmountStart) {
    this.cashbackAmountStart = cashbackAmountStart;
    setCashbackAmountStartIsSet(true);
    return this;
  }

  public void unsetCashbackAmountStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHBACKAMOUNTSTART_ISSET_ID);
  }

  /** Returns true if field cashbackAmountStart is set (has been assigned a value) and false otherwise */
  public boolean isSetCashbackAmountStart() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHBACKAMOUNTSTART_ISSET_ID);
  }

  public void setCashbackAmountStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHBACKAMOUNTSTART_ISSET_ID, value);
  }

  public double getCashbackAmountEnd() {
    return this.cashbackAmountEnd;
  }

  public BookingBo setCashbackAmountEnd(double cashbackAmountEnd) {
    this.cashbackAmountEnd = cashbackAmountEnd;
    setCashbackAmountEndIsSet(true);
    return this;
  }

  public void unsetCashbackAmountEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHBACKAMOUNTEND_ISSET_ID);
  }

  /** Returns true if field cashbackAmountEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetCashbackAmountEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHBACKAMOUNTEND_ISSET_ID);
  }

  public void setCashbackAmountEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHBACKAMOUNTEND_ISSET_ID, value);
  }

  public long getLastModifyTimeStart() {
    return this.lastModifyTimeStart;
  }

  public BookingBo setLastModifyTimeStart(long lastModifyTimeStart) {
    this.lastModifyTimeStart = lastModifyTimeStart;
    setLastModifyTimeStartIsSet(true);
    return this;
  }

  public void unsetLastModifyTimeStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTART_ISSET_ID);
  }

  /** Returns true if field lastModifyTimeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimeStart() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTART_ISSET_ID);
  }

  public void setLastModifyTimeStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTART_ISSET_ID, value);
  }

  public long getLastModifyTimeEnd() {
    return this.lastModifyTimeEnd;
  }

  public BookingBo setLastModifyTimeEnd(long lastModifyTimeEnd) {
    this.lastModifyTimeEnd = lastModifyTimeEnd;
    setLastModifyTimeEndIsSet(true);
    return this;
  }

  public void unsetLastModifyTimeEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMEEND_ISSET_ID);
  }

  /** Returns true if field lastModifyTimeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimeEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMEEND_ISSET_ID);
  }

  public void setLastModifyTimeEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMEEND_ISSET_ID, value);
  }

  public long getCreateTimeStart() {
    return this.createTimeStart;
  }

  public BookingBo setCreateTimeStart(long createTimeStart) {
    this.createTimeStart = createTimeStart;
    setCreateTimeStartIsSet(true);
    return this;
  }

  public void unsetCreateTimeStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTART_ISSET_ID);
  }

  /** Returns true if field createTimeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimeStart() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTART_ISSET_ID);
  }

  public void setCreateTimeStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTART_ISSET_ID, value);
  }

  public long getCreateTimeEnd() {
    return this.createTimeEnd;
  }

  public BookingBo setCreateTimeEnd(long createTimeEnd) {
    this.createTimeEnd = createTimeEnd;
    setCreateTimeEndIsSet(true);
    return this;
  }

  public void unsetCreateTimeEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMEEND_ISSET_ID);
  }

  /** Returns true if field createTimeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimeEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMEEND_ISSET_ID);
  }

  public void setCreateTimeEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMEEND_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case COURSE_ID:
      if (value == null) {
        unsetCourseId();
      } else {
        setCourseId((Integer)value);
      }
      break;

    case COURSE_TEMPLATE_ID:
      if (value == null) {
        unsetCourseTemplateId();
      } else {
        setCourseTemplateId((Integer)value);
      }
      break;

    case REFERENCE:
      if (value == null) {
        unsetReference();
      } else {
        setReference((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case SCHEDULED_TIME:
      if (value == null) {
        unsetScheduledTime();
      } else {
        setScheduledTime((Long)value);
      }
      break;

    case NO_REFUND_DATE:
      if (value == null) {
        unsetNoRefundDate();
      } else {
        setNoRefundDate((Long)value);
      }
      break;

    case CASHBACK_DATE:
      if (value == null) {
        unsetCashbackDate();
      } else {
        setCashbackDate((Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case NOTE:
      if (value == null) {
        unsetNote();
      } else {
        setNote((String)value);
      }
      break;

    case CASHBACK_AMOUNT:
      if (value == null) {
        unsetCashbackAmount();
      } else {
        setCashbackAmount((Double)value);
      }
      break;

    case LAST_MODIFY_TIME:
      if (value == null) {
        unsetLastModifyTime();
      } else {
        setLastModifyTime((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case ENABLED:
      if (value == null) {
        unsetEnabled();
      } else {
        setEnabled((Integer)value);
      }
      break;

    case ID_SET:
      if (value == null) {
        unsetIdSet();
      } else {
        setIdSet((Set<Integer>)value);
      }
      break;

    case COURSE_ID_SET:
      if (value == null) {
        unsetCourseIdSet();
      } else {
        setCourseIdSet((Set<Integer>)value);
      }
      break;

    case COURSE_TEMPLATE_ID_SET:
      if (value == null) {
        unsetCourseTemplateIdSet();
      } else {
        setCourseTemplateIdSet((Set<Integer>)value);
      }
      break;

    case USER_ID_SET:
      if (value == null) {
        unsetUserIdSet();
      } else {
        setUserIdSet((Set<Integer>)value);
      }
      break;

    case STATUS_SET:
      if (value == null) {
        unsetStatusSet();
      } else {
        setStatusSet((Set<Integer>)value);
      }
      break;

    case SCHEDULED_TIME_START:
      if (value == null) {
        unsetScheduledTimeStart();
      } else {
        setScheduledTimeStart((Long)value);
      }
      break;

    case SCHEDULED_TIME_END:
      if (value == null) {
        unsetScheduledTimeEnd();
      } else {
        setScheduledTimeEnd((Long)value);
      }
      break;

    case NO_REFUND_DATE_START:
      if (value == null) {
        unsetNoRefundDateStart();
      } else {
        setNoRefundDateStart((Long)value);
      }
      break;

    case NO_REFUND_DATE_END:
      if (value == null) {
        unsetNoRefundDateEnd();
      } else {
        setNoRefundDateEnd((Long)value);
      }
      break;

    case CASHBACK_DATE_START:
      if (value == null) {
        unsetCashbackDateStart();
      } else {
        setCashbackDateStart((Long)value);
      }
      break;

    case CASHBACK_DATE_END:
      if (value == null) {
        unsetCashbackDateEnd();
      } else {
        setCashbackDateEnd((Long)value);
      }
      break;

    case TYPE_SET:
      if (value == null) {
        unsetTypeSet();
      } else {
        setTypeSet((Set<Integer>)value);
      }
      break;

    case CASHBACK_AMOUNT_START:
      if (value == null) {
        unsetCashbackAmountStart();
      } else {
        setCashbackAmountStart((Double)value);
      }
      break;

    case CASHBACK_AMOUNT_END:
      if (value == null) {
        unsetCashbackAmountEnd();
      } else {
        setCashbackAmountEnd((Double)value);
      }
      break;

    case LAST_MODIFY_TIME_START:
      if (value == null) {
        unsetLastModifyTimeStart();
      } else {
        setLastModifyTimeStart((Long)value);
      }
      break;

    case LAST_MODIFY_TIME_END:
      if (value == null) {
        unsetLastModifyTimeEnd();
      } else {
        setLastModifyTimeEnd((Long)value);
      }
      break;

    case CREATE_TIME_START:
      if (value == null) {
        unsetCreateTimeStart();
      } else {
        setCreateTimeStart((Long)value);
      }
      break;

    case CREATE_TIME_END:
      if (value == null) {
        unsetCreateTimeEnd();
      } else {
        setCreateTimeEnd((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case COURSE_ID:
      return Integer.valueOf(getCourseId());

    case COURSE_TEMPLATE_ID:
      return Integer.valueOf(getCourseTemplateId());

    case REFERENCE:
      return getReference();

    case NAME:
      return getName();

    case PHONE:
      return getPhone();

    case EMAIL:
      return getEmail();

    case STATUS:
      return Integer.valueOf(getStatus());

    case SCHEDULED_TIME:
      return Long.valueOf(getScheduledTime());

    case NO_REFUND_DATE:
      return Long.valueOf(getNoRefundDate());

    case CASHBACK_DATE:
      return Long.valueOf(getCashbackDate());

    case TYPE:
      return Integer.valueOf(getType());

    case NOTE:
      return getNote();

    case CASHBACK_AMOUNT:
      return Double.valueOf(getCashbackAmount());

    case LAST_MODIFY_TIME:
      return Long.valueOf(getLastModifyTime());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case ENABLED:
      return Integer.valueOf(getEnabled());

    case ID_SET:
      return getIdSet();

    case COURSE_ID_SET:
      return getCourseIdSet();

    case COURSE_TEMPLATE_ID_SET:
      return getCourseTemplateIdSet();

    case USER_ID_SET:
      return getUserIdSet();

    case STATUS_SET:
      return getStatusSet();

    case SCHEDULED_TIME_START:
      return Long.valueOf(getScheduledTimeStart());

    case SCHEDULED_TIME_END:
      return Long.valueOf(getScheduledTimeEnd());

    case NO_REFUND_DATE_START:
      return Long.valueOf(getNoRefundDateStart());

    case NO_REFUND_DATE_END:
      return Long.valueOf(getNoRefundDateEnd());

    case CASHBACK_DATE_START:
      return Long.valueOf(getCashbackDateStart());

    case CASHBACK_DATE_END:
      return Long.valueOf(getCashbackDateEnd());

    case TYPE_SET:
      return getTypeSet();

    case CASHBACK_AMOUNT_START:
      return Double.valueOf(getCashbackAmountStart());

    case CASHBACK_AMOUNT_END:
      return Double.valueOf(getCashbackAmountEnd());

    case LAST_MODIFY_TIME_START:
      return Long.valueOf(getLastModifyTimeStart());

    case LAST_MODIFY_TIME_END:
      return Long.valueOf(getLastModifyTimeEnd());

    case CREATE_TIME_START:
      return Long.valueOf(getCreateTimeStart());

    case CREATE_TIME_END:
      return Long.valueOf(getCreateTimeEnd());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USER_ID:
      return isSetUserId();
    case COURSE_ID:
      return isSetCourseId();
    case COURSE_TEMPLATE_ID:
      return isSetCourseTemplateId();
    case REFERENCE:
      return isSetReference();
    case NAME:
      return isSetName();
    case PHONE:
      return isSetPhone();
    case EMAIL:
      return isSetEmail();
    case STATUS:
      return isSetStatus();
    case SCHEDULED_TIME:
      return isSetScheduledTime();
    case NO_REFUND_DATE:
      return isSetNoRefundDate();
    case CASHBACK_DATE:
      return isSetCashbackDate();
    case TYPE:
      return isSetType();
    case NOTE:
      return isSetNote();
    case CASHBACK_AMOUNT:
      return isSetCashbackAmount();
    case LAST_MODIFY_TIME:
      return isSetLastModifyTime();
    case CREATE_TIME:
      return isSetCreateTime();
    case ENABLED:
      return isSetEnabled();
    case ID_SET:
      return isSetIdSet();
    case COURSE_ID_SET:
      return isSetCourseIdSet();
    case COURSE_TEMPLATE_ID_SET:
      return isSetCourseTemplateIdSet();
    case USER_ID_SET:
      return isSetUserIdSet();
    case STATUS_SET:
      return isSetStatusSet();
    case SCHEDULED_TIME_START:
      return isSetScheduledTimeStart();
    case SCHEDULED_TIME_END:
      return isSetScheduledTimeEnd();
    case NO_REFUND_DATE_START:
      return isSetNoRefundDateStart();
    case NO_REFUND_DATE_END:
      return isSetNoRefundDateEnd();
    case CASHBACK_DATE_START:
      return isSetCashbackDateStart();
    case CASHBACK_DATE_END:
      return isSetCashbackDateEnd();
    case TYPE_SET:
      return isSetTypeSet();
    case CASHBACK_AMOUNT_START:
      return isSetCashbackAmountStart();
    case CASHBACK_AMOUNT_END:
      return isSetCashbackAmountEnd();
    case LAST_MODIFY_TIME_START:
      return isSetLastModifyTimeStart();
    case LAST_MODIFY_TIME_END:
      return isSetLastModifyTimeEnd();
    case CREATE_TIME_START:
      return isSetCreateTimeStart();
    case CREATE_TIME_END:
      return isSetCreateTimeEnd();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BookingBo)
      return this.equals((BookingBo)that);
    return false;
  }

  public boolean equals(BookingBo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_courseId = true;
    boolean that_present_courseId = true;
    if (this_present_courseId || that_present_courseId) {
      if (!(this_present_courseId && that_present_courseId))
        return false;
      if (this.courseId != that.courseId)
        return false;
    }

    boolean this_present_courseTemplateId = true;
    boolean that_present_courseTemplateId = true;
    if (this_present_courseTemplateId || that_present_courseTemplateId) {
      if (!(this_present_courseTemplateId && that_present_courseTemplateId))
        return false;
      if (this.courseTemplateId != that.courseTemplateId)
        return false;
    }

    boolean this_present_reference = true && this.isSetReference();
    boolean that_present_reference = true && that.isSetReference();
    if (this_present_reference || that_present_reference) {
      if (!(this_present_reference && that_present_reference))
        return false;
      if (!this.reference.equals(that.reference))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_scheduledTime = true;
    boolean that_present_scheduledTime = true;
    if (this_present_scheduledTime || that_present_scheduledTime) {
      if (!(this_present_scheduledTime && that_present_scheduledTime))
        return false;
      if (this.scheduledTime != that.scheduledTime)
        return false;
    }

    boolean this_present_noRefundDate = true;
    boolean that_present_noRefundDate = true;
    if (this_present_noRefundDate || that_present_noRefundDate) {
      if (!(this_present_noRefundDate && that_present_noRefundDate))
        return false;
      if (this.noRefundDate != that.noRefundDate)
        return false;
    }

    boolean this_present_cashbackDate = true;
    boolean that_present_cashbackDate = true;
    if (this_present_cashbackDate || that_present_cashbackDate) {
      if (!(this_present_cashbackDate && that_present_cashbackDate))
        return false;
      if (this.cashbackDate != that.cashbackDate)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_note = true && this.isSetNote();
    boolean that_present_note = true && that.isSetNote();
    if (this_present_note || that_present_note) {
      if (!(this_present_note && that_present_note))
        return false;
      if (!this.note.equals(that.note))
        return false;
    }

    boolean this_present_cashbackAmount = true;
    boolean that_present_cashbackAmount = true;
    if (this_present_cashbackAmount || that_present_cashbackAmount) {
      if (!(this_present_cashbackAmount && that_present_cashbackAmount))
        return false;
      if (this.cashbackAmount != that.cashbackAmount)
        return false;
    }

    boolean this_present_lastModifyTime = true;
    boolean that_present_lastModifyTime = true;
    if (this_present_lastModifyTime || that_present_lastModifyTime) {
      if (!(this_present_lastModifyTime && that_present_lastModifyTime))
        return false;
      if (this.lastModifyTime != that.lastModifyTime)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_enabled = true;
    boolean that_present_enabled = true;
    if (this_present_enabled || that_present_enabled) {
      if (!(this_present_enabled && that_present_enabled))
        return false;
      if (this.enabled != that.enabled)
        return false;
    }

    boolean this_present_idSet = true && this.isSetIdSet();
    boolean that_present_idSet = true && that.isSetIdSet();
    if (this_present_idSet || that_present_idSet) {
      if (!(this_present_idSet && that_present_idSet))
        return false;
      if (!this.idSet.equals(that.idSet))
        return false;
    }

    boolean this_present_courseIdSet = true && this.isSetCourseIdSet();
    boolean that_present_courseIdSet = true && that.isSetCourseIdSet();
    if (this_present_courseIdSet || that_present_courseIdSet) {
      if (!(this_present_courseIdSet && that_present_courseIdSet))
        return false;
      if (!this.courseIdSet.equals(that.courseIdSet))
        return false;
    }

    boolean this_present_courseTemplateIdSet = true && this.isSetCourseTemplateIdSet();
    boolean that_present_courseTemplateIdSet = true && that.isSetCourseTemplateIdSet();
    if (this_present_courseTemplateIdSet || that_present_courseTemplateIdSet) {
      if (!(this_present_courseTemplateIdSet && that_present_courseTemplateIdSet))
        return false;
      if (!this.courseTemplateIdSet.equals(that.courseTemplateIdSet))
        return false;
    }

    boolean this_present_userIdSet = true && this.isSetUserIdSet();
    boolean that_present_userIdSet = true && that.isSetUserIdSet();
    if (this_present_userIdSet || that_present_userIdSet) {
      if (!(this_present_userIdSet && that_present_userIdSet))
        return false;
      if (!this.userIdSet.equals(that.userIdSet))
        return false;
    }

    boolean this_present_statusSet = true && this.isSetStatusSet();
    boolean that_present_statusSet = true && that.isSetStatusSet();
    if (this_present_statusSet || that_present_statusSet) {
      if (!(this_present_statusSet && that_present_statusSet))
        return false;
      if (!this.statusSet.equals(that.statusSet))
        return false;
    }

    boolean this_present_scheduledTimeStart = true;
    boolean that_present_scheduledTimeStart = true;
    if (this_present_scheduledTimeStart || that_present_scheduledTimeStart) {
      if (!(this_present_scheduledTimeStart && that_present_scheduledTimeStart))
        return false;
      if (this.scheduledTimeStart != that.scheduledTimeStart)
        return false;
    }

    boolean this_present_scheduledTimeEnd = true;
    boolean that_present_scheduledTimeEnd = true;
    if (this_present_scheduledTimeEnd || that_present_scheduledTimeEnd) {
      if (!(this_present_scheduledTimeEnd && that_present_scheduledTimeEnd))
        return false;
      if (this.scheduledTimeEnd != that.scheduledTimeEnd)
        return false;
    }

    boolean this_present_noRefundDateStart = true;
    boolean that_present_noRefundDateStart = true;
    if (this_present_noRefundDateStart || that_present_noRefundDateStart) {
      if (!(this_present_noRefundDateStart && that_present_noRefundDateStart))
        return false;
      if (this.noRefundDateStart != that.noRefundDateStart)
        return false;
    }

    boolean this_present_noRefundDateEnd = true;
    boolean that_present_noRefundDateEnd = true;
    if (this_present_noRefundDateEnd || that_present_noRefundDateEnd) {
      if (!(this_present_noRefundDateEnd && that_present_noRefundDateEnd))
        return false;
      if (this.noRefundDateEnd != that.noRefundDateEnd)
        return false;
    }

    boolean this_present_cashbackDateStart = true;
    boolean that_present_cashbackDateStart = true;
    if (this_present_cashbackDateStart || that_present_cashbackDateStart) {
      if (!(this_present_cashbackDateStart && that_present_cashbackDateStart))
        return false;
      if (this.cashbackDateStart != that.cashbackDateStart)
        return false;
    }

    boolean this_present_cashbackDateEnd = true;
    boolean that_present_cashbackDateEnd = true;
    if (this_present_cashbackDateEnd || that_present_cashbackDateEnd) {
      if (!(this_present_cashbackDateEnd && that_present_cashbackDateEnd))
        return false;
      if (this.cashbackDateEnd != that.cashbackDateEnd)
        return false;
    }

    boolean this_present_typeSet = true && this.isSetTypeSet();
    boolean that_present_typeSet = true && that.isSetTypeSet();
    if (this_present_typeSet || that_present_typeSet) {
      if (!(this_present_typeSet && that_present_typeSet))
        return false;
      if (!this.typeSet.equals(that.typeSet))
        return false;
    }

    boolean this_present_cashbackAmountStart = true;
    boolean that_present_cashbackAmountStart = true;
    if (this_present_cashbackAmountStart || that_present_cashbackAmountStart) {
      if (!(this_present_cashbackAmountStart && that_present_cashbackAmountStart))
        return false;
      if (this.cashbackAmountStart != that.cashbackAmountStart)
        return false;
    }

    boolean this_present_cashbackAmountEnd = true;
    boolean that_present_cashbackAmountEnd = true;
    if (this_present_cashbackAmountEnd || that_present_cashbackAmountEnd) {
      if (!(this_present_cashbackAmountEnd && that_present_cashbackAmountEnd))
        return false;
      if (this.cashbackAmountEnd != that.cashbackAmountEnd)
        return false;
    }

    boolean this_present_lastModifyTimeStart = true;
    boolean that_present_lastModifyTimeStart = true;
    if (this_present_lastModifyTimeStart || that_present_lastModifyTimeStart) {
      if (!(this_present_lastModifyTimeStart && that_present_lastModifyTimeStart))
        return false;
      if (this.lastModifyTimeStart != that.lastModifyTimeStart)
        return false;
    }

    boolean this_present_lastModifyTimeEnd = true;
    boolean that_present_lastModifyTimeEnd = true;
    if (this_present_lastModifyTimeEnd || that_present_lastModifyTimeEnd) {
      if (!(this_present_lastModifyTimeEnd && that_present_lastModifyTimeEnd))
        return false;
      if (this.lastModifyTimeEnd != that.lastModifyTimeEnd)
        return false;
    }

    boolean this_present_createTimeStart = true;
    boolean that_present_createTimeStart = true;
    if (this_present_createTimeStart || that_present_createTimeStart) {
      if (!(this_present_createTimeStart && that_present_createTimeStart))
        return false;
      if (this.createTimeStart != that.createTimeStart)
        return false;
    }

    boolean this_present_createTimeEnd = true;
    boolean that_present_createTimeEnd = true;
    if (this_present_createTimeEnd || that_present_createTimeEnd) {
      if (!(this_present_createTimeEnd && that_present_createTimeEnd))
        return false;
      if (this.createTimeEnd != that.createTimeEnd)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_userId = true;
    builder.append(present_userId);
    if (present_userId)
      builder.append(userId);

    boolean present_courseId = true;
    builder.append(present_courseId);
    if (present_courseId)
      builder.append(courseId);

    boolean present_courseTemplateId = true;
    builder.append(present_courseTemplateId);
    if (present_courseTemplateId)
      builder.append(courseTemplateId);

    boolean present_reference = true && (isSetReference());
    builder.append(present_reference);
    if (present_reference)
      builder.append(reference);

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_phone = true && (isSetPhone());
    builder.append(present_phone);
    if (present_phone)
      builder.append(phone);

    boolean present_email = true && (isSetEmail());
    builder.append(present_email);
    if (present_email)
      builder.append(email);

    boolean present_status = true;
    builder.append(present_status);
    if (present_status)
      builder.append(status);

    boolean present_scheduledTime = true;
    builder.append(present_scheduledTime);
    if (present_scheduledTime)
      builder.append(scheduledTime);

    boolean present_noRefundDate = true;
    builder.append(present_noRefundDate);
    if (present_noRefundDate)
      builder.append(noRefundDate);

    boolean present_cashbackDate = true;
    builder.append(present_cashbackDate);
    if (present_cashbackDate)
      builder.append(cashbackDate);

    boolean present_type = true;
    builder.append(present_type);
    if (present_type)
      builder.append(type);

    boolean present_note = true && (isSetNote());
    builder.append(present_note);
    if (present_note)
      builder.append(note);

    boolean present_cashbackAmount = true;
    builder.append(present_cashbackAmount);
    if (present_cashbackAmount)
      builder.append(cashbackAmount);

    boolean present_lastModifyTime = true;
    builder.append(present_lastModifyTime);
    if (present_lastModifyTime)
      builder.append(lastModifyTime);

    boolean present_createTime = true;
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);

    boolean present_enabled = true;
    builder.append(present_enabled);
    if (present_enabled)
      builder.append(enabled);

    boolean present_idSet = true && (isSetIdSet());
    builder.append(present_idSet);
    if (present_idSet)
      builder.append(idSet);

    boolean present_courseIdSet = true && (isSetCourseIdSet());
    builder.append(present_courseIdSet);
    if (present_courseIdSet)
      builder.append(courseIdSet);

    boolean present_courseTemplateIdSet = true && (isSetCourseTemplateIdSet());
    builder.append(present_courseTemplateIdSet);
    if (present_courseTemplateIdSet)
      builder.append(courseTemplateIdSet);

    boolean present_userIdSet = true && (isSetUserIdSet());
    builder.append(present_userIdSet);
    if (present_userIdSet)
      builder.append(userIdSet);

    boolean present_statusSet = true && (isSetStatusSet());
    builder.append(present_statusSet);
    if (present_statusSet)
      builder.append(statusSet);

    boolean present_scheduledTimeStart = true;
    builder.append(present_scheduledTimeStart);
    if (present_scheduledTimeStart)
      builder.append(scheduledTimeStart);

    boolean present_scheduledTimeEnd = true;
    builder.append(present_scheduledTimeEnd);
    if (present_scheduledTimeEnd)
      builder.append(scheduledTimeEnd);

    boolean present_noRefundDateStart = true;
    builder.append(present_noRefundDateStart);
    if (present_noRefundDateStart)
      builder.append(noRefundDateStart);

    boolean present_noRefundDateEnd = true;
    builder.append(present_noRefundDateEnd);
    if (present_noRefundDateEnd)
      builder.append(noRefundDateEnd);

    boolean present_cashbackDateStart = true;
    builder.append(present_cashbackDateStart);
    if (present_cashbackDateStart)
      builder.append(cashbackDateStart);

    boolean present_cashbackDateEnd = true;
    builder.append(present_cashbackDateEnd);
    if (present_cashbackDateEnd)
      builder.append(cashbackDateEnd);

    boolean present_typeSet = true && (isSetTypeSet());
    builder.append(present_typeSet);
    if (present_typeSet)
      builder.append(typeSet);

    boolean present_cashbackAmountStart = true;
    builder.append(present_cashbackAmountStart);
    if (present_cashbackAmountStart)
      builder.append(cashbackAmountStart);

    boolean present_cashbackAmountEnd = true;
    builder.append(present_cashbackAmountEnd);
    if (present_cashbackAmountEnd)
      builder.append(cashbackAmountEnd);

    boolean present_lastModifyTimeStart = true;
    builder.append(present_lastModifyTimeStart);
    if (present_lastModifyTimeStart)
      builder.append(lastModifyTimeStart);

    boolean present_lastModifyTimeEnd = true;
    builder.append(present_lastModifyTimeEnd);
    if (present_lastModifyTimeEnd)
      builder.append(lastModifyTimeEnd);

    boolean present_createTimeStart = true;
    builder.append(present_createTimeStart);
    if (present_createTimeStart)
      builder.append(createTimeStart);

    boolean present_createTimeEnd = true;
    builder.append(present_createTimeEnd);
    if (present_createTimeEnd)
      builder.append(createTimeEnd);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(BookingBo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseId()).compareTo(other.isSetCourseId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseId, other.courseId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseTemplateId()).compareTo(other.isSetCourseTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateId, other.courseTemplateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReference()).compareTo(other.isSetReference());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReference()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference, other.reference);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScheduledTime()).compareTo(other.isSetScheduledTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScheduledTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduledTime, other.scheduledTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoRefundDate()).compareTo(other.isSetNoRefundDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoRefundDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noRefundDate, other.noRefundDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashbackDate()).compareTo(other.isSetCashbackDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashbackDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashbackDate, other.cashbackDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNote()).compareTo(other.isSetNote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.note, other.note);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashbackAmount()).compareTo(other.isSetCashbackAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashbackAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashbackAmount, other.cashbackAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTime()).compareTo(other.isSetLastModifyTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTime, other.lastModifyTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnabled()).compareTo(other.isSetEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enabled, other.enabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdSet()).compareTo(other.isSetIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idSet, other.idSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseIdSet()).compareTo(other.isSetCourseIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseIdSet, other.courseIdSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseTemplateIdSet()).compareTo(other.isSetCourseTemplateIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseTemplateIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateIdSet, other.courseTemplateIdSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIdSet()).compareTo(other.isSetUserIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdSet, other.userIdSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusSet()).compareTo(other.isSetStatusSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusSet, other.statusSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScheduledTimeStart()).compareTo(other.isSetScheduledTimeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScheduledTimeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduledTimeStart, other.scheduledTimeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScheduledTimeEnd()).compareTo(other.isSetScheduledTimeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScheduledTimeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduledTimeEnd, other.scheduledTimeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoRefundDateStart()).compareTo(other.isSetNoRefundDateStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoRefundDateStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noRefundDateStart, other.noRefundDateStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoRefundDateEnd()).compareTo(other.isSetNoRefundDateEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoRefundDateEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noRefundDateEnd, other.noRefundDateEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashbackDateStart()).compareTo(other.isSetCashbackDateStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashbackDateStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashbackDateStart, other.cashbackDateStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashbackDateEnd()).compareTo(other.isSetCashbackDateEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashbackDateEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashbackDateEnd, other.cashbackDateEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTypeSet()).compareTo(other.isSetTypeSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypeSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeSet, other.typeSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashbackAmountStart()).compareTo(other.isSetCashbackAmountStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashbackAmountStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashbackAmountStart, other.cashbackAmountStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashbackAmountEnd()).compareTo(other.isSetCashbackAmountEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashbackAmountEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashbackAmountEnd, other.cashbackAmountEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimeStart()).compareTo(other.isSetLastModifyTimeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimeStart, other.lastModifyTimeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimeEnd()).compareTo(other.isSetLastModifyTimeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimeEnd, other.lastModifyTimeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimeStart()).compareTo(other.isSetCreateTimeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimeStart, other.createTimeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimeEnd()).compareTo(other.isSetCreateTimeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimeEnd, other.createTimeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BookingBo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("courseId:");
    sb.append(this.courseId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("courseTemplateId:");
    sb.append(this.courseTemplateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reference:");
    if (this.reference == null) {
      sb.append("null");
    } else {
      sb.append(this.reference);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("scheduledTime:");
    sb.append(this.scheduledTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noRefundDate:");
    sb.append(this.noRefundDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashbackDate:");
    sb.append(this.cashbackDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("note:");
    if (this.note == null) {
      sb.append("null");
    } else {
      sb.append(this.note);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashbackAmount:");
    sb.append(this.cashbackAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastModifyTime:");
    sb.append(this.lastModifyTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("enabled:");
    sb.append(this.enabled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("idSet:");
    if (this.idSet == null) {
      sb.append("null");
    } else {
      sb.append(this.idSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("courseIdSet:");
    if (this.courseIdSet == null) {
      sb.append("null");
    } else {
      sb.append(this.courseIdSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("courseTemplateIdSet:");
    if (this.courseTemplateIdSet == null) {
      sb.append("null");
    } else {
      sb.append(this.courseTemplateIdSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIdSet:");
    if (this.userIdSet == null) {
      sb.append("null");
    } else {
      sb.append(this.userIdSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusSet:");
    if (this.statusSet == null) {
      sb.append("null");
    } else {
      sb.append(this.statusSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scheduledTimeStart:");
    sb.append(this.scheduledTimeStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("scheduledTimeEnd:");
    sb.append(this.scheduledTimeEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noRefundDateStart:");
    sb.append(this.noRefundDateStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noRefundDateEnd:");
    sb.append(this.noRefundDateEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashbackDateStart:");
    sb.append(this.cashbackDateStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashbackDateEnd:");
    sb.append(this.cashbackDateEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("typeSet:");
    if (this.typeSet == null) {
      sb.append("null");
    } else {
      sb.append(this.typeSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashbackAmountStart:");
    sb.append(this.cashbackAmountStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashbackAmountEnd:");
    sb.append(this.cashbackAmountEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastModifyTimeStart:");
    sb.append(this.lastModifyTimeStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastModifyTimeEnd:");
    sb.append(this.lastModifyTimeEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTimeStart:");
    sb.append(this.createTimeStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTimeEnd:");
    sb.append(this.createTimeEnd);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BookingBoStandardSchemeFactory implements SchemeFactory {
    public BookingBoStandardScheme getScheme() {
      return new BookingBoStandardScheme();
    }
  }

  private static class BookingBoStandardScheme extends StandardScheme<BookingBo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BookingBo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COURSE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.courseId = iprot.readI32();
              struct.setCourseIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COURSE_TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.courseTemplateId = iprot.readI32();
              struct.setCourseTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REFERENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reference = iprot.readString();
              struct.setReferenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SCHEDULED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.scheduledTime = iprot.readI64();
              struct.setScheduledTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NO_REFUND_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.noRefundDate = iprot.readI64();
              struct.setNoRefundDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CASHBACK_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cashbackDate = iprot.readI64();
              struct.setCashbackDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.note = iprot.readString();
              struct.setNoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CASHBACK_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cashbackAmount = iprot.readDouble();
              struct.setCashbackAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LAST_MODIFY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTime = iprot.readI64();
              struct.setLastModifyTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.enabled = iprot.readI32();
              struct.setEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.idSet = new HashSet<Integer>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  int _elem2;
                  _elem2 = iprot.readI32();
                  struct.idSet.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // COURSE_ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.courseIdSet = new HashSet<Integer>(2*_set3.size);
                for (int _i4 = 0; _i4 < _set3.size; ++_i4)
                {
                  int _elem5;
                  _elem5 = iprot.readI32();
                  struct.courseIdSet.add(_elem5);
                }
                iprot.readSetEnd();
              }
              struct.setCourseIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // COURSE_TEMPLATE_ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set6 = iprot.readSetBegin();
                struct.courseTemplateIdSet = new HashSet<Integer>(2*_set6.size);
                for (int _i7 = 0; _i7 < _set6.size; ++_i7)
                {
                  int _elem8;
                  _elem8 = iprot.readI32();
                  struct.courseTemplateIdSet.add(_elem8);
                }
                iprot.readSetEnd();
              }
              struct.setCourseTemplateIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // USER_ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set9 = iprot.readSetBegin();
                struct.userIdSet = new HashSet<Integer>(2*_set9.size);
                for (int _i10 = 0; _i10 < _set9.size; ++_i10)
                {
                  int _elem11;
                  _elem11 = iprot.readI32();
                  struct.userIdSet.add(_elem11);
                }
                iprot.readSetEnd();
              }
              struct.setUserIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // STATUS_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set12 = iprot.readSetBegin();
                struct.statusSet = new HashSet<Integer>(2*_set12.size);
                for (int _i13 = 0; _i13 < _set12.size; ++_i13)
                {
                  int _elem14;
                  _elem14 = iprot.readI32();
                  struct.statusSet.add(_elem14);
                }
                iprot.readSetEnd();
              }
              struct.setStatusSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // SCHEDULED_TIME_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.scheduledTimeStart = iprot.readI64();
              struct.setScheduledTimeStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // SCHEDULED_TIME_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.scheduledTimeEnd = iprot.readI64();
              struct.setScheduledTimeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // NO_REFUND_DATE_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.noRefundDateStart = iprot.readI64();
              struct.setNoRefundDateStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // NO_REFUND_DATE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.noRefundDateEnd = iprot.readI64();
              struct.setNoRefundDateEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // CASHBACK_DATE_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cashbackDateStart = iprot.readI64();
              struct.setCashbackDateStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // CASHBACK_DATE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cashbackDateEnd = iprot.readI64();
              struct.setCashbackDateEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // TYPE_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set15 = iprot.readSetBegin();
                struct.typeSet = new HashSet<Integer>(2*_set15.size);
                for (int _i16 = 0; _i16 < _set15.size; ++_i16)
                {
                  int _elem17;
                  _elem17 = iprot.readI32();
                  struct.typeSet.add(_elem17);
                }
                iprot.readSetEnd();
              }
              struct.setTypeSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // CASHBACK_AMOUNT_START
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cashbackAmountStart = iprot.readDouble();
              struct.setCashbackAmountStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // CASHBACK_AMOUNT_END
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cashbackAmountEnd = iprot.readDouble();
              struct.setCashbackAmountEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // LAST_MODIFY_TIME_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimeStart = iprot.readI64();
              struct.setLastModifyTimeStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // LAST_MODIFY_TIME_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimeEnd = iprot.readI64();
              struct.setLastModifyTimeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // CREATE_TIME_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimeStart = iprot.readI64();
              struct.setCreateTimeStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // CREATE_TIME_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimeEnd = iprot.readI64();
              struct.setCreateTimeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BookingBo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COURSE_ID_FIELD_DESC);
      oprot.writeI32(struct.courseId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COURSE_TEMPLATE_ID_FIELD_DESC);
      oprot.writeI32(struct.courseTemplateId);
      oprot.writeFieldEnd();
      if (struct.reference != null) {
        oprot.writeFieldBegin(REFERENCE_FIELD_DESC);
        oprot.writeString(struct.reference);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCHEDULED_TIME_FIELD_DESC);
      oprot.writeI64(struct.scheduledTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_REFUND_DATE_FIELD_DESC);
      oprot.writeI64(struct.noRefundDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CASHBACK_DATE_FIELD_DESC);
      oprot.writeI64(struct.cashbackDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      if (struct.note != null) {
        oprot.writeFieldBegin(NOTE_FIELD_DESC);
        oprot.writeString(struct.note);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CASHBACK_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.cashbackAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_MODIFY_TIME_FIELD_DESC);
      oprot.writeI64(struct.lastModifyTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENABLED_FIELD_DESC);
      oprot.writeI32(struct.enabled);
      oprot.writeFieldEnd();
      if (struct.idSet != null) {
        oprot.writeFieldBegin(ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.idSet.size()));
          for (int _iter18 : struct.idSet)
          {
            oprot.writeI32(_iter18);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.courseIdSet != null) {
        oprot.writeFieldBegin(COURSE_ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.courseIdSet.size()));
          for (int _iter19 : struct.courseIdSet)
          {
            oprot.writeI32(_iter19);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.courseTemplateIdSet != null) {
        oprot.writeFieldBegin(COURSE_TEMPLATE_ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.courseTemplateIdSet.size()));
          for (int _iter20 : struct.courseTemplateIdSet)
          {
            oprot.writeI32(_iter20);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.userIdSet != null) {
        oprot.writeFieldBegin(USER_ID_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.userIdSet.size()));
          for (int _iter21 : struct.userIdSet)
          {
            oprot.writeI32(_iter21);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.statusSet != null) {
        oprot.writeFieldBegin(STATUS_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.statusSet.size()));
          for (int _iter22 : struct.statusSet)
          {
            oprot.writeI32(_iter22);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SCHEDULED_TIME_START_FIELD_DESC);
      oprot.writeI64(struct.scheduledTimeStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCHEDULED_TIME_END_FIELD_DESC);
      oprot.writeI64(struct.scheduledTimeEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_REFUND_DATE_START_FIELD_DESC);
      oprot.writeI64(struct.noRefundDateStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_REFUND_DATE_END_FIELD_DESC);
      oprot.writeI64(struct.noRefundDateEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CASHBACK_DATE_START_FIELD_DESC);
      oprot.writeI64(struct.cashbackDateStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CASHBACK_DATE_END_FIELD_DESC);
      oprot.writeI64(struct.cashbackDateEnd);
      oprot.writeFieldEnd();
      if (struct.typeSet != null) {
        oprot.writeFieldBegin(TYPE_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.typeSet.size()));
          for (int _iter23 : struct.typeSet)
          {
            oprot.writeI32(_iter23);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CASHBACK_AMOUNT_START_FIELD_DESC);
      oprot.writeDouble(struct.cashbackAmountStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CASHBACK_AMOUNT_END_FIELD_DESC);
      oprot.writeDouble(struct.cashbackAmountEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_MODIFY_TIME_START_FIELD_DESC);
      oprot.writeI64(struct.lastModifyTimeStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_MODIFY_TIME_END_FIELD_DESC);
      oprot.writeI64(struct.lastModifyTimeEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_START_FIELD_DESC);
      oprot.writeI64(struct.createTimeStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_END_FIELD_DESC);
      oprot.writeI64(struct.createTimeEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BookingBoTupleSchemeFactory implements SchemeFactory {
    public BookingBoTupleScheme getScheme() {
      return new BookingBoTupleScheme();
    }
  }

  private static class BookingBoTupleScheme extends TupleScheme<BookingBo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BookingBo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetCourseId()) {
        optionals.set(2);
      }
      if (struct.isSetCourseTemplateId()) {
        optionals.set(3);
      }
      if (struct.isSetReference()) {
        optionals.set(4);
      }
      if (struct.isSetName()) {
        optionals.set(5);
      }
      if (struct.isSetPhone()) {
        optionals.set(6);
      }
      if (struct.isSetEmail()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      if (struct.isSetScheduledTime()) {
        optionals.set(9);
      }
      if (struct.isSetNoRefundDate()) {
        optionals.set(10);
      }
      if (struct.isSetCashbackDate()) {
        optionals.set(11);
      }
      if (struct.isSetType()) {
        optionals.set(12);
      }
      if (struct.isSetNote()) {
        optionals.set(13);
      }
      if (struct.isSetCashbackAmount()) {
        optionals.set(14);
      }
      if (struct.isSetLastModifyTime()) {
        optionals.set(15);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(16);
      }
      if (struct.isSetEnabled()) {
        optionals.set(17);
      }
      if (struct.isSetIdSet()) {
        optionals.set(18);
      }
      if (struct.isSetCourseIdSet()) {
        optionals.set(19);
      }
      if (struct.isSetCourseTemplateIdSet()) {
        optionals.set(20);
      }
      if (struct.isSetUserIdSet()) {
        optionals.set(21);
      }
      if (struct.isSetStatusSet()) {
        optionals.set(22);
      }
      if (struct.isSetScheduledTimeStart()) {
        optionals.set(23);
      }
      if (struct.isSetScheduledTimeEnd()) {
        optionals.set(24);
      }
      if (struct.isSetNoRefundDateStart()) {
        optionals.set(25);
      }
      if (struct.isSetNoRefundDateEnd()) {
        optionals.set(26);
      }
      if (struct.isSetCashbackDateStart()) {
        optionals.set(27);
      }
      if (struct.isSetCashbackDateEnd()) {
        optionals.set(28);
      }
      if (struct.isSetTypeSet()) {
        optionals.set(29);
      }
      if (struct.isSetCashbackAmountStart()) {
        optionals.set(30);
      }
      if (struct.isSetCashbackAmountEnd()) {
        optionals.set(31);
      }
      if (struct.isSetLastModifyTimeStart()) {
        optionals.set(32);
      }
      if (struct.isSetLastModifyTimeEnd()) {
        optionals.set(33);
      }
      if (struct.isSetCreateTimeStart()) {
        optionals.set(34);
      }
      if (struct.isSetCreateTimeEnd()) {
        optionals.set(35);
      }
      oprot.writeBitSet(optionals, 36);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetCourseId()) {
        oprot.writeI32(struct.courseId);
      }
      if (struct.isSetCourseTemplateId()) {
        oprot.writeI32(struct.courseTemplateId);
      }
      if (struct.isSetReference()) {
        oprot.writeString(struct.reference);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetScheduledTime()) {
        oprot.writeI64(struct.scheduledTime);
      }
      if (struct.isSetNoRefundDate()) {
        oprot.writeI64(struct.noRefundDate);
      }
      if (struct.isSetCashbackDate()) {
        oprot.writeI64(struct.cashbackDate);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetNote()) {
        oprot.writeString(struct.note);
      }
      if (struct.isSetCashbackAmount()) {
        oprot.writeDouble(struct.cashbackAmount);
      }
      if (struct.isSetLastModifyTime()) {
        oprot.writeI64(struct.lastModifyTime);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetEnabled()) {
        oprot.writeI32(struct.enabled);
      }
      if (struct.isSetIdSet()) {
        {
          oprot.writeI32(struct.idSet.size());
          for (int _iter24 : struct.idSet)
          {
            oprot.writeI32(_iter24);
          }
        }
      }
      if (struct.isSetCourseIdSet()) {
        {
          oprot.writeI32(struct.courseIdSet.size());
          for (int _iter25 : struct.courseIdSet)
          {
            oprot.writeI32(_iter25);
          }
        }
      }
      if (struct.isSetCourseTemplateIdSet()) {
        {
          oprot.writeI32(struct.courseTemplateIdSet.size());
          for (int _iter26 : struct.courseTemplateIdSet)
          {
            oprot.writeI32(_iter26);
          }
        }
      }
      if (struct.isSetUserIdSet()) {
        {
          oprot.writeI32(struct.userIdSet.size());
          for (int _iter27 : struct.userIdSet)
          {
            oprot.writeI32(_iter27);
          }
        }
      }
      if (struct.isSetStatusSet()) {
        {
          oprot.writeI32(struct.statusSet.size());
          for (int _iter28 : struct.statusSet)
          {
            oprot.writeI32(_iter28);
          }
        }
      }
      if (struct.isSetScheduledTimeStart()) {
        oprot.writeI64(struct.scheduledTimeStart);
      }
      if (struct.isSetScheduledTimeEnd()) {
        oprot.writeI64(struct.scheduledTimeEnd);
      }
      if (struct.isSetNoRefundDateStart()) {
        oprot.writeI64(struct.noRefundDateStart);
      }
      if (struct.isSetNoRefundDateEnd()) {
        oprot.writeI64(struct.noRefundDateEnd);
      }
      if (struct.isSetCashbackDateStart()) {
        oprot.writeI64(struct.cashbackDateStart);
      }
      if (struct.isSetCashbackDateEnd()) {
        oprot.writeI64(struct.cashbackDateEnd);
      }
      if (struct.isSetTypeSet()) {
        {
          oprot.writeI32(struct.typeSet.size());
          for (int _iter29 : struct.typeSet)
          {
            oprot.writeI32(_iter29);
          }
        }
      }
      if (struct.isSetCashbackAmountStart()) {
        oprot.writeDouble(struct.cashbackAmountStart);
      }
      if (struct.isSetCashbackAmountEnd()) {
        oprot.writeDouble(struct.cashbackAmountEnd);
      }
      if (struct.isSetLastModifyTimeStart()) {
        oprot.writeI64(struct.lastModifyTimeStart);
      }
      if (struct.isSetLastModifyTimeEnd()) {
        oprot.writeI64(struct.lastModifyTimeEnd);
      }
      if (struct.isSetCreateTimeStart()) {
        oprot.writeI64(struct.createTimeStart);
      }
      if (struct.isSetCreateTimeEnd()) {
        oprot.writeI64(struct.createTimeEnd);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BookingBo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(36);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.courseId = iprot.readI32();
        struct.setCourseIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.courseTemplateId = iprot.readI32();
        struct.setCourseTemplateIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.reference = iprot.readString();
        struct.setReferenceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(7)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.scheduledTime = iprot.readI64();
        struct.setScheduledTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.noRefundDate = iprot.readI64();
        struct.setNoRefundDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cashbackDate = iprot.readI64();
        struct.setCashbackDateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.note = iprot.readString();
        struct.setNoteIsSet(true);
      }
      if (incoming.get(14)) {
        struct.cashbackAmount = iprot.readDouble();
        struct.setCashbackAmountIsSet(true);
      }
      if (incoming.get(15)) {
        struct.lastModifyTime = iprot.readI64();
        struct.setLastModifyTimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.enabled = iprot.readI32();
        struct.setEnabledIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TSet _set30 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.idSet = new HashSet<Integer>(2*_set30.size);
          for (int _i31 = 0; _i31 < _set30.size; ++_i31)
          {
            int _elem32;
            _elem32 = iprot.readI32();
            struct.idSet.add(_elem32);
          }
        }
        struct.setIdSetIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TSet _set33 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.courseIdSet = new HashSet<Integer>(2*_set33.size);
          for (int _i34 = 0; _i34 < _set33.size; ++_i34)
          {
            int _elem35;
            _elem35 = iprot.readI32();
            struct.courseIdSet.add(_elem35);
          }
        }
        struct.setCourseIdSetIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TSet _set36 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.courseTemplateIdSet = new HashSet<Integer>(2*_set36.size);
          for (int _i37 = 0; _i37 < _set36.size; ++_i37)
          {
            int _elem38;
            _elem38 = iprot.readI32();
            struct.courseTemplateIdSet.add(_elem38);
          }
        }
        struct.setCourseTemplateIdSetIsSet(true);
      }
      if (incoming.get(21)) {
        {
          org.apache.thrift.protocol.TSet _set39 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIdSet = new HashSet<Integer>(2*_set39.size);
          for (int _i40 = 0; _i40 < _set39.size; ++_i40)
          {
            int _elem41;
            _elem41 = iprot.readI32();
            struct.userIdSet.add(_elem41);
          }
        }
        struct.setUserIdSetIsSet(true);
      }
      if (incoming.get(22)) {
        {
          org.apache.thrift.protocol.TSet _set42 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.statusSet = new HashSet<Integer>(2*_set42.size);
          for (int _i43 = 0; _i43 < _set42.size; ++_i43)
          {
            int _elem44;
            _elem44 = iprot.readI32();
            struct.statusSet.add(_elem44);
          }
        }
        struct.setStatusSetIsSet(true);
      }
      if (incoming.get(23)) {
        struct.scheduledTimeStart = iprot.readI64();
        struct.setScheduledTimeStartIsSet(true);
      }
      if (incoming.get(24)) {
        struct.scheduledTimeEnd = iprot.readI64();
        struct.setScheduledTimeEndIsSet(true);
      }
      if (incoming.get(25)) {
        struct.noRefundDateStart = iprot.readI64();
        struct.setNoRefundDateStartIsSet(true);
      }
      if (incoming.get(26)) {
        struct.noRefundDateEnd = iprot.readI64();
        struct.setNoRefundDateEndIsSet(true);
      }
      if (incoming.get(27)) {
        struct.cashbackDateStart = iprot.readI64();
        struct.setCashbackDateStartIsSet(true);
      }
      if (incoming.get(28)) {
        struct.cashbackDateEnd = iprot.readI64();
        struct.setCashbackDateEndIsSet(true);
      }
      if (incoming.get(29)) {
        {
          org.apache.thrift.protocol.TSet _set45 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.typeSet = new HashSet<Integer>(2*_set45.size);
          for (int _i46 = 0; _i46 < _set45.size; ++_i46)
          {
            int _elem47;
            _elem47 = iprot.readI32();
            struct.typeSet.add(_elem47);
          }
        }
        struct.setTypeSetIsSet(true);
      }
      if (incoming.get(30)) {
        struct.cashbackAmountStart = iprot.readDouble();
        struct.setCashbackAmountStartIsSet(true);
      }
      if (incoming.get(31)) {
        struct.cashbackAmountEnd = iprot.readDouble();
        struct.setCashbackAmountEndIsSet(true);
      }
      if (incoming.get(32)) {
        struct.lastModifyTimeStart = iprot.readI64();
        struct.setLastModifyTimeStartIsSet(true);
      }
      if (incoming.get(33)) {
        struct.lastModifyTimeEnd = iprot.readI64();
        struct.setLastModifyTimeEndIsSet(true);
      }
      if (incoming.get(34)) {
        struct.createTimeStart = iprot.readI64();
        struct.setCreateTimeStartIsSet(true);
      }
      if (incoming.get(35)) {
        struct.createTimeEnd = iprot.readI64();
        struct.setCreateTimeEndIsSet(true);
      }
    }
  }

}

